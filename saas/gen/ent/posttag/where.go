// Code generated by ent, DO NOT EDIT.

package posttag

import (
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldUpdatedAt, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldAppID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldName, v))
}

// Slug applies equality check predicate on the "slug" field. It's identical to SlugEQ.
func Slug(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldSlug, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldStatus, v))
}

// Excerpt applies equality check predicate on the "excerpt" field. It's identical to ExcerptEQ.
func Excerpt(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldExcerpt, v))
}

// Content applies equality check predicate on the "content" field. It's identical to ContentEQ.
func Content(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldContent, v))
}

// MetaTitle applies equality check predicate on the "meta_title" field. It's identical to MetaTitleEQ.
func MetaTitle(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaTitle, v))
}

// MetaDescr applies equality check predicate on the "meta_descr" field. It's identical to MetaDescrEQ.
func MetaDescr(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaDescr, v))
}

// MetaCanonicalURL applies equality check predicate on the "meta_canonical_url" field. It's identical to MetaCanonicalURLEQ.
func MetaCanonicalURL(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaCanonicalURL, v))
}

// MetaRobots applies equality check predicate on the "meta_robots" field. It's identical to MetaRobotsEQ.
func MetaRobots(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaRobots, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldUpdatedAt))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldAppID))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldAppID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldName, v))
}

// SlugEQ applies the EQ predicate on the "slug" field.
func SlugEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldSlug, v))
}

// SlugNEQ applies the NEQ predicate on the "slug" field.
func SlugNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldSlug, v))
}

// SlugIn applies the In predicate on the "slug" field.
func SlugIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldSlug, vs...))
}

// SlugNotIn applies the NotIn predicate on the "slug" field.
func SlugNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldSlug, vs...))
}

// SlugGT applies the GT predicate on the "slug" field.
func SlugGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldSlug, v))
}

// SlugGTE applies the GTE predicate on the "slug" field.
func SlugGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldSlug, v))
}

// SlugLT applies the LT predicate on the "slug" field.
func SlugLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldSlug, v))
}

// SlugLTE applies the LTE predicate on the "slug" field.
func SlugLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldSlug, v))
}

// SlugContains applies the Contains predicate on the "slug" field.
func SlugContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldSlug, v))
}

// SlugHasPrefix applies the HasPrefix predicate on the "slug" field.
func SlugHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldSlug, v))
}

// SlugHasSuffix applies the HasSuffix predicate on the "slug" field.
func SlugHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldSlug, v))
}

// SlugIsNil applies the IsNil predicate on the "slug" field.
func SlugIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldSlug))
}

// SlugNotNil applies the NotNil predicate on the "slug" field.
func SlugNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldSlug))
}

// SlugEqualFold applies the EqualFold predicate on the "slug" field.
func SlugEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldSlug, v))
}

// SlugContainsFold applies the ContainsFold predicate on the "slug" field.
func SlugContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldSlug, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldStatus))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldStatus, v))
}

// ExcerptEQ applies the EQ predicate on the "excerpt" field.
func ExcerptEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldExcerpt, v))
}

// ExcerptNEQ applies the NEQ predicate on the "excerpt" field.
func ExcerptNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldExcerpt, v))
}

// ExcerptIn applies the In predicate on the "excerpt" field.
func ExcerptIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldExcerpt, vs...))
}

// ExcerptNotIn applies the NotIn predicate on the "excerpt" field.
func ExcerptNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldExcerpt, vs...))
}

// ExcerptGT applies the GT predicate on the "excerpt" field.
func ExcerptGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldExcerpt, v))
}

// ExcerptGTE applies the GTE predicate on the "excerpt" field.
func ExcerptGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldExcerpt, v))
}

// ExcerptLT applies the LT predicate on the "excerpt" field.
func ExcerptLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldExcerpt, v))
}

// ExcerptLTE applies the LTE predicate on the "excerpt" field.
func ExcerptLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldExcerpt, v))
}

// ExcerptContains applies the Contains predicate on the "excerpt" field.
func ExcerptContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldExcerpt, v))
}

// ExcerptHasPrefix applies the HasPrefix predicate on the "excerpt" field.
func ExcerptHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldExcerpt, v))
}

// ExcerptHasSuffix applies the HasSuffix predicate on the "excerpt" field.
func ExcerptHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldExcerpt, v))
}

// ExcerptIsNil applies the IsNil predicate on the "excerpt" field.
func ExcerptIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldExcerpt))
}

// ExcerptNotNil applies the NotNil predicate on the "excerpt" field.
func ExcerptNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldExcerpt))
}

// ExcerptEqualFold applies the EqualFold predicate on the "excerpt" field.
func ExcerptEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldExcerpt, v))
}

// ExcerptContainsFold applies the ContainsFold predicate on the "excerpt" field.
func ExcerptContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldExcerpt, v))
}

// ContentEQ applies the EQ predicate on the "content" field.
func ContentEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldContent, v))
}

// ContentNEQ applies the NEQ predicate on the "content" field.
func ContentNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldContent, v))
}

// ContentIn applies the In predicate on the "content" field.
func ContentIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldContent, vs...))
}

// ContentNotIn applies the NotIn predicate on the "content" field.
func ContentNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldContent, vs...))
}

// ContentGT applies the GT predicate on the "content" field.
func ContentGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldContent, v))
}

// ContentGTE applies the GTE predicate on the "content" field.
func ContentGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldContent, v))
}

// ContentLT applies the LT predicate on the "content" field.
func ContentLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldContent, v))
}

// ContentLTE applies the LTE predicate on the "content" field.
func ContentLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldContent, v))
}

// ContentContains applies the Contains predicate on the "content" field.
func ContentContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldContent, v))
}

// ContentHasPrefix applies the HasPrefix predicate on the "content" field.
func ContentHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldContent, v))
}

// ContentHasSuffix applies the HasSuffix predicate on the "content" field.
func ContentHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldContent, v))
}

// ContentIsNil applies the IsNil predicate on the "content" field.
func ContentIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldContent))
}

// ContentNotNil applies the NotNil predicate on the "content" field.
func ContentNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldContent))
}

// ContentEqualFold applies the EqualFold predicate on the "content" field.
func ContentEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldContent, v))
}

// ContentContainsFold applies the ContainsFold predicate on the "content" field.
func ContentContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldContent, v))
}

// MetaTitleEQ applies the EQ predicate on the "meta_title" field.
func MetaTitleEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaTitle, v))
}

// MetaTitleNEQ applies the NEQ predicate on the "meta_title" field.
func MetaTitleNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldMetaTitle, v))
}

// MetaTitleIn applies the In predicate on the "meta_title" field.
func MetaTitleIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldMetaTitle, vs...))
}

// MetaTitleNotIn applies the NotIn predicate on the "meta_title" field.
func MetaTitleNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldMetaTitle, vs...))
}

// MetaTitleGT applies the GT predicate on the "meta_title" field.
func MetaTitleGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldMetaTitle, v))
}

// MetaTitleGTE applies the GTE predicate on the "meta_title" field.
func MetaTitleGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldMetaTitle, v))
}

// MetaTitleLT applies the LT predicate on the "meta_title" field.
func MetaTitleLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldMetaTitle, v))
}

// MetaTitleLTE applies the LTE predicate on the "meta_title" field.
func MetaTitleLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldMetaTitle, v))
}

// MetaTitleContains applies the Contains predicate on the "meta_title" field.
func MetaTitleContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldMetaTitle, v))
}

// MetaTitleHasPrefix applies the HasPrefix predicate on the "meta_title" field.
func MetaTitleHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldMetaTitle, v))
}

// MetaTitleHasSuffix applies the HasSuffix predicate on the "meta_title" field.
func MetaTitleHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldMetaTitle, v))
}

// MetaTitleIsNil applies the IsNil predicate on the "meta_title" field.
func MetaTitleIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldMetaTitle))
}

// MetaTitleNotNil applies the NotNil predicate on the "meta_title" field.
func MetaTitleNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldMetaTitle))
}

// MetaTitleEqualFold applies the EqualFold predicate on the "meta_title" field.
func MetaTitleEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldMetaTitle, v))
}

// MetaTitleContainsFold applies the ContainsFold predicate on the "meta_title" field.
func MetaTitleContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldMetaTitle, v))
}

// MetaDescrEQ applies the EQ predicate on the "meta_descr" field.
func MetaDescrEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaDescr, v))
}

// MetaDescrNEQ applies the NEQ predicate on the "meta_descr" field.
func MetaDescrNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldMetaDescr, v))
}

// MetaDescrIn applies the In predicate on the "meta_descr" field.
func MetaDescrIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldMetaDescr, vs...))
}

// MetaDescrNotIn applies the NotIn predicate on the "meta_descr" field.
func MetaDescrNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldMetaDescr, vs...))
}

// MetaDescrGT applies the GT predicate on the "meta_descr" field.
func MetaDescrGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldMetaDescr, v))
}

// MetaDescrGTE applies the GTE predicate on the "meta_descr" field.
func MetaDescrGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldMetaDescr, v))
}

// MetaDescrLT applies the LT predicate on the "meta_descr" field.
func MetaDescrLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldMetaDescr, v))
}

// MetaDescrLTE applies the LTE predicate on the "meta_descr" field.
func MetaDescrLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldMetaDescr, v))
}

// MetaDescrContains applies the Contains predicate on the "meta_descr" field.
func MetaDescrContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldMetaDescr, v))
}

// MetaDescrHasPrefix applies the HasPrefix predicate on the "meta_descr" field.
func MetaDescrHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldMetaDescr, v))
}

// MetaDescrHasSuffix applies the HasSuffix predicate on the "meta_descr" field.
func MetaDescrHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldMetaDescr, v))
}

// MetaDescrIsNil applies the IsNil predicate on the "meta_descr" field.
func MetaDescrIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldMetaDescr))
}

// MetaDescrNotNil applies the NotNil predicate on the "meta_descr" field.
func MetaDescrNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldMetaDescr))
}

// MetaDescrEqualFold applies the EqualFold predicate on the "meta_descr" field.
func MetaDescrEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldMetaDescr, v))
}

// MetaDescrContainsFold applies the ContainsFold predicate on the "meta_descr" field.
func MetaDescrContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldMetaDescr, v))
}

// MetaCanonicalURLEQ applies the EQ predicate on the "meta_canonical_url" field.
func MetaCanonicalURLEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLNEQ applies the NEQ predicate on the "meta_canonical_url" field.
func MetaCanonicalURLNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLIn applies the In predicate on the "meta_canonical_url" field.
func MetaCanonicalURLIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldMetaCanonicalURL, vs...))
}

// MetaCanonicalURLNotIn applies the NotIn predicate on the "meta_canonical_url" field.
func MetaCanonicalURLNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldMetaCanonicalURL, vs...))
}

// MetaCanonicalURLGT applies the GT predicate on the "meta_canonical_url" field.
func MetaCanonicalURLGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLGTE applies the GTE predicate on the "meta_canonical_url" field.
func MetaCanonicalURLGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLLT applies the LT predicate on the "meta_canonical_url" field.
func MetaCanonicalURLLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLLTE applies the LTE predicate on the "meta_canonical_url" field.
func MetaCanonicalURLLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLContains applies the Contains predicate on the "meta_canonical_url" field.
func MetaCanonicalURLContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLHasPrefix applies the HasPrefix predicate on the "meta_canonical_url" field.
func MetaCanonicalURLHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLHasSuffix applies the HasSuffix predicate on the "meta_canonical_url" field.
func MetaCanonicalURLHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLIsNil applies the IsNil predicate on the "meta_canonical_url" field.
func MetaCanonicalURLIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldMetaCanonicalURL))
}

// MetaCanonicalURLNotNil applies the NotNil predicate on the "meta_canonical_url" field.
func MetaCanonicalURLNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldMetaCanonicalURL))
}

// MetaCanonicalURLEqualFold applies the EqualFold predicate on the "meta_canonical_url" field.
func MetaCanonicalURLEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldMetaCanonicalURL, v))
}

// MetaCanonicalURLContainsFold applies the ContainsFold predicate on the "meta_canonical_url" field.
func MetaCanonicalURLContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldMetaCanonicalURL, v))
}

// MetaRobotsEQ applies the EQ predicate on the "meta_robots" field.
func MetaRobotsEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEQ(FieldMetaRobots, v))
}

// MetaRobotsNEQ applies the NEQ predicate on the "meta_robots" field.
func MetaRobotsNEQ(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNEQ(FieldMetaRobots, v))
}

// MetaRobotsIn applies the In predicate on the "meta_robots" field.
func MetaRobotsIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldIn(FieldMetaRobots, vs...))
}

// MetaRobotsNotIn applies the NotIn predicate on the "meta_robots" field.
func MetaRobotsNotIn(vs ...string) predicate.PostTag {
	return predicate.PostTag(sql.FieldNotIn(FieldMetaRobots, vs...))
}

// MetaRobotsGT applies the GT predicate on the "meta_robots" field.
func MetaRobotsGT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGT(FieldMetaRobots, v))
}

// MetaRobotsGTE applies the GTE predicate on the "meta_robots" field.
func MetaRobotsGTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldGTE(FieldMetaRobots, v))
}

// MetaRobotsLT applies the LT predicate on the "meta_robots" field.
func MetaRobotsLT(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLT(FieldMetaRobots, v))
}

// MetaRobotsLTE applies the LTE predicate on the "meta_robots" field.
func MetaRobotsLTE(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldLTE(FieldMetaRobots, v))
}

// MetaRobotsContains applies the Contains predicate on the "meta_robots" field.
func MetaRobotsContains(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContains(FieldMetaRobots, v))
}

// MetaRobotsHasPrefix applies the HasPrefix predicate on the "meta_robots" field.
func MetaRobotsHasPrefix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasPrefix(FieldMetaRobots, v))
}

// MetaRobotsHasSuffix applies the HasSuffix predicate on the "meta_robots" field.
func MetaRobotsHasSuffix(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldHasSuffix(FieldMetaRobots, v))
}

// MetaRobotsIsNil applies the IsNil predicate on the "meta_robots" field.
func MetaRobotsIsNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldIsNull(FieldMetaRobots))
}

// MetaRobotsNotNil applies the NotNil predicate on the "meta_robots" field.
func MetaRobotsNotNil() predicate.PostTag {
	return predicate.PostTag(sql.FieldNotNull(FieldMetaRobots))
}

// MetaRobotsEqualFold applies the EqualFold predicate on the "meta_robots" field.
func MetaRobotsEqualFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldEqualFold(FieldMetaRobots, v))
}

// MetaRobotsContainsFold applies the ContainsFold predicate on the "meta_robots" field.
func MetaRobotsContainsFold(v string) predicate.PostTag {
	return predicate.PostTag(sql.FieldContainsFold(FieldMetaRobots, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostTag) predicate.PostTag {
	return predicate.PostTag(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostTag) predicate.PostTag {
	return predicate.PostTag(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostTag) predicate.PostTag {
	return predicate.PostTag(sql.NotPredicates(p))
}
