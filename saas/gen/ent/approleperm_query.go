// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"saas/gen/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppRolePermQuery is the builder for querying AppRolePerm entities.
type AppRolePermQuery struct {
	config
	ctx         *QueryContext
	order       []approleperm.OrderOption
	inters      []Interceptor
	predicates  []predicate.AppRolePerm
	withApp     *AppQuery
	withAppPerm *AppPermQuery
	withAppRole *AppRoleQuery
	loadTotal   []func(context.Context, []*AppRolePerm) error
	modifiers   []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppRolePermQuery builder.
func (arpq *AppRolePermQuery) Where(ps ...predicate.AppRolePerm) *AppRolePermQuery {
	arpq.predicates = append(arpq.predicates, ps...)
	return arpq
}

// Limit the number of records to be returned by this query.
func (arpq *AppRolePermQuery) Limit(limit int) *AppRolePermQuery {
	arpq.ctx.Limit = &limit
	return arpq
}

// Offset to start from.
func (arpq *AppRolePermQuery) Offset(offset int) *AppRolePermQuery {
	arpq.ctx.Offset = &offset
	return arpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (arpq *AppRolePermQuery) Unique(unique bool) *AppRolePermQuery {
	arpq.ctx.Unique = &unique
	return arpq
}

// Order specifies how the records should be ordered.
func (arpq *AppRolePermQuery) Order(o ...approleperm.OrderOption) *AppRolePermQuery {
	arpq.order = append(arpq.order, o...)
	return arpq
}

// QueryApp chains the current query on the "app" edge.
func (arpq *AppRolePermQuery) QueryApp() *AppQuery {
	query := (&AppClient{config: arpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(approleperm.Table, approleperm.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, approleperm.AppTable, approleperm.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(arpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppPerm chains the current query on the "app_perm" edge.
func (arpq *AppRolePermQuery) QueryAppPerm() *AppPermQuery {
	query := (&AppPermClient{config: arpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(approleperm.Table, approleperm.FieldID, selector),
			sqlgraph.To(appperm.Table, appperm.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, approleperm.AppPermTable, approleperm.AppPermColumn),
		)
		fromU = sqlgraph.SetNeighbors(arpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppRole chains the current query on the "app_role" edge.
func (arpq *AppRolePermQuery) QueryAppRole() *AppRoleQuery {
	query := (&AppRoleClient{config: arpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := arpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := arpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(approleperm.Table, approleperm.FieldID, selector),
			sqlgraph.To(approle.Table, approle.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, approleperm.AppRoleTable, approleperm.AppRoleColumn),
		)
		fromU = sqlgraph.SetNeighbors(arpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppRolePerm entity from the query.
// Returns a *NotFoundError when no AppRolePerm was found.
func (arpq *AppRolePermQuery) First(ctx context.Context) (*AppRolePerm, error) {
	nodes, err := arpq.Limit(1).All(setContextOp(ctx, arpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{approleperm.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (arpq *AppRolePermQuery) FirstX(ctx context.Context) *AppRolePerm {
	node, err := arpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppRolePerm ID from the query.
// Returns a *NotFoundError when no AppRolePerm ID was found.
func (arpq *AppRolePermQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = arpq.Limit(1).IDs(setContextOp(ctx, arpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{approleperm.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (arpq *AppRolePermQuery) FirstIDX(ctx context.Context) string {
	id, err := arpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppRolePerm entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppRolePerm entity is found.
// Returns a *NotFoundError when no AppRolePerm entities are found.
func (arpq *AppRolePermQuery) Only(ctx context.Context) (*AppRolePerm, error) {
	nodes, err := arpq.Limit(2).All(setContextOp(ctx, arpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{approleperm.Label}
	default:
		return nil, &NotSingularError{approleperm.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (arpq *AppRolePermQuery) OnlyX(ctx context.Context) *AppRolePerm {
	node, err := arpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppRolePerm ID in the query.
// Returns a *NotSingularError when more than one AppRolePerm ID is found.
// Returns a *NotFoundError when no entities are found.
func (arpq *AppRolePermQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = arpq.Limit(2).IDs(setContextOp(ctx, arpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{approleperm.Label}
	default:
		err = &NotSingularError{approleperm.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (arpq *AppRolePermQuery) OnlyIDX(ctx context.Context) string {
	id, err := arpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppRolePerms.
func (arpq *AppRolePermQuery) All(ctx context.Context) ([]*AppRolePerm, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryAll)
	if err := arpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppRolePerm, *AppRolePermQuery]()
	return withInterceptors[[]*AppRolePerm](ctx, arpq, qr, arpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (arpq *AppRolePermQuery) AllX(ctx context.Context) []*AppRolePerm {
	nodes, err := arpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppRolePerm IDs.
func (arpq *AppRolePermQuery) IDs(ctx context.Context) (ids []string, err error) {
	if arpq.ctx.Unique == nil && arpq.path != nil {
		arpq.Unique(true)
	}
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryIDs)
	if err = arpq.Select(approleperm.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (arpq *AppRolePermQuery) IDsX(ctx context.Context) []string {
	ids, err := arpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (arpq *AppRolePermQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryCount)
	if err := arpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, arpq, querierCount[*AppRolePermQuery](), arpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (arpq *AppRolePermQuery) CountX(ctx context.Context) int {
	count, err := arpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (arpq *AppRolePermQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, arpq.ctx, ent.OpQueryExist)
	switch _, err := arpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (arpq *AppRolePermQuery) ExistX(ctx context.Context) bool {
	exist, err := arpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppRolePermQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (arpq *AppRolePermQuery) Clone() *AppRolePermQuery {
	if arpq == nil {
		return nil
	}
	return &AppRolePermQuery{
		config:      arpq.config,
		ctx:         arpq.ctx.Clone(),
		order:       append([]approleperm.OrderOption{}, arpq.order...),
		inters:      append([]Interceptor{}, arpq.inters...),
		predicates:  append([]predicate.AppRolePerm{}, arpq.predicates...),
		withApp:     arpq.withApp.Clone(),
		withAppPerm: arpq.withAppPerm.Clone(),
		withAppRole: arpq.withAppRole.Clone(),
		// clone intermediate query.
		sql:       arpq.sql.Clone(),
		path:      arpq.path,
		modifiers: append([]func(*sql.Selector){}, arpq.modifiers...),
	}
}

// WithApp tells the query-builder to eager-load the nodes that are connected to
// the "app" edge. The optional arguments are used to configure the query builder of the edge.
func (arpq *AppRolePermQuery) WithApp(opts ...func(*AppQuery)) *AppRolePermQuery {
	query := (&AppClient{config: arpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arpq.withApp = query
	return arpq
}

// WithAppPerm tells the query-builder to eager-load the nodes that are connected to
// the "app_perm" edge. The optional arguments are used to configure the query builder of the edge.
func (arpq *AppRolePermQuery) WithAppPerm(opts ...func(*AppPermQuery)) *AppRolePermQuery {
	query := (&AppPermClient{config: arpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arpq.withAppPerm = query
	return arpq
}

// WithAppRole tells the query-builder to eager-load the nodes that are connected to
// the "app_role" edge. The optional arguments are used to configure the query builder of the edge.
func (arpq *AppRolePermQuery) WithAppRole(opts ...func(*AppRoleQuery)) *AppRolePermQuery {
	query := (&AppRoleClient{config: arpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	arpq.withAppRole = query
	return arpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppRolePerm.Query().
//		GroupBy(approleperm.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (arpq *AppRolePermQuery) GroupBy(field string, fields ...string) *AppRolePermGroupBy {
	arpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppRolePermGroupBy{build: arpq}
	grbuild.flds = &arpq.ctx.Fields
	grbuild.label = approleperm.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AppRolePerm.Query().
//		Select(approleperm.FieldCreatedAt).
//		Scan(ctx, &v)
func (arpq *AppRolePermQuery) Select(fields ...string) *AppRolePermSelect {
	arpq.ctx.Fields = append(arpq.ctx.Fields, fields...)
	sbuild := &AppRolePermSelect{AppRolePermQuery: arpq}
	sbuild.label = approleperm.Label
	sbuild.flds, sbuild.scan = &arpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppRolePermSelect configured with the given aggregations.
func (arpq *AppRolePermQuery) Aggregate(fns ...AggregateFunc) *AppRolePermSelect {
	return arpq.Select().Aggregate(fns...)
}

func (arpq *AppRolePermQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range arpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, arpq); err != nil {
				return err
			}
		}
	}
	for _, f := range arpq.ctx.Fields {
		if !approleperm.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if arpq.path != nil {
		prev, err := arpq.path(ctx)
		if err != nil {
			return err
		}
		arpq.sql = prev
	}
	return nil
}

func (arpq *AppRolePermQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppRolePerm, error) {
	var (
		nodes       = []*AppRolePerm{}
		_spec       = arpq.querySpec()
		loadedTypes = [3]bool{
			arpq.withApp != nil,
			arpq.withAppPerm != nil,
			arpq.withAppRole != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppRolePerm).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppRolePerm{config: arpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(arpq.modifiers) > 0 {
		_spec.Modifiers = arpq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, arpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := arpq.withApp; query != nil {
		if err := arpq.loadApp(ctx, query, nodes, nil,
			func(n *AppRolePerm, e *App) { n.Edges.App = e }); err != nil {
			return nil, err
		}
	}
	if query := arpq.withAppPerm; query != nil {
		if err := arpq.loadAppPerm(ctx, query, nodes, nil,
			func(n *AppRolePerm, e *AppPerm) { n.Edges.AppPerm = e }); err != nil {
			return nil, err
		}
	}
	if query := arpq.withAppRole; query != nil {
		if err := arpq.loadAppRole(ctx, query, nodes, nil,
			func(n *AppRolePerm, e *AppRole) { n.Edges.AppRole = e }); err != nil {
			return nil, err
		}
	}
	for i := range arpq.loadTotal {
		if err := arpq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (arpq *AppRolePermQuery) loadApp(ctx context.Context, query *AppQuery, nodes []*AppRolePerm, init func(*AppRolePerm), assign func(*AppRolePerm, *App)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AppRolePerm)
	for i := range nodes {
		fk := nodes[i].AppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(app.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arpq *AppRolePermQuery) loadAppPerm(ctx context.Context, query *AppPermQuery, nodes []*AppRolePerm, init func(*AppRolePerm), assign func(*AppRolePerm, *AppPerm)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AppRolePerm)
	for i := range nodes {
		fk := nodes[i].AppPermID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(appperm.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_perm_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (arpq *AppRolePermQuery) loadAppRole(ctx context.Context, query *AppRoleQuery, nodes []*AppRolePerm, init func(*AppRolePerm), assign func(*AppRolePerm, *AppRole)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AppRolePerm)
	for i := range nodes {
		fk := nodes[i].AppRoleID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(approle.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_role_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (arpq *AppRolePermQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := arpq.querySpec()
	if len(arpq.modifiers) > 0 {
		_spec.Modifiers = arpq.modifiers
	}
	_spec.Node.Columns = arpq.ctx.Fields
	if len(arpq.ctx.Fields) > 0 {
		_spec.Unique = arpq.ctx.Unique != nil && *arpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, arpq.driver, _spec)
}

func (arpq *AppRolePermQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(approleperm.Table, approleperm.Columns, sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString))
	_spec.From = arpq.sql
	if unique := arpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if arpq.path != nil {
		_spec.Unique = true
	}
	if fields := arpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approleperm.FieldID)
		for i := range fields {
			if fields[i] != approleperm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if arpq.withApp != nil {
			_spec.Node.AddColumnOnce(approleperm.FieldAppID)
		}
		if arpq.withAppPerm != nil {
			_spec.Node.AddColumnOnce(approleperm.FieldAppPermID)
		}
		if arpq.withAppRole != nil {
			_spec.Node.AddColumnOnce(approleperm.FieldAppRoleID)
		}
	}
	if ps := arpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := arpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := arpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := arpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (arpq *AppRolePermQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(arpq.driver.Dialect())
	t1 := builder.Table(approleperm.Table)
	columns := arpq.ctx.Fields
	if len(columns) == 0 {
		columns = approleperm.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if arpq.sql != nil {
		selector = arpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if arpq.ctx.Unique != nil && *arpq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range arpq.modifiers {
		m(selector)
	}
	for _, p := range arpq.predicates {
		p(selector)
	}
	for _, p := range arpq.order {
		p(selector)
	}
	if offset := arpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := arpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (arpq *AppRolePermQuery) Modify(modifiers ...func(s *sql.Selector)) *AppRolePermSelect {
	arpq.modifiers = append(arpq.modifiers, modifiers...)
	return arpq.Select()
}

// AppRolePermGroupBy is the group-by builder for AppRolePerm entities.
type AppRolePermGroupBy struct {
	selector
	build *AppRolePermQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (arpgb *AppRolePermGroupBy) Aggregate(fns ...AggregateFunc) *AppRolePermGroupBy {
	arpgb.fns = append(arpgb.fns, fns...)
	return arpgb
}

// Scan applies the selector query and scans the result into the given value.
func (arpgb *AppRolePermGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arpgb.build.ctx, ent.OpQueryGroupBy)
	if err := arpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppRolePermQuery, *AppRolePermGroupBy](ctx, arpgb.build, arpgb, arpgb.build.inters, v)
}

func (arpgb *AppRolePermGroupBy) sqlScan(ctx context.Context, root *AppRolePermQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(arpgb.fns))
	for _, fn := range arpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*arpgb.flds)+len(arpgb.fns))
		for _, f := range *arpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*arpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppRolePermSelect is the builder for selecting fields of AppRolePerm entities.
type AppRolePermSelect struct {
	*AppRolePermQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (arps *AppRolePermSelect) Aggregate(fns ...AggregateFunc) *AppRolePermSelect {
	arps.fns = append(arps.fns, fns...)
	return arps
}

// Scan applies the selector query and scans the result into the given value.
func (arps *AppRolePermSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, arps.ctx, ent.OpQuerySelect)
	if err := arps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppRolePermQuery, *AppRolePermSelect](ctx, arps.AppRolePermQuery, arps, arps.inters, v)
}

func (arps *AppRolePermSelect) sqlScan(ctx context.Context, root *AppRolePermQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(arps.fns))
	for _, fn := range arps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*arps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := arps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (arps *AppRolePermSelect) Modify(modifiers ...func(s *sql.Selector)) *AppRolePermSelect {
	arps.modifiers = append(arps.modifiers, modifiers...)
	return arps
}
