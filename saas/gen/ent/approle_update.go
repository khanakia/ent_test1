// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppRoleUpdate is the builder for updating AppRole entities.
type AppRoleUpdate struct {
	config
	hooks     []Hook
	mutation  *AppRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppRoleUpdate builder.
func (aru *AppRoleUpdate) Where(ps ...predicate.AppRole) *AppRoleUpdate {
	aru.mutation.Where(ps...)
	return aru
}

// SetUpdatedAt sets the "updated_at" field.
func (aru *AppRoleUpdate) SetUpdatedAt(t time.Time) *AppRoleUpdate {
	aru.mutation.SetUpdatedAt(t)
	return aru
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aru *AppRoleUpdate) ClearUpdatedAt() *AppRoleUpdate {
	aru.mutation.ClearUpdatedAt()
	return aru
}

// SetName sets the "name" field.
func (aru *AppRoleUpdate) SetName(s string) *AppRoleUpdate {
	aru.mutation.SetName(s)
	return aru
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableName(s *string) *AppRoleUpdate {
	if s != nil {
		aru.SetName(*s)
	}
	return aru
}

// ClearName clears the value of the "name" field.
func (aru *AppRoleUpdate) ClearName() *AppRoleUpdate {
	aru.mutation.ClearName()
	return aru
}

// SetAppID sets the "app_id" field.
func (aru *AppRoleUpdate) SetAppID(s string) *AppRoleUpdate {
	aru.mutation.SetAppID(s)
	return aru
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableAppID(s *string) *AppRoleUpdate {
	if s != nil {
		aru.SetAppID(*s)
	}
	return aru
}

// ClearAppID clears the value of the "app_id" field.
func (aru *AppRoleUpdate) ClearAppID() *AppRoleUpdate {
	aru.mutation.ClearAppID()
	return aru
}

// SetIsGlobal sets the "is_global" field.
func (aru *AppRoleUpdate) SetIsGlobal(b bool) *AppRoleUpdate {
	aru.mutation.SetIsGlobal(b)
	return aru
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (aru *AppRoleUpdate) SetNillableIsGlobal(b *bool) *AppRoleUpdate {
	if b != nil {
		aru.SetIsGlobal(*b)
	}
	return aru
}

// SetApp sets the "app" edge to the App entity.
func (aru *AppRoleUpdate) SetApp(a *App) *AppRoleUpdate {
	return aru.SetAppID(a.ID)
}

// AddAppPermIDs adds the "app_perms" edge to the AppPerm entity by IDs.
func (aru *AppRoleUpdate) AddAppPermIDs(ids ...string) *AppRoleUpdate {
	aru.mutation.AddAppPermIDs(ids...)
	return aru
}

// AddAppPerms adds the "app_perms" edges to the AppPerm entity.
func (aru *AppRoleUpdate) AddAppPerms(a ...*AppPerm) *AppRoleUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAppPermIDs(ids...)
}

// AddAppRolePermIDs adds the "app_role_perms" edge to the AppRolePerm entity by IDs.
func (aru *AppRoleUpdate) AddAppRolePermIDs(ids ...string) *AppRoleUpdate {
	aru.mutation.AddAppRolePermIDs(ids...)
	return aru
}

// AddAppRolePerms adds the "app_role_perms" edges to the AppRolePerm entity.
func (aru *AppRoleUpdate) AddAppRolePerms(a ...*AppRolePerm) *AppRoleUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.AddAppRolePermIDs(ids...)
}

// Mutation returns the AppRoleMutation object of the builder.
func (aru *AppRoleUpdate) Mutation() *AppRoleMutation {
	return aru.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aru *AppRoleUpdate) ClearApp() *AppRoleUpdate {
	aru.mutation.ClearApp()
	return aru
}

// ClearAppPerms clears all "app_perms" edges to the AppPerm entity.
func (aru *AppRoleUpdate) ClearAppPerms() *AppRoleUpdate {
	aru.mutation.ClearAppPerms()
	return aru
}

// RemoveAppPermIDs removes the "app_perms" edge to AppPerm entities by IDs.
func (aru *AppRoleUpdate) RemoveAppPermIDs(ids ...string) *AppRoleUpdate {
	aru.mutation.RemoveAppPermIDs(ids...)
	return aru
}

// RemoveAppPerms removes "app_perms" edges to AppPerm entities.
func (aru *AppRoleUpdate) RemoveAppPerms(a ...*AppPerm) *AppRoleUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAppPermIDs(ids...)
}

// ClearAppRolePerms clears all "app_role_perms" edges to the AppRolePerm entity.
func (aru *AppRoleUpdate) ClearAppRolePerms() *AppRoleUpdate {
	aru.mutation.ClearAppRolePerms()
	return aru
}

// RemoveAppRolePermIDs removes the "app_role_perms" edge to AppRolePerm entities by IDs.
func (aru *AppRoleUpdate) RemoveAppRolePermIDs(ids ...string) *AppRoleUpdate {
	aru.mutation.RemoveAppRolePermIDs(ids...)
	return aru
}

// RemoveAppRolePerms removes "app_role_perms" edges to AppRolePerm entities.
func (aru *AppRoleUpdate) RemoveAppRolePerms(a ...*AppRolePerm) *AppRoleUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aru.RemoveAppRolePermIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (aru *AppRoleUpdate) Save(ctx context.Context) (int, error) {
	aru.defaults()
	return withHooks(ctx, aru.sqlSave, aru.mutation, aru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aru *AppRoleUpdate) SaveX(ctx context.Context) int {
	affected, err := aru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (aru *AppRoleUpdate) Exec(ctx context.Context) error {
	_, err := aru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aru *AppRoleUpdate) ExecX(ctx context.Context) {
	if err := aru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aru *AppRoleUpdate) defaults() {
	if _, ok := aru.mutation.UpdatedAt(); !ok && !aru.mutation.UpdatedAtCleared() {
		v := approle.UpdateDefaultUpdatedAt()
		aru.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aru *AppRoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUpdate {
	aru.modifiers = append(aru.modifiers, modifiers...)
	return aru
}

func (aru *AppRoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(approle.Table, approle.Columns, sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString))
	if ps := aru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aru.mutation.CreatedAtCleared() {
		_spec.ClearField(approle.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aru.mutation.UpdatedAt(); ok {
		_spec.SetField(approle.FieldUpdatedAt, field.TypeTime, value)
	}
	if aru.mutation.UpdatedAtCleared() {
		_spec.ClearField(approle.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aru.mutation.Name(); ok {
		_spec.SetField(approle.FieldName, field.TypeString, value)
	}
	if aru.mutation.NameCleared() {
		_spec.ClearField(approle.FieldName, field.TypeString)
	}
	if value, ok := aru.mutation.IsGlobal(); ok {
		_spec.SetField(approle.FieldIsGlobal, field.TypeBool, value)
	}
	if aru.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approle.AppTable,
			Columns: []string{approle.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approle.AppTable,
			Columns: []string{approle.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AppPermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		createE := &AppRolePermCreate{config: aru.config, mutation: newAppRolePermMutation(aru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAppPermsIDs(); len(nodes) > 0 && !aru.mutation.AppPermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: aru.config, mutation: newAppRolePermMutation(aru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppPermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: aru.config, mutation: newAppRolePermMutation(aru.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aru.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.RemovedAppRolePermsIDs(); len(nodes) > 0 && !aru.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aru.mutation.AppRolePermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, aru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	aru.mutation.done = true
	return n, nil
}

// AppRoleUpdateOne is the builder for updating a single AppRole entity.
type AppRoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppRoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (aruo *AppRoleUpdateOne) SetUpdatedAt(t time.Time) *AppRoleUpdateOne {
	aruo.mutation.SetUpdatedAt(t)
	return aruo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (aruo *AppRoleUpdateOne) ClearUpdatedAt() *AppRoleUpdateOne {
	aruo.mutation.ClearUpdatedAt()
	return aruo
}

// SetName sets the "name" field.
func (aruo *AppRoleUpdateOne) SetName(s string) *AppRoleUpdateOne {
	aruo.mutation.SetName(s)
	return aruo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableName(s *string) *AppRoleUpdateOne {
	if s != nil {
		aruo.SetName(*s)
	}
	return aruo
}

// ClearName clears the value of the "name" field.
func (aruo *AppRoleUpdateOne) ClearName() *AppRoleUpdateOne {
	aruo.mutation.ClearName()
	return aruo
}

// SetAppID sets the "app_id" field.
func (aruo *AppRoleUpdateOne) SetAppID(s string) *AppRoleUpdateOne {
	aruo.mutation.SetAppID(s)
	return aruo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableAppID(s *string) *AppRoleUpdateOne {
	if s != nil {
		aruo.SetAppID(*s)
	}
	return aruo
}

// ClearAppID clears the value of the "app_id" field.
func (aruo *AppRoleUpdateOne) ClearAppID() *AppRoleUpdateOne {
	aruo.mutation.ClearAppID()
	return aruo
}

// SetIsGlobal sets the "is_global" field.
func (aruo *AppRoleUpdateOne) SetIsGlobal(b bool) *AppRoleUpdateOne {
	aruo.mutation.SetIsGlobal(b)
	return aruo
}

// SetNillableIsGlobal sets the "is_global" field if the given value is not nil.
func (aruo *AppRoleUpdateOne) SetNillableIsGlobal(b *bool) *AppRoleUpdateOne {
	if b != nil {
		aruo.SetIsGlobal(*b)
	}
	return aruo
}

// SetApp sets the "app" edge to the App entity.
func (aruo *AppRoleUpdateOne) SetApp(a *App) *AppRoleUpdateOne {
	return aruo.SetAppID(a.ID)
}

// AddAppPermIDs adds the "app_perms" edge to the AppPerm entity by IDs.
func (aruo *AppRoleUpdateOne) AddAppPermIDs(ids ...string) *AppRoleUpdateOne {
	aruo.mutation.AddAppPermIDs(ids...)
	return aruo
}

// AddAppPerms adds the "app_perms" edges to the AppPerm entity.
func (aruo *AppRoleUpdateOne) AddAppPerms(a ...*AppPerm) *AppRoleUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAppPermIDs(ids...)
}

// AddAppRolePermIDs adds the "app_role_perms" edge to the AppRolePerm entity by IDs.
func (aruo *AppRoleUpdateOne) AddAppRolePermIDs(ids ...string) *AppRoleUpdateOne {
	aruo.mutation.AddAppRolePermIDs(ids...)
	return aruo
}

// AddAppRolePerms adds the "app_role_perms" edges to the AppRolePerm entity.
func (aruo *AppRoleUpdateOne) AddAppRolePerms(a ...*AppRolePerm) *AppRoleUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.AddAppRolePermIDs(ids...)
}

// Mutation returns the AppRoleMutation object of the builder.
func (aruo *AppRoleUpdateOne) Mutation() *AppRoleMutation {
	return aruo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (aruo *AppRoleUpdateOne) ClearApp() *AppRoleUpdateOne {
	aruo.mutation.ClearApp()
	return aruo
}

// ClearAppPerms clears all "app_perms" edges to the AppPerm entity.
func (aruo *AppRoleUpdateOne) ClearAppPerms() *AppRoleUpdateOne {
	aruo.mutation.ClearAppPerms()
	return aruo
}

// RemoveAppPermIDs removes the "app_perms" edge to AppPerm entities by IDs.
func (aruo *AppRoleUpdateOne) RemoveAppPermIDs(ids ...string) *AppRoleUpdateOne {
	aruo.mutation.RemoveAppPermIDs(ids...)
	return aruo
}

// RemoveAppPerms removes "app_perms" edges to AppPerm entities.
func (aruo *AppRoleUpdateOne) RemoveAppPerms(a ...*AppPerm) *AppRoleUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAppPermIDs(ids...)
}

// ClearAppRolePerms clears all "app_role_perms" edges to the AppRolePerm entity.
func (aruo *AppRoleUpdateOne) ClearAppRolePerms() *AppRoleUpdateOne {
	aruo.mutation.ClearAppRolePerms()
	return aruo
}

// RemoveAppRolePermIDs removes the "app_role_perms" edge to AppRolePerm entities by IDs.
func (aruo *AppRoleUpdateOne) RemoveAppRolePermIDs(ids ...string) *AppRoleUpdateOne {
	aruo.mutation.RemoveAppRolePermIDs(ids...)
	return aruo
}

// RemoveAppRolePerms removes "app_role_perms" edges to AppRolePerm entities.
func (aruo *AppRoleUpdateOne) RemoveAppRolePerms(a ...*AppRolePerm) *AppRoleUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return aruo.RemoveAppRolePermIDs(ids...)
}

// Where appends a list predicates to the AppRoleUpdate builder.
func (aruo *AppRoleUpdateOne) Where(ps ...predicate.AppRole) *AppRoleUpdateOne {
	aruo.mutation.Where(ps...)
	return aruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (aruo *AppRoleUpdateOne) Select(field string, fields ...string) *AppRoleUpdateOne {
	aruo.fields = append([]string{field}, fields...)
	return aruo
}

// Save executes the query and returns the updated AppRole entity.
func (aruo *AppRoleUpdateOne) Save(ctx context.Context) (*AppRole, error) {
	aruo.defaults()
	return withHooks(ctx, aruo.sqlSave, aruo.mutation, aruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) SaveX(ctx context.Context) *AppRole {
	node, err := aruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aruo *AppRoleUpdateOne) Exec(ctx context.Context) error {
	_, err := aruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aruo *AppRoleUpdateOne) ExecX(ctx context.Context) {
	if err := aruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (aruo *AppRoleUpdateOne) defaults() {
	if _, ok := aruo.mutation.UpdatedAt(); !ok && !aruo.mutation.UpdatedAtCleared() {
		v := approle.UpdateDefaultUpdatedAt()
		aruo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (aruo *AppRoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRoleUpdateOne {
	aruo.modifiers = append(aruo.modifiers, modifiers...)
	return aruo
}

func (aruo *AppRoleUpdateOne) sqlSave(ctx context.Context) (_node *AppRole, err error) {
	_spec := sqlgraph.NewUpdateSpec(approle.Table, approle.Columns, sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString))
	id, ok := aruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRole.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := aruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approle.FieldID)
		for _, f := range fields {
			if !approle.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approle.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := aruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if aruo.mutation.CreatedAtCleared() {
		_spec.ClearField(approle.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := aruo.mutation.UpdatedAt(); ok {
		_spec.SetField(approle.FieldUpdatedAt, field.TypeTime, value)
	}
	if aruo.mutation.UpdatedAtCleared() {
		_spec.ClearField(approle.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := aruo.mutation.Name(); ok {
		_spec.SetField(approle.FieldName, field.TypeString, value)
	}
	if aruo.mutation.NameCleared() {
		_spec.ClearField(approle.FieldName, field.TypeString)
	}
	if value, ok := aruo.mutation.IsGlobal(); ok {
		_spec.SetField(approle.FieldIsGlobal, field.TypeBool, value)
	}
	if aruo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approle.AppTable,
			Columns: []string{approle.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approle.AppTable,
			Columns: []string{approle.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AppPermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		createE := &AppRolePermCreate{config: aruo.config, mutation: newAppRolePermMutation(aruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAppPermsIDs(); len(nodes) > 0 && !aruo.mutation.AppPermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: aruo.config, mutation: newAppRolePermMutation(aruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppPermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   approle.AppPermsTable,
			Columns: approle.AppPermsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: aruo.config, mutation: newAppRolePermMutation(aruo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aruo.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.RemovedAppRolePermsIDs(); len(nodes) > 0 && !aruo.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aruo.mutation.AppRolePermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   approle.AppRolePermsTable,
			Columns: []string{approle.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(aruo.modifiers...)
	_node = &AppRole{config: aruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approle.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	aruo.mutation.done = true
	return _node, nil
}
