// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"lace/jsonslice"
	"saas/gen/ent/posttype"
	"saas/gen/ent/posttypeform"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PostTypeForm is the model entity for the PostTypeForm schema.
type PostTypeForm struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// PostTypeID holds the value of the "post_type_id" field.
	PostTypeID string `json:"post_type_id,omitempty"`
	// Body holds the value of the "body" field.
	Body jsonslice.JsonSlice `json:"body,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostTypeFormQuery when eager-loading is set.
	Edges        PostTypeFormEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostTypeFormEdges holds the relations/edges for other nodes in the graph.
type PostTypeFormEdges struct {
	// PostType holds the value of the post_type edge.
	PostType *PostType `json:"post_type,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// PostTypeOrErr returns the PostType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostTypeFormEdges) PostTypeOrErr() (*PostType, error) {
	if e.loadedTypes[0] {
		if e.PostType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: posttype.Label}
		}
		return e.PostType, nil
	}
	return nil, &NotLoadedError{edge: "post_type"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostTypeForm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posttypeform.FieldBody:
			values[i] = new([]byte)
		case posttypeform.FieldStatus:
			values[i] = new(sql.NullBool)
		case posttypeform.FieldID, posttypeform.FieldAppID, posttypeform.FieldName, posttypeform.FieldPostTypeID:
			values[i] = new(sql.NullString)
		case posttypeform.FieldCreatedAt, posttypeform.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostTypeForm fields.
func (ptf *PostTypeForm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posttypeform.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ptf.ID = value.String
			}
		case posttypeform.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ptf.CreatedAt = value.Time
			}
		case posttypeform.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ptf.UpdatedAt = value.Time
			}
		case posttypeform.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ptf.AppID = value.String
			}
		case posttypeform.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ptf.Name = value.String
			}
		case posttypeform.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ptf.Status = value.Bool
			}
		case posttypeform.FieldPostTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_type_id", values[i])
			} else if value.Valid {
				ptf.PostTypeID = value.String
			}
		case posttypeform.FieldBody:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &ptf.Body); err != nil {
					return fmt.Errorf("unmarshal field body: %w", err)
				}
			}
		default:
			ptf.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostTypeForm.
// This includes values selected through modifiers, order, etc.
func (ptf *PostTypeForm) Value(name string) (ent.Value, error) {
	return ptf.selectValues.Get(name)
}

// QueryPostType queries the "post_type" edge of the PostTypeForm entity.
func (ptf *PostTypeForm) QueryPostType() *PostTypeQuery {
	return NewPostTypeFormClient(ptf.config).QueryPostType(ptf)
}

// Update returns a builder for updating this PostTypeForm.
// Note that you need to call PostTypeForm.Unwrap() before calling this method if this PostTypeForm
// was returned from a transaction, and the transaction was committed or rolled back.
func (ptf *PostTypeForm) Update() *PostTypeFormUpdateOne {
	return NewPostTypeFormClient(ptf.config).UpdateOne(ptf)
}

// Unwrap unwraps the PostTypeForm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ptf *PostTypeForm) Unwrap() *PostTypeForm {
	_tx, ok := ptf.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostTypeForm is not a transactional entity")
	}
	ptf.config.driver = _tx.drv
	return ptf
}

// String implements the fmt.Stringer.
func (ptf *PostTypeForm) String() string {
	var builder strings.Builder
	builder.WriteString("PostTypeForm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ptf.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ptf.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ptf.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(ptf.AppID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ptf.Name)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ptf.Status))
	builder.WriteString(", ")
	builder.WriteString("post_type_id=")
	builder.WriteString(ptf.PostTypeID)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", ptf.Body))
	builder.WriteByte(')')
	return builder.String()
}

// PostTypeForms is a parsable slice of PostTypeForm.
type PostTypeForms []*PostTypeForm
