// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/appsetting"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppSettingUpdate is the builder for updating AppSetting entities.
type AppSettingUpdate struct {
	config
	hooks     []Hook
	mutation  *AppSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppSettingUpdate builder.
func (asu *AppSettingUpdate) Where(ps ...predicate.AppSetting) *AppSettingUpdate {
	asu.mutation.Where(ps...)
	return asu
}

// SetUpdatedAt sets the "updated_at" field.
func (asu *AppSettingUpdate) SetUpdatedAt(t time.Time) *AppSettingUpdate {
	asu.mutation.SetUpdatedAt(t)
	return asu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asu *AppSettingUpdate) ClearUpdatedAt() *AppSettingUpdate {
	asu.mutation.ClearUpdatedAt()
	return asu
}

// SetAppName sets the "app_name" field.
func (asu *AppSettingUpdate) SetAppName(s string) *AppSettingUpdate {
	asu.mutation.SetAppName(s)
	return asu
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAppName(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAppName(*s)
	}
	return asu
}

// ClearAppName clears the value of the "app_name" field.
func (asu *AppSettingUpdate) ClearAppName() *AppSettingUpdate {
	asu.mutation.ClearAppName()
	return asu
}

// SetCopyright sets the "copyright" field.
func (asu *AppSettingUpdate) SetCopyright(s string) *AppSettingUpdate {
	asu.mutation.SetCopyright(s)
	return asu
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableCopyright(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetCopyright(*s)
	}
	return asu
}

// ClearCopyright clears the value of the "copyright" field.
func (asu *AppSettingUpdate) ClearCopyright() *AppSettingUpdate {
	asu.mutation.ClearCopyright()
	return asu
}

// SetEmail sets the "email" field.
func (asu *AppSettingUpdate) SetEmail(s string) *AppSettingUpdate {
	asu.mutation.SetEmail(s)
	return asu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableEmail(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetEmail(*s)
	}
	return asu
}

// ClearEmail clears the value of the "email" field.
func (asu *AppSettingUpdate) ClearEmail() *AppSettingUpdate {
	asu.mutation.ClearEmail()
	return asu
}

// SetAddress sets the "address" field.
func (asu *AppSettingUpdate) SetAddress(s string) *AppSettingUpdate {
	asu.mutation.SetAddress(s)
	return asu
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAddress(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAddress(*s)
	}
	return asu
}

// ClearAddress clears the value of the "address" field.
func (asu *AppSettingUpdate) ClearAddress() *AppSettingUpdate {
	asu.mutation.ClearAddress()
	return asu
}

// SetSocialTw sets the "social_tw" field.
func (asu *AppSettingUpdate) SetSocialTw(s string) *AppSettingUpdate {
	asu.mutation.SetSocialTw(s)
	return asu
}

// SetNillableSocialTw sets the "social_tw" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableSocialTw(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetSocialTw(*s)
	}
	return asu
}

// ClearSocialTw clears the value of the "social_tw" field.
func (asu *AppSettingUpdate) ClearSocialTw() *AppSettingUpdate {
	asu.mutation.ClearSocialTw()
	return asu
}

// SetSocialFb sets the "social_fb" field.
func (asu *AppSettingUpdate) SetSocialFb(s string) *AppSettingUpdate {
	asu.mutation.SetSocialFb(s)
	return asu
}

// SetNillableSocialFb sets the "social_fb" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableSocialFb(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetSocialFb(*s)
	}
	return asu
}

// ClearSocialFb clears the value of the "social_fb" field.
func (asu *AppSettingUpdate) ClearSocialFb() *AppSettingUpdate {
	asu.mutation.ClearSocialFb()
	return asu
}

// SetSocialIn sets the "social_in" field.
func (asu *AppSettingUpdate) SetSocialIn(s string) *AppSettingUpdate {
	asu.mutation.SetSocialIn(s)
	return asu
}

// SetNillableSocialIn sets the "social_in" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableSocialIn(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetSocialIn(*s)
	}
	return asu
}

// ClearSocialIn clears the value of the "social_in" field.
func (asu *AppSettingUpdate) ClearSocialIn() *AppSettingUpdate {
	asu.mutation.ClearSocialIn()
	return asu
}

// SetLogoURL sets the "logo_url" field.
func (asu *AppSettingUpdate) SetLogoURL(s string) *AppSettingUpdate {
	asu.mutation.SetLogoURL(s)
	return asu
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableLogoURL(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetLogoURL(*s)
	}
	return asu
}

// ClearLogoURL clears the value of the "logo_url" field.
func (asu *AppSettingUpdate) ClearLogoURL() *AppSettingUpdate {
	asu.mutation.ClearLogoURL()
	return asu
}

// SetSiteURL sets the "site_url" field.
func (asu *AppSettingUpdate) SetSiteURL(s string) *AppSettingUpdate {
	asu.mutation.SetSiteURL(s)
	return asu
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableSiteURL(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetSiteURL(*s)
	}
	return asu
}

// ClearSiteURL clears the value of the "site_url" field.
func (asu *AppSettingUpdate) ClearSiteURL() *AppSettingUpdate {
	asu.mutation.ClearSiteURL()
	return asu
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (asu *AppSettingUpdate) SetDefaultMailConnID(s string) *AppSettingUpdate {
	asu.mutation.SetDefaultMailConnID(s)
	return asu
}

// SetNillableDefaultMailConnID sets the "default_mail_conn_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableDefaultMailConnID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetDefaultMailConnID(*s)
	}
	return asu
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (asu *AppSettingUpdate) ClearDefaultMailConnID() *AppSettingUpdate {
	asu.mutation.ClearDefaultMailConnID()
	return asu
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (asu *AppSettingUpdate) SetMailLayoutTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetMailLayoutTemplID(s)
	return asu
}

// SetNillableMailLayoutTemplID sets the "mail_layout_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableMailLayoutTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetMailLayoutTemplID(*s)
	}
	return asu
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (asu *AppSettingUpdate) ClearMailLayoutTemplID() *AppSettingUpdate {
	asu.mutation.ClearMailLayoutTemplID()
	return asu
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (asu *AppSettingUpdate) SetWsapceInviteTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetWsapceInviteTemplID(s)
	return asu
}

// SetNillableWsapceInviteTemplID sets the "wsapce_invite_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableWsapceInviteTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetWsapceInviteTemplID(*s)
	}
	return asu
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (asu *AppSettingUpdate) ClearWsapceInviteTemplID() *AppSettingUpdate {
	asu.mutation.ClearWsapceInviteTemplID()
	return asu
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (asu *AppSettingUpdate) SetWsapceSuccessTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetWsapceSuccessTemplID(s)
	return asu
}

// SetNillableWsapceSuccessTemplID sets the "wsapce_success_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableWsapceSuccessTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetWsapceSuccessTemplID(*s)
	}
	return asu
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (asu *AppSettingUpdate) ClearWsapceSuccessTemplID() *AppSettingUpdate {
	asu.mutation.ClearWsapceSuccessTemplID()
	return asu
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (asu *AppSettingUpdate) SetAuthFpTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetAuthFpTemplID(s)
	return asu
}

// SetNillableAuthFpTemplID sets the "auth_fp_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAuthFpTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAuthFpTemplID(*s)
	}
	return asu
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (asu *AppSettingUpdate) ClearAuthFpTemplID() *AppSettingUpdate {
	asu.mutation.ClearAuthFpTemplID()
	return asu
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (asu *AppSettingUpdate) SetAuthWelcomeEmailTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetAuthWelcomeEmailTemplID(s)
	return asu
}

// SetNillableAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAuthWelcomeEmailTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAuthWelcomeEmailTemplID(*s)
	}
	return asu
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (asu *AppSettingUpdate) ClearAuthWelcomeEmailTemplID() *AppSettingUpdate {
	asu.mutation.ClearAuthWelcomeEmailTemplID()
	return asu
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (asu *AppSettingUpdate) SetAuthVerificationTemplID(s string) *AppSettingUpdate {
	asu.mutation.SetAuthVerificationTemplID(s)
	return asu
}

// SetNillableAuthVerificationTemplID sets the "auth_verification_templ_id" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAuthVerificationTemplID(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAuthVerificationTemplID(*s)
	}
	return asu
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (asu *AppSettingUpdate) ClearAuthVerificationTemplID() *AppSettingUpdate {
	asu.mutation.ClearAuthVerificationTemplID()
	return asu
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (asu *AppSettingUpdate) SetAuthEmailVerify(s string) *AppSettingUpdate {
	asu.mutation.SetAuthEmailVerify(s)
	return asu
}

// SetNillableAuthEmailVerify sets the "auth_email_verify" field if the given value is not nil.
func (asu *AppSettingUpdate) SetNillableAuthEmailVerify(s *string) *AppSettingUpdate {
	if s != nil {
		asu.SetAuthEmailVerify(*s)
	}
	return asu
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (asu *AppSettingUpdate) ClearAuthEmailVerify() *AppSettingUpdate {
	asu.mutation.ClearAuthEmailVerify()
	return asu
}

// Mutation returns the AppSettingMutation object of the builder.
func (asu *AppSettingUpdate) Mutation() *AppSettingMutation {
	return asu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asu *AppSettingUpdate) Save(ctx context.Context) (int, error) {
	asu.defaults()
	return withHooks(ctx, asu.sqlSave, asu.mutation, asu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asu *AppSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := asu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asu *AppSettingUpdate) Exec(ctx context.Context) error {
	_, err := asu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asu *AppSettingUpdate) ExecX(ctx context.Context) {
	if err := asu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asu *AppSettingUpdate) defaults() {
	if _, ok := asu.mutation.UpdatedAt(); !ok && !asu.mutation.UpdatedAtCleared() {
		v := appsetting.UpdateDefaultUpdatedAt()
		asu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asu *AppSettingUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSettingUpdate {
	asu.modifiers = append(asu.modifiers, modifiers...)
	return asu
}

func (asu *AppSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsetting.Table, appsetting.Columns, sqlgraph.NewFieldSpec(appsetting.FieldID, field.TypeString))
	if ps := asu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if asu.mutation.CreatedAtCleared() {
		_spec.ClearField(appsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.UpdatedAt(); ok {
		_spec.SetField(appsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if asu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appsetting.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asu.mutation.AppName(); ok {
		_spec.SetField(appsetting.FieldAppName, field.TypeString, value)
	}
	if asu.mutation.AppNameCleared() {
		_spec.ClearField(appsetting.FieldAppName, field.TypeString)
	}
	if value, ok := asu.mutation.Copyright(); ok {
		_spec.SetField(appsetting.FieldCopyright, field.TypeString, value)
	}
	if asu.mutation.CopyrightCleared() {
		_spec.ClearField(appsetting.FieldCopyright, field.TypeString)
	}
	if value, ok := asu.mutation.Email(); ok {
		_spec.SetField(appsetting.FieldEmail, field.TypeString, value)
	}
	if asu.mutation.EmailCleared() {
		_spec.ClearField(appsetting.FieldEmail, field.TypeString)
	}
	if value, ok := asu.mutation.Address(); ok {
		_spec.SetField(appsetting.FieldAddress, field.TypeString, value)
	}
	if asu.mutation.AddressCleared() {
		_spec.ClearField(appsetting.FieldAddress, field.TypeString)
	}
	if value, ok := asu.mutation.SocialTw(); ok {
		_spec.SetField(appsetting.FieldSocialTw, field.TypeString, value)
	}
	if asu.mutation.SocialTwCleared() {
		_spec.ClearField(appsetting.FieldSocialTw, field.TypeString)
	}
	if value, ok := asu.mutation.SocialFb(); ok {
		_spec.SetField(appsetting.FieldSocialFb, field.TypeString, value)
	}
	if asu.mutation.SocialFbCleared() {
		_spec.ClearField(appsetting.FieldSocialFb, field.TypeString)
	}
	if value, ok := asu.mutation.SocialIn(); ok {
		_spec.SetField(appsetting.FieldSocialIn, field.TypeString, value)
	}
	if asu.mutation.SocialInCleared() {
		_spec.ClearField(appsetting.FieldSocialIn, field.TypeString)
	}
	if value, ok := asu.mutation.LogoURL(); ok {
		_spec.SetField(appsetting.FieldLogoURL, field.TypeString, value)
	}
	if asu.mutation.LogoURLCleared() {
		_spec.ClearField(appsetting.FieldLogoURL, field.TypeString)
	}
	if value, ok := asu.mutation.SiteURL(); ok {
		_spec.SetField(appsetting.FieldSiteURL, field.TypeString, value)
	}
	if asu.mutation.SiteURLCleared() {
		_spec.ClearField(appsetting.FieldSiteURL, field.TypeString)
	}
	if value, ok := asu.mutation.DefaultMailConnID(); ok {
		_spec.SetField(appsetting.FieldDefaultMailConnID, field.TypeString, value)
	}
	if asu.mutation.DefaultMailConnIDCleared() {
		_spec.ClearField(appsetting.FieldDefaultMailConnID, field.TypeString)
	}
	if value, ok := asu.mutation.MailLayoutTemplID(); ok {
		_spec.SetField(appsetting.FieldMailLayoutTemplID, field.TypeString, value)
	}
	if asu.mutation.MailLayoutTemplIDCleared() {
		_spec.ClearField(appsetting.FieldMailLayoutTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.WsapceInviteTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceInviteTemplID, field.TypeString, value)
	}
	if asu.mutation.WsapceInviteTemplIDCleared() {
		_spec.ClearField(appsetting.FieldWsapceInviteTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.WsapceSuccessTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceSuccessTemplID, field.TypeString, value)
	}
	if asu.mutation.WsapceSuccessTemplIDCleared() {
		_spec.ClearField(appsetting.FieldWsapceSuccessTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.AuthFpTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthFpTemplID, field.TypeString, value)
	}
	if asu.mutation.AuthFpTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthFpTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.AuthWelcomeEmailTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthWelcomeEmailTemplID, field.TypeString, value)
	}
	if asu.mutation.AuthWelcomeEmailTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthWelcomeEmailTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.AuthVerificationTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthVerificationTemplID, field.TypeString, value)
	}
	if asu.mutation.AuthVerificationTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthVerificationTemplID, field.TypeString)
	}
	if value, ok := asu.mutation.AuthEmailVerify(); ok {
		_spec.SetField(appsetting.FieldAuthEmailVerify, field.TypeString, value)
	}
	if asu.mutation.AuthEmailVerifyCleared() {
		_spec.ClearField(appsetting.FieldAuthEmailVerify, field.TypeString)
	}
	_spec.AddModifiers(asu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, asu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	asu.mutation.done = true
	return n, nil
}

// AppSettingUpdateOne is the builder for updating a single AppSetting entity.
type AppSettingUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppSettingMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (asuo *AppSettingUpdateOne) SetUpdatedAt(t time.Time) *AppSettingUpdateOne {
	asuo.mutation.SetUpdatedAt(t)
	return asuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (asuo *AppSettingUpdateOne) ClearUpdatedAt() *AppSettingUpdateOne {
	asuo.mutation.ClearUpdatedAt()
	return asuo
}

// SetAppName sets the "app_name" field.
func (asuo *AppSettingUpdateOne) SetAppName(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAppName(s)
	return asuo
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAppName(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAppName(*s)
	}
	return asuo
}

// ClearAppName clears the value of the "app_name" field.
func (asuo *AppSettingUpdateOne) ClearAppName() *AppSettingUpdateOne {
	asuo.mutation.ClearAppName()
	return asuo
}

// SetCopyright sets the "copyright" field.
func (asuo *AppSettingUpdateOne) SetCopyright(s string) *AppSettingUpdateOne {
	asuo.mutation.SetCopyright(s)
	return asuo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableCopyright(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetCopyright(*s)
	}
	return asuo
}

// ClearCopyright clears the value of the "copyright" field.
func (asuo *AppSettingUpdateOne) ClearCopyright() *AppSettingUpdateOne {
	asuo.mutation.ClearCopyright()
	return asuo
}

// SetEmail sets the "email" field.
func (asuo *AppSettingUpdateOne) SetEmail(s string) *AppSettingUpdateOne {
	asuo.mutation.SetEmail(s)
	return asuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableEmail(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetEmail(*s)
	}
	return asuo
}

// ClearEmail clears the value of the "email" field.
func (asuo *AppSettingUpdateOne) ClearEmail() *AppSettingUpdateOne {
	asuo.mutation.ClearEmail()
	return asuo
}

// SetAddress sets the "address" field.
func (asuo *AppSettingUpdateOne) SetAddress(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAddress(s)
	return asuo
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAddress(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAddress(*s)
	}
	return asuo
}

// ClearAddress clears the value of the "address" field.
func (asuo *AppSettingUpdateOne) ClearAddress() *AppSettingUpdateOne {
	asuo.mutation.ClearAddress()
	return asuo
}

// SetSocialTw sets the "social_tw" field.
func (asuo *AppSettingUpdateOne) SetSocialTw(s string) *AppSettingUpdateOne {
	asuo.mutation.SetSocialTw(s)
	return asuo
}

// SetNillableSocialTw sets the "social_tw" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableSocialTw(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetSocialTw(*s)
	}
	return asuo
}

// ClearSocialTw clears the value of the "social_tw" field.
func (asuo *AppSettingUpdateOne) ClearSocialTw() *AppSettingUpdateOne {
	asuo.mutation.ClearSocialTw()
	return asuo
}

// SetSocialFb sets the "social_fb" field.
func (asuo *AppSettingUpdateOne) SetSocialFb(s string) *AppSettingUpdateOne {
	asuo.mutation.SetSocialFb(s)
	return asuo
}

// SetNillableSocialFb sets the "social_fb" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableSocialFb(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetSocialFb(*s)
	}
	return asuo
}

// ClearSocialFb clears the value of the "social_fb" field.
func (asuo *AppSettingUpdateOne) ClearSocialFb() *AppSettingUpdateOne {
	asuo.mutation.ClearSocialFb()
	return asuo
}

// SetSocialIn sets the "social_in" field.
func (asuo *AppSettingUpdateOne) SetSocialIn(s string) *AppSettingUpdateOne {
	asuo.mutation.SetSocialIn(s)
	return asuo
}

// SetNillableSocialIn sets the "social_in" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableSocialIn(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetSocialIn(*s)
	}
	return asuo
}

// ClearSocialIn clears the value of the "social_in" field.
func (asuo *AppSettingUpdateOne) ClearSocialIn() *AppSettingUpdateOne {
	asuo.mutation.ClearSocialIn()
	return asuo
}

// SetLogoURL sets the "logo_url" field.
func (asuo *AppSettingUpdateOne) SetLogoURL(s string) *AppSettingUpdateOne {
	asuo.mutation.SetLogoURL(s)
	return asuo
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableLogoURL(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetLogoURL(*s)
	}
	return asuo
}

// ClearLogoURL clears the value of the "logo_url" field.
func (asuo *AppSettingUpdateOne) ClearLogoURL() *AppSettingUpdateOne {
	asuo.mutation.ClearLogoURL()
	return asuo
}

// SetSiteURL sets the "site_url" field.
func (asuo *AppSettingUpdateOne) SetSiteURL(s string) *AppSettingUpdateOne {
	asuo.mutation.SetSiteURL(s)
	return asuo
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableSiteURL(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetSiteURL(*s)
	}
	return asuo
}

// ClearSiteURL clears the value of the "site_url" field.
func (asuo *AppSettingUpdateOne) ClearSiteURL() *AppSettingUpdateOne {
	asuo.mutation.ClearSiteURL()
	return asuo
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (asuo *AppSettingUpdateOne) SetDefaultMailConnID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetDefaultMailConnID(s)
	return asuo
}

// SetNillableDefaultMailConnID sets the "default_mail_conn_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableDefaultMailConnID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetDefaultMailConnID(*s)
	}
	return asuo
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (asuo *AppSettingUpdateOne) ClearDefaultMailConnID() *AppSettingUpdateOne {
	asuo.mutation.ClearDefaultMailConnID()
	return asuo
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (asuo *AppSettingUpdateOne) SetMailLayoutTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetMailLayoutTemplID(s)
	return asuo
}

// SetNillableMailLayoutTemplID sets the "mail_layout_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableMailLayoutTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetMailLayoutTemplID(*s)
	}
	return asuo
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearMailLayoutTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearMailLayoutTemplID()
	return asuo
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (asuo *AppSettingUpdateOne) SetWsapceInviteTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetWsapceInviteTemplID(s)
	return asuo
}

// SetNillableWsapceInviteTemplID sets the "wsapce_invite_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableWsapceInviteTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetWsapceInviteTemplID(*s)
	}
	return asuo
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearWsapceInviteTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearWsapceInviteTemplID()
	return asuo
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (asuo *AppSettingUpdateOne) SetWsapceSuccessTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetWsapceSuccessTemplID(s)
	return asuo
}

// SetNillableWsapceSuccessTemplID sets the "wsapce_success_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableWsapceSuccessTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetWsapceSuccessTemplID(*s)
	}
	return asuo
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearWsapceSuccessTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearWsapceSuccessTemplID()
	return asuo
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (asuo *AppSettingUpdateOne) SetAuthFpTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAuthFpTemplID(s)
	return asuo
}

// SetNillableAuthFpTemplID sets the "auth_fp_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAuthFpTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAuthFpTemplID(*s)
	}
	return asuo
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearAuthFpTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearAuthFpTemplID()
	return asuo
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (asuo *AppSettingUpdateOne) SetAuthWelcomeEmailTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAuthWelcomeEmailTemplID(s)
	return asuo
}

// SetNillableAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAuthWelcomeEmailTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAuthWelcomeEmailTemplID(*s)
	}
	return asuo
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearAuthWelcomeEmailTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearAuthWelcomeEmailTemplID()
	return asuo
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (asuo *AppSettingUpdateOne) SetAuthVerificationTemplID(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAuthVerificationTemplID(s)
	return asuo
}

// SetNillableAuthVerificationTemplID sets the "auth_verification_templ_id" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAuthVerificationTemplID(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAuthVerificationTemplID(*s)
	}
	return asuo
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (asuo *AppSettingUpdateOne) ClearAuthVerificationTemplID() *AppSettingUpdateOne {
	asuo.mutation.ClearAuthVerificationTemplID()
	return asuo
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (asuo *AppSettingUpdateOne) SetAuthEmailVerify(s string) *AppSettingUpdateOne {
	asuo.mutation.SetAuthEmailVerify(s)
	return asuo
}

// SetNillableAuthEmailVerify sets the "auth_email_verify" field if the given value is not nil.
func (asuo *AppSettingUpdateOne) SetNillableAuthEmailVerify(s *string) *AppSettingUpdateOne {
	if s != nil {
		asuo.SetAuthEmailVerify(*s)
	}
	return asuo
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (asuo *AppSettingUpdateOne) ClearAuthEmailVerify() *AppSettingUpdateOne {
	asuo.mutation.ClearAuthEmailVerify()
	return asuo
}

// Mutation returns the AppSettingMutation object of the builder.
func (asuo *AppSettingUpdateOne) Mutation() *AppSettingMutation {
	return asuo.mutation
}

// Where appends a list predicates to the AppSettingUpdate builder.
func (asuo *AppSettingUpdateOne) Where(ps ...predicate.AppSetting) *AppSettingUpdateOne {
	asuo.mutation.Where(ps...)
	return asuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asuo *AppSettingUpdateOne) Select(field string, fields ...string) *AppSettingUpdateOne {
	asuo.fields = append([]string{field}, fields...)
	return asuo
}

// Save executes the query and returns the updated AppSetting entity.
func (asuo *AppSettingUpdateOne) Save(ctx context.Context) (*AppSetting, error) {
	asuo.defaults()
	return withHooks(ctx, asuo.sqlSave, asuo.mutation, asuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (asuo *AppSettingUpdateOne) SaveX(ctx context.Context) *AppSetting {
	node, err := asuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asuo *AppSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := asuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asuo *AppSettingUpdateOne) ExecX(ctx context.Context) {
	if err := asuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asuo *AppSettingUpdateOne) defaults() {
	if _, ok := asuo.mutation.UpdatedAt(); !ok && !asuo.mutation.UpdatedAtCleared() {
		v := appsetting.UpdateDefaultUpdatedAt()
		asuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (asuo *AppSettingUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppSettingUpdateOne {
	asuo.modifiers = append(asuo.modifiers, modifiers...)
	return asuo
}

func (asuo *AppSettingUpdateOne) sqlSave(ctx context.Context) (_node *AppSetting, err error) {
	_spec := sqlgraph.NewUpdateSpec(appsetting.Table, appsetting.Columns, sqlgraph.NewFieldSpec(appsetting.FieldID, field.TypeString))
	id, ok := asuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appsetting.FieldID)
		for _, f := range fields {
			if !appsetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appsetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if asuo.mutation.CreatedAtCleared() {
		_spec.ClearField(appsetting.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appsetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if asuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appsetting.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := asuo.mutation.AppName(); ok {
		_spec.SetField(appsetting.FieldAppName, field.TypeString, value)
	}
	if asuo.mutation.AppNameCleared() {
		_spec.ClearField(appsetting.FieldAppName, field.TypeString)
	}
	if value, ok := asuo.mutation.Copyright(); ok {
		_spec.SetField(appsetting.FieldCopyright, field.TypeString, value)
	}
	if asuo.mutation.CopyrightCleared() {
		_spec.ClearField(appsetting.FieldCopyright, field.TypeString)
	}
	if value, ok := asuo.mutation.Email(); ok {
		_spec.SetField(appsetting.FieldEmail, field.TypeString, value)
	}
	if asuo.mutation.EmailCleared() {
		_spec.ClearField(appsetting.FieldEmail, field.TypeString)
	}
	if value, ok := asuo.mutation.Address(); ok {
		_spec.SetField(appsetting.FieldAddress, field.TypeString, value)
	}
	if asuo.mutation.AddressCleared() {
		_spec.ClearField(appsetting.FieldAddress, field.TypeString)
	}
	if value, ok := asuo.mutation.SocialTw(); ok {
		_spec.SetField(appsetting.FieldSocialTw, field.TypeString, value)
	}
	if asuo.mutation.SocialTwCleared() {
		_spec.ClearField(appsetting.FieldSocialTw, field.TypeString)
	}
	if value, ok := asuo.mutation.SocialFb(); ok {
		_spec.SetField(appsetting.FieldSocialFb, field.TypeString, value)
	}
	if asuo.mutation.SocialFbCleared() {
		_spec.ClearField(appsetting.FieldSocialFb, field.TypeString)
	}
	if value, ok := asuo.mutation.SocialIn(); ok {
		_spec.SetField(appsetting.FieldSocialIn, field.TypeString, value)
	}
	if asuo.mutation.SocialInCleared() {
		_spec.ClearField(appsetting.FieldSocialIn, field.TypeString)
	}
	if value, ok := asuo.mutation.LogoURL(); ok {
		_spec.SetField(appsetting.FieldLogoURL, field.TypeString, value)
	}
	if asuo.mutation.LogoURLCleared() {
		_spec.ClearField(appsetting.FieldLogoURL, field.TypeString)
	}
	if value, ok := asuo.mutation.SiteURL(); ok {
		_spec.SetField(appsetting.FieldSiteURL, field.TypeString, value)
	}
	if asuo.mutation.SiteURLCleared() {
		_spec.ClearField(appsetting.FieldSiteURL, field.TypeString)
	}
	if value, ok := asuo.mutation.DefaultMailConnID(); ok {
		_spec.SetField(appsetting.FieldDefaultMailConnID, field.TypeString, value)
	}
	if asuo.mutation.DefaultMailConnIDCleared() {
		_spec.ClearField(appsetting.FieldDefaultMailConnID, field.TypeString)
	}
	if value, ok := asuo.mutation.MailLayoutTemplID(); ok {
		_spec.SetField(appsetting.FieldMailLayoutTemplID, field.TypeString, value)
	}
	if asuo.mutation.MailLayoutTemplIDCleared() {
		_spec.ClearField(appsetting.FieldMailLayoutTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.WsapceInviteTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceInviteTemplID, field.TypeString, value)
	}
	if asuo.mutation.WsapceInviteTemplIDCleared() {
		_spec.ClearField(appsetting.FieldWsapceInviteTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.WsapceSuccessTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceSuccessTemplID, field.TypeString, value)
	}
	if asuo.mutation.WsapceSuccessTemplIDCleared() {
		_spec.ClearField(appsetting.FieldWsapceSuccessTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.AuthFpTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthFpTemplID, field.TypeString, value)
	}
	if asuo.mutation.AuthFpTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthFpTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.AuthWelcomeEmailTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthWelcomeEmailTemplID, field.TypeString, value)
	}
	if asuo.mutation.AuthWelcomeEmailTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthWelcomeEmailTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.AuthVerificationTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthVerificationTemplID, field.TypeString, value)
	}
	if asuo.mutation.AuthVerificationTemplIDCleared() {
		_spec.ClearField(appsetting.FieldAuthVerificationTemplID, field.TypeString)
	}
	if value, ok := asuo.mutation.AuthEmailVerify(); ok {
		_spec.SetField(appsetting.FieldAuthEmailVerify, field.TypeString, value)
	}
	if asuo.mutation.AuthEmailVerifyCleared() {
		_spec.ClearField(appsetting.FieldAuthEmailVerify, field.TypeString)
	}
	_spec.AddModifiers(asuo.modifiers...)
	_node = &AppSetting{config: asuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appsetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	asuo.mutation.done = true
	return _node, nil
}
