// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/posttag"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PostTag is the model entity for the PostTag schema.
type PostTag struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Excerpt holds the value of the "excerpt" field.
	Excerpt string `json:"excerpt,omitempty"`
	// Content holds the value of the "content" field.
	Content string `json:"content,omitempty"`
	// MetaTitle holds the value of the "meta_title" field.
	MetaTitle string `json:"meta_title,omitempty"`
	// MetaDescr holds the value of the "meta_descr" field.
	MetaDescr string `json:"meta_descr,omitempty"`
	// MetaCanonicalURL holds the value of the "meta_canonical_url" field.
	MetaCanonicalURL string `json:"meta_canonical_url,omitempty"`
	// MetaRobots holds the value of the "meta_robots" field.
	MetaRobots   string `json:"meta_robots,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostTag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case posttag.FieldID, posttag.FieldName, posttag.FieldSlug, posttag.FieldStatus, posttag.FieldExcerpt, posttag.FieldContent, posttag.FieldMetaTitle, posttag.FieldMetaDescr, posttag.FieldMetaCanonicalURL, posttag.FieldMetaRobots:
			values[i] = new(sql.NullString)
		case posttag.FieldCreatedAt, posttag.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostTag fields.
func (pt *PostTag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case posttag.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				pt.ID = value.String
			}
		case posttag.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pt.CreatedAt = value.Time
			}
		case posttag.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pt.UpdatedAt = value.Time
			}
		case posttag.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pt.Name = value.String
			}
		case posttag.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				pt.Slug = value.String
			}
		case posttag.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				pt.Status = value.String
			}
		case posttag.FieldExcerpt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field excerpt", values[i])
			} else if value.Valid {
				pt.Excerpt = value.String
			}
		case posttag.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				pt.Content = value.String
			}
		case posttag.FieldMetaTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta_title", values[i])
			} else if value.Valid {
				pt.MetaTitle = value.String
			}
		case posttag.FieldMetaDescr:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta_descr", values[i])
			} else if value.Valid {
				pt.MetaDescr = value.String
			}
		case posttag.FieldMetaCanonicalURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta_canonical_url", values[i])
			} else if value.Valid {
				pt.MetaCanonicalURL = value.String
			}
		case posttag.FieldMetaRobots:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field meta_robots", values[i])
			} else if value.Valid {
				pt.MetaRobots = value.String
			}
		default:
			pt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostTag.
// This includes values selected through modifiers, order, etc.
func (pt *PostTag) Value(name string) (ent.Value, error) {
	return pt.selectValues.Get(name)
}

// Update returns a builder for updating this PostTag.
// Note that you need to call PostTag.Unwrap() before calling this method if this PostTag
// was returned from a transaction, and the transaction was committed or rolled back.
func (pt *PostTag) Update() *PostTagUpdateOne {
	return NewPostTagClient(pt.config).UpdateOne(pt)
}

// Unwrap unwraps the PostTag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pt *PostTag) Unwrap() *PostTag {
	_tx, ok := pt.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostTag is not a transactional entity")
	}
	pt.config.driver = _tx.drv
	return pt
}

// String implements the fmt.Stringer.
func (pt *PostTag) String() string {
	var builder strings.Builder
	builder.WriteString("PostTag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pt.ID))
	builder.WriteString("created_at=")
	builder.WriteString(pt.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pt.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(pt.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(pt.Slug)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(pt.Status)
	builder.WriteString(", ")
	builder.WriteString("excerpt=")
	builder.WriteString(pt.Excerpt)
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(pt.Content)
	builder.WriteString(", ")
	builder.WriteString("meta_title=")
	builder.WriteString(pt.MetaTitle)
	builder.WriteString(", ")
	builder.WriteString("meta_descr=")
	builder.WriteString(pt.MetaDescr)
	builder.WriteString(", ")
	builder.WriteString("meta_canonical_url=")
	builder.WriteString(pt.MetaCanonicalURL)
	builder.WriteString(", ")
	builder.WriteString("meta_robots=")
	builder.WriteString(pt.MetaRobots)
	builder.WriteByte(')')
	return builder.String()
}

// PostTags is a parsable slice of PostTag.
type PostTags []*PostTag
