// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"io"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttag"
	"saas/gen/ent/posttype"
	"saas/gen/ent/todo"
	"strconv"

	"entgo.io/contrib/entgql"
	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/errcode"
	"github.com/vektah/gqlparser/v2/gqlerror"
)

// Common entgql types.
type (
	Cursor         = entgql.Cursor[string]
	PageInfo       = entgql.PageInfo[string]
	OrderDirection = entgql.OrderDirection
)

func orderFunc(o OrderDirection, field string) func(*sql.Selector) {
	if o == entgql.OrderDirectionDesc {
		return Desc(field)
	}
	return Asc(field)
}

const errInvalidPagination = "INVALID_PAGINATION"

func validateFirstLast(first, last *int) (err *gqlerror.Error) {
	switch {
	case first != nil && last != nil:
		err = &gqlerror.Error{
			Message: "Passing both `first` and `last` to paginate a connection is not supported.",
		}
	case first != nil && *first < 0:
		err = &gqlerror.Error{
			Message: "`first` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	case last != nil && *last < 0:
		err = &gqlerror.Error{
			Message: "`last` on a connection cannot be less than zero.",
		}
		errcode.Set(err, errInvalidPagination)
	}
	return err
}

func collectedField(ctx context.Context, path ...string) *graphql.CollectedField {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return nil
	}
	field := fc.Field
	oc := graphql.GetOperationContext(ctx)
walk:
	for _, name := range path {
		for _, f := range graphql.CollectFields(oc, field.Selections, nil) {
			if f.Alias == name {
				field = f
				continue walk
			}
		}
		return nil
	}
	return &field
}

func hasCollectedField(ctx context.Context, path ...string) bool {
	if graphql.GetFieldContext(ctx) == nil {
		return true
	}
	return collectedField(ctx, path...) != nil
}

const (
	edgesField      = "edges"
	nodeField       = "node"
	pageInfoField   = "pageInfo"
	totalCountField = "totalCount"
)

func paginateLimit(first, last *int) int {
	var limit int
	if first != nil {
		limit = *first + 1
	} else if last != nil {
		limit = *last + 1
	}
	return limit
}

// PostEdge is the edge representation of Post.
type PostEdge struct {
	Node   *Post  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// PostConnection is the connection containing edges to Post.
type PostConnection struct {
	Edges      []*PostEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *PostConnection) build(nodes []*Post, pager *postPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Post
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Post {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Post {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostPaginateOption enables pagination customization.
type PostPaginateOption func(*postPager) error

// WithPostOrder configures pagination ordering.
func WithPostOrder(order []*PostOrder) PostPaginateOption {
	return func(pager *postPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPostFilter configures pagination filter.
func WithPostFilter(filter func(*PostQuery) (*PostQuery, error)) PostPaginateOption {
	return func(pager *postPager) error {
		if filter == nil {
			return errors.New("PostQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type postPager struct {
	reverse bool
	order   []*PostOrder
	filter  func(*PostQuery) (*PostQuery, error)
}

func newPostPager(opts []PostPaginateOption, reverse bool) (*postPager, error) {
	pager := &postPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *postPager) applyFilter(query *PostQuery) (*PostQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *postPager) toCursor(po *Post) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(po).Value)
	}
	return Cursor{ID: po.ID, Value: cs_}
}

func (p *postPager) applyCursors(query *PostQuery, after, before *Cursor) (*PostQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPostOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *postPager) applyOrder(query *PostQuery) *PostQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPostOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPostOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *postPager) orderExpr(query *PostQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPostOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to Post.
func (po *PostQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostPaginateOption,
) (*PostConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if po, err = pager.applyFilter(po); err != nil {
		return nil, err
	}
	conn := &PostConnection{Edges: []*PostEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := po.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if po, err = pager.applyCursors(po, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		po.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := po.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	po = pager.applyOrder(po)
	nodes, err := po.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostOrderFieldCreatedAt orders Post by created_at.
	PostOrderFieldCreatedAt = &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.CreatedAt, nil
		},
		column: post.FieldCreatedAt,
		toTerm: post.ByCreatedAt,
		toCursor: func(po *Post) Cursor {
			return Cursor{
				ID:    po.ID,
				Value: po.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostOrderField) String() string {
	var str string
	switch f.column {
	case PostOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PostOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PostOrderField", str)
	}
	return nil
}

// PostOrderField defines the ordering field of Post.
type PostOrderField struct {
	// Value extracts the ordering value from the given Post.
	Value    func(*Post) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) post.OrderOption
	toCursor func(*Post) Cursor
}

// PostOrder defines the ordering of Post.
type PostOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *PostOrderField `json:"field"`
}

// DefaultPostOrder is the default ordering of Post.
var DefaultPostOrder = &PostOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostOrderField{
		Value: func(po *Post) (ent.Value, error) {
			return po.ID, nil
		},
		column: post.FieldID,
		toTerm: post.ByID,
		toCursor: func(po *Post) Cursor {
			return Cursor{ID: po.ID}
		},
	},
}

// ToEdge converts Post into PostEdge.
func (po *Post) ToEdge(order *PostOrder) *PostEdge {
	if order == nil {
		order = DefaultPostOrder
	}
	return &PostEdge{
		Node:   po,
		Cursor: order.Field.toCursor(po),
	}
}

// PostCategoryEdge is the edge representation of PostCategory.
type PostCategoryEdge struct {
	Node   *PostCategory `json:"node"`
	Cursor Cursor        `json:"cursor"`
}

// PostCategoryConnection is the connection containing edges to PostCategory.
type PostCategoryConnection struct {
	Edges      []*PostCategoryEdge `json:"edges"`
	PageInfo   PageInfo            `json:"pageInfo"`
	TotalCount int                 `json:"totalCount"`
}

func (c *PostCategoryConnection) build(nodes []*PostCategory, pager *postcategoryPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PostCategory
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PostCategory {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PostCategory {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostCategoryEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostCategoryEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostCategoryPaginateOption enables pagination customization.
type PostCategoryPaginateOption func(*postcategoryPager) error

// WithPostCategoryOrder configures pagination ordering.
func WithPostCategoryOrder(order []*PostCategoryOrder) PostCategoryPaginateOption {
	return func(pager *postcategoryPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPostCategoryFilter configures pagination filter.
func WithPostCategoryFilter(filter func(*PostCategoryQuery) (*PostCategoryQuery, error)) PostCategoryPaginateOption {
	return func(pager *postcategoryPager) error {
		if filter == nil {
			return errors.New("PostCategoryQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type postcategoryPager struct {
	reverse bool
	order   []*PostCategoryOrder
	filter  func(*PostCategoryQuery) (*PostCategoryQuery, error)
}

func newPostCategoryPager(opts []PostCategoryPaginateOption, reverse bool) (*postcategoryPager, error) {
	pager := &postcategoryPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *postcategoryPager) applyFilter(query *PostCategoryQuery) (*PostCategoryQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *postcategoryPager) toCursor(pc *PostCategory) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(pc).Value)
	}
	return Cursor{ID: pc.ID, Value: cs_}
}

func (p *postcategoryPager) applyCursors(query *PostCategoryQuery, after, before *Cursor) (*PostCategoryQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPostCategoryOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *postcategoryPager) applyOrder(query *PostCategoryQuery) *PostCategoryQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPostCategoryOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPostCategoryOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *postcategoryPager) orderExpr(query *PostCategoryQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPostCategoryOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to PostCategory.
func (pc *PostCategoryQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostCategoryPaginateOption,
) (*PostCategoryConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostCategoryPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pc, err = pager.applyFilter(pc); err != nil {
		return nil, err
	}
	conn := &PostCategoryConnection{Edges: []*PostCategoryEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pc.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pc, err = pager.applyCursors(pc, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pc.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pc.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pc = pager.applyOrder(pc)
	nodes, err := pc.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostCategoryOrderFieldCreatedAt orders PostCategory by created_at.
	PostCategoryOrderFieldCreatedAt = &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.CreatedAt, nil
		},
		column: postcategory.FieldCreatedAt,
		toTerm: postcategory.ByCreatedAt,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{
				ID:    pc.ID,
				Value: pc.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostCategoryOrderField) String() string {
	var str string
	switch f.column {
	case PostCategoryOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostCategoryOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostCategoryOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostCategoryOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PostCategoryOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PostCategoryOrderField", str)
	}
	return nil
}

// PostCategoryOrderField defines the ordering field of PostCategory.
type PostCategoryOrderField struct {
	// Value extracts the ordering value from the given PostCategory.
	Value    func(*PostCategory) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) postcategory.OrderOption
	toCursor func(*PostCategory) Cursor
}

// PostCategoryOrder defines the ordering of PostCategory.
type PostCategoryOrder struct {
	Direction OrderDirection          `json:"direction"`
	Field     *PostCategoryOrderField `json:"field"`
}

// DefaultPostCategoryOrder is the default ordering of PostCategory.
var DefaultPostCategoryOrder = &PostCategoryOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostCategoryOrderField{
		Value: func(pc *PostCategory) (ent.Value, error) {
			return pc.ID, nil
		},
		column: postcategory.FieldID,
		toTerm: postcategory.ByID,
		toCursor: func(pc *PostCategory) Cursor {
			return Cursor{ID: pc.ID}
		},
	},
}

// ToEdge converts PostCategory into PostCategoryEdge.
func (pc *PostCategory) ToEdge(order *PostCategoryOrder) *PostCategoryEdge {
	if order == nil {
		order = DefaultPostCategoryOrder
	}
	return &PostCategoryEdge{
		Node:   pc,
		Cursor: order.Field.toCursor(pc),
	}
}

// PostStatusEdge is the edge representation of PostStatus.
type PostStatusEdge struct {
	Node   *PostStatus `json:"node"`
	Cursor Cursor      `json:"cursor"`
}

// PostStatusConnection is the connection containing edges to PostStatus.
type PostStatusConnection struct {
	Edges      []*PostStatusEdge `json:"edges"`
	PageInfo   PageInfo          `json:"pageInfo"`
	TotalCount int               `json:"totalCount"`
}

func (c *PostStatusConnection) build(nodes []*PostStatus, pager *poststatusPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PostStatus
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PostStatus {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PostStatus {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostStatusEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostStatusEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostStatusPaginateOption enables pagination customization.
type PostStatusPaginateOption func(*poststatusPager) error

// WithPostStatusOrder configures pagination ordering.
func WithPostStatusOrder(order []*PostStatusOrder) PostStatusPaginateOption {
	return func(pager *poststatusPager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPostStatusFilter configures pagination filter.
func WithPostStatusFilter(filter func(*PostStatusQuery) (*PostStatusQuery, error)) PostStatusPaginateOption {
	return func(pager *poststatusPager) error {
		if filter == nil {
			return errors.New("PostStatusQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type poststatusPager struct {
	reverse bool
	order   []*PostStatusOrder
	filter  func(*PostStatusQuery) (*PostStatusQuery, error)
}

func newPostStatusPager(opts []PostStatusPaginateOption, reverse bool) (*poststatusPager, error) {
	pager := &poststatusPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *poststatusPager) applyFilter(query *PostStatusQuery) (*PostStatusQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *poststatusPager) toCursor(ps *PostStatus) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(ps).Value)
	}
	return Cursor{ID: ps.ID, Value: cs_}
}

func (p *poststatusPager) applyCursors(query *PostStatusQuery, after, before *Cursor) (*PostStatusQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPostStatusOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *poststatusPager) applyOrder(query *PostStatusQuery) *PostStatusQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPostStatusOrder.Field.column {
			defaultOrdered = true
		}
		switch o.Field.column {
		case PostStatusOrderFieldPostTypeName.column:
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPostStatusOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *poststatusPager) orderExpr(query *PostStatusQuery) sql.Querier {
	for _, o := range p.order {
		switch o.Field.column {
		case PostStatusOrderFieldPostTypeName.column:
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		default:
			if len(query.ctx.Fields) > 0 {
				query.ctx.AppendFieldOnce(o.Field.column)
			}
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPostStatusOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to PostStatus.
func (ps *PostStatusQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostStatusPaginateOption,
) (*PostStatusConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostStatusPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if ps, err = pager.applyFilter(ps); err != nil {
		return nil, err
	}
	conn := &PostStatusConnection{Edges: []*PostStatusEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := ps.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if ps, err = pager.applyCursors(ps, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		ps.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := ps.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	ps = pager.applyOrder(ps)
	nodes, err := ps.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostStatusOrderFieldCreatedAt orders PostStatus by created_at.
	PostStatusOrderFieldCreatedAt = &PostStatusOrderField{
		Value: func(ps *PostStatus) (ent.Value, error) {
			return ps.CreatedAt, nil
		},
		column: poststatus.FieldCreatedAt,
		toTerm: poststatus.ByCreatedAt,
		toCursor: func(ps *PostStatus) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.CreatedAt,
			}
		},
	}
	// PostStatusOrderFieldName orders PostStatus by name.
	PostStatusOrderFieldName = &PostStatusOrderField{
		Value: func(ps *PostStatus) (ent.Value, error) {
			return ps.Name, nil
		},
		column: poststatus.FieldName,
		toTerm: poststatus.ByName,
		toCursor: func(ps *PostStatus) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.Name,
			}
		},
	}
	// PostStatusOrderFieldStatus orders PostStatus by status.
	PostStatusOrderFieldStatus = &PostStatusOrderField{
		Value: func(ps *PostStatus) (ent.Value, error) {
			return ps.Status, nil
		},
		column: poststatus.FieldStatus,
		toTerm: poststatus.ByStatus,
		toCursor: func(ps *PostStatus) Cursor {
			return Cursor{
				ID:    ps.ID,
				Value: ps.Status,
			}
		},
	}
	// PostStatusOrderFieldPostTypeName orders by POST_TYPE_NAME.
	PostStatusOrderFieldPostTypeName = &PostStatusOrderField{
		Value: func(ps *PostStatus) (ent.Value, error) {
			return ps.Value("post_type_name")
		},
		column: "post_type_name",
		toTerm: func(opts ...sql.OrderTermOption) poststatus.OrderOption {
			return poststatus.ByPostTypeField(
				posttype.FieldName,
				append(opts, sql.OrderSelectAs("post_type_name"))...,
			)
		},
		toCursor: func(ps *PostStatus) Cursor {
			cv, _ := ps.Value("post_type_name")
			return Cursor{
				ID:    ps.ID,
				Value: cv,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostStatusOrderField) String() string {
	var str string
	switch f.column {
	case PostStatusOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case PostStatusOrderFieldName.column:
		str = "NAME"
	case PostStatusOrderFieldStatus.column:
		str = "STATUS"
	case PostStatusOrderFieldPostTypeName.column:
		str = "POST_TYPE_NAME"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostStatusOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostStatusOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostStatusOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PostStatusOrderFieldCreatedAt
	case "NAME":
		*f = *PostStatusOrderFieldName
	case "STATUS":
		*f = *PostStatusOrderFieldStatus
	case "POST_TYPE_NAME":
		*f = *PostStatusOrderFieldPostTypeName
	default:
		return fmt.Errorf("%s is not a valid PostStatusOrderField", str)
	}
	return nil
}

// PostStatusOrderField defines the ordering field of PostStatus.
type PostStatusOrderField struct {
	// Value extracts the ordering value from the given PostStatus.
	Value    func(*PostStatus) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) poststatus.OrderOption
	toCursor func(*PostStatus) Cursor
}

// PostStatusOrder defines the ordering of PostStatus.
type PostStatusOrder struct {
	Direction OrderDirection        `json:"direction"`
	Field     *PostStatusOrderField `json:"field"`
}

// DefaultPostStatusOrder is the default ordering of PostStatus.
var DefaultPostStatusOrder = &PostStatusOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostStatusOrderField{
		Value: func(ps *PostStatus) (ent.Value, error) {
			return ps.ID, nil
		},
		column: poststatus.FieldID,
		toTerm: poststatus.ByID,
		toCursor: func(ps *PostStatus) Cursor {
			return Cursor{ID: ps.ID}
		},
	},
}

// ToEdge converts PostStatus into PostStatusEdge.
func (ps *PostStatus) ToEdge(order *PostStatusOrder) *PostStatusEdge {
	if order == nil {
		order = DefaultPostStatusOrder
	}
	return &PostStatusEdge{
		Node:   ps,
		Cursor: order.Field.toCursor(ps),
	}
}

// PostTagEdge is the edge representation of PostTag.
type PostTagEdge struct {
	Node   *PostTag `json:"node"`
	Cursor Cursor   `json:"cursor"`
}

// PostTagConnection is the connection containing edges to PostTag.
type PostTagConnection struct {
	Edges      []*PostTagEdge `json:"edges"`
	PageInfo   PageInfo       `json:"pageInfo"`
	TotalCount int            `json:"totalCount"`
}

func (c *PostTagConnection) build(nodes []*PostTag, pager *posttagPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PostTag
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PostTag {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PostTag {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostTagEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostTagEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostTagPaginateOption enables pagination customization.
type PostTagPaginateOption func(*posttagPager) error

// WithPostTagOrder configures pagination ordering.
func WithPostTagOrder(order *PostTagOrder) PostTagPaginateOption {
	if order == nil {
		order = DefaultPostTagOrder
	}
	o := *order
	return func(pager *posttagPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultPostTagOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithPostTagFilter configures pagination filter.
func WithPostTagFilter(filter func(*PostTagQuery) (*PostTagQuery, error)) PostTagPaginateOption {
	return func(pager *posttagPager) error {
		if filter == nil {
			return errors.New("PostTagQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type posttagPager struct {
	reverse bool
	order   *PostTagOrder
	filter  func(*PostTagQuery) (*PostTagQuery, error)
}

func newPostTagPager(opts []PostTagPaginateOption, reverse bool) (*posttagPager, error) {
	pager := &posttagPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultPostTagOrder
	}
	return pager, nil
}

func (p *posttagPager) applyFilter(query *PostTagQuery) (*PostTagQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *posttagPager) toCursor(pt *PostTag) Cursor {
	return p.order.Field.toCursor(pt)
}

func (p *posttagPager) applyCursors(query *PostTagQuery, after, before *Cursor) (*PostTagQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultPostTagOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *posttagPager) applyOrder(query *PostTagQuery) *PostTagQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultPostTagOrder.Field {
		query = query.Order(DefaultPostTagOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *posttagPager) orderExpr(query *PostTagQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultPostTagOrder.Field {
			b.Comma().Ident(DefaultPostTagOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to PostTag.
func (pt *PostTagQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostTagPaginateOption,
) (*PostTagConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostTagPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}
	conn := &PostTagConnection{Edges: []*PostTagEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pt, err = pager.applyCursors(pt, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pt.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pt = pager.applyOrder(pt)
	nodes, err := pt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostTagOrderFieldCreatedAt orders PostTag by created_at.
	PostTagOrderFieldCreatedAt = &PostTagOrderField{
		Value: func(pt *PostTag) (ent.Value, error) {
			return pt.CreatedAt, nil
		},
		column: posttag.FieldCreatedAt,
		toTerm: posttag.ByCreatedAt,
		toCursor: func(pt *PostTag) Cursor {
			return Cursor{
				ID:    pt.ID,
				Value: pt.CreatedAt,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostTagOrderField) String() string {
	var str string
	switch f.column {
	case PostTagOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostTagOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostTagOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostTagOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PostTagOrderFieldCreatedAt
	default:
		return fmt.Errorf("%s is not a valid PostTagOrderField", str)
	}
	return nil
}

// PostTagOrderField defines the ordering field of PostTag.
type PostTagOrderField struct {
	// Value extracts the ordering value from the given PostTag.
	Value    func(*PostTag) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) posttag.OrderOption
	toCursor func(*PostTag) Cursor
}

// PostTagOrder defines the ordering of PostTag.
type PostTagOrder struct {
	Direction OrderDirection     `json:"direction"`
	Field     *PostTagOrderField `json:"field"`
}

// DefaultPostTagOrder is the default ordering of PostTag.
var DefaultPostTagOrder = &PostTagOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostTagOrderField{
		Value: func(pt *PostTag) (ent.Value, error) {
			return pt.ID, nil
		},
		column: posttag.FieldID,
		toTerm: posttag.ByID,
		toCursor: func(pt *PostTag) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts PostTag into PostTagEdge.
func (pt *PostTag) ToEdge(order *PostTagOrder) *PostTagEdge {
	if order == nil {
		order = DefaultPostTagOrder
	}
	return &PostTagEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// PostTypeEdge is the edge representation of PostType.
type PostTypeEdge struct {
	Node   *PostType `json:"node"`
	Cursor Cursor    `json:"cursor"`
}

// PostTypeConnection is the connection containing edges to PostType.
type PostTypeConnection struct {
	Edges      []*PostTypeEdge `json:"edges"`
	PageInfo   PageInfo        `json:"pageInfo"`
	TotalCount int             `json:"totalCount"`
}

func (c *PostTypeConnection) build(nodes []*PostType, pager *posttypePager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *PostType
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *PostType {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *PostType {
			return nodes[i]
		}
	}
	c.Edges = make([]*PostTypeEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &PostTypeEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// PostTypePaginateOption enables pagination customization.
type PostTypePaginateOption func(*posttypePager) error

// WithPostTypeOrder configures pagination ordering.
func WithPostTypeOrder(order []*PostTypeOrder) PostTypePaginateOption {
	return func(pager *posttypePager) error {
		for _, o := range order {
			if err := o.Direction.Validate(); err != nil {
				return err
			}
		}
		pager.order = append(pager.order, order...)
		return nil
	}
}

// WithPostTypeFilter configures pagination filter.
func WithPostTypeFilter(filter func(*PostTypeQuery) (*PostTypeQuery, error)) PostTypePaginateOption {
	return func(pager *posttypePager) error {
		if filter == nil {
			return errors.New("PostTypeQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type posttypePager struct {
	reverse bool
	order   []*PostTypeOrder
	filter  func(*PostTypeQuery) (*PostTypeQuery, error)
}

func newPostTypePager(opts []PostTypePaginateOption, reverse bool) (*posttypePager, error) {
	pager := &posttypePager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	for i, o := range pager.order {
		if i > 0 && o.Field == pager.order[i-1].Field {
			return nil, fmt.Errorf("duplicate order direction %q", o.Direction)
		}
	}
	return pager, nil
}

func (p *posttypePager) applyFilter(query *PostTypeQuery) (*PostTypeQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *posttypePager) toCursor(pt *PostType) Cursor {
	cs_ := make([]any, 0, len(p.order))
	for _, o_ := range p.order {
		cs_ = append(cs_, o_.Field.toCursor(pt).Value)
	}
	return Cursor{ID: pt.ID, Value: cs_}
}

func (p *posttypePager) applyCursors(query *PostTypeQuery, after, before *Cursor) (*PostTypeQuery, error) {
	idDirection := entgql.OrderDirectionAsc
	if p.reverse {
		idDirection = entgql.OrderDirectionDesc
	}
	fields, directions := make([]string, 0, len(p.order)), make([]OrderDirection, 0, len(p.order))
	for _, o := range p.order {
		fields = append(fields, o.Field.column)
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		directions = append(directions, direction)
	}
	predicates, err := entgql.MultiCursorsPredicate(after, before, &entgql.MultiCursorsOptions{
		FieldID:     DefaultPostTypeOrder.Field.column,
		DirectionID: idDirection,
		Fields:      fields,
		Directions:  directions,
	})
	if err != nil {
		return nil, err
	}
	for _, predicate := range predicates {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *posttypePager) applyOrder(query *PostTypeQuery) *PostTypeQuery {
	var defaultOrdered bool
	for _, o := range p.order {
		direction := o.Direction
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(o.Field.toTerm(direction.OrderTermOption()))
		if o.Field.column == DefaultPostTypeOrder.Field.column {
			defaultOrdered = true
		}
		if len(query.ctx.Fields) > 0 {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	if !defaultOrdered {
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		query = query.Order(DefaultPostTypeOrder.Field.toTerm(direction.OrderTermOption()))
	}
	return query
}

func (p *posttypePager) orderExpr(query *PostTypeQuery) sql.Querier {
	if len(query.ctx.Fields) > 0 {
		for _, o := range p.order {
			query.ctx.AppendFieldOnce(o.Field.column)
		}
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		for _, o := range p.order {
			direction := o.Direction
			if p.reverse {
				direction = direction.Reverse()
			}
			b.Ident(o.Field.column).Pad().WriteString(string(direction))
			b.Comma()
		}
		direction := entgql.OrderDirectionAsc
		if p.reverse {
			direction = direction.Reverse()
		}
		b.Ident(DefaultPostTypeOrder.Field.column).Pad().WriteString(string(direction))
	})
}

// Paginate executes the query and returns a relay based cursor connection to PostType.
func (pt *PostTypeQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...PostTypePaginateOption,
) (*PostTypeConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newPostTypePager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if pt, err = pager.applyFilter(pt); err != nil {
		return nil, err
	}
	conn := &PostTypeConnection{Edges: []*PostTypeEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := pt.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if pt, err = pager.applyCursors(pt, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		pt.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := pt.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	pt = pager.applyOrder(pt)
	nodes, err := pt.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// PostTypeOrderFieldCreatedAt orders PostType by created_at.
	PostTypeOrderFieldCreatedAt = &PostTypeOrderField{
		Value: func(pt *PostType) (ent.Value, error) {
			return pt.CreatedAt, nil
		},
		column: posttype.FieldCreatedAt,
		toTerm: posttype.ByCreatedAt,
		toCursor: func(pt *PostType) Cursor {
			return Cursor{
				ID:    pt.ID,
				Value: pt.CreatedAt,
			}
		},
	}
	// PostTypeOrderFieldName orders PostType by name.
	PostTypeOrderFieldName = &PostTypeOrderField{
		Value: func(pt *PostType) (ent.Value, error) {
			return pt.Name, nil
		},
		column: posttype.FieldName,
		toTerm: posttype.ByName,
		toCursor: func(pt *PostType) Cursor {
			return Cursor{
				ID:    pt.ID,
				Value: pt.Name,
			}
		},
	}
	// PostTypeOrderFieldStatus orders PostType by status.
	PostTypeOrderFieldStatus = &PostTypeOrderField{
		Value: func(pt *PostType) (ent.Value, error) {
			return pt.Status, nil
		},
		column: posttype.FieldStatus,
		toTerm: posttype.ByStatus,
		toCursor: func(pt *PostType) Cursor {
			return Cursor{
				ID:    pt.ID,
				Value: pt.Status,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f PostTypeOrderField) String() string {
	var str string
	switch f.column {
	case PostTypeOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case PostTypeOrderFieldName.column:
		str = "NAME"
	case PostTypeOrderFieldStatus.column:
		str = "STATUS"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f PostTypeOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *PostTypeOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("PostTypeOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *PostTypeOrderFieldCreatedAt
	case "NAME":
		*f = *PostTypeOrderFieldName
	case "STATUS":
		*f = *PostTypeOrderFieldStatus
	default:
		return fmt.Errorf("%s is not a valid PostTypeOrderField", str)
	}
	return nil
}

// PostTypeOrderField defines the ordering field of PostType.
type PostTypeOrderField struct {
	// Value extracts the ordering value from the given PostType.
	Value    func(*PostType) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) posttype.OrderOption
	toCursor func(*PostType) Cursor
}

// PostTypeOrder defines the ordering of PostType.
type PostTypeOrder struct {
	Direction OrderDirection      `json:"direction"`
	Field     *PostTypeOrderField `json:"field"`
}

// DefaultPostTypeOrder is the default ordering of PostType.
var DefaultPostTypeOrder = &PostTypeOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &PostTypeOrderField{
		Value: func(pt *PostType) (ent.Value, error) {
			return pt.ID, nil
		},
		column: posttype.FieldID,
		toTerm: posttype.ByID,
		toCursor: func(pt *PostType) Cursor {
			return Cursor{ID: pt.ID}
		},
	},
}

// ToEdge converts PostType into PostTypeEdge.
func (pt *PostType) ToEdge(order *PostTypeOrder) *PostTypeEdge {
	if order == nil {
		order = DefaultPostTypeOrder
	}
	return &PostTypeEdge{
		Node:   pt,
		Cursor: order.Field.toCursor(pt),
	}
}

// TodoEdge is the edge representation of Todo.
type TodoEdge struct {
	Node   *Todo  `json:"node"`
	Cursor Cursor `json:"cursor"`
}

// TodoConnection is the connection containing edges to Todo.
type TodoConnection struct {
	Edges      []*TodoEdge `json:"edges"`
	PageInfo   PageInfo    `json:"pageInfo"`
	TotalCount int         `json:"totalCount"`
}

func (c *TodoConnection) build(nodes []*Todo, pager *todoPager, after *Cursor, first *int, before *Cursor, last *int) {
	c.PageInfo.HasNextPage = before != nil
	c.PageInfo.HasPreviousPage = after != nil
	if first != nil && *first+1 == len(nodes) {
		c.PageInfo.HasNextPage = true
		nodes = nodes[:len(nodes)-1]
	} else if last != nil && *last+1 == len(nodes) {
		c.PageInfo.HasPreviousPage = true
		nodes = nodes[:len(nodes)-1]
	}
	var nodeAt func(int) *Todo
	if last != nil {
		n := len(nodes) - 1
		nodeAt = func(i int) *Todo {
			return nodes[n-i]
		}
	} else {
		nodeAt = func(i int) *Todo {
			return nodes[i]
		}
	}
	c.Edges = make([]*TodoEdge, len(nodes))
	for i := range nodes {
		node := nodeAt(i)
		c.Edges[i] = &TodoEdge{
			Node:   node,
			Cursor: pager.toCursor(node),
		}
	}
	if l := len(c.Edges); l > 0 {
		c.PageInfo.StartCursor = &c.Edges[0].Cursor
		c.PageInfo.EndCursor = &c.Edges[l-1].Cursor
	}
	if c.TotalCount == 0 {
		c.TotalCount = len(nodes)
	}
}

// TodoPaginateOption enables pagination customization.
type TodoPaginateOption func(*todoPager) error

// WithTodoOrder configures pagination ordering.
func WithTodoOrder(order *TodoOrder) TodoPaginateOption {
	if order == nil {
		order = DefaultTodoOrder
	}
	o := *order
	return func(pager *todoPager) error {
		if err := o.Direction.Validate(); err != nil {
			return err
		}
		if o.Field == nil {
			o.Field = DefaultTodoOrder.Field
		}
		pager.order = &o
		return nil
	}
}

// WithTodoFilter configures pagination filter.
func WithTodoFilter(filter func(*TodoQuery) (*TodoQuery, error)) TodoPaginateOption {
	return func(pager *todoPager) error {
		if filter == nil {
			return errors.New("TodoQuery filter cannot be nil")
		}
		pager.filter = filter
		return nil
	}
}

type todoPager struct {
	reverse bool
	order   *TodoOrder
	filter  func(*TodoQuery) (*TodoQuery, error)
}

func newTodoPager(opts []TodoPaginateOption, reverse bool) (*todoPager, error) {
	pager := &todoPager{reverse: reverse}
	for _, opt := range opts {
		if err := opt(pager); err != nil {
			return nil, err
		}
	}
	if pager.order == nil {
		pager.order = DefaultTodoOrder
	}
	return pager, nil
}

func (p *todoPager) applyFilter(query *TodoQuery) (*TodoQuery, error) {
	if p.filter != nil {
		return p.filter(query)
	}
	return query, nil
}

func (p *todoPager) toCursor(t *Todo) Cursor {
	return p.order.Field.toCursor(t)
}

func (p *todoPager) applyCursors(query *TodoQuery, after, before *Cursor) (*TodoQuery, error) {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	for _, predicate := range entgql.CursorsPredicate(after, before, DefaultTodoOrder.Field.column, p.order.Field.column, direction) {
		query = query.Where(predicate)
	}
	return query, nil
}

func (p *todoPager) applyOrder(query *TodoQuery) *TodoQuery {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	query = query.Order(p.order.Field.toTerm(direction.OrderTermOption()))
	if p.order.Field != DefaultTodoOrder.Field {
		query = query.Order(DefaultTodoOrder.Field.toTerm(direction.OrderTermOption()))
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return query
}

func (p *todoPager) orderExpr(query *TodoQuery) sql.Querier {
	direction := p.order.Direction
	if p.reverse {
		direction = direction.Reverse()
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(p.order.Field.column)
	}
	return sql.ExprFunc(func(b *sql.Builder) {
		b.Ident(p.order.Field.column).Pad().WriteString(string(direction))
		if p.order.Field != DefaultTodoOrder.Field {
			b.Comma().Ident(DefaultTodoOrder.Field.column).Pad().WriteString(string(direction))
		}
	})
}

// Paginate executes the query and returns a relay based cursor connection to Todo.
func (t *TodoQuery) Paginate(
	ctx context.Context, after *Cursor, first *int,
	before *Cursor, last *int, opts ...TodoPaginateOption,
) (*TodoConnection, error) {
	if err := validateFirstLast(first, last); err != nil {
		return nil, err
	}
	pager, err := newTodoPager(opts, last != nil)
	if err != nil {
		return nil, err
	}
	if t, err = pager.applyFilter(t); err != nil {
		return nil, err
	}
	conn := &TodoConnection{Edges: []*TodoEdge{}}
	ignoredEdges := !hasCollectedField(ctx, edgesField)
	if hasCollectedField(ctx, totalCountField) || hasCollectedField(ctx, pageInfoField) {
		hasPagination := after != nil || first != nil || before != nil || last != nil
		if hasPagination || ignoredEdges {
			c := t.Clone()
			c.ctx.Fields = nil
			if conn.TotalCount, err = c.Count(ctx); err != nil {
				return nil, err
			}
			conn.PageInfo.HasNextPage = first != nil && conn.TotalCount > 0
			conn.PageInfo.HasPreviousPage = last != nil && conn.TotalCount > 0
		}
	}
	if ignoredEdges || (first != nil && *first == 0) || (last != nil && *last == 0) {
		return conn, nil
	}
	if t, err = pager.applyCursors(t, after, before); err != nil {
		return nil, err
	}
	limit := paginateLimit(first, last)
	if limit != 0 {
		t.Limit(limit)
	}
	if field := collectedField(ctx, edgesField, nodeField); field != nil {
		if err := t.collectField(ctx, limit == 1, graphql.GetOperationContext(ctx), *field, []string{edgesField, nodeField}); err != nil {
			return nil, err
		}
	}
	t = pager.applyOrder(t)
	nodes, err := t.All(ctx)
	if err != nil {
		return nil, err
	}
	conn.build(nodes, pager, after, first, before, last)
	return conn, nil
}

var (
	// TodoOrderFieldCreatedAt orders Todo by created_at.
	TodoOrderFieldCreatedAt = &TodoOrderField{
		Value: func(t *Todo) (ent.Value, error) {
			return t.CreatedAt, nil
		},
		column: todo.FieldCreatedAt,
		toTerm: todo.ByCreatedAt,
		toCursor: func(t *Todo) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.CreatedAt,
			}
		},
	}
	// TodoOrderFieldText orders Todo by text.
	TodoOrderFieldText = &TodoOrderField{
		Value: func(t *Todo) (ent.Value, error) {
			return t.Text, nil
		},
		column: todo.FieldText,
		toTerm: todo.ByText,
		toCursor: func(t *Todo) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Text,
			}
		},
	}
	// TodoOrderFieldStatus orders Todo by status.
	TodoOrderFieldStatus = &TodoOrderField{
		Value: func(t *Todo) (ent.Value, error) {
			return t.Status, nil
		},
		column: todo.FieldStatus,
		toTerm: todo.ByStatus,
		toCursor: func(t *Todo) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Status,
			}
		},
	}
	// TodoOrderFieldPriority orders Todo by priority.
	TodoOrderFieldPriority = &TodoOrderField{
		Value: func(t *Todo) (ent.Value, error) {
			return t.Priority, nil
		},
		column: todo.FieldPriority,
		toTerm: todo.ByPriority,
		toCursor: func(t *Todo) Cursor {
			return Cursor{
				ID:    t.ID,
				Value: t.Priority,
			}
		},
	}
)

// String implement fmt.Stringer interface.
func (f TodoOrderField) String() string {
	var str string
	switch f.column {
	case TodoOrderFieldCreatedAt.column:
		str = "CREATED_AT"
	case TodoOrderFieldText.column:
		str = "TEXT"
	case TodoOrderFieldStatus.column:
		str = "STATUS"
	case TodoOrderFieldPriority.column:
		str = "PRIORITY"
	}
	return str
}

// MarshalGQL implements graphql.Marshaler interface.
func (f TodoOrderField) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(f.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (f *TodoOrderField) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("TodoOrderField %T must be a string", v)
	}
	switch str {
	case "CREATED_AT":
		*f = *TodoOrderFieldCreatedAt
	case "TEXT":
		*f = *TodoOrderFieldText
	case "STATUS":
		*f = *TodoOrderFieldStatus
	case "PRIORITY":
		*f = *TodoOrderFieldPriority
	default:
		return fmt.Errorf("%s is not a valid TodoOrderField", str)
	}
	return nil
}

// TodoOrderField defines the ordering field of Todo.
type TodoOrderField struct {
	// Value extracts the ordering value from the given Todo.
	Value    func(*Todo) (ent.Value, error)
	column   string // field or computed.
	toTerm   func(...sql.OrderTermOption) todo.OrderOption
	toCursor func(*Todo) Cursor
}

// TodoOrder defines the ordering of Todo.
type TodoOrder struct {
	Direction OrderDirection  `json:"direction"`
	Field     *TodoOrderField `json:"field"`
}

// DefaultTodoOrder is the default ordering of Todo.
var DefaultTodoOrder = &TodoOrder{
	Direction: entgql.OrderDirectionAsc,
	Field: &TodoOrderField{
		Value: func(t *Todo) (ent.Value, error) {
			return t.ID, nil
		},
		column: todo.FieldID,
		toTerm: todo.ByID,
		toCursor: func(t *Todo) Cursor {
			return Cursor{ID: t.ID}
		},
	},
}

// ToEdge converts Todo into TodoEdge.
func (t *Todo) ToEdge(order *TodoOrder) *TodoEdge {
	if order == nil {
		order = DefaultTodoOrder
	}
	return &TodoEdge{
		Node:   t,
		Cursor: order.Field.toCursor(t),
	}
}
