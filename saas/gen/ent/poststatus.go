// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttype"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PostStatus is the model entity for the PostStatus schema.
type PostStatus struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Slug holds the value of the "slug" field.
	Slug string `json:"slug,omitempty"`
	// Status holds the value of the "status" field.
	Status bool `json:"status,omitempty"`
	// PostTypeID holds the value of the "post_type_id" field.
	PostTypeID string `json:"post_type_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostStatusQuery when eager-loading is set.
	Edges        PostStatusEdges `json:"edges"`
	selectValues sql.SelectValues
}

// PostStatusEdges holds the relations/edges for other nodes in the graph.
type PostStatusEdges struct {
	// PostType holds the value of the post_type edge.
	PostType *PostType `json:"post_type,omitempty"`
	// Posts holds the value of the posts edge.
	Posts []*Post `json:"posts,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int

	namedPosts map[string][]*Post
}

// PostTypeOrErr returns the PostType value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PostStatusEdges) PostTypeOrErr() (*PostType, error) {
	if e.loadedTypes[0] {
		if e.PostType == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: posttype.Label}
		}
		return e.PostType, nil
	}
	return nil, &NotLoadedError{edge: "post_type"}
}

// PostsOrErr returns the Posts value or an error if the edge
// was not loaded in eager-loading.
func (e PostStatusEdges) PostsOrErr() ([]*Post, error) {
	if e.loadedTypes[1] {
		return e.Posts, nil
	}
	return nil, &NotLoadedError{edge: "posts"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostStatus) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case poststatus.FieldStatus:
			values[i] = new(sql.NullBool)
		case poststatus.FieldID, poststatus.FieldAppID, poststatus.FieldName, poststatus.FieldSlug, poststatus.FieldPostTypeID:
			values[i] = new(sql.NullString)
		case poststatus.FieldCreatedAt, poststatus.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostStatus fields.
func (ps *PostStatus) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case poststatus.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				ps.ID = value.String
			}
		case poststatus.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ps.CreatedAt = value.Time
			}
		case poststatus.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ps.UpdatedAt = value.Time
			}
		case poststatus.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				ps.AppID = value.String
			}
		case poststatus.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ps.Name = value.String
			}
		case poststatus.FieldSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slug", values[i])
			} else if value.Valid {
				ps.Slug = value.String
			}
		case poststatus.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				ps.Status = value.Bool
			}
		case poststatus.FieldPostTypeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field post_type_id", values[i])
			} else if value.Valid {
				ps.PostTypeID = value.String
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostStatus.
// This includes values selected through modifiers, order, etc.
func (ps *PostStatus) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// QueryPostType queries the "post_type" edge of the PostStatus entity.
func (ps *PostStatus) QueryPostType() *PostTypeQuery {
	return NewPostStatusClient(ps.config).QueryPostType(ps)
}

// QueryPosts queries the "posts" edge of the PostStatus entity.
func (ps *PostStatus) QueryPosts() *PostQuery {
	return NewPostStatusClient(ps.config).QueryPosts(ps)
}

// Update returns a builder for updating this PostStatus.
// Note that you need to call PostStatus.Unwrap() before calling this method if this PostStatus
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PostStatus) Update() *PostStatusUpdateOne {
	return NewPostStatusClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PostStatus entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PostStatus) Unwrap() *PostStatus {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostStatus is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PostStatus) String() string {
	var builder strings.Builder
	builder.WriteString("PostStatus(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("created_at=")
	builder.WriteString(ps.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ps.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(ps.AppID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(ps.Name)
	builder.WriteString(", ")
	builder.WriteString("slug=")
	builder.WriteString(ps.Slug)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", ps.Status))
	builder.WriteString(", ")
	builder.WriteString("post_type_id=")
	builder.WriteString(ps.PostTypeID)
	builder.WriteByte(')')
	return builder.String()
}

// NamedPosts returns the Posts named value or an error if the edge was not
// loaded in eager-loading with this name.
func (ps *PostStatus) NamedPosts(name string) ([]*Post, error) {
	if ps.Edges.namedPosts == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := ps.Edges.namedPosts[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (ps *PostStatus) appendNamedPosts(name string, edges ...*Post) {
	if ps.Edges.namedPosts == nil {
		ps.Edges.namedPosts = make(map[string][]*Post)
	}
	if len(edges) == 0 {
		ps.Edges.namedPosts[name] = []*Post{}
	} else {
		ps.Edges.namedPosts[name] = append(ps.Edges.namedPosts[name], edges...)
	}
}

// PostStatusSlice is a parsable slice of PostStatus.
type PostStatusSlice []*PostStatus
