// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceinvite"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceInviteCreate is the builder for creating a WorkspaceInvite entity.
type WorkspaceInviteCreate struct {
	config
	mutation *WorkspaceInviteMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wic *WorkspaceInviteCreate) SetCreatedAt(t time.Time) *WorkspaceInviteCreate {
	wic.mutation.SetCreatedAt(t)
	return wic
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceInviteCreate {
	if t != nil {
		wic.SetCreatedAt(*t)
	}
	return wic
}

// SetUpdatedAt sets the "updated_at" field.
func (wic *WorkspaceInviteCreate) SetUpdatedAt(t time.Time) *WorkspaceInviteCreate {
	wic.mutation.SetUpdatedAt(t)
	return wic
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceInviteCreate {
	if t != nil {
		wic.SetUpdatedAt(*t)
	}
	return wic
}

// SetAppID sets the "app_id" field.
func (wic *WorkspaceInviteCreate) SetAppID(s string) *WorkspaceInviteCreate {
	wic.mutation.SetAppID(s)
	return wic
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableAppID(s *string) *WorkspaceInviteCreate {
	if s != nil {
		wic.SetAppID(*s)
	}
	return wic
}

// SetWorkspaceID sets the "workspace_id" field.
func (wic *WorkspaceInviteCreate) SetWorkspaceID(s string) *WorkspaceInviteCreate {
	wic.mutation.SetWorkspaceID(s)
	return wic
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableWorkspaceID(s *string) *WorkspaceInviteCreate {
	if s != nil {
		wic.SetWorkspaceID(*s)
	}
	return wic
}

// SetEmail sets the "email" field.
func (wic *WorkspaceInviteCreate) SetEmail(s string) *WorkspaceInviteCreate {
	wic.mutation.SetEmail(s)
	return wic
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableEmail(s *string) *WorkspaceInviteCreate {
	if s != nil {
		wic.SetEmail(*s)
	}
	return wic
}

// SetRole sets the "role" field.
func (wic *WorkspaceInviteCreate) SetRole(s string) *WorkspaceInviteCreate {
	wic.mutation.SetRole(s)
	return wic
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableRole(s *string) *WorkspaceInviteCreate {
	if s != nil {
		wic.SetRole(*s)
	}
	return wic
}

// SetID sets the "id" field.
func (wic *WorkspaceInviteCreate) SetID(s string) *WorkspaceInviteCreate {
	wic.mutation.SetID(s)
	return wic
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wic *WorkspaceInviteCreate) SetNillableID(s *string) *WorkspaceInviteCreate {
	if s != nil {
		wic.SetID(*s)
	}
	return wic
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wic *WorkspaceInviteCreate) SetWorkspace(w *Workspace) *WorkspaceInviteCreate {
	return wic.SetWorkspaceID(w.ID)
}

// Mutation returns the WorkspaceInviteMutation object of the builder.
func (wic *WorkspaceInviteCreate) Mutation() *WorkspaceInviteMutation {
	return wic.mutation
}

// Save creates the WorkspaceInvite in the database.
func (wic *WorkspaceInviteCreate) Save(ctx context.Context) (*WorkspaceInvite, error) {
	wic.defaults()
	return withHooks(ctx, wic.sqlSave, wic.mutation, wic.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wic *WorkspaceInviteCreate) SaveX(ctx context.Context) *WorkspaceInvite {
	v, err := wic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wic *WorkspaceInviteCreate) Exec(ctx context.Context) error {
	_, err := wic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wic *WorkspaceInviteCreate) ExecX(ctx context.Context) {
	if err := wic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wic *WorkspaceInviteCreate) defaults() {
	if _, ok := wic.mutation.CreatedAt(); !ok {
		v := workspaceinvite.DefaultCreatedAt()
		wic.mutation.SetCreatedAt(v)
	}
	if _, ok := wic.mutation.UpdatedAt(); !ok {
		v := workspaceinvite.DefaultUpdatedAt()
		wic.mutation.SetUpdatedAt(v)
	}
	if _, ok := wic.mutation.ID(); !ok {
		v := workspaceinvite.DefaultID()
		wic.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wic *WorkspaceInviteCreate) check() error {
	return nil
}

func (wic *WorkspaceInviteCreate) sqlSave(ctx context.Context) (*WorkspaceInvite, error) {
	if err := wic.check(); err != nil {
		return nil, err
	}
	_node, _spec := wic.createSpec()
	if err := sqlgraph.CreateNode(ctx, wic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WorkspaceInvite.ID type: %T", _spec.ID.Value)
		}
	}
	wic.mutation.id = &_node.ID
	wic.mutation.done = true
	return _node, nil
}

func (wic *WorkspaceInviteCreate) createSpec() (*WorkspaceInvite, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkspaceInvite{config: wic.config}
		_spec = sqlgraph.NewCreateSpec(workspaceinvite.Table, sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString))
	)
	_spec.OnConflict = wic.conflict
	if id, ok := wic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wic.mutation.CreatedAt(); ok {
		_spec.SetField(workspaceinvite.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wic.mutation.UpdatedAt(); ok {
		_spec.SetField(workspaceinvite.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wic.mutation.AppID(); ok {
		_spec.SetField(workspaceinvite.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := wic.mutation.Email(); ok {
		_spec.SetField(workspaceinvite.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := wic.mutation.Role(); ok {
		_spec.SetField(workspaceinvite.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if nodes := wic.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   workspaceinvite.WorkspaceTable,
			Columns: []string{workspaceinvite.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceInvite.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceInviteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wic *WorkspaceInviteCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceInviteUpsertOne {
	wic.conflict = opts
	return &WorkspaceInviteUpsertOne{
		create: wic,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wic *WorkspaceInviteCreate) OnConflictColumns(columns ...string) *WorkspaceInviteUpsertOne {
	wic.conflict = append(wic.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceInviteUpsertOne{
		create: wic,
	}
}

type (
	// WorkspaceInviteUpsertOne is the builder for "upsert"-ing
	//  one WorkspaceInvite node.
	WorkspaceInviteUpsertOne struct {
		create *WorkspaceInviteCreate
	}

	// WorkspaceInviteUpsert is the "OnConflict" setter.
	WorkspaceInviteUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceInviteUpsert) SetUpdatedAt(v time.Time) *WorkspaceInviteUpsert {
	u.Set(workspaceinvite.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceInviteUpsert) UpdateUpdatedAt() *WorkspaceInviteUpsert {
	u.SetExcluded(workspaceinvite.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceInviteUpsert) ClearUpdatedAt() *WorkspaceInviteUpsert {
	u.SetNull(workspaceinvite.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *WorkspaceInviteUpsert) SetAppID(v string) *WorkspaceInviteUpsert {
	u.Set(workspaceinvite.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsert) UpdateAppID() *WorkspaceInviteUpsert {
	u.SetExcluded(workspaceinvite.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *WorkspaceInviteUpsert) ClearAppID() *WorkspaceInviteUpsert {
	u.SetNull(workspaceinvite.FieldAppID)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceInviteUpsert) SetWorkspaceID(v string) *WorkspaceInviteUpsert {
	u.Set(workspaceinvite.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsert) UpdateWorkspaceID() *WorkspaceInviteUpsert {
	u.SetExcluded(workspaceinvite.FieldWorkspaceID)
	return u
}

// ClearWorkspaceID clears the value of the "workspace_id" field.
func (u *WorkspaceInviteUpsert) ClearWorkspaceID() *WorkspaceInviteUpsert {
	u.SetNull(workspaceinvite.FieldWorkspaceID)
	return u
}

// SetEmail sets the "email" field.
func (u *WorkspaceInviteUpsert) SetEmail(v string) *WorkspaceInviteUpsert {
	u.Set(workspaceinvite.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *WorkspaceInviteUpsert) UpdateEmail() *WorkspaceInviteUpsert {
	u.SetExcluded(workspaceinvite.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *WorkspaceInviteUpsert) ClearEmail() *WorkspaceInviteUpsert {
	u.SetNull(workspaceinvite.FieldEmail)
	return u
}

// SetRole sets the "role" field.
func (u *WorkspaceInviteUpsert) SetRole(v string) *WorkspaceInviteUpsert {
	u.Set(workspaceinvite.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceInviteUpsert) UpdateRole() *WorkspaceInviteUpsert {
	u.SetExcluded(workspaceinvite.FieldRole)
	return u
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceInviteUpsert) ClearRole() *WorkspaceInviteUpsert {
	u.SetNull(workspaceinvite.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceinvite.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceInviteUpsertOne) UpdateNewValues() *WorkspaceInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspaceinvite.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspaceinvite.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkspaceInviteUpsertOne) Ignore() *WorkspaceInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceInviteUpsertOne) DoNothing() *WorkspaceInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceInviteCreate.OnConflict
// documentation for more info.
func (u *WorkspaceInviteUpsertOne) Update(set func(*WorkspaceInviteUpsert)) *WorkspaceInviteUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceInviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceInviteUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertOne) UpdateUpdatedAt() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceInviteUpsertOne) ClearUpdatedAt() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *WorkspaceInviteUpsertOne) SetAppID(v string) *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertOne) UpdateAppID() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *WorkspaceInviteUpsertOne) ClearAppID() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearAppID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceInviteUpsertOne) SetWorkspaceID(v string) *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertOne) UpdateWorkspaceID() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateWorkspaceID()
	})
}

// ClearWorkspaceID clears the value of the "workspace_id" field.
func (u *WorkspaceInviteUpsertOne) ClearWorkspaceID() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearWorkspaceID()
	})
}

// SetEmail sets the "email" field.
func (u *WorkspaceInviteUpsertOne) SetEmail(v string) *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertOne) UpdateEmail() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *WorkspaceInviteUpsertOne) ClearEmail() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearEmail()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceInviteUpsertOne) SetRole(v string) *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertOne) UpdateRole() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceInviteUpsertOne) ClearRole() *WorkspaceInviteUpsertOne {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *WorkspaceInviteUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceInviteCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceInviteUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceInviteUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceInviteUpsertOne.ID is not supported by MySQL driver. Use WorkspaceInviteUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceInviteUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceInviteCreateBulk is the builder for creating many WorkspaceInvite entities in bulk.
type WorkspaceInviteCreateBulk struct {
	config
	err      error
	builders []*WorkspaceInviteCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkspaceInvite entities in the database.
func (wicb *WorkspaceInviteCreateBulk) Save(ctx context.Context) ([]*WorkspaceInvite, error) {
	if wicb.err != nil {
		return nil, wicb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wicb.builders))
	nodes := make([]*WorkspaceInvite, len(wicb.builders))
	mutators := make([]Mutator, len(wicb.builders))
	for i := range wicb.builders {
		func(i int, root context.Context) {
			builder := wicb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceInviteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wicb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wicb *WorkspaceInviteCreateBulk) SaveX(ctx context.Context) []*WorkspaceInvite {
	v, err := wicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wicb *WorkspaceInviteCreateBulk) Exec(ctx context.Context) error {
	_, err := wicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wicb *WorkspaceInviteCreateBulk) ExecX(ctx context.Context) {
	if err := wicb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceInvite.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceInviteUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wicb *WorkspaceInviteCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceInviteUpsertBulk {
	wicb.conflict = opts
	return &WorkspaceInviteUpsertBulk{
		create: wicb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wicb *WorkspaceInviteCreateBulk) OnConflictColumns(columns ...string) *WorkspaceInviteUpsertBulk {
	wicb.conflict = append(wicb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceInviteUpsertBulk{
		create: wicb,
	}
}

// WorkspaceInviteUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkspaceInvite nodes.
type WorkspaceInviteUpsertBulk struct {
	create *WorkspaceInviteCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceinvite.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceInviteUpsertBulk) UpdateNewValues() *WorkspaceInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspaceinvite.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspaceinvite.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceInvite.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkspaceInviteUpsertBulk) Ignore() *WorkspaceInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceInviteUpsertBulk) DoNothing() *WorkspaceInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceInviteCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceInviteUpsertBulk) Update(set func(*WorkspaceInviteUpsert)) *WorkspaceInviteUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceInviteUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceInviteUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertBulk) UpdateUpdatedAt() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceInviteUpsertBulk) ClearUpdatedAt() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *WorkspaceInviteUpsertBulk) SetAppID(v string) *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertBulk) UpdateAppID() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *WorkspaceInviteUpsertBulk) ClearAppID() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearAppID()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceInviteUpsertBulk) SetWorkspaceID(v string) *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertBulk) UpdateWorkspaceID() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateWorkspaceID()
	})
}

// ClearWorkspaceID clears the value of the "workspace_id" field.
func (u *WorkspaceInviteUpsertBulk) ClearWorkspaceID() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearWorkspaceID()
	})
}

// SetEmail sets the "email" field.
func (u *WorkspaceInviteUpsertBulk) SetEmail(v string) *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertBulk) UpdateEmail() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *WorkspaceInviteUpsertBulk) ClearEmail() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearEmail()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceInviteUpsertBulk) SetRole(v string) *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceInviteUpsertBulk) UpdateRole() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceInviteUpsertBulk) ClearRole() *WorkspaceInviteUpsertBulk {
	return u.Update(func(s *WorkspaceInviteUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *WorkspaceInviteUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceInviteCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceInviteCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceInviteUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
