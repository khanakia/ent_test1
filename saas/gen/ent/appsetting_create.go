// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/appsetting"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppSettingCreate is the builder for creating a AppSetting entity.
type AppSettingCreate struct {
	config
	mutation *AppSettingMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (asc *AppSettingCreate) SetCreatedAt(t time.Time) *AppSettingCreate {
	asc.mutation.SetCreatedAt(t)
	return asc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableCreatedAt(t *time.Time) *AppSettingCreate {
	if t != nil {
		asc.SetCreatedAt(*t)
	}
	return asc
}

// SetUpdatedAt sets the "updated_at" field.
func (asc *AppSettingCreate) SetUpdatedAt(t time.Time) *AppSettingCreate {
	asc.mutation.SetUpdatedAt(t)
	return asc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableUpdatedAt(t *time.Time) *AppSettingCreate {
	if t != nil {
		asc.SetUpdatedAt(*t)
	}
	return asc
}

// SetAppName sets the "app_name" field.
func (asc *AppSettingCreate) SetAppName(s string) *AppSettingCreate {
	asc.mutation.SetAppName(s)
	return asc
}

// SetNillableAppName sets the "app_name" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAppName(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAppName(*s)
	}
	return asc
}

// SetCopyright sets the "copyright" field.
func (asc *AppSettingCreate) SetCopyright(s string) *AppSettingCreate {
	asc.mutation.SetCopyright(s)
	return asc
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableCopyright(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetCopyright(*s)
	}
	return asc
}

// SetEmail sets the "email" field.
func (asc *AppSettingCreate) SetEmail(s string) *AppSettingCreate {
	asc.mutation.SetEmail(s)
	return asc
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableEmail(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetEmail(*s)
	}
	return asc
}

// SetAddress sets the "address" field.
func (asc *AppSettingCreate) SetAddress(s string) *AppSettingCreate {
	asc.mutation.SetAddress(s)
	return asc
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAddress(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAddress(*s)
	}
	return asc
}

// SetSocialTw sets the "social_tw" field.
func (asc *AppSettingCreate) SetSocialTw(s string) *AppSettingCreate {
	asc.mutation.SetSocialTw(s)
	return asc
}

// SetNillableSocialTw sets the "social_tw" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableSocialTw(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetSocialTw(*s)
	}
	return asc
}

// SetSocialFb sets the "social_fb" field.
func (asc *AppSettingCreate) SetSocialFb(s string) *AppSettingCreate {
	asc.mutation.SetSocialFb(s)
	return asc
}

// SetNillableSocialFb sets the "social_fb" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableSocialFb(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetSocialFb(*s)
	}
	return asc
}

// SetSocialIn sets the "social_in" field.
func (asc *AppSettingCreate) SetSocialIn(s string) *AppSettingCreate {
	asc.mutation.SetSocialIn(s)
	return asc
}

// SetNillableSocialIn sets the "social_in" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableSocialIn(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetSocialIn(*s)
	}
	return asc
}

// SetLogoURL sets the "logo_url" field.
func (asc *AppSettingCreate) SetLogoURL(s string) *AppSettingCreate {
	asc.mutation.SetLogoURL(s)
	return asc
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableLogoURL(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetLogoURL(*s)
	}
	return asc
}

// SetSiteURL sets the "site_url" field.
func (asc *AppSettingCreate) SetSiteURL(s string) *AppSettingCreate {
	asc.mutation.SetSiteURL(s)
	return asc
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableSiteURL(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetSiteURL(*s)
	}
	return asc
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (asc *AppSettingCreate) SetDefaultMailConnID(s string) *AppSettingCreate {
	asc.mutation.SetDefaultMailConnID(s)
	return asc
}

// SetNillableDefaultMailConnID sets the "default_mail_conn_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableDefaultMailConnID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetDefaultMailConnID(*s)
	}
	return asc
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (asc *AppSettingCreate) SetMailLayoutTemplID(s string) *AppSettingCreate {
	asc.mutation.SetMailLayoutTemplID(s)
	return asc
}

// SetNillableMailLayoutTemplID sets the "mail_layout_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableMailLayoutTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetMailLayoutTemplID(*s)
	}
	return asc
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (asc *AppSettingCreate) SetWsapceInviteTemplID(s string) *AppSettingCreate {
	asc.mutation.SetWsapceInviteTemplID(s)
	return asc
}

// SetNillableWsapceInviteTemplID sets the "wsapce_invite_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableWsapceInviteTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetWsapceInviteTemplID(*s)
	}
	return asc
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (asc *AppSettingCreate) SetWsapceSuccessTemplID(s string) *AppSettingCreate {
	asc.mutation.SetWsapceSuccessTemplID(s)
	return asc
}

// SetNillableWsapceSuccessTemplID sets the "wsapce_success_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableWsapceSuccessTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetWsapceSuccessTemplID(*s)
	}
	return asc
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (asc *AppSettingCreate) SetAuthFpTemplID(s string) *AppSettingCreate {
	asc.mutation.SetAuthFpTemplID(s)
	return asc
}

// SetNillableAuthFpTemplID sets the "auth_fp_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAuthFpTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAuthFpTemplID(*s)
	}
	return asc
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (asc *AppSettingCreate) SetAuthWelcomeEmailTemplID(s string) *AppSettingCreate {
	asc.mutation.SetAuthWelcomeEmailTemplID(s)
	return asc
}

// SetNillableAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAuthWelcomeEmailTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAuthWelcomeEmailTemplID(*s)
	}
	return asc
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (asc *AppSettingCreate) SetAuthVerificationTemplID(s string) *AppSettingCreate {
	asc.mutation.SetAuthVerificationTemplID(s)
	return asc
}

// SetNillableAuthVerificationTemplID sets the "auth_verification_templ_id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAuthVerificationTemplID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAuthVerificationTemplID(*s)
	}
	return asc
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (asc *AppSettingCreate) SetAuthEmailVerify(s string) *AppSettingCreate {
	asc.mutation.SetAuthEmailVerify(s)
	return asc
}

// SetNillableAuthEmailVerify sets the "auth_email_verify" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableAuthEmailVerify(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetAuthEmailVerify(*s)
	}
	return asc
}

// SetID sets the "id" field.
func (asc *AppSettingCreate) SetID(s string) *AppSettingCreate {
	asc.mutation.SetID(s)
	return asc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (asc *AppSettingCreate) SetNillableID(s *string) *AppSettingCreate {
	if s != nil {
		asc.SetID(*s)
	}
	return asc
}

// Mutation returns the AppSettingMutation object of the builder.
func (asc *AppSettingCreate) Mutation() *AppSettingMutation {
	return asc.mutation
}

// Save creates the AppSetting in the database.
func (asc *AppSettingCreate) Save(ctx context.Context) (*AppSetting, error) {
	asc.defaults()
	return withHooks(ctx, asc.sqlSave, asc.mutation, asc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (asc *AppSettingCreate) SaveX(ctx context.Context) *AppSetting {
	v, err := asc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asc *AppSettingCreate) Exec(ctx context.Context) error {
	_, err := asc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asc *AppSettingCreate) ExecX(ctx context.Context) {
	if err := asc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (asc *AppSettingCreate) defaults() {
	if _, ok := asc.mutation.CreatedAt(); !ok {
		v := appsetting.DefaultCreatedAt()
		asc.mutation.SetCreatedAt(v)
	}
	if _, ok := asc.mutation.UpdatedAt(); !ok {
		v := appsetting.DefaultUpdatedAt()
		asc.mutation.SetUpdatedAt(v)
	}
	if _, ok := asc.mutation.ID(); !ok {
		v := appsetting.DefaultID()
		asc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asc *AppSettingCreate) check() error {
	return nil
}

func (asc *AppSettingCreate) sqlSave(ctx context.Context) (*AppSetting, error) {
	if err := asc.check(); err != nil {
		return nil, err
	}
	_node, _spec := asc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppSetting.ID type: %T", _spec.ID.Value)
		}
	}
	asc.mutation.id = &_node.ID
	asc.mutation.done = true
	return _node, nil
}

func (asc *AppSettingCreate) createSpec() (*AppSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &AppSetting{config: asc.config}
		_spec = sqlgraph.NewCreateSpec(appsetting.Table, sqlgraph.NewFieldSpec(appsetting.FieldID, field.TypeString))
	)
	_spec.OnConflict = asc.conflict
	if id, ok := asc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asc.mutation.CreatedAt(); ok {
		_spec.SetField(appsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := asc.mutation.UpdatedAt(); ok {
		_spec.SetField(appsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := asc.mutation.AppName(); ok {
		_spec.SetField(appsetting.FieldAppName, field.TypeString, value)
		_node.AppName = value
	}
	if value, ok := asc.mutation.Copyright(); ok {
		_spec.SetField(appsetting.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := asc.mutation.Email(); ok {
		_spec.SetField(appsetting.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := asc.mutation.Address(); ok {
		_spec.SetField(appsetting.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := asc.mutation.SocialTw(); ok {
		_spec.SetField(appsetting.FieldSocialTw, field.TypeString, value)
		_node.SocialTw = value
	}
	if value, ok := asc.mutation.SocialFb(); ok {
		_spec.SetField(appsetting.FieldSocialFb, field.TypeString, value)
		_node.SocialFb = value
	}
	if value, ok := asc.mutation.SocialIn(); ok {
		_spec.SetField(appsetting.FieldSocialIn, field.TypeString, value)
		_node.SocialIn = value
	}
	if value, ok := asc.mutation.LogoURL(); ok {
		_spec.SetField(appsetting.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := asc.mutation.SiteURL(); ok {
		_spec.SetField(appsetting.FieldSiteURL, field.TypeString, value)
		_node.SiteURL = value
	}
	if value, ok := asc.mutation.DefaultMailConnID(); ok {
		_spec.SetField(appsetting.FieldDefaultMailConnID, field.TypeString, value)
		_node.DefaultMailConnID = value
	}
	if value, ok := asc.mutation.MailLayoutTemplID(); ok {
		_spec.SetField(appsetting.FieldMailLayoutTemplID, field.TypeString, value)
		_node.MailLayoutTemplID = value
	}
	if value, ok := asc.mutation.WsapceInviteTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceInviteTemplID, field.TypeString, value)
		_node.WsapceInviteTemplID = value
	}
	if value, ok := asc.mutation.WsapceSuccessTemplID(); ok {
		_spec.SetField(appsetting.FieldWsapceSuccessTemplID, field.TypeString, value)
		_node.WsapceSuccessTemplID = value
	}
	if value, ok := asc.mutation.AuthFpTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthFpTemplID, field.TypeString, value)
		_node.AuthFpTemplID = value
	}
	if value, ok := asc.mutation.AuthWelcomeEmailTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthWelcomeEmailTemplID, field.TypeString, value)
		_node.AuthWelcomeEmailTemplID = value
	}
	if value, ok := asc.mutation.AuthVerificationTemplID(); ok {
		_spec.SetField(appsetting.FieldAuthVerificationTemplID, field.TypeString, value)
		_node.AuthVerificationTemplID = value
	}
	if value, ok := asc.mutation.AuthEmailVerify(); ok {
		_spec.SetField(appsetting.FieldAuthEmailVerify, field.TypeString, value)
		_node.AuthEmailVerify = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSetting.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (asc *AppSettingCreate) OnConflict(opts ...sql.ConflictOption) *AppSettingUpsertOne {
	asc.conflict = opts
	return &AppSettingUpsertOne{
		create: asc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (asc *AppSettingCreate) OnConflictColumns(columns ...string) *AppSettingUpsertOne {
	asc.conflict = append(asc.conflict, sql.ConflictColumns(columns...))
	return &AppSettingUpsertOne{
		create: asc,
	}
}

type (
	// AppSettingUpsertOne is the builder for "upsert"-ing
	//  one AppSetting node.
	AppSettingUpsertOne struct {
		create *AppSettingCreate
	}

	// AppSettingUpsert is the "OnConflict" setter.
	AppSettingUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSettingUpsert) SetUpdatedAt(v time.Time) *AppSettingUpsert {
	u.Set(appsetting.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateUpdatedAt() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppSettingUpsert) ClearUpdatedAt() *AppSettingUpsert {
	u.SetNull(appsetting.FieldUpdatedAt)
	return u
}

// SetAppName sets the "app_name" field.
func (u *AppSettingUpsert) SetAppName(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAppName, v)
	return u
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAppName() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAppName)
	return u
}

// ClearAppName clears the value of the "app_name" field.
func (u *AppSettingUpsert) ClearAppName() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAppName)
	return u
}

// SetCopyright sets the "copyright" field.
func (u *AppSettingUpsert) SetCopyright(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldCopyright, v)
	return u
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateCopyright() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldCopyright)
	return u
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppSettingUpsert) ClearCopyright() *AppSettingUpsert {
	u.SetNull(appsetting.FieldCopyright)
	return u
}

// SetEmail sets the "email" field.
func (u *AppSettingUpsert) SetEmail(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateEmail() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *AppSettingUpsert) ClearEmail() *AppSettingUpsert {
	u.SetNull(appsetting.FieldEmail)
	return u
}

// SetAddress sets the "address" field.
func (u *AppSettingUpsert) SetAddress(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAddress() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *AppSettingUpsert) ClearAddress() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAddress)
	return u
}

// SetSocialTw sets the "social_tw" field.
func (u *AppSettingUpsert) SetSocialTw(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldSocialTw, v)
	return u
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateSocialTw() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldSocialTw)
	return u
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppSettingUpsert) ClearSocialTw() *AppSettingUpsert {
	u.SetNull(appsetting.FieldSocialTw)
	return u
}

// SetSocialFb sets the "social_fb" field.
func (u *AppSettingUpsert) SetSocialFb(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldSocialFb, v)
	return u
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateSocialFb() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldSocialFb)
	return u
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppSettingUpsert) ClearSocialFb() *AppSettingUpsert {
	u.SetNull(appsetting.FieldSocialFb)
	return u
}

// SetSocialIn sets the "social_in" field.
func (u *AppSettingUpsert) SetSocialIn(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldSocialIn, v)
	return u
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateSocialIn() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldSocialIn)
	return u
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppSettingUpsert) ClearSocialIn() *AppSettingUpsert {
	u.SetNull(appsetting.FieldSocialIn)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *AppSettingUpsert) SetLogoURL(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateLogoURL() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppSettingUpsert) ClearLogoURL() *AppSettingUpsert {
	u.SetNull(appsetting.FieldLogoURL)
	return u
}

// SetSiteURL sets the "site_url" field.
func (u *AppSettingUpsert) SetSiteURL(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldSiteURL, v)
	return u
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateSiteURL() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldSiteURL)
	return u
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppSettingUpsert) ClearSiteURL() *AppSettingUpsert {
	u.SetNull(appsetting.FieldSiteURL)
	return u
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppSettingUpsert) SetDefaultMailConnID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldDefaultMailConnID, v)
	return u
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateDefaultMailConnID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldDefaultMailConnID)
	return u
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppSettingUpsert) ClearDefaultMailConnID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldDefaultMailConnID)
	return u
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppSettingUpsert) SetMailLayoutTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldMailLayoutTemplID, v)
	return u
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateMailLayoutTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldMailLayoutTemplID)
	return u
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppSettingUpsert) ClearMailLayoutTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldMailLayoutTemplID)
	return u
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsert) SetWsapceInviteTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldWsapceInviteTemplID, v)
	return u
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateWsapceInviteTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldWsapceInviteTemplID)
	return u
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsert) ClearWsapceInviteTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldWsapceInviteTemplID)
	return u
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppSettingUpsert) SetWsapceSuccessTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldWsapceSuccessTemplID, v)
	return u
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateWsapceSuccessTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldWsapceSuccessTemplID)
	return u
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppSettingUpsert) ClearWsapceSuccessTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldWsapceSuccessTemplID)
	return u
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppSettingUpsert) SetAuthFpTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAuthFpTemplID, v)
	return u
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAuthFpTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAuthFpTemplID)
	return u
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppSettingUpsert) ClearAuthFpTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAuthFpTemplID)
	return u
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsert) SetAuthWelcomeEmailTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAuthWelcomeEmailTemplID, v)
	return u
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAuthWelcomeEmailTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAuthWelcomeEmailTemplID)
	return u
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsert) ClearAuthWelcomeEmailTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAuthWelcomeEmailTemplID)
	return u
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppSettingUpsert) SetAuthVerificationTemplID(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAuthVerificationTemplID, v)
	return u
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAuthVerificationTemplID() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAuthVerificationTemplID)
	return u
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppSettingUpsert) ClearAuthVerificationTemplID() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAuthVerificationTemplID)
	return u
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppSettingUpsert) SetAuthEmailVerify(v string) *AppSettingUpsert {
	u.Set(appsetting.FieldAuthEmailVerify, v)
	return u
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppSettingUpsert) UpdateAuthEmailVerify() *AppSettingUpsert {
	u.SetExcluded(appsetting.FieldAuthEmailVerify)
	return u
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppSettingUpsert) ClearAuthEmailVerify() *AppSettingUpsert {
	u.SetNull(appsetting.FieldAuthEmailVerify)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSettingUpsertOne) UpdateNewValues() *AppSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appsetting.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appsetting.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppSettingUpsertOne) Ignore() *AppSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSettingUpsertOne) DoNothing() *AppSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSettingCreate.OnConflict
// documentation for more info.
func (u *AppSettingUpsertOne) Update(set func(*AppSettingUpsert)) *AppSettingUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSettingUpsertOne) SetUpdatedAt(v time.Time) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateUpdatedAt() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppSettingUpsertOne) ClearUpdatedAt() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppName sets the "app_name" field.
func (u *AppSettingUpsertOne) SetAppName(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAppName() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAppName()
	})
}

// ClearAppName clears the value of the "app_name" field.
func (u *AppSettingUpsertOne) ClearAppName() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAppName()
	})
}

// SetCopyright sets the "copyright" field.
func (u *AppSettingUpsertOne) SetCopyright(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateCopyright() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateCopyright()
	})
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppSettingUpsertOne) ClearCopyright() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearCopyright()
	})
}

// SetEmail sets the "email" field.
func (u *AppSettingUpsertOne) SetEmail(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateEmail() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AppSettingUpsertOne) ClearEmail() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearEmail()
	})
}

// SetAddress sets the "address" field.
func (u *AppSettingUpsertOne) SetAddress(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAddress() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AppSettingUpsertOne) ClearAddress() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAddress()
	})
}

// SetSocialTw sets the "social_tw" field.
func (u *AppSettingUpsertOne) SetSocialTw(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialTw(v)
	})
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateSocialTw() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialTw()
	})
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppSettingUpsertOne) ClearSocialTw() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialTw()
	})
}

// SetSocialFb sets the "social_fb" field.
func (u *AppSettingUpsertOne) SetSocialFb(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialFb(v)
	})
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateSocialFb() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialFb()
	})
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppSettingUpsertOne) ClearSocialFb() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialFb()
	})
}

// SetSocialIn sets the "social_in" field.
func (u *AppSettingUpsertOne) SetSocialIn(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialIn(v)
	})
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateSocialIn() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialIn()
	})
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppSettingUpsertOne) ClearSocialIn() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialIn()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *AppSettingUpsertOne) SetLogoURL(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateLogoURL() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppSettingUpsertOne) ClearLogoURL() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearLogoURL()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *AppSettingUpsertOne) SetSiteURL(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateSiteURL() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSiteURL()
	})
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppSettingUpsertOne) ClearSiteURL() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSiteURL()
	})
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppSettingUpsertOne) SetDefaultMailConnID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetDefaultMailConnID(v)
	})
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateDefaultMailConnID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateDefaultMailConnID()
	})
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppSettingUpsertOne) ClearDefaultMailConnID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearDefaultMailConnID()
	})
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppSettingUpsertOne) SetMailLayoutTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetMailLayoutTemplID(v)
	})
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateMailLayoutTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateMailLayoutTemplID()
	})
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppSettingUpsertOne) ClearMailLayoutTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearMailLayoutTemplID()
	})
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsertOne) SetWsapceInviteTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetWsapceInviteTemplID(v)
	})
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateWsapceInviteTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateWsapceInviteTemplID()
	})
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsertOne) ClearWsapceInviteTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearWsapceInviteTemplID()
	})
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppSettingUpsertOne) SetWsapceSuccessTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetWsapceSuccessTemplID(v)
	})
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateWsapceSuccessTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateWsapceSuccessTemplID()
	})
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppSettingUpsertOne) ClearWsapceSuccessTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearWsapceSuccessTemplID()
	})
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppSettingUpsertOne) SetAuthFpTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthFpTemplID(v)
	})
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAuthFpTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthFpTemplID()
	})
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppSettingUpsertOne) ClearAuthFpTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthFpTemplID()
	})
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsertOne) SetAuthWelcomeEmailTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthWelcomeEmailTemplID(v)
	})
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAuthWelcomeEmailTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthWelcomeEmailTemplID()
	})
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsertOne) ClearAuthWelcomeEmailTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthWelcomeEmailTemplID()
	})
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppSettingUpsertOne) SetAuthVerificationTemplID(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthVerificationTemplID(v)
	})
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAuthVerificationTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthVerificationTemplID()
	})
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppSettingUpsertOne) ClearAuthVerificationTemplID() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthVerificationTemplID()
	})
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppSettingUpsertOne) SetAuthEmailVerify(v string) *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthEmailVerify(v)
	})
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppSettingUpsertOne) UpdateAuthEmailVerify() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthEmailVerify()
	})
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppSettingUpsertOne) ClearAuthEmailVerify() *AppSettingUpsertOne {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthEmailVerify()
	})
}

// Exec executes the query.
func (u *AppSettingUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppSettingCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSettingUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppSettingUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppSettingUpsertOne.ID is not supported by MySQL driver. Use AppSettingUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppSettingUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppSettingCreateBulk is the builder for creating many AppSetting entities in bulk.
type AppSettingCreateBulk struct {
	config
	err      error
	builders []*AppSettingCreate
	conflict []sql.ConflictOption
}

// Save creates the AppSetting entities in the database.
func (ascb *AppSettingCreateBulk) Save(ctx context.Context) ([]*AppSetting, error) {
	if ascb.err != nil {
		return nil, ascb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ascb.builders))
	nodes := make([]*AppSetting, len(ascb.builders))
	mutators := make([]Mutator, len(ascb.builders))
	for i := range ascb.builders {
		func(i int, root context.Context) {
			builder := ascb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ascb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ascb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ascb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ascb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ascb *AppSettingCreateBulk) SaveX(ctx context.Context) []*AppSetting {
	v, err := ascb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ascb *AppSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := ascb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ascb *AppSettingCreateBulk) ExecX(ctx context.Context) {
	if err := ascb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppSetting.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppSettingUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ascb *AppSettingCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppSettingUpsertBulk {
	ascb.conflict = opts
	return &AppSettingUpsertBulk{
		create: ascb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ascb *AppSettingCreateBulk) OnConflictColumns(columns ...string) *AppSettingUpsertBulk {
	ascb.conflict = append(ascb.conflict, sql.ConflictColumns(columns...))
	return &AppSettingUpsertBulk{
		create: ascb,
	}
}

// AppSettingUpsertBulk is the builder for "upsert"-ing
// a bulk of AppSetting nodes.
type AppSettingUpsertBulk struct {
	create *AppSettingCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appsetting.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppSettingUpsertBulk) UpdateNewValues() *AppSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appsetting.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appsetting.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppSetting.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppSettingUpsertBulk) Ignore() *AppSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppSettingUpsertBulk) DoNothing() *AppSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppSettingCreateBulk.OnConflict
// documentation for more info.
func (u *AppSettingUpsertBulk) Update(set func(*AppSettingUpsert)) *AppSettingUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppSettingUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppSettingUpsertBulk) SetUpdatedAt(v time.Time) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateUpdatedAt() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppSettingUpsertBulk) ClearUpdatedAt() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppName sets the "app_name" field.
func (u *AppSettingUpsertBulk) SetAppName(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAppName(v)
	})
}

// UpdateAppName sets the "app_name" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAppName() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAppName()
	})
}

// ClearAppName clears the value of the "app_name" field.
func (u *AppSettingUpsertBulk) ClearAppName() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAppName()
	})
}

// SetCopyright sets the "copyright" field.
func (u *AppSettingUpsertBulk) SetCopyright(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateCopyright() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateCopyright()
	})
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppSettingUpsertBulk) ClearCopyright() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearCopyright()
	})
}

// SetEmail sets the "email" field.
func (u *AppSettingUpsertBulk) SetEmail(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateEmail() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AppSettingUpsertBulk) ClearEmail() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearEmail()
	})
}

// SetAddress sets the "address" field.
func (u *AppSettingUpsertBulk) SetAddress(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAddress() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AppSettingUpsertBulk) ClearAddress() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAddress()
	})
}

// SetSocialTw sets the "social_tw" field.
func (u *AppSettingUpsertBulk) SetSocialTw(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialTw(v)
	})
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateSocialTw() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialTw()
	})
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppSettingUpsertBulk) ClearSocialTw() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialTw()
	})
}

// SetSocialFb sets the "social_fb" field.
func (u *AppSettingUpsertBulk) SetSocialFb(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialFb(v)
	})
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateSocialFb() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialFb()
	})
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppSettingUpsertBulk) ClearSocialFb() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialFb()
	})
}

// SetSocialIn sets the "social_in" field.
func (u *AppSettingUpsertBulk) SetSocialIn(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSocialIn(v)
	})
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateSocialIn() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSocialIn()
	})
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppSettingUpsertBulk) ClearSocialIn() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSocialIn()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *AppSettingUpsertBulk) SetLogoURL(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateLogoURL() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppSettingUpsertBulk) ClearLogoURL() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearLogoURL()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *AppSettingUpsertBulk) SetSiteURL(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateSiteURL() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateSiteURL()
	})
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppSettingUpsertBulk) ClearSiteURL() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearSiteURL()
	})
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppSettingUpsertBulk) SetDefaultMailConnID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetDefaultMailConnID(v)
	})
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateDefaultMailConnID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateDefaultMailConnID()
	})
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppSettingUpsertBulk) ClearDefaultMailConnID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearDefaultMailConnID()
	})
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppSettingUpsertBulk) SetMailLayoutTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetMailLayoutTemplID(v)
	})
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateMailLayoutTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateMailLayoutTemplID()
	})
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppSettingUpsertBulk) ClearMailLayoutTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearMailLayoutTemplID()
	})
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsertBulk) SetWsapceInviteTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetWsapceInviteTemplID(v)
	})
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateWsapceInviteTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateWsapceInviteTemplID()
	})
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppSettingUpsertBulk) ClearWsapceInviteTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearWsapceInviteTemplID()
	})
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppSettingUpsertBulk) SetWsapceSuccessTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetWsapceSuccessTemplID(v)
	})
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateWsapceSuccessTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateWsapceSuccessTemplID()
	})
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppSettingUpsertBulk) ClearWsapceSuccessTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearWsapceSuccessTemplID()
	})
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppSettingUpsertBulk) SetAuthFpTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthFpTemplID(v)
	})
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAuthFpTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthFpTemplID()
	})
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppSettingUpsertBulk) ClearAuthFpTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthFpTemplID()
	})
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsertBulk) SetAuthWelcomeEmailTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthWelcomeEmailTemplID(v)
	})
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAuthWelcomeEmailTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthWelcomeEmailTemplID()
	})
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppSettingUpsertBulk) ClearAuthWelcomeEmailTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthWelcomeEmailTemplID()
	})
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppSettingUpsertBulk) SetAuthVerificationTemplID(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthVerificationTemplID(v)
	})
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAuthVerificationTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthVerificationTemplID()
	})
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppSettingUpsertBulk) ClearAuthVerificationTemplID() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthVerificationTemplID()
	})
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppSettingUpsertBulk) SetAuthEmailVerify(v string) *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.SetAuthEmailVerify(v)
	})
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppSettingUpsertBulk) UpdateAuthEmailVerify() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.UpdateAuthEmailVerify()
	})
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppSettingUpsertBulk) ClearAuthEmailVerify() *AppSettingUpsertBulk {
	return u.Update(func(s *AppSettingUpsert) {
		s.ClearAuthEmailVerify()
	})
}

// Exec executes the query.
func (u *AppSettingUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppSettingCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppSettingCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppSettingUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
