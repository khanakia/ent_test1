// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/mailconnection"
	"saas/gen/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MailConnectionUpdate is the builder for updating MailConnection entities.
type MailConnectionUpdate struct {
	config
	hooks     []Hook
	mutation  *MailConnectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MailConnectionUpdate builder.
func (mcu *MailConnectionUpdate) Where(ps ...predicate.MailConnection) *MailConnectionUpdate {
	mcu.mutation.Where(ps...)
	return mcu
}

// SetName sets the "name" field.
func (mcu *MailConnectionUpdate) SetName(s string) *MailConnectionUpdate {
	mcu.mutation.SetName(s)
	return mcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillableName(s *string) *MailConnectionUpdate {
	if s != nil {
		mcu.SetName(*s)
	}
	return mcu
}

// ClearName clears the value of the "name" field.
func (mcu *MailConnectionUpdate) ClearName() *MailConnectionUpdate {
	mcu.mutation.ClearName()
	return mcu
}

// SetHost sets the "host" field.
func (mcu *MailConnectionUpdate) SetHost(s string) *MailConnectionUpdate {
	mcu.mutation.SetHost(s)
	return mcu
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillableHost(s *string) *MailConnectionUpdate {
	if s != nil {
		mcu.SetHost(*s)
	}
	return mcu
}

// ClearHost clears the value of the "host" field.
func (mcu *MailConnectionUpdate) ClearHost() *MailConnectionUpdate {
	mcu.mutation.ClearHost()
	return mcu
}

// SetPort sets the "port" field.
func (mcu *MailConnectionUpdate) SetPort(s string) *MailConnectionUpdate {
	mcu.mutation.SetPort(s)
	return mcu
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillablePort(s *string) *MailConnectionUpdate {
	if s != nil {
		mcu.SetPort(*s)
	}
	return mcu
}

// ClearPort clears the value of the "port" field.
func (mcu *MailConnectionUpdate) ClearPort() *MailConnectionUpdate {
	mcu.mutation.ClearPort()
	return mcu
}

// SetUsername sets the "username" field.
func (mcu *MailConnectionUpdate) SetUsername(s string) *MailConnectionUpdate {
	mcu.mutation.SetUsername(s)
	return mcu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillableUsername(s *string) *MailConnectionUpdate {
	if s != nil {
		mcu.SetUsername(*s)
	}
	return mcu
}

// ClearUsername clears the value of the "username" field.
func (mcu *MailConnectionUpdate) ClearUsername() *MailConnectionUpdate {
	mcu.mutation.ClearUsername()
	return mcu
}

// SetPassword sets the "password" field.
func (mcu *MailConnectionUpdate) SetPassword(s string) *MailConnectionUpdate {
	mcu.mutation.SetPassword(s)
	return mcu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillablePassword(s *string) *MailConnectionUpdate {
	if s != nil {
		mcu.SetPassword(*s)
	}
	return mcu
}

// ClearPassword clears the value of the "password" field.
func (mcu *MailConnectionUpdate) ClearPassword() *MailConnectionUpdate {
	mcu.mutation.ClearPassword()
	return mcu
}

// SetStatus sets the "status" field.
func (mcu *MailConnectionUpdate) SetStatus(b bool) *MailConnectionUpdate {
	mcu.mutation.SetStatus(b)
	return mcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcu *MailConnectionUpdate) SetNillableStatus(b *bool) *MailConnectionUpdate {
	if b != nil {
		mcu.SetStatus(*b)
	}
	return mcu
}

// ClearStatus clears the value of the "status" field.
func (mcu *MailConnectionUpdate) ClearStatus() *MailConnectionUpdate {
	mcu.mutation.ClearStatus()
	return mcu
}

// Mutation returns the MailConnectionMutation object of the builder.
func (mcu *MailConnectionUpdate) Mutation() *MailConnectionMutation {
	return mcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mcu *MailConnectionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mcu.sqlSave, mcu.mutation, mcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcu *MailConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := mcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mcu *MailConnectionUpdate) Exec(ctx context.Context) error {
	_, err := mcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcu *MailConnectionUpdate) ExecX(ctx context.Context) {
	if err := mcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcu *MailConnectionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MailConnectionUpdate {
	mcu.modifiers = append(mcu.modifiers, modifiers...)
	return mcu
}

func (mcu *MailConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(mailconnection.Table, mailconnection.Columns, sqlgraph.NewFieldSpec(mailconnection.FieldID, field.TypeInt))
	if ps := mcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcu.mutation.Name(); ok {
		_spec.SetField(mailconnection.FieldName, field.TypeString, value)
	}
	if mcu.mutation.NameCleared() {
		_spec.ClearField(mailconnection.FieldName, field.TypeString)
	}
	if value, ok := mcu.mutation.Host(); ok {
		_spec.SetField(mailconnection.FieldHost, field.TypeString, value)
	}
	if mcu.mutation.HostCleared() {
		_spec.ClearField(mailconnection.FieldHost, field.TypeString)
	}
	if value, ok := mcu.mutation.Port(); ok {
		_spec.SetField(mailconnection.FieldPort, field.TypeString, value)
	}
	if mcu.mutation.PortCleared() {
		_spec.ClearField(mailconnection.FieldPort, field.TypeString)
	}
	if value, ok := mcu.mutation.Username(); ok {
		_spec.SetField(mailconnection.FieldUsername, field.TypeString, value)
	}
	if mcu.mutation.UsernameCleared() {
		_spec.ClearField(mailconnection.FieldUsername, field.TypeString)
	}
	if value, ok := mcu.mutation.Password(); ok {
		_spec.SetField(mailconnection.FieldPassword, field.TypeString, value)
	}
	if mcu.mutation.PasswordCleared() {
		_spec.ClearField(mailconnection.FieldPassword, field.TypeString)
	}
	if value, ok := mcu.mutation.Status(); ok {
		_spec.SetField(mailconnection.FieldStatus, field.TypeBool, value)
	}
	if mcu.mutation.StatusCleared() {
		_spec.ClearField(mailconnection.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(mcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mcu.mutation.done = true
	return n, nil
}

// MailConnectionUpdateOne is the builder for updating a single MailConnection entity.
type MailConnectionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MailConnectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (mcuo *MailConnectionUpdateOne) SetName(s string) *MailConnectionUpdateOne {
	mcuo.mutation.SetName(s)
	return mcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillableName(s *string) *MailConnectionUpdateOne {
	if s != nil {
		mcuo.SetName(*s)
	}
	return mcuo
}

// ClearName clears the value of the "name" field.
func (mcuo *MailConnectionUpdateOne) ClearName() *MailConnectionUpdateOne {
	mcuo.mutation.ClearName()
	return mcuo
}

// SetHost sets the "host" field.
func (mcuo *MailConnectionUpdateOne) SetHost(s string) *MailConnectionUpdateOne {
	mcuo.mutation.SetHost(s)
	return mcuo
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillableHost(s *string) *MailConnectionUpdateOne {
	if s != nil {
		mcuo.SetHost(*s)
	}
	return mcuo
}

// ClearHost clears the value of the "host" field.
func (mcuo *MailConnectionUpdateOne) ClearHost() *MailConnectionUpdateOne {
	mcuo.mutation.ClearHost()
	return mcuo
}

// SetPort sets the "port" field.
func (mcuo *MailConnectionUpdateOne) SetPort(s string) *MailConnectionUpdateOne {
	mcuo.mutation.SetPort(s)
	return mcuo
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillablePort(s *string) *MailConnectionUpdateOne {
	if s != nil {
		mcuo.SetPort(*s)
	}
	return mcuo
}

// ClearPort clears the value of the "port" field.
func (mcuo *MailConnectionUpdateOne) ClearPort() *MailConnectionUpdateOne {
	mcuo.mutation.ClearPort()
	return mcuo
}

// SetUsername sets the "username" field.
func (mcuo *MailConnectionUpdateOne) SetUsername(s string) *MailConnectionUpdateOne {
	mcuo.mutation.SetUsername(s)
	return mcuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillableUsername(s *string) *MailConnectionUpdateOne {
	if s != nil {
		mcuo.SetUsername(*s)
	}
	return mcuo
}

// ClearUsername clears the value of the "username" field.
func (mcuo *MailConnectionUpdateOne) ClearUsername() *MailConnectionUpdateOne {
	mcuo.mutation.ClearUsername()
	return mcuo
}

// SetPassword sets the "password" field.
func (mcuo *MailConnectionUpdateOne) SetPassword(s string) *MailConnectionUpdateOne {
	mcuo.mutation.SetPassword(s)
	return mcuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillablePassword(s *string) *MailConnectionUpdateOne {
	if s != nil {
		mcuo.SetPassword(*s)
	}
	return mcuo
}

// ClearPassword clears the value of the "password" field.
func (mcuo *MailConnectionUpdateOne) ClearPassword() *MailConnectionUpdateOne {
	mcuo.mutation.ClearPassword()
	return mcuo
}

// SetStatus sets the "status" field.
func (mcuo *MailConnectionUpdateOne) SetStatus(b bool) *MailConnectionUpdateOne {
	mcuo.mutation.SetStatus(b)
	return mcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcuo *MailConnectionUpdateOne) SetNillableStatus(b *bool) *MailConnectionUpdateOne {
	if b != nil {
		mcuo.SetStatus(*b)
	}
	return mcuo
}

// ClearStatus clears the value of the "status" field.
func (mcuo *MailConnectionUpdateOne) ClearStatus() *MailConnectionUpdateOne {
	mcuo.mutation.ClearStatus()
	return mcuo
}

// Mutation returns the MailConnectionMutation object of the builder.
func (mcuo *MailConnectionUpdateOne) Mutation() *MailConnectionMutation {
	return mcuo.mutation
}

// Where appends a list predicates to the MailConnectionUpdate builder.
func (mcuo *MailConnectionUpdateOne) Where(ps ...predicate.MailConnection) *MailConnectionUpdateOne {
	mcuo.mutation.Where(ps...)
	return mcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mcuo *MailConnectionUpdateOne) Select(field string, fields ...string) *MailConnectionUpdateOne {
	mcuo.fields = append([]string{field}, fields...)
	return mcuo
}

// Save executes the query and returns the updated MailConnection entity.
func (mcuo *MailConnectionUpdateOne) Save(ctx context.Context) (*MailConnection, error) {
	return withHooks(ctx, mcuo.sqlSave, mcuo.mutation, mcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mcuo *MailConnectionUpdateOne) SaveX(ctx context.Context) *MailConnection {
	node, err := mcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mcuo *MailConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := mcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcuo *MailConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := mcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mcuo *MailConnectionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MailConnectionUpdateOne {
	mcuo.modifiers = append(mcuo.modifiers, modifiers...)
	return mcuo
}

func (mcuo *MailConnectionUpdateOne) sqlSave(ctx context.Context) (_node *MailConnection, err error) {
	_spec := sqlgraph.NewUpdateSpec(mailconnection.Table, mailconnection.Columns, sqlgraph.NewFieldSpec(mailconnection.FieldID, field.TypeInt))
	id, ok := mcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MailConnection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mailconnection.FieldID)
		for _, f := range fields {
			if !mailconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != mailconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mcuo.mutation.Name(); ok {
		_spec.SetField(mailconnection.FieldName, field.TypeString, value)
	}
	if mcuo.mutation.NameCleared() {
		_spec.ClearField(mailconnection.FieldName, field.TypeString)
	}
	if value, ok := mcuo.mutation.Host(); ok {
		_spec.SetField(mailconnection.FieldHost, field.TypeString, value)
	}
	if mcuo.mutation.HostCleared() {
		_spec.ClearField(mailconnection.FieldHost, field.TypeString)
	}
	if value, ok := mcuo.mutation.Port(); ok {
		_spec.SetField(mailconnection.FieldPort, field.TypeString, value)
	}
	if mcuo.mutation.PortCleared() {
		_spec.ClearField(mailconnection.FieldPort, field.TypeString)
	}
	if value, ok := mcuo.mutation.Username(); ok {
		_spec.SetField(mailconnection.FieldUsername, field.TypeString, value)
	}
	if mcuo.mutation.UsernameCleared() {
		_spec.ClearField(mailconnection.FieldUsername, field.TypeString)
	}
	if value, ok := mcuo.mutation.Password(); ok {
		_spec.SetField(mailconnection.FieldPassword, field.TypeString, value)
	}
	if mcuo.mutation.PasswordCleared() {
		_spec.ClearField(mailconnection.FieldPassword, field.TypeString)
	}
	if value, ok := mcuo.mutation.Status(); ok {
		_spec.SetField(mailconnection.FieldStatus, field.TypeBool, value)
	}
	if mcuo.mutation.StatusCleared() {
		_spec.ClearField(mailconnection.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(mcuo.modifiers...)
	_node = &MailConnection{config: mcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{mailconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mcuo.mutation.done = true
	return _node, nil
}
