// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceUserCreate is the builder for creating a WorkspaceUser entity.
type WorkspaceUserCreate struct {
	config
	mutation *WorkspaceUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wuc *WorkspaceUserCreate) SetCreatedAt(t time.Time) *WorkspaceUserCreate {
	wuc.mutation.SetCreatedAt(t)
	return wuc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wuc *WorkspaceUserCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceUserCreate {
	if t != nil {
		wuc.SetCreatedAt(*t)
	}
	return wuc
}

// SetUpdatedAt sets the "updated_at" field.
func (wuc *WorkspaceUserCreate) SetUpdatedAt(t time.Time) *WorkspaceUserCreate {
	wuc.mutation.SetUpdatedAt(t)
	return wuc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wuc *WorkspaceUserCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceUserCreate {
	if t != nil {
		wuc.SetUpdatedAt(*t)
	}
	return wuc
}

// SetWorkspaceID sets the "workspace_id" field.
func (wuc *WorkspaceUserCreate) SetWorkspaceID(s string) *WorkspaceUserCreate {
	wuc.mutation.SetWorkspaceID(s)
	return wuc
}

// SetUserID sets the "user_id" field.
func (wuc *WorkspaceUserCreate) SetUserID(s string) *WorkspaceUserCreate {
	wuc.mutation.SetUserID(s)
	return wuc
}

// SetRole sets the "role" field.
func (wuc *WorkspaceUserCreate) SetRole(s string) *WorkspaceUserCreate {
	wuc.mutation.SetRole(s)
	return wuc
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (wuc *WorkspaceUserCreate) SetNillableRole(s *string) *WorkspaceUserCreate {
	if s != nil {
		wuc.SetRole(*s)
	}
	return wuc
}

// SetID sets the "id" field.
func (wuc *WorkspaceUserCreate) SetID(s string) *WorkspaceUserCreate {
	wuc.mutation.SetID(s)
	return wuc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wuc *WorkspaceUserCreate) SetNillableID(s *string) *WorkspaceUserCreate {
	if s != nil {
		wuc.SetID(*s)
	}
	return wuc
}

// SetUser sets the "user" edge to the User entity.
func (wuc *WorkspaceUserCreate) SetUser(u *User) *WorkspaceUserCreate {
	return wuc.SetUserID(u.ID)
}

// SetWorkspace sets the "workspace" edge to the Workspace entity.
func (wuc *WorkspaceUserCreate) SetWorkspace(w *Workspace) *WorkspaceUserCreate {
	return wuc.SetWorkspaceID(w.ID)
}

// Mutation returns the WorkspaceUserMutation object of the builder.
func (wuc *WorkspaceUserCreate) Mutation() *WorkspaceUserMutation {
	return wuc.mutation
}

// Save creates the WorkspaceUser in the database.
func (wuc *WorkspaceUserCreate) Save(ctx context.Context) (*WorkspaceUser, error) {
	wuc.defaults()
	return withHooks(ctx, wuc.sqlSave, wuc.mutation, wuc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wuc *WorkspaceUserCreate) SaveX(ctx context.Context) *WorkspaceUser {
	v, err := wuc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wuc *WorkspaceUserCreate) Exec(ctx context.Context) error {
	_, err := wuc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuc *WorkspaceUserCreate) ExecX(ctx context.Context) {
	if err := wuc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuc *WorkspaceUserCreate) defaults() {
	if _, ok := wuc.mutation.CreatedAt(); !ok {
		v := workspaceuser.DefaultCreatedAt()
		wuc.mutation.SetCreatedAt(v)
	}
	if _, ok := wuc.mutation.UpdatedAt(); !ok {
		v := workspaceuser.DefaultUpdatedAt()
		wuc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wuc.mutation.ID(); !ok {
		v := workspaceuser.DefaultID()
		wuc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wuc *WorkspaceUserCreate) check() error {
	if _, ok := wuc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "WorkspaceUser.workspace_id"`)}
	}
	if _, ok := wuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "WorkspaceUser.user_id"`)}
	}
	if _, ok := wuc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "WorkspaceUser.user"`)}
	}
	if _, ok := wuc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace", err: errors.New(`ent: missing required edge "WorkspaceUser.workspace"`)}
	}
	return nil
}

func (wuc *WorkspaceUserCreate) sqlSave(ctx context.Context) (*WorkspaceUser, error) {
	if err := wuc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wuc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wuc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WorkspaceUser.ID type: %T", _spec.ID.Value)
		}
	}
	wuc.mutation.id = &_node.ID
	wuc.mutation.done = true
	return _node, nil
}

func (wuc *WorkspaceUserCreate) createSpec() (*WorkspaceUser, *sqlgraph.CreateSpec) {
	var (
		_node = &WorkspaceUser{config: wuc.config}
		_spec = sqlgraph.NewCreateSpec(workspaceuser.Table, sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString))
	)
	_spec.OnConflict = wuc.conflict
	if id, ok := wuc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wuc.mutation.CreatedAt(); ok {
		_spec.SetField(workspaceuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wuc.mutation.UpdatedAt(); ok {
		_spec.SetField(workspaceuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wuc.mutation.Role(); ok {
		_spec.SetField(workspaceuser.FieldRole, field.TypeString, value)
		_node.Role = value
	}
	if nodes := wuc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspaceuser.UserTable,
			Columns: []string{workspaceuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wuc.mutation.WorkspaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   workspaceuser.WorkspaceTable,
			Columns: []string{workspaceuser.WorkspaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WorkspaceID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wuc *WorkspaceUserCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceUserUpsertOne {
	wuc.conflict = opts
	return &WorkspaceUserUpsertOne{
		create: wuc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wuc *WorkspaceUserCreate) OnConflictColumns(columns ...string) *WorkspaceUserUpsertOne {
	wuc.conflict = append(wuc.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUserUpsertOne{
		create: wuc,
	}
}

type (
	// WorkspaceUserUpsertOne is the builder for "upsert"-ing
	//  one WorkspaceUser node.
	WorkspaceUserUpsertOne struct {
		create *WorkspaceUserCreate
	}

	// WorkspaceUserUpsert is the "OnConflict" setter.
	WorkspaceUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUserUpsert) SetUpdatedAt(v time.Time) *WorkspaceUserUpsert {
	u.Set(workspaceuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUserUpsert) UpdateUpdatedAt() *WorkspaceUserUpsert {
	u.SetExcluded(workspaceuser.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUserUpsert) ClearUpdatedAt() *WorkspaceUserUpsert {
	u.SetNull(workspaceuser.FieldUpdatedAt)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceUserUpsert) SetWorkspaceID(v string) *WorkspaceUserUpsert {
	u.Set(workspaceuser.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsert) UpdateWorkspaceID() *WorkspaceUserUpsert {
	u.SetExcluded(workspaceuser.FieldWorkspaceID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUserUpsert) SetUserID(v string) *WorkspaceUserUpsert {
	u.Set(workspaceuser.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsert) UpdateUserID() *WorkspaceUserUpsert {
	u.SetExcluded(workspaceuser.FieldUserID)
	return u
}

// SetRole sets the "role" field.
func (u *WorkspaceUserUpsert) SetRole(v string) *WorkspaceUserUpsert {
	u.Set(workspaceuser.FieldRole, v)
	return u
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceUserUpsert) UpdateRole() *WorkspaceUserUpsert {
	u.SetExcluded(workspaceuser.FieldRole)
	return u
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceUserUpsert) ClearRole() *WorkspaceUserUpsert {
	u.SetNull(workspaceuser.FieldRole)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceUserUpsertOne) UpdateNewValues() *WorkspaceUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspaceuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(workspaceuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkspaceUserUpsertOne) Ignore() *WorkspaceUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUserUpsertOne) DoNothing() *WorkspaceUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceUserCreate.OnConflict
// documentation for more info.
func (u *WorkspaceUserUpsertOne) Update(set func(*WorkspaceUserUpsert)) *WorkspaceUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUserUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUserUpsertOne) UpdateUpdatedAt() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUserUpsertOne) ClearUpdatedAt() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceUserUpsertOne) SetWorkspaceID(v string) *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsertOne) UpdateWorkspaceID() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUserUpsertOne) SetUserID(v string) *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsertOne) UpdateUserID() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateUserID()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceUserUpsertOne) SetRole(v string) *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceUserUpsertOne) UpdateRole() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceUserUpsertOne) ClearRole() *WorkspaceUserUpsertOne {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *WorkspaceUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceUserUpsertOne.ID is not supported by MySQL driver. Use WorkspaceUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceUserCreateBulk is the builder for creating many WorkspaceUser entities in bulk.
type WorkspaceUserCreateBulk struct {
	config
	err      error
	builders []*WorkspaceUserCreate
	conflict []sql.ConflictOption
}

// Save creates the WorkspaceUser entities in the database.
func (wucb *WorkspaceUserCreateBulk) Save(ctx context.Context) ([]*WorkspaceUser, error) {
	if wucb.err != nil {
		return nil, wucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wucb.builders))
	nodes := make([]*WorkspaceUser, len(wucb.builders))
	mutators := make([]Mutator, len(wucb.builders))
	for i := range wucb.builders {
		func(i int, root context.Context) {
			builder := wucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wucb *WorkspaceUserCreateBulk) SaveX(ctx context.Context) []*WorkspaceUser {
	v, err := wucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wucb *WorkspaceUserCreateBulk) Exec(ctx context.Context) error {
	_, err := wucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wucb *WorkspaceUserCreateBulk) ExecX(ctx context.Context) {
	if err := wucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.WorkspaceUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wucb *WorkspaceUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceUserUpsertBulk {
	wucb.conflict = opts
	return &WorkspaceUserUpsertBulk{
		create: wucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wucb *WorkspaceUserCreateBulk) OnConflictColumns(columns ...string) *WorkspaceUserUpsertBulk {
	wucb.conflict = append(wucb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUserUpsertBulk{
		create: wucb,
	}
}

// WorkspaceUserUpsertBulk is the builder for "upsert"-ing
// a bulk of WorkspaceUser nodes.
type WorkspaceUserUpsertBulk struct {
	create *WorkspaceUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspaceuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceUserUpsertBulk) UpdateNewValues() *WorkspaceUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspaceuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(workspaceuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.WorkspaceUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkspaceUserUpsertBulk) Ignore() *WorkspaceUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUserUpsertBulk) DoNothing() *WorkspaceUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceUserCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceUserUpsertBulk) Update(set func(*WorkspaceUserUpsert)) *WorkspaceUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUserUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUserUpsertBulk) UpdateUpdatedAt() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUserUpsertBulk) ClearUpdatedAt() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *WorkspaceUserUpsertBulk) SetWorkspaceID(v string) *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsertBulk) UpdateWorkspaceID() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUserUpsertBulk) SetUserID(v string) *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUserUpsertBulk) UpdateUserID() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateUserID()
	})
}

// SetRole sets the "role" field.
func (u *WorkspaceUserUpsertBulk) SetRole(v string) *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.SetRole(v)
	})
}

// UpdateRole sets the "role" field to the value that was provided on create.
func (u *WorkspaceUserUpsertBulk) UpdateRole() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.UpdateRole()
	})
}

// ClearRole clears the value of the "role" field.
func (u *WorkspaceUserUpsertBulk) ClearRole() *WorkspaceUserUpsertBulk {
	return u.Update(func(s *WorkspaceUserUpsert) {
		s.ClearRole()
	})
}

// Exec executes the query.
func (u *WorkspaceUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
