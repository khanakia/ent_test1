// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/gen/ent/media"
	"saas/gen/ent/mediable"
	"saas/gen/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediableQuery is the builder for querying Mediable entities.
type MediableQuery struct {
	config
	ctx        *QueryContext
	order      []mediable.OrderOption
	inters     []Interceptor
	predicates []predicate.Mediable
	withMedia  *MediaQuery
	loadTotal  []func(context.Context, []*Mediable) error
	modifiers  []func(*sql.Selector)

	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the MediableQuery builder.
func (mq *MediableQuery) Where(ps ...predicate.Mediable) *MediableQuery {
	mq.predicates = append(mq.predicates, ps...)
	return mq
}

// Limit the number of records to be returned by this query.
func (mq *MediableQuery) Limit(limit int) *MediableQuery {
	mq.ctx.Limit = &limit
	return mq
}

// Offset to start from.
func (mq *MediableQuery) Offset(offset int) *MediableQuery {
	mq.ctx.Offset = &offset
	return mq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (mq *MediableQuery) Unique(unique bool) *MediableQuery {
	mq.ctx.Unique = &unique
	return mq
}

// Order specifies how the records should be ordered.
func (mq *MediableQuery) Order(o ...mediable.OrderOption) *MediableQuery {
	mq.order = append(mq.order, o...)
	return mq
}

// QueryMedia chains the current query on the "media" edge.
func (mq *MediableQuery) QueryMedia() *MediaQuery {
	query := (&MediaClient{config: mq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := mq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := mq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(mediable.Table, mediable.FieldID, selector),
			sqlgraph.To(media.Table, media.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, mediable.MediaTable, mediable.MediaColumn),
		)
		fromU = sqlgraph.SetNeighbors(mq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Mediable entity from the query.
// Returns a *NotFoundError when no Mediable was found.
func (mq *MediableQuery) First(ctx context.Context) (*Mediable, error) {
	nodes, err := mq.Limit(1).All(setContextOp(ctx, mq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{mediable.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mq *MediableQuery) FirstX(ctx context.Context) *Mediable {
	node, err := mq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Mediable ID from the query.
// Returns a *NotFoundError when no Mediable ID was found.
func (mq *MediableQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mq.Limit(1).IDs(setContextOp(ctx, mq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{mediable.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (mq *MediableQuery) FirstIDX(ctx context.Context) string {
	id, err := mq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Mediable entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Mediable entity is found.
// Returns a *NotFoundError when no Mediable entities are found.
func (mq *MediableQuery) Only(ctx context.Context) (*Mediable, error) {
	nodes, err := mq.Limit(2).All(setContextOp(ctx, mq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{mediable.Label}
	default:
		return nil, &NotSingularError{mediable.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mq *MediableQuery) OnlyX(ctx context.Context) *Mediable {
	node, err := mq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Mediable ID in the query.
// Returns a *NotSingularError when more than one Mediable ID is found.
// Returns a *NotFoundError when no entities are found.
func (mq *MediableQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = mq.Limit(2).IDs(setContextOp(ctx, mq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{mediable.Label}
	default:
		err = &NotSingularError{mediable.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (mq *MediableQuery) OnlyIDX(ctx context.Context) string {
	id, err := mq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Mediables.
func (mq *MediableQuery) All(ctx context.Context) ([]*Mediable, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryAll)
	if err := mq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Mediable, *MediableQuery]()
	return withInterceptors[[]*Mediable](ctx, mq, qr, mq.inters)
}

// AllX is like All, but panics if an error occurs.
func (mq *MediableQuery) AllX(ctx context.Context) []*Mediable {
	nodes, err := mq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Mediable IDs.
func (mq *MediableQuery) IDs(ctx context.Context) (ids []string, err error) {
	if mq.ctx.Unique == nil && mq.path != nil {
		mq.Unique(true)
	}
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryIDs)
	if err = mq.Select(mediable.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mq *MediableQuery) IDsX(ctx context.Context) []string {
	ids, err := mq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mq *MediableQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryCount)
	if err := mq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, mq, querierCount[*MediableQuery](), mq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (mq *MediableQuery) CountX(ctx context.Context) int {
	count, err := mq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mq *MediableQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, mq.ctx, ent.OpQueryExist)
	switch _, err := mq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (mq *MediableQuery) ExistX(ctx context.Context) bool {
	exist, err := mq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the MediableQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mq *MediableQuery) Clone() *MediableQuery {
	if mq == nil {
		return nil
	}
	return &MediableQuery{
		config:     mq.config,
		ctx:        mq.ctx.Clone(),
		order:      append([]mediable.OrderOption{}, mq.order...),
		inters:     append([]Interceptor{}, mq.inters...),
		predicates: append([]predicate.Mediable{}, mq.predicates...),
		withMedia:  mq.withMedia.Clone(),
		// clone intermediate query.
		sql:       mq.sql.Clone(),
		path:      mq.path,
		modifiers: append([]func(*sql.Selector){}, mq.modifiers...),
	}
}

// WithMedia tells the query-builder to eager-load the nodes that are connected to
// the "media" edge. The optional arguments are used to configure the query builder of the edge.
func (mq *MediableQuery) WithMedia(opts ...func(*MediaQuery)) *MediableQuery {
	query := (&MediaClient{config: mq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	mq.withMedia = query
	return mq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		AppID string `json:"app_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Mediable.Query().
//		GroupBy(mediable.FieldAppID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (mq *MediableQuery) GroupBy(field string, fields ...string) *MediableGroupBy {
	mq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &MediableGroupBy{build: mq}
	grbuild.flds = &mq.ctx.Fields
	grbuild.label = mediable.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		AppID string `json:"app_id,omitempty"`
//	}
//
//	client.Mediable.Query().
//		Select(mediable.FieldAppID).
//		Scan(ctx, &v)
func (mq *MediableQuery) Select(fields ...string) *MediableSelect {
	mq.ctx.Fields = append(mq.ctx.Fields, fields...)
	sbuild := &MediableSelect{MediableQuery: mq}
	sbuild.label = mediable.Label
	sbuild.flds, sbuild.scan = &mq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a MediableSelect configured with the given aggregations.
func (mq *MediableQuery) Aggregate(fns ...AggregateFunc) *MediableSelect {
	return mq.Select().Aggregate(fns...)
}

func (mq *MediableQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range mq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, mq); err != nil {
				return err
			}
		}
	}
	for _, f := range mq.ctx.Fields {
		if !mediable.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if mq.path != nil {
		prev, err := mq.path(ctx)
		if err != nil {
			return err
		}
		mq.sql = prev
	}
	return nil
}

func (mq *MediableQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Mediable, error) {
	var (
		nodes       = []*Mediable{}
		_spec       = mq.querySpec()
		loadedTypes = [1]bool{
			mq.withMedia != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Mediable).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Mediable{config: mq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, mq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := mq.withMedia; query != nil {
		if err := mq.loadMedia(ctx, query, nodes, nil,
			func(n *Mediable, e *Media) { n.Edges.Media = e }); err != nil {
			return nil, err
		}
	}

	for i := range mq.loadTotal {
		if err := mq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}

	return nodes, nil
}

func (mq *MediableQuery) loadMedia(ctx context.Context, query *MediaQuery, nodes []*Mediable, init func(*Mediable), assign func(*Mediable, *Media)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Mediable)
	for i := range nodes {
		fk := nodes[i].MediaID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(media.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "media_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (mq *MediableQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mq.querySpec()
	if len(mq.modifiers) > 0 {
		_spec.Modifiers = mq.modifiers
	}
	_spec.Node.Columns = mq.ctx.Fields
	if len(mq.ctx.Fields) > 0 {
		_spec.Unique = mq.ctx.Unique != nil && *mq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, mq.driver, _spec)
}

func (mq *MediableQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(mediable.Table, mediable.Columns, sqlgraph.NewFieldSpec(mediable.FieldID, field.TypeString))
	_spec.From = mq.sql
	if unique := mq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if mq.path != nil {
		_spec.Unique = true
	}
	if fields := mq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, mediable.FieldID)
		for i := range fields {
			if fields[i] != mediable.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if mq.withMedia != nil {
			_spec.Node.AddColumnOnce(mediable.FieldMediaID)
		}
	}
	if ps := mq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mq *MediableQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(mq.driver.Dialect())
	t1 := builder.Table(mediable.Table)
	columns := mq.ctx.Fields
	if len(columns) == 0 {
		columns = mediable.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if mq.sql != nil {
		selector = mq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if mq.ctx.Unique != nil && *mq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range mq.modifiers {
		m(selector)
	}
	for _, p := range mq.predicates {
		p(selector)
	}
	for _, p := range mq.order {
		p(selector)
	}
	if offset := mq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (mq *MediableQuery) Modify(modifiers ...func(s *sql.Selector)) *MediableSelect {
	mq.modifiers = append(mq.modifiers, modifiers...)
	return mq.Select()
}

// MediableGroupBy is the group-by builder for Mediable entities.
type MediableGroupBy struct {
	selector
	build *MediableQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mgb *MediableGroupBy) Aggregate(fns ...AggregateFunc) *MediableGroupBy {
	mgb.fns = append(mgb.fns, fns...)
	return mgb
}

// Scan applies the selector query and scans the result into the given value.
func (mgb *MediableGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, mgb.build.ctx, ent.OpQueryGroupBy)
	if err := mgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MediableQuery, *MediableGroupBy](ctx, mgb.build, mgb, mgb.build.inters, v)
}

func (mgb *MediableGroupBy) sqlScan(ctx context.Context, root *MediableQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(mgb.fns))
	for _, fn := range mgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*mgb.flds)+len(mgb.fns))
		for _, f := range *mgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*mgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := mgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// MediableSelect is the builder for selecting fields of Mediable entities.
type MediableSelect struct {
	*MediableQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ms *MediableSelect) Aggregate(fns ...AggregateFunc) *MediableSelect {
	ms.fns = append(ms.fns, fns...)
	return ms
}

// Scan applies the selector query and scans the result into the given value.
func (ms *MediableSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ms.ctx, ent.OpQuerySelect)
	if err := ms.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*MediableQuery, *MediableSelect](ctx, ms.MediableQuery, ms, ms.inters, v)
}

func (ms *MediableSelect) sqlScan(ctx context.Context, root *MediableQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ms.fns))
	for _, fn := range ms.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ms.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ms.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ms *MediableSelect) Modify(modifiers ...func(s *sql.Selector)) *MediableSelect {
	ms.modifiers = append(ms.modifiers, modifiers...)
	return ms
}
