// Code generated by ent, DO NOT EDIT.

package approleperm

import (
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldUpdatedAt, v))
}

// AppRoleID applies equality check predicate on the "app_role_id" field. It's identical to AppRoleIDEQ.
func AppRoleID(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppRoleID, v))
}

// AppPermID applies equality check predicate on the "app_perm_id" field. It's identical to AppPermIDEQ.
func AppPermID(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppPermID, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotNull(FieldUpdatedAt))
}

// AppRoleIDEQ applies the EQ predicate on the "app_role_id" field.
func AppRoleIDEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppRoleID, v))
}

// AppRoleIDNEQ applies the NEQ predicate on the "app_role_id" field.
func AppRoleIDNEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldAppRoleID, v))
}

// AppRoleIDIn applies the In predicate on the "app_role_id" field.
func AppRoleIDIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldAppRoleID, vs...))
}

// AppRoleIDNotIn applies the NotIn predicate on the "app_role_id" field.
func AppRoleIDNotIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldAppRoleID, vs...))
}

// AppRoleIDGT applies the GT predicate on the "app_role_id" field.
func AppRoleIDGT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldAppRoleID, v))
}

// AppRoleIDGTE applies the GTE predicate on the "app_role_id" field.
func AppRoleIDGTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldAppRoleID, v))
}

// AppRoleIDLT applies the LT predicate on the "app_role_id" field.
func AppRoleIDLT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldAppRoleID, v))
}

// AppRoleIDLTE applies the LTE predicate on the "app_role_id" field.
func AppRoleIDLTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldAppRoleID, v))
}

// AppRoleIDContains applies the Contains predicate on the "app_role_id" field.
func AppRoleIDContains(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContains(FieldAppRoleID, v))
}

// AppRoleIDHasPrefix applies the HasPrefix predicate on the "app_role_id" field.
func AppRoleIDHasPrefix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasPrefix(FieldAppRoleID, v))
}

// AppRoleIDHasSuffix applies the HasSuffix predicate on the "app_role_id" field.
func AppRoleIDHasSuffix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasSuffix(FieldAppRoleID, v))
}

// AppRoleIDEqualFold applies the EqualFold predicate on the "app_role_id" field.
func AppRoleIDEqualFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEqualFold(FieldAppRoleID, v))
}

// AppRoleIDContainsFold applies the ContainsFold predicate on the "app_role_id" field.
func AppRoleIDContainsFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContainsFold(FieldAppRoleID, v))
}

// AppPermIDEQ applies the EQ predicate on the "app_perm_id" field.
func AppPermIDEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppPermID, v))
}

// AppPermIDNEQ applies the NEQ predicate on the "app_perm_id" field.
func AppPermIDNEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldAppPermID, v))
}

// AppPermIDIn applies the In predicate on the "app_perm_id" field.
func AppPermIDIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldAppPermID, vs...))
}

// AppPermIDNotIn applies the NotIn predicate on the "app_perm_id" field.
func AppPermIDNotIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldAppPermID, vs...))
}

// AppPermIDGT applies the GT predicate on the "app_perm_id" field.
func AppPermIDGT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldAppPermID, v))
}

// AppPermIDGTE applies the GTE predicate on the "app_perm_id" field.
func AppPermIDGTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldAppPermID, v))
}

// AppPermIDLT applies the LT predicate on the "app_perm_id" field.
func AppPermIDLT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldAppPermID, v))
}

// AppPermIDLTE applies the LTE predicate on the "app_perm_id" field.
func AppPermIDLTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldAppPermID, v))
}

// AppPermIDContains applies the Contains predicate on the "app_perm_id" field.
func AppPermIDContains(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContains(FieldAppPermID, v))
}

// AppPermIDHasPrefix applies the HasPrefix predicate on the "app_perm_id" field.
func AppPermIDHasPrefix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasPrefix(FieldAppPermID, v))
}

// AppPermIDHasSuffix applies the HasSuffix predicate on the "app_perm_id" field.
func AppPermIDHasSuffix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasSuffix(FieldAppPermID, v))
}

// AppPermIDEqualFold applies the EqualFold predicate on the "app_perm_id" field.
func AppPermIDEqualFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEqualFold(FieldAppPermID, v))
}

// AppPermIDContainsFold applies the ContainsFold predicate on the "app_perm_id" field.
func AppPermIDContainsFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContainsFold(FieldAppPermID, v))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.FieldContainsFold(FieldAppID, v))
}

// HasApp applies the HasEdge predicate on the "app" edge.
func HasApp() predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppWith applies the HasEdge predicate on the "app" edge with a given conditions (other predicates).
func HasAppWith(preds ...predicate.App) predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := newAppStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppPerm applies the HasEdge predicate on the "app_perm" edge.
func HasAppPerm() predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppPermTable, AppPermColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppPermWith applies the HasEdge predicate on the "app_perm" edge with a given conditions (other predicates).
func HasAppPermWith(preds ...predicate.AppPerm) predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := newAppPermStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAppRole applies the HasEdge predicate on the "app_role" edge.
func HasAppRole() predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AppRoleTable, AppRoleColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAppRoleWith applies the HasEdge predicate on the "app_role" edge with a given conditions (other predicates).
func HasAppRoleWith(preds ...predicate.AppRole) predicate.AppRolePerm {
	return predicate.AppRolePerm(func(s *sql.Selector) {
		step := newAppRoleStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.AppRolePerm) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.AppRolePerm) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.AppRolePerm) predicate.AppRolePerm {
	return predicate.AppRolePerm(sql.NotPredicates(p))
}
