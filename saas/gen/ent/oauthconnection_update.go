// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/oauthconnection"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthConnectionUpdate is the builder for updating OauthConnection entities.
type OauthConnectionUpdate struct {
	config
	hooks     []Hook
	mutation  *OauthConnectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the OauthConnectionUpdate builder.
func (ocu *OauthConnectionUpdate) Where(ps ...predicate.OauthConnection) *OauthConnectionUpdate {
	ocu.mutation.Where(ps...)
	return ocu
}

// SetUpdatedAt sets the "updated_at" field.
func (ocu *OauthConnectionUpdate) SetUpdatedAt(t time.Time) *OauthConnectionUpdate {
	ocu.mutation.SetUpdatedAt(t)
	return ocu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ocu *OauthConnectionUpdate) ClearUpdatedAt() *OauthConnectionUpdate {
	ocu.mutation.ClearUpdatedAt()
	return ocu
}

// SetName sets the "name" field.
func (ocu *OauthConnectionUpdate) SetName(s string) *OauthConnectionUpdate {
	ocu.mutation.SetName(s)
	return ocu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableName(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetName(*s)
	}
	return ocu
}

// ClearName clears the value of the "name" field.
func (ocu *OauthConnectionUpdate) ClearName() *OauthConnectionUpdate {
	ocu.mutation.ClearName()
	return ocu
}

// SetProvider sets the "provider" field.
func (ocu *OauthConnectionUpdate) SetProvider(s string) *OauthConnectionUpdate {
	ocu.mutation.SetProvider(s)
	return ocu
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableProvider(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetProvider(*s)
	}
	return ocu
}

// ClearProvider clears the value of the "provider" field.
func (ocu *OauthConnectionUpdate) ClearProvider() *OauthConnectionUpdate {
	ocu.mutation.ClearProvider()
	return ocu
}

// SetClientID sets the "client_id" field.
func (ocu *OauthConnectionUpdate) SetClientID(s string) *OauthConnectionUpdate {
	ocu.mutation.SetClientID(s)
	return ocu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableClientID(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetClientID(*s)
	}
	return ocu
}

// ClearClientID clears the value of the "client_id" field.
func (ocu *OauthConnectionUpdate) ClearClientID() *OauthConnectionUpdate {
	ocu.mutation.ClearClientID()
	return ocu
}

// SetClientSecret sets the "client_secret" field.
func (ocu *OauthConnectionUpdate) SetClientSecret(s string) *OauthConnectionUpdate {
	ocu.mutation.SetClientSecret(s)
	return ocu
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableClientSecret(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetClientSecret(*s)
	}
	return ocu
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ocu *OauthConnectionUpdate) ClearClientSecret() *OauthConnectionUpdate {
	ocu.mutation.ClearClientSecret()
	return ocu
}

// SetScopes sets the "scopes" field.
func (ocu *OauthConnectionUpdate) SetScopes(s string) *OauthConnectionUpdate {
	ocu.mutation.SetScopes(s)
	return ocu
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableScopes(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetScopes(*s)
	}
	return ocu
}

// ClearScopes clears the value of the "scopes" field.
func (ocu *OauthConnectionUpdate) ClearScopes() *OauthConnectionUpdate {
	ocu.mutation.ClearScopes()
	return ocu
}

// SetRedirectURL sets the "redirect_url" field.
func (ocu *OauthConnectionUpdate) SetRedirectURL(s string) *OauthConnectionUpdate {
	ocu.mutation.SetRedirectURL(s)
	return ocu
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableRedirectURL(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetRedirectURL(*s)
	}
	return ocu
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (ocu *OauthConnectionUpdate) ClearRedirectURL() *OauthConnectionUpdate {
	ocu.mutation.ClearRedirectURL()
	return ocu
}

// SetDashboardLink sets the "dashboard_link" field.
func (ocu *OauthConnectionUpdate) SetDashboardLink(s string) *OauthConnectionUpdate {
	ocu.mutation.SetDashboardLink(s)
	return ocu
}

// SetNillableDashboardLink sets the "dashboard_link" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableDashboardLink(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetDashboardLink(*s)
	}
	return ocu
}

// ClearDashboardLink clears the value of the "dashboard_link" field.
func (ocu *OauthConnectionUpdate) ClearDashboardLink() *OauthConnectionUpdate {
	ocu.mutation.ClearDashboardLink()
	return ocu
}

// SetNote sets the "note" field.
func (ocu *OauthConnectionUpdate) SetNote(s string) *OauthConnectionUpdate {
	ocu.mutation.SetNote(s)
	return ocu
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableNote(s *string) *OauthConnectionUpdate {
	if s != nil {
		ocu.SetNote(*s)
	}
	return ocu
}

// ClearNote clears the value of the "note" field.
func (ocu *OauthConnectionUpdate) ClearNote() *OauthConnectionUpdate {
	ocu.mutation.ClearNote()
	return ocu
}

// SetStatus sets the "status" field.
func (ocu *OauthConnectionUpdate) SetStatus(b bool) *OauthConnectionUpdate {
	ocu.mutation.SetStatus(b)
	return ocu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ocu *OauthConnectionUpdate) SetNillableStatus(b *bool) *OauthConnectionUpdate {
	if b != nil {
		ocu.SetStatus(*b)
	}
	return ocu
}

// ClearStatus clears the value of the "status" field.
func (ocu *OauthConnectionUpdate) ClearStatus() *OauthConnectionUpdate {
	ocu.mutation.ClearStatus()
	return ocu
}

// Mutation returns the OauthConnectionMutation object of the builder.
func (ocu *OauthConnectionUpdate) Mutation() *OauthConnectionMutation {
	return ocu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ocu *OauthConnectionUpdate) Save(ctx context.Context) (int, error) {
	ocu.defaults()
	return withHooks(ctx, ocu.sqlSave, ocu.mutation, ocu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocu *OauthConnectionUpdate) SaveX(ctx context.Context) int {
	affected, err := ocu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ocu *OauthConnectionUpdate) Exec(ctx context.Context) error {
	_, err := ocu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocu *OauthConnectionUpdate) ExecX(ctx context.Context) {
	if err := ocu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocu *OauthConnectionUpdate) defaults() {
	if _, ok := ocu.mutation.UpdatedAt(); !ok && !ocu.mutation.UpdatedAtCleared() {
		v := oauthconnection.UpdateDefaultUpdatedAt()
		ocu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocu *OauthConnectionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthConnectionUpdate {
	ocu.modifiers = append(ocu.modifiers, modifiers...)
	return ocu
}

func (ocu *OauthConnectionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthconnection.Table, oauthconnection.Columns, sqlgraph.NewFieldSpec(oauthconnection.FieldID, field.TypeString))
	if ps := ocu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ocu.mutation.CreatedAtCleared() {
		_spec.ClearField(oauthconnection.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ocu.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthconnection.FieldUpdatedAt, field.TypeTime, value)
	}
	if ocu.mutation.UpdatedAtCleared() {
		_spec.ClearField(oauthconnection.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ocu.mutation.Name(); ok {
		_spec.SetField(oauthconnection.FieldName, field.TypeString, value)
	}
	if ocu.mutation.NameCleared() {
		_spec.ClearField(oauthconnection.FieldName, field.TypeString)
	}
	if value, ok := ocu.mutation.Provider(); ok {
		_spec.SetField(oauthconnection.FieldProvider, field.TypeString, value)
	}
	if ocu.mutation.ProviderCleared() {
		_spec.ClearField(oauthconnection.FieldProvider, field.TypeString)
	}
	if value, ok := ocu.mutation.ClientID(); ok {
		_spec.SetField(oauthconnection.FieldClientID, field.TypeString, value)
	}
	if ocu.mutation.ClientIDCleared() {
		_spec.ClearField(oauthconnection.FieldClientID, field.TypeString)
	}
	if value, ok := ocu.mutation.ClientSecret(); ok {
		_spec.SetField(oauthconnection.FieldClientSecret, field.TypeString, value)
	}
	if ocu.mutation.ClientSecretCleared() {
		_spec.ClearField(oauthconnection.FieldClientSecret, field.TypeString)
	}
	if value, ok := ocu.mutation.Scopes(); ok {
		_spec.SetField(oauthconnection.FieldScopes, field.TypeString, value)
	}
	if ocu.mutation.ScopesCleared() {
		_spec.ClearField(oauthconnection.FieldScopes, field.TypeString)
	}
	if value, ok := ocu.mutation.RedirectURL(); ok {
		_spec.SetField(oauthconnection.FieldRedirectURL, field.TypeString, value)
	}
	if ocu.mutation.RedirectURLCleared() {
		_spec.ClearField(oauthconnection.FieldRedirectURL, field.TypeString)
	}
	if value, ok := ocu.mutation.DashboardLink(); ok {
		_spec.SetField(oauthconnection.FieldDashboardLink, field.TypeString, value)
	}
	if ocu.mutation.DashboardLinkCleared() {
		_spec.ClearField(oauthconnection.FieldDashboardLink, field.TypeString)
	}
	if value, ok := ocu.mutation.Note(); ok {
		_spec.SetField(oauthconnection.FieldNote, field.TypeString, value)
	}
	if ocu.mutation.NoteCleared() {
		_spec.ClearField(oauthconnection.FieldNote, field.TypeString)
	}
	if value, ok := ocu.mutation.Status(); ok {
		_spec.SetField(oauthconnection.FieldStatus, field.TypeBool, value)
	}
	if ocu.mutation.StatusCleared() {
		_spec.ClearField(oauthconnection.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(ocu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ocu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ocu.mutation.done = true
	return n, nil
}

// OauthConnectionUpdateOne is the builder for updating a single OauthConnection entity.
type OauthConnectionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *OauthConnectionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ocuo *OauthConnectionUpdateOne) SetUpdatedAt(t time.Time) *OauthConnectionUpdateOne {
	ocuo.mutation.SetUpdatedAt(t)
	return ocuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ocuo *OauthConnectionUpdateOne) ClearUpdatedAt() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearUpdatedAt()
	return ocuo
}

// SetName sets the "name" field.
func (ocuo *OauthConnectionUpdateOne) SetName(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetName(s)
	return ocuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableName(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetName(*s)
	}
	return ocuo
}

// ClearName clears the value of the "name" field.
func (ocuo *OauthConnectionUpdateOne) ClearName() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearName()
	return ocuo
}

// SetProvider sets the "provider" field.
func (ocuo *OauthConnectionUpdateOne) SetProvider(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetProvider(s)
	return ocuo
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableProvider(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetProvider(*s)
	}
	return ocuo
}

// ClearProvider clears the value of the "provider" field.
func (ocuo *OauthConnectionUpdateOne) ClearProvider() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearProvider()
	return ocuo
}

// SetClientID sets the "client_id" field.
func (ocuo *OauthConnectionUpdateOne) SetClientID(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetClientID(s)
	return ocuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableClientID(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetClientID(*s)
	}
	return ocuo
}

// ClearClientID clears the value of the "client_id" field.
func (ocuo *OauthConnectionUpdateOne) ClearClientID() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearClientID()
	return ocuo
}

// SetClientSecret sets the "client_secret" field.
func (ocuo *OauthConnectionUpdateOne) SetClientSecret(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetClientSecret(s)
	return ocuo
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableClientSecret(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetClientSecret(*s)
	}
	return ocuo
}

// ClearClientSecret clears the value of the "client_secret" field.
func (ocuo *OauthConnectionUpdateOne) ClearClientSecret() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearClientSecret()
	return ocuo
}

// SetScopes sets the "scopes" field.
func (ocuo *OauthConnectionUpdateOne) SetScopes(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetScopes(s)
	return ocuo
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableScopes(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetScopes(*s)
	}
	return ocuo
}

// ClearScopes clears the value of the "scopes" field.
func (ocuo *OauthConnectionUpdateOne) ClearScopes() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearScopes()
	return ocuo
}

// SetRedirectURL sets the "redirect_url" field.
func (ocuo *OauthConnectionUpdateOne) SetRedirectURL(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetRedirectURL(s)
	return ocuo
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableRedirectURL(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetRedirectURL(*s)
	}
	return ocuo
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (ocuo *OauthConnectionUpdateOne) ClearRedirectURL() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearRedirectURL()
	return ocuo
}

// SetDashboardLink sets the "dashboard_link" field.
func (ocuo *OauthConnectionUpdateOne) SetDashboardLink(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetDashboardLink(s)
	return ocuo
}

// SetNillableDashboardLink sets the "dashboard_link" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableDashboardLink(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetDashboardLink(*s)
	}
	return ocuo
}

// ClearDashboardLink clears the value of the "dashboard_link" field.
func (ocuo *OauthConnectionUpdateOne) ClearDashboardLink() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearDashboardLink()
	return ocuo
}

// SetNote sets the "note" field.
func (ocuo *OauthConnectionUpdateOne) SetNote(s string) *OauthConnectionUpdateOne {
	ocuo.mutation.SetNote(s)
	return ocuo
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableNote(s *string) *OauthConnectionUpdateOne {
	if s != nil {
		ocuo.SetNote(*s)
	}
	return ocuo
}

// ClearNote clears the value of the "note" field.
func (ocuo *OauthConnectionUpdateOne) ClearNote() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearNote()
	return ocuo
}

// SetStatus sets the "status" field.
func (ocuo *OauthConnectionUpdateOne) SetStatus(b bool) *OauthConnectionUpdateOne {
	ocuo.mutation.SetStatus(b)
	return ocuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ocuo *OauthConnectionUpdateOne) SetNillableStatus(b *bool) *OauthConnectionUpdateOne {
	if b != nil {
		ocuo.SetStatus(*b)
	}
	return ocuo
}

// ClearStatus clears the value of the "status" field.
func (ocuo *OauthConnectionUpdateOne) ClearStatus() *OauthConnectionUpdateOne {
	ocuo.mutation.ClearStatus()
	return ocuo
}

// Mutation returns the OauthConnectionMutation object of the builder.
func (ocuo *OauthConnectionUpdateOne) Mutation() *OauthConnectionMutation {
	return ocuo.mutation
}

// Where appends a list predicates to the OauthConnectionUpdate builder.
func (ocuo *OauthConnectionUpdateOne) Where(ps ...predicate.OauthConnection) *OauthConnectionUpdateOne {
	ocuo.mutation.Where(ps...)
	return ocuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ocuo *OauthConnectionUpdateOne) Select(field string, fields ...string) *OauthConnectionUpdateOne {
	ocuo.fields = append([]string{field}, fields...)
	return ocuo
}

// Save executes the query and returns the updated OauthConnection entity.
func (ocuo *OauthConnectionUpdateOne) Save(ctx context.Context) (*OauthConnection, error) {
	ocuo.defaults()
	return withHooks(ctx, ocuo.sqlSave, ocuo.mutation, ocuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ocuo *OauthConnectionUpdateOne) SaveX(ctx context.Context) *OauthConnection {
	node, err := ocuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ocuo *OauthConnectionUpdateOne) Exec(ctx context.Context) error {
	_, err := ocuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocuo *OauthConnectionUpdateOne) ExecX(ctx context.Context) {
	if err := ocuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ocuo *OauthConnectionUpdateOne) defaults() {
	if _, ok := ocuo.mutation.UpdatedAt(); !ok && !ocuo.mutation.UpdatedAtCleared() {
		v := oauthconnection.UpdateDefaultUpdatedAt()
		ocuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ocuo *OauthConnectionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *OauthConnectionUpdateOne {
	ocuo.modifiers = append(ocuo.modifiers, modifiers...)
	return ocuo
}

func (ocuo *OauthConnectionUpdateOne) sqlSave(ctx context.Context) (_node *OauthConnection, err error) {
	_spec := sqlgraph.NewUpdateSpec(oauthconnection.Table, oauthconnection.Columns, sqlgraph.NewFieldSpec(oauthconnection.FieldID, field.TypeString))
	id, ok := ocuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "OauthConnection.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ocuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthconnection.FieldID)
		for _, f := range fields {
			if !oauthconnection.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != oauthconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ocuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ocuo.mutation.CreatedAtCleared() {
		_spec.ClearField(oauthconnection.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ocuo.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthconnection.FieldUpdatedAt, field.TypeTime, value)
	}
	if ocuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(oauthconnection.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ocuo.mutation.Name(); ok {
		_spec.SetField(oauthconnection.FieldName, field.TypeString, value)
	}
	if ocuo.mutation.NameCleared() {
		_spec.ClearField(oauthconnection.FieldName, field.TypeString)
	}
	if value, ok := ocuo.mutation.Provider(); ok {
		_spec.SetField(oauthconnection.FieldProvider, field.TypeString, value)
	}
	if ocuo.mutation.ProviderCleared() {
		_spec.ClearField(oauthconnection.FieldProvider, field.TypeString)
	}
	if value, ok := ocuo.mutation.ClientID(); ok {
		_spec.SetField(oauthconnection.FieldClientID, field.TypeString, value)
	}
	if ocuo.mutation.ClientIDCleared() {
		_spec.ClearField(oauthconnection.FieldClientID, field.TypeString)
	}
	if value, ok := ocuo.mutation.ClientSecret(); ok {
		_spec.SetField(oauthconnection.FieldClientSecret, field.TypeString, value)
	}
	if ocuo.mutation.ClientSecretCleared() {
		_spec.ClearField(oauthconnection.FieldClientSecret, field.TypeString)
	}
	if value, ok := ocuo.mutation.Scopes(); ok {
		_spec.SetField(oauthconnection.FieldScopes, field.TypeString, value)
	}
	if ocuo.mutation.ScopesCleared() {
		_spec.ClearField(oauthconnection.FieldScopes, field.TypeString)
	}
	if value, ok := ocuo.mutation.RedirectURL(); ok {
		_spec.SetField(oauthconnection.FieldRedirectURL, field.TypeString, value)
	}
	if ocuo.mutation.RedirectURLCleared() {
		_spec.ClearField(oauthconnection.FieldRedirectURL, field.TypeString)
	}
	if value, ok := ocuo.mutation.DashboardLink(); ok {
		_spec.SetField(oauthconnection.FieldDashboardLink, field.TypeString, value)
	}
	if ocuo.mutation.DashboardLinkCleared() {
		_spec.ClearField(oauthconnection.FieldDashboardLink, field.TypeString)
	}
	if value, ok := ocuo.mutation.Note(); ok {
		_spec.SetField(oauthconnection.FieldNote, field.TypeString, value)
	}
	if ocuo.mutation.NoteCleared() {
		_spec.ClearField(oauthconnection.FieldNote, field.TypeString)
	}
	if value, ok := ocuo.mutation.Status(); ok {
		_spec.SetField(oauthconnection.FieldStatus, field.TypeBool, value)
	}
	if ocuo.mutation.StatusCleared() {
		_spec.ClearField(oauthconnection.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(ocuo.modifiers...)
	_node = &OauthConnection{config: ocuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ocuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{oauthconnection.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ocuo.mutation.done = true
	return _node, nil
}
