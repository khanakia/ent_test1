// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lace/jsontype"
	"saas/gen/ent/temp"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TempCreate is the builder for creating a Temp entity.
type TempCreate struct {
	config
	mutation *TempMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TempCreate) SetCreatedAt(t time.Time) *TempCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TempCreate) SetNillableCreatedAt(t *time.Time) *TempCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TempCreate) SetUpdatedAt(t time.Time) *TempCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TempCreate) SetNillableUpdatedAt(t *time.Time) *TempCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetAppID sets the "app_id" field.
func (tc *TempCreate) SetAppID(s string) *TempCreate {
	tc.mutation.SetAppID(s)
	return tc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tc *TempCreate) SetNillableAppID(s *string) *TempCreate {
	if s != nil {
		tc.SetAppID(*s)
	}
	return tc
}

// SetIP sets the "ip" field.
func (tc *TempCreate) SetIP(s string) *TempCreate {
	tc.mutation.SetIP(s)
	return tc
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (tc *TempCreate) SetNillableIP(s *string) *TempCreate {
	if s != nil {
		tc.SetIP(*s)
	}
	return tc
}

// SetType sets the "type" field.
func (tc *TempCreate) SetType(s string) *TempCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tc *TempCreate) SetNillableType(s *string) *TempCreate {
	if s != nil {
		tc.SetType(*s)
	}
	return tc
}

// SetBody sets the "body" field.
func (tc *TempCreate) SetBody(j jsontype.JSON) *TempCreate {
	tc.mutation.SetBody(j)
	return tc
}

// SetMeta sets the "meta" field.
func (tc *TempCreate) SetMeta(j jsontype.JSON) *TempCreate {
	tc.mutation.SetMeta(j)
	return tc
}

// SetID sets the "id" field.
func (tc *TempCreate) SetID(s string) *TempCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TempCreate) SetNillableID(s *string) *TempCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TempMutation object of the builder.
func (tc *TempCreate) Mutation() *TempMutation {
	return tc.mutation
}

// Save creates the Temp in the database.
func (tc *TempCreate) Save(ctx context.Context) (*Temp, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TempCreate) SaveX(ctx context.Context) *Temp {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TempCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TempCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TempCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := temp.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := temp.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := temp.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TempCreate) check() error {
	return nil
}

func (tc *TempCreate) sqlSave(ctx context.Context) (*Temp, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Temp.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TempCreate) createSpec() (*Temp, *sqlgraph.CreateSpec) {
	var (
		_node = &Temp{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(temp.Table, sqlgraph.NewFieldSpec(temp.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(temp.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(temp.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.AppID(); ok {
		_spec.SetField(temp.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := tc.mutation.IP(); ok {
		_spec.SetField(temp.FieldIP, field.TypeString, value)
		_node.IP = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(temp.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Body(); ok {
		_spec.SetField(temp.FieldBody, field.TypeJSON, value)
		_node.Body = value
	}
	if value, ok := tc.mutation.Meta(); ok {
		_spec.SetField(temp.FieldMeta, field.TypeJSON, value)
		_node.Meta = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Temp.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TempUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TempCreate) OnConflict(opts ...sql.ConflictOption) *TempUpsertOne {
	tc.conflict = opts
	return &TempUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Temp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TempCreate) OnConflictColumns(columns ...string) *TempUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TempUpsertOne{
		create: tc,
	}
}

type (
	// TempUpsertOne is the builder for "upsert"-ing
	//  one Temp node.
	TempUpsertOne struct {
		create *TempCreate
	}

	// TempUpsert is the "OnConflict" setter.
	TempUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TempUpsert) SetUpdatedAt(v time.Time) *TempUpsert {
	u.Set(temp.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TempUpsert) UpdateUpdatedAt() *TempUpsert {
	u.SetExcluded(temp.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TempUpsert) ClearUpdatedAt() *TempUpsert {
	u.SetNull(temp.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TempUpsert) SetAppID(v string) *TempUpsert {
	u.Set(temp.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TempUpsert) UpdateAppID() *TempUpsert {
	u.SetExcluded(temp.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *TempUpsert) ClearAppID() *TempUpsert {
	u.SetNull(temp.FieldAppID)
	return u
}

// SetIP sets the "ip" field.
func (u *TempUpsert) SetIP(v string) *TempUpsert {
	u.Set(temp.FieldIP, v)
	return u
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *TempUpsert) UpdateIP() *TempUpsert {
	u.SetExcluded(temp.FieldIP)
	return u
}

// ClearIP clears the value of the "ip" field.
func (u *TempUpsert) ClearIP() *TempUpsert {
	u.SetNull(temp.FieldIP)
	return u
}

// SetType sets the "type" field.
func (u *TempUpsert) SetType(v string) *TempUpsert {
	u.Set(temp.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TempUpsert) UpdateType() *TempUpsert {
	u.SetExcluded(temp.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *TempUpsert) ClearType() *TempUpsert {
	u.SetNull(temp.FieldType)
	return u
}

// SetBody sets the "body" field.
func (u *TempUpsert) SetBody(v jsontype.JSON) *TempUpsert {
	u.Set(temp.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TempUpsert) UpdateBody() *TempUpsert {
	u.SetExcluded(temp.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *TempUpsert) ClearBody() *TempUpsert {
	u.SetNull(temp.FieldBody)
	return u
}

// SetMeta sets the "meta" field.
func (u *TempUpsert) SetMeta(v jsontype.JSON) *TempUpsert {
	u.Set(temp.FieldMeta, v)
	return u
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *TempUpsert) UpdateMeta() *TempUpsert {
	u.SetExcluded(temp.FieldMeta)
	return u
}

// ClearMeta clears the value of the "meta" field.
func (u *TempUpsert) ClearMeta() *TempUpsert {
	u.SetNull(temp.FieldMeta)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Temp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(temp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TempUpsertOne) UpdateNewValues() *TempUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(temp.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(temp.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Temp.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TempUpsertOne) Ignore() *TempUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TempUpsertOne) DoNothing() *TempUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TempCreate.OnConflict
// documentation for more info.
func (u *TempUpsertOne) Update(set func(*TempUpsert)) *TempUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TempUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TempUpsertOne) SetUpdatedAt(v time.Time) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateUpdatedAt() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TempUpsertOne) ClearUpdatedAt() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TempUpsertOne) SetAppID(v string) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateAppID() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TempUpsertOne) ClearAppID() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearAppID()
	})
}

// SetIP sets the "ip" field.
func (u *TempUpsertOne) SetIP(v string) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateIP() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateIP()
	})
}

// ClearIP clears the value of the "ip" field.
func (u *TempUpsertOne) ClearIP() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearIP()
	})
}

// SetType sets the "type" field.
func (u *TempUpsertOne) SetType(v string) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateType() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TempUpsertOne) ClearType() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearType()
	})
}

// SetBody sets the "body" field.
func (u *TempUpsertOne) SetBody(v jsontype.JSON) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateBody() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TempUpsertOne) ClearBody() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearBody()
	})
}

// SetMeta sets the "meta" field.
func (u *TempUpsertOne) SetMeta(v jsontype.JSON) *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *TempUpsertOne) UpdateMeta() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *TempUpsertOne) ClearMeta() *TempUpsertOne {
	return u.Update(func(s *TempUpsert) {
		s.ClearMeta()
	})
}

// Exec executes the query.
func (u *TempUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TempCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TempUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TempUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TempUpsertOne.ID is not supported by MySQL driver. Use TempUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TempUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TempCreateBulk is the builder for creating many Temp entities in bulk.
type TempCreateBulk struct {
	config
	err      error
	builders []*TempCreate
	conflict []sql.ConflictOption
}

// Save creates the Temp entities in the database.
func (tcb *TempCreateBulk) Save(ctx context.Context) ([]*Temp, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Temp, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TempMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TempCreateBulk) SaveX(ctx context.Context) []*Temp {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TempCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TempCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Temp.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TempUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TempCreateBulk) OnConflict(opts ...sql.ConflictOption) *TempUpsertBulk {
	tcb.conflict = opts
	return &TempUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Temp.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TempCreateBulk) OnConflictColumns(columns ...string) *TempUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TempUpsertBulk{
		create: tcb,
	}
}

// TempUpsertBulk is the builder for "upsert"-ing
// a bulk of Temp nodes.
type TempUpsertBulk struct {
	create *TempCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Temp.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(temp.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TempUpsertBulk) UpdateNewValues() *TempUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(temp.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(temp.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Temp.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TempUpsertBulk) Ignore() *TempUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TempUpsertBulk) DoNothing() *TempUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TempCreateBulk.OnConflict
// documentation for more info.
func (u *TempUpsertBulk) Update(set func(*TempUpsert)) *TempUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TempUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TempUpsertBulk) SetUpdatedAt(v time.Time) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateUpdatedAt() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TempUpsertBulk) ClearUpdatedAt() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TempUpsertBulk) SetAppID(v string) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateAppID() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TempUpsertBulk) ClearAppID() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearAppID()
	})
}

// SetIP sets the "ip" field.
func (u *TempUpsertBulk) SetIP(v string) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetIP(v)
	})
}

// UpdateIP sets the "ip" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateIP() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateIP()
	})
}

// ClearIP clears the value of the "ip" field.
func (u *TempUpsertBulk) ClearIP() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearIP()
	})
}

// SetType sets the "type" field.
func (u *TempUpsertBulk) SetType(v string) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateType() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *TempUpsertBulk) ClearType() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearType()
	})
}

// SetBody sets the "body" field.
func (u *TempUpsertBulk) SetBody(v jsontype.JSON) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateBody() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TempUpsertBulk) ClearBody() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearBody()
	})
}

// SetMeta sets the "meta" field.
func (u *TempUpsertBulk) SetMeta(v jsontype.JSON) *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.SetMeta(v)
	})
}

// UpdateMeta sets the "meta" field to the value that was provided on create.
func (u *TempUpsertBulk) UpdateMeta() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.UpdateMeta()
	})
}

// ClearMeta clears the value of the "meta" field.
func (u *TempUpsertBulk) ClearMeta() *TempUpsertBulk {
	return u.Update(func(s *TempUpsert) {
		s.ClearMeta()
	})
}

// Exec executes the query.
func (u *TempUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TempCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TempCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TempUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
