// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lace/jsontype"
	"saas/gen/ent/predicate"
	"saas/gen/ent/temp"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TempUpdate is the builder for updating Temp entities.
type TempUpdate struct {
	config
	hooks     []Hook
	mutation  *TempMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TempUpdate builder.
func (tu *TempUpdate) Where(ps ...predicate.Temp) *TempUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TempUpdate) SetUpdatedAt(t time.Time) *TempUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tu *TempUpdate) ClearUpdatedAt() *TempUpdate {
	tu.mutation.ClearUpdatedAt()
	return tu
}

// SetAppID sets the "app_id" field.
func (tu *TempUpdate) SetAppID(s string) *TempUpdate {
	tu.mutation.SetAppID(s)
	return tu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tu *TempUpdate) SetNillableAppID(s *string) *TempUpdate {
	if s != nil {
		tu.SetAppID(*s)
	}
	return tu
}

// ClearAppID clears the value of the "app_id" field.
func (tu *TempUpdate) ClearAppID() *TempUpdate {
	tu.mutation.ClearAppID()
	return tu
}

// SetIP sets the "ip" field.
func (tu *TempUpdate) SetIP(s string) *TempUpdate {
	tu.mutation.SetIP(s)
	return tu
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (tu *TempUpdate) SetNillableIP(s *string) *TempUpdate {
	if s != nil {
		tu.SetIP(*s)
	}
	return tu
}

// ClearIP clears the value of the "ip" field.
func (tu *TempUpdate) ClearIP() *TempUpdate {
	tu.mutation.ClearIP()
	return tu
}

// SetType sets the "type" field.
func (tu *TempUpdate) SetType(s string) *TempUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TempUpdate) SetNillableType(s *string) *TempUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// ClearType clears the value of the "type" field.
func (tu *TempUpdate) ClearType() *TempUpdate {
	tu.mutation.ClearType()
	return tu
}

// SetBody sets the "body" field.
func (tu *TempUpdate) SetBody(j jsontype.JSON) *TempUpdate {
	tu.mutation.SetBody(j)
	return tu
}

// AppendBody appends j to the "body" field.
func (tu *TempUpdate) AppendBody(j jsontype.JSON) *TempUpdate {
	tu.mutation.AppendBody(j)
	return tu
}

// ClearBody clears the value of the "body" field.
func (tu *TempUpdate) ClearBody() *TempUpdate {
	tu.mutation.ClearBody()
	return tu
}

// SetMeta sets the "meta" field.
func (tu *TempUpdate) SetMeta(j jsontype.JSON) *TempUpdate {
	tu.mutation.SetMeta(j)
	return tu
}

// AppendMeta appends j to the "meta" field.
func (tu *TempUpdate) AppendMeta(j jsontype.JSON) *TempUpdate {
	tu.mutation.AppendMeta(j)
	return tu
}

// ClearMeta clears the value of the "meta" field.
func (tu *TempUpdate) ClearMeta() *TempUpdate {
	tu.mutation.ClearMeta()
	return tu
}

// Mutation returns the TempMutation object of the builder.
func (tu *TempUpdate) Mutation() *TempMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TempUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TempUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TempUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TempUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TempUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok && !tu.mutation.UpdatedAtCleared() {
		v := temp.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TempUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TempUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TempUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(temp.Table, temp.Columns, sqlgraph.NewFieldSpec(temp.FieldID, field.TypeString))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tu.mutation.CreatedAtCleared() {
		_spec.ClearField(temp.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(temp.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.UpdatedAtCleared() {
		_spec.ClearField(temp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tu.mutation.AppID(); ok {
		_spec.SetField(temp.FieldAppID, field.TypeString, value)
	}
	if tu.mutation.AppIDCleared() {
		_spec.ClearField(temp.FieldAppID, field.TypeString)
	}
	if value, ok := tu.mutation.IP(); ok {
		_spec.SetField(temp.FieldIP, field.TypeString, value)
	}
	if tu.mutation.IPCleared() {
		_spec.ClearField(temp.FieldIP, field.TypeString)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(temp.FieldType, field.TypeString, value)
	}
	if tu.mutation.TypeCleared() {
		_spec.ClearField(temp.FieldType, field.TypeString)
	}
	if value, ok := tu.mutation.Body(); ok {
		_spec.SetField(temp.FieldBody, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, temp.FieldBody, value)
		})
	}
	if tu.mutation.BodyCleared() {
		_spec.ClearField(temp.FieldBody, field.TypeJSON)
	}
	if value, ok := tu.mutation.Meta(); ok {
		_spec.SetField(temp.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedMeta(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, temp.FieldMeta, value)
		})
	}
	if tu.mutation.MetaCleared() {
		_spec.ClearField(temp.FieldMeta, field.TypeJSON)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TempUpdateOne is the builder for updating a single Temp entity.
type TempUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TempMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TempUpdateOne) SetUpdatedAt(t time.Time) *TempUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tuo *TempUpdateOne) ClearUpdatedAt() *TempUpdateOne {
	tuo.mutation.ClearUpdatedAt()
	return tuo
}

// SetAppID sets the "app_id" field.
func (tuo *TempUpdateOne) SetAppID(s string) *TempUpdateOne {
	tuo.mutation.SetAppID(s)
	return tuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tuo *TempUpdateOne) SetNillableAppID(s *string) *TempUpdateOne {
	if s != nil {
		tuo.SetAppID(*s)
	}
	return tuo
}

// ClearAppID clears the value of the "app_id" field.
func (tuo *TempUpdateOne) ClearAppID() *TempUpdateOne {
	tuo.mutation.ClearAppID()
	return tuo
}

// SetIP sets the "ip" field.
func (tuo *TempUpdateOne) SetIP(s string) *TempUpdateOne {
	tuo.mutation.SetIP(s)
	return tuo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (tuo *TempUpdateOne) SetNillableIP(s *string) *TempUpdateOne {
	if s != nil {
		tuo.SetIP(*s)
	}
	return tuo
}

// ClearIP clears the value of the "ip" field.
func (tuo *TempUpdateOne) ClearIP() *TempUpdateOne {
	tuo.mutation.ClearIP()
	return tuo
}

// SetType sets the "type" field.
func (tuo *TempUpdateOne) SetType(s string) *TempUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TempUpdateOne) SetNillableType(s *string) *TempUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// ClearType clears the value of the "type" field.
func (tuo *TempUpdateOne) ClearType() *TempUpdateOne {
	tuo.mutation.ClearType()
	return tuo
}

// SetBody sets the "body" field.
func (tuo *TempUpdateOne) SetBody(j jsontype.JSON) *TempUpdateOne {
	tuo.mutation.SetBody(j)
	return tuo
}

// AppendBody appends j to the "body" field.
func (tuo *TempUpdateOne) AppendBody(j jsontype.JSON) *TempUpdateOne {
	tuo.mutation.AppendBody(j)
	return tuo
}

// ClearBody clears the value of the "body" field.
func (tuo *TempUpdateOne) ClearBody() *TempUpdateOne {
	tuo.mutation.ClearBody()
	return tuo
}

// SetMeta sets the "meta" field.
func (tuo *TempUpdateOne) SetMeta(j jsontype.JSON) *TempUpdateOne {
	tuo.mutation.SetMeta(j)
	return tuo
}

// AppendMeta appends j to the "meta" field.
func (tuo *TempUpdateOne) AppendMeta(j jsontype.JSON) *TempUpdateOne {
	tuo.mutation.AppendMeta(j)
	return tuo
}

// ClearMeta clears the value of the "meta" field.
func (tuo *TempUpdateOne) ClearMeta() *TempUpdateOne {
	tuo.mutation.ClearMeta()
	return tuo
}

// Mutation returns the TempMutation object of the builder.
func (tuo *TempUpdateOne) Mutation() *TempMutation {
	return tuo.mutation
}

// Where appends a list predicates to the TempUpdate builder.
func (tuo *TempUpdateOne) Where(ps ...predicate.Temp) *TempUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TempUpdateOne) Select(field string, fields ...string) *TempUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Temp entity.
func (tuo *TempUpdateOne) Save(ctx context.Context) (*Temp, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TempUpdateOne) SaveX(ctx context.Context) *Temp {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TempUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TempUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TempUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok && !tuo.mutation.UpdatedAtCleared() {
		v := temp.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TempUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TempUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TempUpdateOne) sqlSave(ctx context.Context) (_node *Temp, err error) {
	_spec := sqlgraph.NewUpdateSpec(temp.Table, temp.Columns, sqlgraph.NewFieldSpec(temp.FieldID, field.TypeString))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Temp.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, temp.FieldID)
		for _, f := range fields {
			if !temp.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != temp.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tuo.mutation.CreatedAtCleared() {
		_spec.ClearField(temp.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(temp.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(temp.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := tuo.mutation.AppID(); ok {
		_spec.SetField(temp.FieldAppID, field.TypeString, value)
	}
	if tuo.mutation.AppIDCleared() {
		_spec.ClearField(temp.FieldAppID, field.TypeString)
	}
	if value, ok := tuo.mutation.IP(); ok {
		_spec.SetField(temp.FieldIP, field.TypeString, value)
	}
	if tuo.mutation.IPCleared() {
		_spec.ClearField(temp.FieldIP, field.TypeString)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(temp.FieldType, field.TypeString, value)
	}
	if tuo.mutation.TypeCleared() {
		_spec.ClearField(temp.FieldType, field.TypeString)
	}
	if value, ok := tuo.mutation.Body(); ok {
		_spec.SetField(temp.FieldBody, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, temp.FieldBody, value)
		})
	}
	if tuo.mutation.BodyCleared() {
		_spec.ClearField(temp.FieldBody, field.TypeJSON)
	}
	if value, ok := tuo.mutation.Meta(); ok {
		_spec.SetField(temp.FieldMeta, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedMeta(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, temp.FieldMeta, value)
		})
	}
	if tuo.mutation.MetaCleared() {
		_spec.ClearField(temp.FieldMeta, field.TypeJSON)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Temp{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{temp.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
