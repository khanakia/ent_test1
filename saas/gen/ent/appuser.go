// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/adminuser"
	"saas/gen/ent/app"
	"saas/gen/ent/approle"
	"saas/gen/ent/appuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AppUser is the model entity for the AppUser schema.
type AppUser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// AdminUserID holds the value of the "admin_user_id" field.
	AdminUserID string `json:"admin_user_id,omitempty"`
	// AppRoleID holds the value of the "app_role_id" field.
	AppRoleID string `json:"app_role_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppUserQuery when eager-loading is set.
	Edges        AppUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppUserEdges holds the relations/edges for other nodes in the graph.
type AppUserEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// Adminuser holds the value of the adminuser edge.
	Adminuser *AdminUser `json:"adminuser,omitempty"`
	// AppRole holds the value of the app_role edge.
	AppRole *AppRole `json:"app_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserEdges) AppOrErr() (*App, error) {
	if e.App != nil {
		return e.App, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AdminuserOrErr returns the Adminuser value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserEdges) AdminuserOrErr() (*AdminUser, error) {
	if e.Adminuser != nil {
		return e.Adminuser, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: adminuser.Label}
	}
	return nil, &NotLoadedError{edge: "adminuser"}
}

// AppRoleOrErr returns the AppRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppUserEdges) AppRoleOrErr() (*AppRole, error) {
	if e.AppRole != nil {
		return e.AppRole, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: approle.Label}
	}
	return nil, &NotLoadedError{edge: "app_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appuser.FieldID, appuser.FieldAppID, appuser.FieldAdminUserID, appuser.FieldAppRoleID:
			values[i] = new(sql.NullString)
		case appuser.FieldCreatedAt, appuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppUser fields.
func (au *AppUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				au.ID = value.String
			}
		case appuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				au.CreatedAt = value.Time
			}
		case appuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				au.UpdatedAt = value.Time
			}
		case appuser.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				au.AppID = value.String
			}
		case appuser.FieldAdminUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field admin_user_id", values[i])
			} else if value.Valid {
				au.AdminUserID = value.String
			}
		case appuser.FieldAppRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_role_id", values[i])
			} else if value.Valid {
				au.AppRoleID = value.String
			}
		default:
			au.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppUser.
// This includes values selected through modifiers, order, etc.
func (au *AppUser) Value(name string) (ent.Value, error) {
	return au.selectValues.Get(name)
}

// QueryApp queries the "app" edge of the AppUser entity.
func (au *AppUser) QueryApp() *AppQuery {
	return NewAppUserClient(au.config).QueryApp(au)
}

// QueryAdminuser queries the "adminuser" edge of the AppUser entity.
func (au *AppUser) QueryAdminuser() *AdminUserQuery {
	return NewAppUserClient(au.config).QueryAdminuser(au)
}

// QueryAppRole queries the "app_role" edge of the AppUser entity.
func (au *AppUser) QueryAppRole() *AppRoleQuery {
	return NewAppUserClient(au.config).QueryAppRole(au)
}

// Update returns a builder for updating this AppUser.
// Note that you need to call AppUser.Unwrap() before calling this method if this AppUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (au *AppUser) Update() *AppUserUpdateOne {
	return NewAppUserClient(au.config).UpdateOne(au)
}

// Unwrap unwraps the AppUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (au *AppUser) Unwrap() *AppUser {
	_tx, ok := au.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppUser is not a transactional entity")
	}
	au.config.driver = _tx.drv
	return au
}

// String implements the fmt.Stringer.
func (au *AppUser) String() string {
	var builder strings.Builder
	builder.WriteString("AppUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", au.ID))
	builder.WriteString("created_at=")
	builder.WriteString(au.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(au.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(au.AppID)
	builder.WriteString(", ")
	builder.WriteString("admin_user_id=")
	builder.WriteString(au.AdminUserID)
	builder.WriteString(", ")
	builder.WriteString("app_role_id=")
	builder.WriteString(au.AppRoleID)
	builder.WriteByte(')')
	return builder.String()
}

// AppUsers is a parsable slice of AppUser.
type AppUsers []*AppUser
