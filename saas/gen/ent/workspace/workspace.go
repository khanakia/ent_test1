// Code generated by ent, DO NOT EDIT.

package workspace

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the workspace type in the database.
	Label = "workspace"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldIsPersonal holds the string denoting the is_personal field in the database.
	FieldIsPersonal = "is_personal"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"
	// EdgeWorkspaceInvites holds the string denoting the workspace_invites edge name in mutations.
	EdgeWorkspaceInvites = "workspace_invites"
	// EdgeWorkspaceUsers holds the string denoting the workspace_users edge name in mutations.
	EdgeWorkspaceUsers = "workspace_users"
	// Table holds the table name of the workspace in the database.
	Table = "workspaces"
	// UsersTable is the table that holds the users relation/edge. The primary key declared below.
	UsersTable = "workspace_users"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
	// WorkspaceInvitesTable is the table that holds the workspace_invites relation/edge.
	WorkspaceInvitesTable = "workspace_invites"
	// WorkspaceInvitesInverseTable is the table name for the WorkspaceInvite entity.
	// It exists in this package in order to avoid circular dependency with the "workspaceinvite" package.
	WorkspaceInvitesInverseTable = "workspace_invites"
	// WorkspaceInvitesColumn is the table column denoting the workspace_invites relation/edge.
	WorkspaceInvitesColumn = "workspace_id"
	// WorkspaceUsersTable is the table that holds the workspace_users relation/edge.
	WorkspaceUsersTable = "workspace_users"
	// WorkspaceUsersInverseTable is the table name for the WorkspaceUser entity.
	// It exists in this package in order to avoid circular dependency with the "workspaceuser" package.
	WorkspaceUsersInverseTable = "workspace_users"
	// WorkspaceUsersColumn is the table column denoting the workspace_users relation/edge.
	WorkspaceUsersColumn = "workspace_id"
)

// Columns holds all SQL columns for workspace fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldIsPersonal,
	FieldUserID,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"workspace_id", "user_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the Workspace queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByIsPersonal orders the results by the is_personal field.
func ByIsPersonal(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsPersonal, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByUsersCount orders the results by users count.
func ByUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newUsersStep(), opts...)
	}
}

// ByUsers orders the results by users terms.
func ByUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkspaceInvitesCount orders the results by workspace_invites count.
func ByWorkspaceInvitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkspaceInvitesStep(), opts...)
	}
}

// ByWorkspaceInvites orders the results by workspace_invites terms.
func ByWorkspaceInvites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkspaceInvitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWorkspaceUsersCount orders the results by workspace_users count.
func ByWorkspaceUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newWorkspaceUsersStep(), opts...)
	}
}

// ByWorkspaceUsers orders the results by workspace_users terms.
func ByWorkspaceUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWorkspaceUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, UsersTable, UsersPrimaryKey...),
	)
}
func newWorkspaceInvitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkspaceInvitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, WorkspaceInvitesTable, WorkspaceInvitesColumn),
	)
}
func newWorkspaceUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WorkspaceUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, WorkspaceUsersTable, WorkspaceUsersColumn),
	)
}
