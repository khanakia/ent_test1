// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/post"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttype"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostStatusCreate is the builder for creating a PostStatus entity.
type PostStatusCreate struct {
	config
	mutation *PostStatusMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (psc *PostStatusCreate) SetCreatedAt(t time.Time) *PostStatusCreate {
	psc.mutation.SetCreatedAt(t)
	return psc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableCreatedAt(t *time.Time) *PostStatusCreate {
	if t != nil {
		psc.SetCreatedAt(*t)
	}
	return psc
}

// SetUpdatedAt sets the "updated_at" field.
func (psc *PostStatusCreate) SetUpdatedAt(t time.Time) *PostStatusCreate {
	psc.mutation.SetUpdatedAt(t)
	return psc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableUpdatedAt(t *time.Time) *PostStatusCreate {
	if t != nil {
		psc.SetUpdatedAt(*t)
	}
	return psc
}

// SetAppID sets the "app_id" field.
func (psc *PostStatusCreate) SetAppID(s string) *PostStatusCreate {
	psc.mutation.SetAppID(s)
	return psc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableAppID(s *string) *PostStatusCreate {
	if s != nil {
		psc.SetAppID(*s)
	}
	return psc
}

// SetName sets the "name" field.
func (psc *PostStatusCreate) SetName(s string) *PostStatusCreate {
	psc.mutation.SetName(s)
	return psc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableName(s *string) *PostStatusCreate {
	if s != nil {
		psc.SetName(*s)
	}
	return psc
}

// SetSlug sets the "slug" field.
func (psc *PostStatusCreate) SetSlug(s string) *PostStatusCreate {
	psc.mutation.SetSlug(s)
	return psc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableSlug(s *string) *PostStatusCreate {
	if s != nil {
		psc.SetSlug(*s)
	}
	return psc
}

// SetStatus sets the "status" field.
func (psc *PostStatusCreate) SetStatus(b bool) *PostStatusCreate {
	psc.mutation.SetStatus(b)
	return psc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableStatus(b *bool) *PostStatusCreate {
	if b != nil {
		psc.SetStatus(*b)
	}
	return psc
}

// SetPostTypeID sets the "post_type_id" field.
func (psc *PostStatusCreate) SetPostTypeID(s string) *PostStatusCreate {
	psc.mutation.SetPostTypeID(s)
	return psc
}

// SetNillablePostTypeID sets the "post_type_id" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillablePostTypeID(s *string) *PostStatusCreate {
	if s != nil {
		psc.SetPostTypeID(*s)
	}
	return psc
}

// SetID sets the "id" field.
func (psc *PostStatusCreate) SetID(s string) *PostStatusCreate {
	psc.mutation.SetID(s)
	return psc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (psc *PostStatusCreate) SetNillableID(s *string) *PostStatusCreate {
	if s != nil {
		psc.SetID(*s)
	}
	return psc
}

// SetPostType sets the "post_type" edge to the PostType entity.
func (psc *PostStatusCreate) SetPostType(p *PostType) *PostStatusCreate {
	return psc.SetPostTypeID(p.ID)
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (psc *PostStatusCreate) AddPostIDs(ids ...string) *PostStatusCreate {
	psc.mutation.AddPostIDs(ids...)
	return psc
}

// AddPosts adds the "posts" edges to the Post entity.
func (psc *PostStatusCreate) AddPosts(p ...*Post) *PostStatusCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return psc.AddPostIDs(ids...)
}

// Mutation returns the PostStatusMutation object of the builder.
func (psc *PostStatusCreate) Mutation() *PostStatusMutation {
	return psc.mutation
}

// Save creates the PostStatus in the database.
func (psc *PostStatusCreate) Save(ctx context.Context) (*PostStatus, error) {
	psc.defaults()
	return withHooks(ctx, psc.sqlSave, psc.mutation, psc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (psc *PostStatusCreate) SaveX(ctx context.Context) *PostStatus {
	v, err := psc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (psc *PostStatusCreate) Exec(ctx context.Context) error {
	_, err := psc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (psc *PostStatusCreate) ExecX(ctx context.Context) {
	if err := psc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (psc *PostStatusCreate) defaults() {
	if _, ok := psc.mutation.CreatedAt(); !ok {
		v := poststatus.DefaultCreatedAt()
		psc.mutation.SetCreatedAt(v)
	}
	if _, ok := psc.mutation.UpdatedAt(); !ok {
		v := poststatus.DefaultUpdatedAt()
		psc.mutation.SetUpdatedAt(v)
	}
	if _, ok := psc.mutation.ID(); !ok {
		v := poststatus.DefaultID()
		psc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (psc *PostStatusCreate) check() error {
	return nil
}

func (psc *PostStatusCreate) sqlSave(ctx context.Context) (*PostStatus, error) {
	if err := psc.check(); err != nil {
		return nil, err
	}
	_node, _spec := psc.createSpec()
	if err := sqlgraph.CreateNode(ctx, psc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostStatus.ID type: %T", _spec.ID.Value)
		}
	}
	psc.mutation.id = &_node.ID
	psc.mutation.done = true
	return _node, nil
}

func (psc *PostStatusCreate) createSpec() (*PostStatus, *sqlgraph.CreateSpec) {
	var (
		_node = &PostStatus{config: psc.config}
		_spec = sqlgraph.NewCreateSpec(poststatus.Table, sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString))
	)
	_spec.OnConflict = psc.conflict
	if id, ok := psc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := psc.mutation.CreatedAt(); ok {
		_spec.SetField(poststatus.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := psc.mutation.UpdatedAt(); ok {
		_spec.SetField(poststatus.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := psc.mutation.AppID(); ok {
		_spec.SetField(poststatus.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := psc.mutation.Name(); ok {
		_spec.SetField(poststatus.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := psc.mutation.Slug(); ok {
		_spec.SetField(poststatus.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := psc.mutation.Status(); ok {
		_spec.SetField(poststatus.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if nodes := psc.mutation.PostTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   poststatus.PostTypeTable,
			Columns: []string{poststatus.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := psc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   poststatus.PostsTable,
			Columns: []string{poststatus.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostStatus.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostStatusUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (psc *PostStatusCreate) OnConflict(opts ...sql.ConflictOption) *PostStatusUpsertOne {
	psc.conflict = opts
	return &PostStatusUpsertOne{
		create: psc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (psc *PostStatusCreate) OnConflictColumns(columns ...string) *PostStatusUpsertOne {
	psc.conflict = append(psc.conflict, sql.ConflictColumns(columns...))
	return &PostStatusUpsertOne{
		create: psc,
	}
}

type (
	// PostStatusUpsertOne is the builder for "upsert"-ing
	//  one PostStatus node.
	PostStatusUpsertOne struct {
		create *PostStatusCreate
	}

	// PostStatusUpsert is the "OnConflict" setter.
	PostStatusUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PostStatusUpsert) SetUpdatedAt(v time.Time) *PostStatusUpsert {
	u.Set(poststatus.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdateUpdatedAt() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostStatusUpsert) ClearUpdatedAt() *PostStatusUpsert {
	u.SetNull(poststatus.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *PostStatusUpsert) SetAppID(v string) *PostStatusUpsert {
	u.Set(poststatus.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdateAppID() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostStatusUpsert) ClearAppID() *PostStatusUpsert {
	u.SetNull(poststatus.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *PostStatusUpsert) SetName(v string) *PostStatusUpsert {
	u.Set(poststatus.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdateName() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PostStatusUpsert) ClearName() *PostStatusUpsert {
	u.SetNull(poststatus.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostStatusUpsert) SetSlug(v string) *PostStatusUpsert {
	u.Set(poststatus.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdateSlug() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *PostStatusUpsert) ClearSlug() *PostStatusUpsert {
	u.SetNull(poststatus.FieldSlug)
	return u
}

// SetStatus sets the "status" field.
func (u *PostStatusUpsert) SetStatus(v bool) *PostStatusUpsert {
	u.Set(poststatus.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdateStatus() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PostStatusUpsert) ClearStatus() *PostStatusUpsert {
	u.SetNull(poststatus.FieldStatus)
	return u
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostStatusUpsert) SetPostTypeID(v string) *PostStatusUpsert {
	u.Set(poststatus.FieldPostTypeID, v)
	return u
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostStatusUpsert) UpdatePostTypeID() *PostStatusUpsert {
	u.SetExcluded(poststatus.FieldPostTypeID)
	return u
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostStatusUpsert) ClearPostTypeID() *PostStatusUpsert {
	u.SetNull(poststatus.FieldPostTypeID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(poststatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostStatusUpsertOne) UpdateNewValues() *PostStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(poststatus.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(poststatus.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostStatusUpsertOne) Ignore() *PostStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostStatusUpsertOne) DoNothing() *PostStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostStatusCreate.OnConflict
// documentation for more info.
func (u *PostStatusUpsertOne) Update(set func(*PostStatusUpsert)) *PostStatusUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostStatusUpsertOne) SetUpdatedAt(v time.Time) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdateUpdatedAt() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostStatusUpsertOne) ClearUpdatedAt() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PostStatusUpsertOne) SetAppID(v string) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdateAppID() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostStatusUpsertOne) ClearAppID() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PostStatusUpsertOne) SetName(v string) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdateName() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostStatusUpsertOne) ClearName() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostStatusUpsertOne) SetSlug(v string) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdateSlug() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostStatusUpsertOne) ClearSlug() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearSlug()
	})
}

// SetStatus sets the "status" field.
func (u *PostStatusUpsertOne) SetStatus(v bool) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdateStatus() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostStatusUpsertOne) ClearStatus() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearStatus()
	})
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostStatusUpsertOne) SetPostTypeID(v string) *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetPostTypeID(v)
	})
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostStatusUpsertOne) UpdatePostTypeID() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdatePostTypeID()
	})
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostStatusUpsertOne) ClearPostTypeID() *PostStatusUpsertOne {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearPostTypeID()
	})
}

// Exec executes the query.
func (u *PostStatusUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostStatusCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostStatusUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostStatusUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PostStatusUpsertOne.ID is not supported by MySQL driver. Use PostStatusUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostStatusUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostStatusCreateBulk is the builder for creating many PostStatus entities in bulk.
type PostStatusCreateBulk struct {
	config
	err      error
	builders []*PostStatusCreate
	conflict []sql.ConflictOption
}

// Save creates the PostStatus entities in the database.
func (pscb *PostStatusCreateBulk) Save(ctx context.Context) ([]*PostStatus, error) {
	if pscb.err != nil {
		return nil, pscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pscb.builders))
	nodes := make([]*PostStatus, len(pscb.builders))
	mutators := make([]Mutator, len(pscb.builders))
	for i := range pscb.builders {
		func(i int, root context.Context) {
			builder := pscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostStatusMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pscb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pscb *PostStatusCreateBulk) SaveX(ctx context.Context) []*PostStatus {
	v, err := pscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pscb *PostStatusCreateBulk) Exec(ctx context.Context) error {
	_, err := pscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pscb *PostStatusCreateBulk) ExecX(ctx context.Context) {
	if err := pscb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostStatus.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostStatusUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pscb *PostStatusCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostStatusUpsertBulk {
	pscb.conflict = opts
	return &PostStatusUpsertBulk{
		create: pscb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pscb *PostStatusCreateBulk) OnConflictColumns(columns ...string) *PostStatusUpsertBulk {
	pscb.conflict = append(pscb.conflict, sql.ConflictColumns(columns...))
	return &PostStatusUpsertBulk{
		create: pscb,
	}
}

// PostStatusUpsertBulk is the builder for "upsert"-ing
// a bulk of PostStatus nodes.
type PostStatusUpsertBulk struct {
	create *PostStatusCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(poststatus.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostStatusUpsertBulk) UpdateNewValues() *PostStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(poststatus.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(poststatus.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostStatus.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostStatusUpsertBulk) Ignore() *PostStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostStatusUpsertBulk) DoNothing() *PostStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostStatusCreateBulk.OnConflict
// documentation for more info.
func (u *PostStatusUpsertBulk) Update(set func(*PostStatusUpsert)) *PostStatusUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostStatusUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostStatusUpsertBulk) SetUpdatedAt(v time.Time) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdateUpdatedAt() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostStatusUpsertBulk) ClearUpdatedAt() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PostStatusUpsertBulk) SetAppID(v string) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdateAppID() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostStatusUpsertBulk) ClearAppID() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PostStatusUpsertBulk) SetName(v string) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdateName() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostStatusUpsertBulk) ClearName() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostStatusUpsertBulk) SetSlug(v string) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdateSlug() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostStatusUpsertBulk) ClearSlug() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearSlug()
	})
}

// SetStatus sets the "status" field.
func (u *PostStatusUpsertBulk) SetStatus(v bool) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdateStatus() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostStatusUpsertBulk) ClearStatus() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearStatus()
	})
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostStatusUpsertBulk) SetPostTypeID(v string) *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.SetPostTypeID(v)
	})
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostStatusUpsertBulk) UpdatePostTypeID() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.UpdatePostTypeID()
	})
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostStatusUpsertBulk) ClearPostTypeID() *PostStatusUpsertBulk {
	return u.Update(func(s *PostStatusUpsert) {
		s.ClearPostTypeID()
	})
}

// Exec executes the query.
func (u *PostStatusUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostStatusCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostStatusCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostStatusUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
