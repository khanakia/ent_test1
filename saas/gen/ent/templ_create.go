// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/templ"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TemplCreate is the builder for creating a Templ entity.
type TemplCreate struct {
	config
	mutation *TemplMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (tc *TemplCreate) SetCreatedAt(t time.Time) *TemplCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TemplCreate) SetNillableCreatedAt(t *time.Time) *TemplCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TemplCreate) SetUpdatedAt(t time.Time) *TemplCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TemplCreate) SetNillableUpdatedAt(t *time.Time) *TemplCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetAppID sets the "app_id" field.
func (tc *TemplCreate) SetAppID(s string) *TemplCreate {
	tc.mutation.SetAppID(s)
	return tc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (tc *TemplCreate) SetNillableAppID(s *string) *TemplCreate {
	if s != nil {
		tc.SetAppID(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TemplCreate) SetName(s string) *TemplCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tc *TemplCreate) SetNillableName(s *string) *TemplCreate {
	if s != nil {
		tc.SetName(*s)
	}
	return tc
}

// SetBody sets the "body" field.
func (tc *TemplCreate) SetBody(s string) *TemplCreate {
	tc.mutation.SetBody(s)
	return tc
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (tc *TemplCreate) SetNillableBody(s *string) *TemplCreate {
	if s != nil {
		tc.SetBody(*s)
	}
	return tc
}

// SetCompiled sets the "compiled" field.
func (tc *TemplCreate) SetCompiled(s string) *TemplCreate {
	tc.mutation.SetCompiled(s)
	return tc
}

// SetNillableCompiled sets the "compiled" field if the given value is not nil.
func (tc *TemplCreate) SetNillableCompiled(s *string) *TemplCreate {
	if s != nil {
		tc.SetCompiled(*s)
	}
	return tc
}

// SetStatus sets the "status" field.
func (tc *TemplCreate) SetStatus(b bool) *TemplCreate {
	tc.mutation.SetStatus(b)
	return tc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (tc *TemplCreate) SetNillableStatus(b *bool) *TemplCreate {
	if b != nil {
		tc.SetStatus(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TemplCreate) SetID(s string) *TemplCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TemplCreate) SetNillableID(s *string) *TemplCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TemplMutation object of the builder.
func (tc *TemplCreate) Mutation() *TemplMutation {
	return tc.mutation
}

// Save creates the Templ in the database.
func (tc *TemplCreate) Save(ctx context.Context) (*Templ, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TemplCreate) SaveX(ctx context.Context) *Templ {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TemplCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TemplCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TemplCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := templ.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := templ.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Status(); !ok {
		v := templ.DefaultStatus
		tc.mutation.SetStatus(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		v := templ.DefaultID()
		tc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TemplCreate) check() error {
	return nil
}

func (tc *TemplCreate) sqlSave(ctx context.Context) (*Templ, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Templ.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TemplCreate) createSpec() (*Templ, *sqlgraph.CreateSpec) {
	var (
		_node = &Templ{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(templ.Table, sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString))
	)
	_spec.OnConflict = tc.conflict
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(templ.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(templ.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.AppID(); ok {
		_spec.SetField(templ.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(templ.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Body(); ok {
		_spec.SetField(templ.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := tc.mutation.Compiled(); ok {
		_spec.SetField(templ.FieldCompiled, field.TypeString, value)
		_node.Compiled = value
	}
	if value, ok := tc.mutation.Status(); ok {
		_spec.SetField(templ.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Templ.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tc *TemplCreate) OnConflict(opts ...sql.ConflictOption) *TemplUpsertOne {
	tc.conflict = opts
	return &TemplUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Templ.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TemplCreate) OnConflictColumns(columns ...string) *TemplUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TemplUpsertOne{
		create: tc,
	}
}

type (
	// TemplUpsertOne is the builder for "upsert"-ing
	//  one Templ node.
	TemplUpsertOne struct {
		create *TemplCreate
	}

	// TemplUpsert is the "OnConflict" setter.
	TemplUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplUpsert) SetUpdatedAt(v time.Time) *TemplUpsert {
	u.Set(templ.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplUpsert) UpdateUpdatedAt() *TemplUpsert {
	u.SetExcluded(templ.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TemplUpsert) ClearUpdatedAt() *TemplUpsert {
	u.SetNull(templ.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *TemplUpsert) SetAppID(v string) *TemplUpsert {
	u.Set(templ.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TemplUpsert) UpdateAppID() *TemplUpsert {
	u.SetExcluded(templ.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *TemplUpsert) ClearAppID() *TemplUpsert {
	u.SetNull(templ.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *TemplUpsert) SetName(v string) *TemplUpsert {
	u.Set(templ.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplUpsert) UpdateName() *TemplUpsert {
	u.SetExcluded(templ.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *TemplUpsert) ClearName() *TemplUpsert {
	u.SetNull(templ.FieldName)
	return u
}

// SetBody sets the "body" field.
func (u *TemplUpsert) SetBody(v string) *TemplUpsert {
	u.Set(templ.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TemplUpsert) UpdateBody() *TemplUpsert {
	u.SetExcluded(templ.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *TemplUpsert) ClearBody() *TemplUpsert {
	u.SetNull(templ.FieldBody)
	return u
}

// SetCompiled sets the "compiled" field.
func (u *TemplUpsert) SetCompiled(v string) *TemplUpsert {
	u.Set(templ.FieldCompiled, v)
	return u
}

// UpdateCompiled sets the "compiled" field to the value that was provided on create.
func (u *TemplUpsert) UpdateCompiled() *TemplUpsert {
	u.SetExcluded(templ.FieldCompiled)
	return u
}

// ClearCompiled clears the value of the "compiled" field.
func (u *TemplUpsert) ClearCompiled() *TemplUpsert {
	u.SetNull(templ.FieldCompiled)
	return u
}

// SetStatus sets the "status" field.
func (u *TemplUpsert) SetStatus(v bool) *TemplUpsert {
	u.Set(templ.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TemplUpsert) UpdateStatus() *TemplUpsert {
	u.SetExcluded(templ.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *TemplUpsert) ClearStatus() *TemplUpsert {
	u.SetNull(templ.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Templ.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(templ.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplUpsertOne) UpdateNewValues() *TemplUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(templ.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(templ.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Templ.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TemplUpsertOne) Ignore() *TemplUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplUpsertOne) DoNothing() *TemplUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplCreate.OnConflict
// documentation for more info.
func (u *TemplUpsertOne) Update(set func(*TemplUpsert)) *TemplUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplUpsertOne) SetUpdatedAt(v time.Time) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateUpdatedAt() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TemplUpsertOne) ClearUpdatedAt() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TemplUpsertOne) SetAppID(v string) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateAppID() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TemplUpsertOne) ClearAppID() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *TemplUpsertOne) SetName(v string) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateName() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TemplUpsertOne) ClearName() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearName()
	})
}

// SetBody sets the "body" field.
func (u *TemplUpsertOne) SetBody(v string) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateBody() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TemplUpsertOne) ClearBody() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearBody()
	})
}

// SetCompiled sets the "compiled" field.
func (u *TemplUpsertOne) SetCompiled(v string) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetCompiled(v)
	})
}

// UpdateCompiled sets the "compiled" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateCompiled() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateCompiled()
	})
}

// ClearCompiled clears the value of the "compiled" field.
func (u *TemplUpsertOne) ClearCompiled() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearCompiled()
	})
}

// SetStatus sets the "status" field.
func (u *TemplUpsertOne) SetStatus(v bool) *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TemplUpsertOne) UpdateStatus() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TemplUpsertOne) ClearStatus() *TemplUpsertOne {
	return u.Update(func(s *TemplUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *TemplUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TemplUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: TemplUpsertOne.ID is not supported by MySQL driver. Use TemplUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TemplUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TemplCreateBulk is the builder for creating many Templ entities in bulk.
type TemplCreateBulk struct {
	config
	err      error
	builders []*TemplCreate
	conflict []sql.ConflictOption
}

// Save creates the Templ entities in the database.
func (tcb *TemplCreateBulk) Save(ctx context.Context) ([]*Templ, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Templ, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TemplMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TemplCreateBulk) SaveX(ctx context.Context) []*Templ {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TemplCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TemplCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Templ.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TemplUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (tcb *TemplCreateBulk) OnConflict(opts ...sql.ConflictOption) *TemplUpsertBulk {
	tcb.conflict = opts
	return &TemplUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Templ.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TemplCreateBulk) OnConflictColumns(columns ...string) *TemplUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TemplUpsertBulk{
		create: tcb,
	}
}

// TemplUpsertBulk is the builder for "upsert"-ing
// a bulk of Templ nodes.
type TemplUpsertBulk struct {
	create *TemplCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Templ.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(templ.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *TemplUpsertBulk) UpdateNewValues() *TemplUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(templ.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(templ.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Templ.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TemplUpsertBulk) Ignore() *TemplUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TemplUpsertBulk) DoNothing() *TemplUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TemplCreateBulk.OnConflict
// documentation for more info.
func (u *TemplUpsertBulk) Update(set func(*TemplUpsert)) *TemplUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TemplUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TemplUpsertBulk) SetUpdatedAt(v time.Time) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateUpdatedAt() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *TemplUpsertBulk) ClearUpdatedAt() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *TemplUpsertBulk) SetAppID(v string) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateAppID() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *TemplUpsertBulk) ClearAppID() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *TemplUpsertBulk) SetName(v string) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateName() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *TemplUpsertBulk) ClearName() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearName()
	})
}

// SetBody sets the "body" field.
func (u *TemplUpsertBulk) SetBody(v string) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateBody() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *TemplUpsertBulk) ClearBody() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearBody()
	})
}

// SetCompiled sets the "compiled" field.
func (u *TemplUpsertBulk) SetCompiled(v string) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetCompiled(v)
	})
}

// UpdateCompiled sets the "compiled" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateCompiled() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateCompiled()
	})
}

// ClearCompiled clears the value of the "compiled" field.
func (u *TemplUpsertBulk) ClearCompiled() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearCompiled()
	})
}

// SetStatus sets the "status" field.
func (u *TemplUpsertBulk) SetStatus(v bool) *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *TemplUpsertBulk) UpdateStatus() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *TemplUpsertBulk) ClearStatus() *TemplUpsertBulk {
	return u.Update(func(s *TemplUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *TemplUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TemplCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TemplCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TemplUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
