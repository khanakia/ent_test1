// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/gen/ent/posttypeform"
	"saas/gen/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostTypeFormDelete is the builder for deleting a PostTypeForm entity.
type PostTypeFormDelete struct {
	config
	hooks    []Hook
	mutation *PostTypeFormMutation
}

// Where appends a list predicates to the PostTypeFormDelete builder.
func (ptfd *PostTypeFormDelete) Where(ps ...predicate.PostTypeForm) *PostTypeFormDelete {
	ptfd.mutation.Where(ps...)
	return ptfd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (ptfd *PostTypeFormDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, ptfd.sqlExec, ptfd.mutation, ptfd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfd *PostTypeFormDelete) ExecX(ctx context.Context) int {
	n, err := ptfd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (ptfd *PostTypeFormDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(posttypeform.Table, sqlgraph.NewFieldSpec(posttypeform.FieldID, field.TypeString))
	if ps := ptfd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, ptfd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	ptfd.mutation.done = true
	return affected, err
}

// PostTypeFormDeleteOne is the builder for deleting a single PostTypeForm entity.
type PostTypeFormDeleteOne struct {
	ptfd *PostTypeFormDelete
}

// Where appends a list predicates to the PostTypeFormDelete builder.
func (ptfdo *PostTypeFormDeleteOne) Where(ps ...predicate.PostTypeForm) *PostTypeFormDeleteOne {
	ptfdo.ptfd.mutation.Where(ps...)
	return ptfdo
}

// Exec executes the deletion query.
func (ptfdo *PostTypeFormDeleteOne) Exec(ctx context.Context) error {
	n, err := ptfdo.ptfd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{posttypeform.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfdo *PostTypeFormDeleteOne) ExecX(ctx context.Context) {
	if err := ptfdo.Exec(ctx); err != nil {
		panic(err)
	}
}
