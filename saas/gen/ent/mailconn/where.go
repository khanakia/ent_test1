// Code generated by ent, DO NOT EDIT.

package mailconn

import (
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldUpdatedAt, v))
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldAppID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldName, v))
}

// Host applies equality check predicate on the "host" field. It's identical to HostEQ.
func Host(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldHost, v))
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldPort, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldPassword, v))
}

// Encryption applies equality check predicate on the "encryption" field. It's identical to EncryptionEQ.
func Encryption(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldEncryption, v))
}

// FromName applies equality check predicate on the "from_name" field. It's identical to FromNameEQ.
func FromName(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldFromName, v))
}

// FromEmail applies equality check predicate on the "from_email" field. It's identical to FromEmailEQ.
func FromEmail(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldFromEmail, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v bool) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldStatus, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldUpdatedAt))
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldAppID, v))
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldAppID, v))
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldAppID, vs...))
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldAppID, vs...))
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldAppID, v))
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldAppID, v))
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldAppID, v))
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldAppID, v))
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldAppID, v))
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldAppID, v))
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldAppID, v))
}

// AppIDIsNil applies the IsNil predicate on the "app_id" field.
func AppIDIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldAppID))
}

// AppIDNotNil applies the NotNil predicate on the "app_id" field.
func AppIDNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldAppID))
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldAppID, v))
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldAppID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldName, v))
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldName))
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldName))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldName, v))
}

// HostEQ applies the EQ predicate on the "host" field.
func HostEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldHost, v))
}

// HostNEQ applies the NEQ predicate on the "host" field.
func HostNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldHost, v))
}

// HostIn applies the In predicate on the "host" field.
func HostIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldHost, vs...))
}

// HostNotIn applies the NotIn predicate on the "host" field.
func HostNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldHost, vs...))
}

// HostGT applies the GT predicate on the "host" field.
func HostGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldHost, v))
}

// HostGTE applies the GTE predicate on the "host" field.
func HostGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldHost, v))
}

// HostLT applies the LT predicate on the "host" field.
func HostLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldHost, v))
}

// HostLTE applies the LTE predicate on the "host" field.
func HostLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldHost, v))
}

// HostContains applies the Contains predicate on the "host" field.
func HostContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldHost, v))
}

// HostHasPrefix applies the HasPrefix predicate on the "host" field.
func HostHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldHost, v))
}

// HostHasSuffix applies the HasSuffix predicate on the "host" field.
func HostHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldHost, v))
}

// HostIsNil applies the IsNil predicate on the "host" field.
func HostIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldHost))
}

// HostNotNil applies the NotNil predicate on the "host" field.
func HostNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldHost))
}

// HostEqualFold applies the EqualFold predicate on the "host" field.
func HostEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldHost, v))
}

// HostContainsFold applies the ContainsFold predicate on the "host" field.
func HostContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldHost, v))
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldPort, v))
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldPort, v))
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...int) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldPort, vs...))
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...int) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldPort, vs...))
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldPort, v))
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldPort, v))
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldPort, v))
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldPort, v))
}

// PortIsNil applies the IsNil predicate on the "port" field.
func PortIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldPort))
}

// PortNotNil applies the NotNil predicate on the "port" field.
func PortNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldPort))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameIsNil applies the IsNil predicate on the "username" field.
func UsernameIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldUsername))
}

// UsernameNotNil applies the NotNil predicate on the "username" field.
func UsernameNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldUsername))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldPassword, v))
}

// EncryptionEQ applies the EQ predicate on the "encryption" field.
func EncryptionEQ(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldEncryption, v))
}

// EncryptionNEQ applies the NEQ predicate on the "encryption" field.
func EncryptionNEQ(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldEncryption, v))
}

// EncryptionIn applies the In predicate on the "encryption" field.
func EncryptionIn(vs ...int) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldEncryption, vs...))
}

// EncryptionNotIn applies the NotIn predicate on the "encryption" field.
func EncryptionNotIn(vs ...int) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldEncryption, vs...))
}

// EncryptionGT applies the GT predicate on the "encryption" field.
func EncryptionGT(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldEncryption, v))
}

// EncryptionGTE applies the GTE predicate on the "encryption" field.
func EncryptionGTE(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldEncryption, v))
}

// EncryptionLT applies the LT predicate on the "encryption" field.
func EncryptionLT(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldEncryption, v))
}

// EncryptionLTE applies the LTE predicate on the "encryption" field.
func EncryptionLTE(v int) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldEncryption, v))
}

// EncryptionIsNil applies the IsNil predicate on the "encryption" field.
func EncryptionIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldEncryption))
}

// EncryptionNotNil applies the NotNil predicate on the "encryption" field.
func EncryptionNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldEncryption))
}

// FromNameEQ applies the EQ predicate on the "from_name" field.
func FromNameEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldFromName, v))
}

// FromNameNEQ applies the NEQ predicate on the "from_name" field.
func FromNameNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldFromName, v))
}

// FromNameIn applies the In predicate on the "from_name" field.
func FromNameIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldFromName, vs...))
}

// FromNameNotIn applies the NotIn predicate on the "from_name" field.
func FromNameNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldFromName, vs...))
}

// FromNameGT applies the GT predicate on the "from_name" field.
func FromNameGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldFromName, v))
}

// FromNameGTE applies the GTE predicate on the "from_name" field.
func FromNameGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldFromName, v))
}

// FromNameLT applies the LT predicate on the "from_name" field.
func FromNameLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldFromName, v))
}

// FromNameLTE applies the LTE predicate on the "from_name" field.
func FromNameLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldFromName, v))
}

// FromNameContains applies the Contains predicate on the "from_name" field.
func FromNameContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldFromName, v))
}

// FromNameHasPrefix applies the HasPrefix predicate on the "from_name" field.
func FromNameHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldFromName, v))
}

// FromNameHasSuffix applies the HasSuffix predicate on the "from_name" field.
func FromNameHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldFromName, v))
}

// FromNameIsNil applies the IsNil predicate on the "from_name" field.
func FromNameIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldFromName))
}

// FromNameNotNil applies the NotNil predicate on the "from_name" field.
func FromNameNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldFromName))
}

// FromNameEqualFold applies the EqualFold predicate on the "from_name" field.
func FromNameEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldFromName, v))
}

// FromNameContainsFold applies the ContainsFold predicate on the "from_name" field.
func FromNameContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldFromName, v))
}

// FromEmailEQ applies the EQ predicate on the "from_email" field.
func FromEmailEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldFromEmail, v))
}

// FromEmailNEQ applies the NEQ predicate on the "from_email" field.
func FromEmailNEQ(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldFromEmail, v))
}

// FromEmailIn applies the In predicate on the "from_email" field.
func FromEmailIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldIn(FieldFromEmail, vs...))
}

// FromEmailNotIn applies the NotIn predicate on the "from_email" field.
func FromEmailNotIn(vs ...string) predicate.MailConn {
	return predicate.MailConn(sql.FieldNotIn(FieldFromEmail, vs...))
}

// FromEmailGT applies the GT predicate on the "from_email" field.
func FromEmailGT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGT(FieldFromEmail, v))
}

// FromEmailGTE applies the GTE predicate on the "from_email" field.
func FromEmailGTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldGTE(FieldFromEmail, v))
}

// FromEmailLT applies the LT predicate on the "from_email" field.
func FromEmailLT(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLT(FieldFromEmail, v))
}

// FromEmailLTE applies the LTE predicate on the "from_email" field.
func FromEmailLTE(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldLTE(FieldFromEmail, v))
}

// FromEmailContains applies the Contains predicate on the "from_email" field.
func FromEmailContains(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContains(FieldFromEmail, v))
}

// FromEmailHasPrefix applies the HasPrefix predicate on the "from_email" field.
func FromEmailHasPrefix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasPrefix(FieldFromEmail, v))
}

// FromEmailHasSuffix applies the HasSuffix predicate on the "from_email" field.
func FromEmailHasSuffix(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldHasSuffix(FieldFromEmail, v))
}

// FromEmailIsNil applies the IsNil predicate on the "from_email" field.
func FromEmailIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldFromEmail))
}

// FromEmailNotNil applies the NotNil predicate on the "from_email" field.
func FromEmailNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldFromEmail))
}

// FromEmailEqualFold applies the EqualFold predicate on the "from_email" field.
func FromEmailEqualFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldEqualFold(FieldFromEmail, v))
}

// FromEmailContainsFold applies the ContainsFold predicate on the "from_email" field.
func FromEmailContainsFold(v string) predicate.MailConn {
	return predicate.MailConn(sql.FieldContainsFold(FieldFromEmail, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v bool) predicate.MailConn {
	return predicate.MailConn(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v bool) predicate.MailConn {
	return predicate.MailConn(sql.FieldNEQ(FieldStatus, v))
}

// StatusIsNil applies the IsNil predicate on the "status" field.
func StatusIsNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldIsNull(FieldStatus))
}

// StatusNotNil applies the NotNil predicate on the "status" field.
func StatusNotNil() predicate.MailConn {
	return predicate.MailConn(sql.FieldNotNull(FieldStatus))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MailConn) predicate.MailConn {
	return predicate.MailConn(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MailConn) predicate.MailConn {
	return predicate.MailConn(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MailConn) predicate.MailConn {
	return predicate.MailConn(sql.NotPredicates(p))
}
