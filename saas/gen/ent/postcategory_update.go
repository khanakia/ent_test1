// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostCategoryUpdate is the builder for updating PostCategory entities.
type PostCategoryUpdate struct {
	config
	hooks     []Hook
	mutation  *PostCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostCategoryUpdate builder.
func (pcu *PostCategoryUpdate) Where(ps ...predicate.PostCategory) *PostCategoryUpdate {
	pcu.mutation.Where(ps...)
	return pcu
}

// SetUpdatedAt sets the "updated_at" field.
func (pcu *PostCategoryUpdate) SetUpdatedAt(t time.Time) *PostCategoryUpdate {
	pcu.mutation.SetUpdatedAt(t)
	return pcu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcu *PostCategoryUpdate) ClearUpdatedAt() *PostCategoryUpdate {
	pcu.mutation.ClearUpdatedAt()
	return pcu
}

// SetAppID sets the "app_id" field.
func (pcu *PostCategoryUpdate) SetAppID(s string) *PostCategoryUpdate {
	pcu.mutation.SetAppID(s)
	return pcu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableAppID(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetAppID(*s)
	}
	return pcu
}

// ClearAppID clears the value of the "app_id" field.
func (pcu *PostCategoryUpdate) ClearAppID() *PostCategoryUpdate {
	pcu.mutation.ClearAppID()
	return pcu
}

// SetName sets the "name" field.
func (pcu *PostCategoryUpdate) SetName(s string) *PostCategoryUpdate {
	pcu.mutation.SetName(s)
	return pcu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableName(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetName(*s)
	}
	return pcu
}

// ClearName clears the value of the "name" field.
func (pcu *PostCategoryUpdate) ClearName() *PostCategoryUpdate {
	pcu.mutation.ClearName()
	return pcu
}

// SetSlug sets the "slug" field.
func (pcu *PostCategoryUpdate) SetSlug(s string) *PostCategoryUpdate {
	pcu.mutation.SetSlug(s)
	return pcu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableSlug(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetSlug(*s)
	}
	return pcu
}

// ClearSlug clears the value of the "slug" field.
func (pcu *PostCategoryUpdate) ClearSlug() *PostCategoryUpdate {
	pcu.mutation.ClearSlug()
	return pcu
}

// SetStatus sets the "status" field.
func (pcu *PostCategoryUpdate) SetStatus(s string) *PostCategoryUpdate {
	pcu.mutation.SetStatus(s)
	return pcu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableStatus(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetStatus(*s)
	}
	return pcu
}

// ClearStatus clears the value of the "status" field.
func (pcu *PostCategoryUpdate) ClearStatus() *PostCategoryUpdate {
	pcu.mutation.ClearStatus()
	return pcu
}

// SetExcerpt sets the "excerpt" field.
func (pcu *PostCategoryUpdate) SetExcerpt(s string) *PostCategoryUpdate {
	pcu.mutation.SetExcerpt(s)
	return pcu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableExcerpt(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetExcerpt(*s)
	}
	return pcu
}

// ClearExcerpt clears the value of the "excerpt" field.
func (pcu *PostCategoryUpdate) ClearExcerpt() *PostCategoryUpdate {
	pcu.mutation.ClearExcerpt()
	return pcu
}

// SetContent sets the "content" field.
func (pcu *PostCategoryUpdate) SetContent(s string) *PostCategoryUpdate {
	pcu.mutation.SetContent(s)
	return pcu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableContent(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetContent(*s)
	}
	return pcu
}

// ClearContent clears the value of the "content" field.
func (pcu *PostCategoryUpdate) ClearContent() *PostCategoryUpdate {
	pcu.mutation.ClearContent()
	return pcu
}

// SetMetaTitle sets the "meta_title" field.
func (pcu *PostCategoryUpdate) SetMetaTitle(s string) *PostCategoryUpdate {
	pcu.mutation.SetMetaTitle(s)
	return pcu
}

// SetNillableMetaTitle sets the "meta_title" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableMetaTitle(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetMetaTitle(*s)
	}
	return pcu
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (pcu *PostCategoryUpdate) ClearMetaTitle() *PostCategoryUpdate {
	pcu.mutation.ClearMetaTitle()
	return pcu
}

// SetMetaDescr sets the "meta_descr" field.
func (pcu *PostCategoryUpdate) SetMetaDescr(s string) *PostCategoryUpdate {
	pcu.mutation.SetMetaDescr(s)
	return pcu
}

// SetNillableMetaDescr sets the "meta_descr" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableMetaDescr(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetMetaDescr(*s)
	}
	return pcu
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (pcu *PostCategoryUpdate) ClearMetaDescr() *PostCategoryUpdate {
	pcu.mutation.ClearMetaDescr()
	return pcu
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (pcu *PostCategoryUpdate) SetMetaCanonicalURL(s string) *PostCategoryUpdate {
	pcu.mutation.SetMetaCanonicalURL(s)
	return pcu
}

// SetNillableMetaCanonicalURL sets the "meta_canonical_url" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableMetaCanonicalURL(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetMetaCanonicalURL(*s)
	}
	return pcu
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (pcu *PostCategoryUpdate) ClearMetaCanonicalURL() *PostCategoryUpdate {
	pcu.mutation.ClearMetaCanonicalURL()
	return pcu
}

// SetMetaRobots sets the "meta_robots" field.
func (pcu *PostCategoryUpdate) SetMetaRobots(s string) *PostCategoryUpdate {
	pcu.mutation.SetMetaRobots(s)
	return pcu
}

// SetNillableMetaRobots sets the "meta_robots" field if the given value is not nil.
func (pcu *PostCategoryUpdate) SetNillableMetaRobots(s *string) *PostCategoryUpdate {
	if s != nil {
		pcu.SetMetaRobots(*s)
	}
	return pcu
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (pcu *PostCategoryUpdate) ClearMetaRobots() *PostCategoryUpdate {
	pcu.mutation.ClearMetaRobots()
	return pcu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pcu *PostCategoryUpdate) AddPostIDs(ids ...string) *PostCategoryUpdate {
	pcu.mutation.AddPostIDs(ids...)
	return pcu
}

// AddPosts adds the "posts" edges to the Post entity.
func (pcu *PostCategoryUpdate) AddPosts(p ...*Post) *PostCategoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.AddPostIDs(ids...)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcu *PostCategoryUpdate) Mutation() *PostCategoryMutation {
	return pcu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (pcu *PostCategoryUpdate) ClearPosts() *PostCategoryUpdate {
	pcu.mutation.ClearPosts()
	return pcu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (pcu *PostCategoryUpdate) RemovePostIDs(ids ...string) *PostCategoryUpdate {
	pcu.mutation.RemovePostIDs(ids...)
	return pcu
}

// RemovePosts removes "posts" edges to Post entities.
func (pcu *PostCategoryUpdate) RemovePosts(p ...*Post) *PostCategoryUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcu.RemovePostIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pcu *PostCategoryUpdate) Save(ctx context.Context) (int, error) {
	pcu.defaults()
	return withHooks(ctx, pcu.sqlSave, pcu.mutation, pcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcu *PostCategoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pcu *PostCategoryUpdate) Exec(ctx context.Context) error {
	_, err := pcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcu *PostCategoryUpdate) ExecX(ctx context.Context) {
	if err := pcu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcu *PostCategoryUpdate) defaults() {
	if _, ok := pcu.mutation.UpdatedAt(); !ok && !pcu.mutation.UpdatedAtCleared() {
		v := postcategory.UpdateDefaultUpdatedAt()
		pcu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcu *PostCategoryUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostCategoryUpdate {
	pcu.modifiers = append(pcu.modifiers, modifiers...)
	return pcu
}

func (pcu *PostCategoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(postcategory.Table, postcategory.Columns, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeString))
	if ps := pcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pcu.mutation.CreatedAtCleared() {
		_spec.ClearField(postcategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pcu.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcu.mutation.UpdatedAtCleared() {
		_spec.ClearField(postcategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pcu.mutation.AppID(); ok {
		_spec.SetField(postcategory.FieldAppID, field.TypeString, value)
	}
	if pcu.mutation.AppIDCleared() {
		_spec.ClearField(postcategory.FieldAppID, field.TypeString)
	}
	if value, ok := pcu.mutation.Name(); ok {
		_spec.SetField(postcategory.FieldName, field.TypeString, value)
	}
	if pcu.mutation.NameCleared() {
		_spec.ClearField(postcategory.FieldName, field.TypeString)
	}
	if value, ok := pcu.mutation.Slug(); ok {
		_spec.SetField(postcategory.FieldSlug, field.TypeString, value)
	}
	if pcu.mutation.SlugCleared() {
		_spec.ClearField(postcategory.FieldSlug, field.TypeString)
	}
	if value, ok := pcu.mutation.Status(); ok {
		_spec.SetField(postcategory.FieldStatus, field.TypeString, value)
	}
	if pcu.mutation.StatusCleared() {
		_spec.ClearField(postcategory.FieldStatus, field.TypeString)
	}
	if value, ok := pcu.mutation.Excerpt(); ok {
		_spec.SetField(postcategory.FieldExcerpt, field.TypeString, value)
	}
	if pcu.mutation.ExcerptCleared() {
		_spec.ClearField(postcategory.FieldExcerpt, field.TypeString)
	}
	if value, ok := pcu.mutation.Content(); ok {
		_spec.SetField(postcategory.FieldContent, field.TypeString, value)
	}
	if pcu.mutation.ContentCleared() {
		_spec.ClearField(postcategory.FieldContent, field.TypeString)
	}
	if value, ok := pcu.mutation.MetaTitle(); ok {
		_spec.SetField(postcategory.FieldMetaTitle, field.TypeString, value)
	}
	if pcu.mutation.MetaTitleCleared() {
		_spec.ClearField(postcategory.FieldMetaTitle, field.TypeString)
	}
	if value, ok := pcu.mutation.MetaDescr(); ok {
		_spec.SetField(postcategory.FieldMetaDescr, field.TypeString, value)
	}
	if pcu.mutation.MetaDescrCleared() {
		_spec.ClearField(postcategory.FieldMetaDescr, field.TypeString)
	}
	if value, ok := pcu.mutation.MetaCanonicalURL(); ok {
		_spec.SetField(postcategory.FieldMetaCanonicalURL, field.TypeString, value)
	}
	if pcu.mutation.MetaCanonicalURLCleared() {
		_spec.ClearField(postcategory.FieldMetaCanonicalURL, field.TypeString)
	}
	if value, ok := pcu.mutation.MetaRobots(); ok {
		_spec.SetField(postcategory.FieldMetaRobots, field.TypeString, value)
	}
	if pcu.mutation.MetaRobotsCleared() {
		_spec.ClearField(postcategory.FieldMetaRobots, field.TypeString)
	}
	if pcu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !pcu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pcu.mutation.done = true
	return n, nil
}

// PostCategoryUpdateOne is the builder for updating a single PostCategory entity.
type PostCategoryUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostCategoryMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (pcuo *PostCategoryUpdateOne) SetUpdatedAt(t time.Time) *PostCategoryUpdateOne {
	pcuo.mutation.SetUpdatedAt(t)
	return pcuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (pcuo *PostCategoryUpdateOne) ClearUpdatedAt() *PostCategoryUpdateOne {
	pcuo.mutation.ClearUpdatedAt()
	return pcuo
}

// SetAppID sets the "app_id" field.
func (pcuo *PostCategoryUpdateOne) SetAppID(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetAppID(s)
	return pcuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableAppID(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetAppID(*s)
	}
	return pcuo
}

// ClearAppID clears the value of the "app_id" field.
func (pcuo *PostCategoryUpdateOne) ClearAppID() *PostCategoryUpdateOne {
	pcuo.mutation.ClearAppID()
	return pcuo
}

// SetName sets the "name" field.
func (pcuo *PostCategoryUpdateOne) SetName(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetName(s)
	return pcuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableName(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetName(*s)
	}
	return pcuo
}

// ClearName clears the value of the "name" field.
func (pcuo *PostCategoryUpdateOne) ClearName() *PostCategoryUpdateOne {
	pcuo.mutation.ClearName()
	return pcuo
}

// SetSlug sets the "slug" field.
func (pcuo *PostCategoryUpdateOne) SetSlug(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetSlug(s)
	return pcuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableSlug(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetSlug(*s)
	}
	return pcuo
}

// ClearSlug clears the value of the "slug" field.
func (pcuo *PostCategoryUpdateOne) ClearSlug() *PostCategoryUpdateOne {
	pcuo.mutation.ClearSlug()
	return pcuo
}

// SetStatus sets the "status" field.
func (pcuo *PostCategoryUpdateOne) SetStatus(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetStatus(s)
	return pcuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableStatus(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetStatus(*s)
	}
	return pcuo
}

// ClearStatus clears the value of the "status" field.
func (pcuo *PostCategoryUpdateOne) ClearStatus() *PostCategoryUpdateOne {
	pcuo.mutation.ClearStatus()
	return pcuo
}

// SetExcerpt sets the "excerpt" field.
func (pcuo *PostCategoryUpdateOne) SetExcerpt(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetExcerpt(s)
	return pcuo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableExcerpt(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetExcerpt(*s)
	}
	return pcuo
}

// ClearExcerpt clears the value of the "excerpt" field.
func (pcuo *PostCategoryUpdateOne) ClearExcerpt() *PostCategoryUpdateOne {
	pcuo.mutation.ClearExcerpt()
	return pcuo
}

// SetContent sets the "content" field.
func (pcuo *PostCategoryUpdateOne) SetContent(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetContent(s)
	return pcuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableContent(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetContent(*s)
	}
	return pcuo
}

// ClearContent clears the value of the "content" field.
func (pcuo *PostCategoryUpdateOne) ClearContent() *PostCategoryUpdateOne {
	pcuo.mutation.ClearContent()
	return pcuo
}

// SetMetaTitle sets the "meta_title" field.
func (pcuo *PostCategoryUpdateOne) SetMetaTitle(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetMetaTitle(s)
	return pcuo
}

// SetNillableMetaTitle sets the "meta_title" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableMetaTitle(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetMetaTitle(*s)
	}
	return pcuo
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (pcuo *PostCategoryUpdateOne) ClearMetaTitle() *PostCategoryUpdateOne {
	pcuo.mutation.ClearMetaTitle()
	return pcuo
}

// SetMetaDescr sets the "meta_descr" field.
func (pcuo *PostCategoryUpdateOne) SetMetaDescr(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetMetaDescr(s)
	return pcuo
}

// SetNillableMetaDescr sets the "meta_descr" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableMetaDescr(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetMetaDescr(*s)
	}
	return pcuo
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (pcuo *PostCategoryUpdateOne) ClearMetaDescr() *PostCategoryUpdateOne {
	pcuo.mutation.ClearMetaDescr()
	return pcuo
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (pcuo *PostCategoryUpdateOne) SetMetaCanonicalURL(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetMetaCanonicalURL(s)
	return pcuo
}

// SetNillableMetaCanonicalURL sets the "meta_canonical_url" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableMetaCanonicalURL(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetMetaCanonicalURL(*s)
	}
	return pcuo
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (pcuo *PostCategoryUpdateOne) ClearMetaCanonicalURL() *PostCategoryUpdateOne {
	pcuo.mutation.ClearMetaCanonicalURL()
	return pcuo
}

// SetMetaRobots sets the "meta_robots" field.
func (pcuo *PostCategoryUpdateOne) SetMetaRobots(s string) *PostCategoryUpdateOne {
	pcuo.mutation.SetMetaRobots(s)
	return pcuo
}

// SetNillableMetaRobots sets the "meta_robots" field if the given value is not nil.
func (pcuo *PostCategoryUpdateOne) SetNillableMetaRobots(s *string) *PostCategoryUpdateOne {
	if s != nil {
		pcuo.SetMetaRobots(*s)
	}
	return pcuo
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (pcuo *PostCategoryUpdateOne) ClearMetaRobots() *PostCategoryUpdateOne {
	pcuo.mutation.ClearMetaRobots()
	return pcuo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pcuo *PostCategoryUpdateOne) AddPostIDs(ids ...string) *PostCategoryUpdateOne {
	pcuo.mutation.AddPostIDs(ids...)
	return pcuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (pcuo *PostCategoryUpdateOne) AddPosts(p ...*Post) *PostCategoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.AddPostIDs(ids...)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcuo *PostCategoryUpdateOne) Mutation() *PostCategoryMutation {
	return pcuo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (pcuo *PostCategoryUpdateOne) ClearPosts() *PostCategoryUpdateOne {
	pcuo.mutation.ClearPosts()
	return pcuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (pcuo *PostCategoryUpdateOne) RemovePostIDs(ids ...string) *PostCategoryUpdateOne {
	pcuo.mutation.RemovePostIDs(ids...)
	return pcuo
}

// RemovePosts removes "posts" edges to Post entities.
func (pcuo *PostCategoryUpdateOne) RemovePosts(p ...*Post) *PostCategoryUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcuo.RemovePostIDs(ids...)
}

// Where appends a list predicates to the PostCategoryUpdate builder.
func (pcuo *PostCategoryUpdateOne) Where(ps ...predicate.PostCategory) *PostCategoryUpdateOne {
	pcuo.mutation.Where(ps...)
	return pcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pcuo *PostCategoryUpdateOne) Select(field string, fields ...string) *PostCategoryUpdateOne {
	pcuo.fields = append([]string{field}, fields...)
	return pcuo
}

// Save executes the query and returns the updated PostCategory entity.
func (pcuo *PostCategoryUpdateOne) Save(ctx context.Context) (*PostCategory, error) {
	pcuo.defaults()
	return withHooks(ctx, pcuo.sqlSave, pcuo.mutation, pcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pcuo *PostCategoryUpdateOne) SaveX(ctx context.Context) *PostCategory {
	node, err := pcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pcuo *PostCategoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcuo *PostCategoryUpdateOne) ExecX(ctx context.Context) {
	if err := pcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcuo *PostCategoryUpdateOne) defaults() {
	if _, ok := pcuo.mutation.UpdatedAt(); !ok && !pcuo.mutation.UpdatedAtCleared() {
		v := postcategory.UpdateDefaultUpdatedAt()
		pcuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pcuo *PostCategoryUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostCategoryUpdateOne {
	pcuo.modifiers = append(pcuo.modifiers, modifiers...)
	return pcuo
}

func (pcuo *PostCategoryUpdateOne) sqlSave(ctx context.Context) (_node *PostCategory, err error) {
	_spec := sqlgraph.NewUpdateSpec(postcategory.Table, postcategory.Columns, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeString))
	id, ok := pcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostCategory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, postcategory.FieldID)
		for _, f := range fields {
			if !postcategory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != postcategory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pcuo.mutation.CreatedAtCleared() {
		_spec.ClearField(postcategory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := pcuo.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pcuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(postcategory.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := pcuo.mutation.AppID(); ok {
		_spec.SetField(postcategory.FieldAppID, field.TypeString, value)
	}
	if pcuo.mutation.AppIDCleared() {
		_spec.ClearField(postcategory.FieldAppID, field.TypeString)
	}
	if value, ok := pcuo.mutation.Name(); ok {
		_spec.SetField(postcategory.FieldName, field.TypeString, value)
	}
	if pcuo.mutation.NameCleared() {
		_spec.ClearField(postcategory.FieldName, field.TypeString)
	}
	if value, ok := pcuo.mutation.Slug(); ok {
		_spec.SetField(postcategory.FieldSlug, field.TypeString, value)
	}
	if pcuo.mutation.SlugCleared() {
		_spec.ClearField(postcategory.FieldSlug, field.TypeString)
	}
	if value, ok := pcuo.mutation.Status(); ok {
		_spec.SetField(postcategory.FieldStatus, field.TypeString, value)
	}
	if pcuo.mutation.StatusCleared() {
		_spec.ClearField(postcategory.FieldStatus, field.TypeString)
	}
	if value, ok := pcuo.mutation.Excerpt(); ok {
		_spec.SetField(postcategory.FieldExcerpt, field.TypeString, value)
	}
	if pcuo.mutation.ExcerptCleared() {
		_spec.ClearField(postcategory.FieldExcerpt, field.TypeString)
	}
	if value, ok := pcuo.mutation.Content(); ok {
		_spec.SetField(postcategory.FieldContent, field.TypeString, value)
	}
	if pcuo.mutation.ContentCleared() {
		_spec.ClearField(postcategory.FieldContent, field.TypeString)
	}
	if value, ok := pcuo.mutation.MetaTitle(); ok {
		_spec.SetField(postcategory.FieldMetaTitle, field.TypeString, value)
	}
	if pcuo.mutation.MetaTitleCleared() {
		_spec.ClearField(postcategory.FieldMetaTitle, field.TypeString)
	}
	if value, ok := pcuo.mutation.MetaDescr(); ok {
		_spec.SetField(postcategory.FieldMetaDescr, field.TypeString, value)
	}
	if pcuo.mutation.MetaDescrCleared() {
		_spec.ClearField(postcategory.FieldMetaDescr, field.TypeString)
	}
	if value, ok := pcuo.mutation.MetaCanonicalURL(); ok {
		_spec.SetField(postcategory.FieldMetaCanonicalURL, field.TypeString, value)
	}
	if pcuo.mutation.MetaCanonicalURLCleared() {
		_spec.ClearField(postcategory.FieldMetaCanonicalURL, field.TypeString)
	}
	if value, ok := pcuo.mutation.MetaRobots(); ok {
		_spec.SetField(postcategory.FieldMetaRobots, field.TypeString, value)
	}
	if pcuo.mutation.MetaRobotsCleared() {
		_spec.ClearField(postcategory.FieldMetaRobots, field.TypeString)
	}
	if pcuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !pcuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pcuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pcuo.modifiers...)
	_node = &PostCategory{config: pcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{postcategory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pcuo.mutation.done = true
	return _node, nil
}
