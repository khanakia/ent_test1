// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"saas/gen/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppPermQuery is the builder for querying AppPerm entities.
type AppPermQuery struct {
	config
	ctx                   *QueryContext
	order                 []appperm.OrderOption
	inters                []Interceptor
	predicates            []predicate.AppPerm
	withApp               *AppQuery
	withAppRoles          *AppRoleQuery
	withAppRolePerms      *AppRolePermQuery
	loadTotal             []func(context.Context, []*AppPerm) error
	modifiers             []func(*sql.Selector)
	withNamedAppRoles     map[string]*AppRoleQuery
	withNamedAppRolePerms map[string]*AppRolePermQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AppPermQuery builder.
func (apq *AppPermQuery) Where(ps ...predicate.AppPerm) *AppPermQuery {
	apq.predicates = append(apq.predicates, ps...)
	return apq
}

// Limit the number of records to be returned by this query.
func (apq *AppPermQuery) Limit(limit int) *AppPermQuery {
	apq.ctx.Limit = &limit
	return apq
}

// Offset to start from.
func (apq *AppPermQuery) Offset(offset int) *AppPermQuery {
	apq.ctx.Offset = &offset
	return apq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (apq *AppPermQuery) Unique(unique bool) *AppPermQuery {
	apq.ctx.Unique = &unique
	return apq
}

// Order specifies how the records should be ordered.
func (apq *AppPermQuery) Order(o ...appperm.OrderOption) *AppPermQuery {
	apq.order = append(apq.order, o...)
	return apq
}

// QueryApp chains the current query on the "app" edge.
func (apq *AppPermQuery) QueryApp() *AppQuery {
	query := (&AppClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appperm.Table, appperm.FieldID, selector),
			sqlgraph.To(app.Table, app.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, appperm.AppTable, appperm.AppColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppRoles chains the current query on the "app_roles" edge.
func (apq *AppPermQuery) QueryAppRoles() *AppRoleQuery {
	query := (&AppRoleClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appperm.Table, appperm.FieldID, selector),
			sqlgraph.To(approle.Table, approle.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, appperm.AppRolesTable, appperm.AppRolesPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAppRolePerms chains the current query on the "app_role_perms" edge.
func (apq *AppPermQuery) QueryAppRolePerms() *AppRolePermQuery {
	query := (&AppRolePermClient{config: apq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := apq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := apq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(appperm.Table, appperm.FieldID, selector),
			sqlgraph.To(approleperm.Table, approleperm.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, appperm.AppRolePermsTable, appperm.AppRolePermsColumn),
		)
		fromU = sqlgraph.SetNeighbors(apq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first AppPerm entity from the query.
// Returns a *NotFoundError when no AppPerm was found.
func (apq *AppPermQuery) First(ctx context.Context) (*AppPerm, error) {
	nodes, err := apq.Limit(1).All(setContextOp(ctx, apq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{appperm.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (apq *AppPermQuery) FirstX(ctx context.Context) *AppPerm {
	node, err := apq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AppPerm ID from the query.
// Returns a *NotFoundError when no AppPerm ID was found.
func (apq *AppPermQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = apq.Limit(1).IDs(setContextOp(ctx, apq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{appperm.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (apq *AppPermQuery) FirstIDX(ctx context.Context) string {
	id, err := apq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AppPerm entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AppPerm entity is found.
// Returns a *NotFoundError when no AppPerm entities are found.
func (apq *AppPermQuery) Only(ctx context.Context) (*AppPerm, error) {
	nodes, err := apq.Limit(2).All(setContextOp(ctx, apq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{appperm.Label}
	default:
		return nil, &NotSingularError{appperm.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (apq *AppPermQuery) OnlyX(ctx context.Context) *AppPerm {
	node, err := apq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AppPerm ID in the query.
// Returns a *NotSingularError when more than one AppPerm ID is found.
// Returns a *NotFoundError when no entities are found.
func (apq *AppPermQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = apq.Limit(2).IDs(setContextOp(ctx, apq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{appperm.Label}
	default:
		err = &NotSingularError{appperm.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (apq *AppPermQuery) OnlyIDX(ctx context.Context) string {
	id, err := apq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AppPerms.
func (apq *AppPermQuery) All(ctx context.Context) ([]*AppPerm, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryAll)
	if err := apq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*AppPerm, *AppPermQuery]()
	return withInterceptors[[]*AppPerm](ctx, apq, qr, apq.inters)
}

// AllX is like All, but panics if an error occurs.
func (apq *AppPermQuery) AllX(ctx context.Context) []*AppPerm {
	nodes, err := apq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AppPerm IDs.
func (apq *AppPermQuery) IDs(ctx context.Context) (ids []string, err error) {
	if apq.ctx.Unique == nil && apq.path != nil {
		apq.Unique(true)
	}
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryIDs)
	if err = apq.Select(appperm.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (apq *AppPermQuery) IDsX(ctx context.Context) []string {
	ids, err := apq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (apq *AppPermQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryCount)
	if err := apq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, apq, querierCount[*AppPermQuery](), apq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (apq *AppPermQuery) CountX(ctx context.Context) int {
	count, err := apq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (apq *AppPermQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, apq.ctx, ent.OpQueryExist)
	switch _, err := apq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (apq *AppPermQuery) ExistX(ctx context.Context) bool {
	exist, err := apq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AppPermQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (apq *AppPermQuery) Clone() *AppPermQuery {
	if apq == nil {
		return nil
	}
	return &AppPermQuery{
		config:           apq.config,
		ctx:              apq.ctx.Clone(),
		order:            append([]appperm.OrderOption{}, apq.order...),
		inters:           append([]Interceptor{}, apq.inters...),
		predicates:       append([]predicate.AppPerm{}, apq.predicates...),
		withApp:          apq.withApp.Clone(),
		withAppRoles:     apq.withAppRoles.Clone(),
		withAppRolePerms: apq.withAppRolePerms.Clone(),
		// clone intermediate query.
		sql:       apq.sql.Clone(),
		path:      apq.path,
		modifiers: append([]func(*sql.Selector){}, apq.modifiers...),
	}
}

// WithApp tells the query-builder to eager-load the nodes that are connected to
// the "app" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AppPermQuery) WithApp(opts ...func(*AppQuery)) *AppPermQuery {
	query := (&AppClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withApp = query
	return apq
}

// WithAppRoles tells the query-builder to eager-load the nodes that are connected to
// the "app_roles" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AppPermQuery) WithAppRoles(opts ...func(*AppRoleQuery)) *AppPermQuery {
	query := (&AppRoleClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withAppRoles = query
	return apq
}

// WithAppRolePerms tells the query-builder to eager-load the nodes that are connected to
// the "app_role_perms" edge. The optional arguments are used to configure the query builder of the edge.
func (apq *AppPermQuery) WithAppRolePerms(opts ...func(*AppRolePermQuery)) *AppPermQuery {
	query := (&AppRolePermClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	apq.withAppRolePerms = query
	return apq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AppPerm.Query().
//		GroupBy(appperm.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (apq *AppPermQuery) GroupBy(field string, fields ...string) *AppPermGroupBy {
	apq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &AppPermGroupBy{build: apq}
	grbuild.flds = &apq.ctx.Fields
	grbuild.label = appperm.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.AppPerm.Query().
//		Select(appperm.FieldCreatedAt).
//		Scan(ctx, &v)
func (apq *AppPermQuery) Select(fields ...string) *AppPermSelect {
	apq.ctx.Fields = append(apq.ctx.Fields, fields...)
	sbuild := &AppPermSelect{AppPermQuery: apq}
	sbuild.label = appperm.Label
	sbuild.flds, sbuild.scan = &apq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a AppPermSelect configured with the given aggregations.
func (apq *AppPermQuery) Aggregate(fns ...AggregateFunc) *AppPermSelect {
	return apq.Select().Aggregate(fns...)
}

func (apq *AppPermQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range apq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, apq); err != nil {
				return err
			}
		}
	}
	for _, f := range apq.ctx.Fields {
		if !appperm.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if apq.path != nil {
		prev, err := apq.path(ctx)
		if err != nil {
			return err
		}
		apq.sql = prev
	}
	return nil
}

func (apq *AppPermQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AppPerm, error) {
	var (
		nodes       = []*AppPerm{}
		_spec       = apq.querySpec()
		loadedTypes = [3]bool{
			apq.withApp != nil,
			apq.withAppRoles != nil,
			apq.withAppRolePerms != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AppPerm).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AppPerm{config: apq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, apq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := apq.withApp; query != nil {
		if err := apq.loadApp(ctx, query, nodes, nil,
			func(n *AppPerm, e *App) { n.Edges.App = e }); err != nil {
			return nil, err
		}
	}
	if query := apq.withAppRoles; query != nil {
		if err := apq.loadAppRoles(ctx, query, nodes,
			func(n *AppPerm) { n.Edges.AppRoles = []*AppRole{} },
			func(n *AppPerm, e *AppRole) { n.Edges.AppRoles = append(n.Edges.AppRoles, e) }); err != nil {
			return nil, err
		}
	}
	if query := apq.withAppRolePerms; query != nil {
		if err := apq.loadAppRolePerms(ctx, query, nodes,
			func(n *AppPerm) { n.Edges.AppRolePerms = []*AppRolePerm{} },
			func(n *AppPerm, e *AppRolePerm) { n.Edges.AppRolePerms = append(n.Edges.AppRolePerms, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedAppRoles {
		if err := apq.loadAppRoles(ctx, query, nodes,
			func(n *AppPerm) { n.appendNamedAppRoles(name) },
			func(n *AppPerm, e *AppRole) { n.appendNamedAppRoles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range apq.withNamedAppRolePerms {
		if err := apq.loadAppRolePerms(ctx, query, nodes,
			func(n *AppPerm) { n.appendNamedAppRolePerms(name) },
			func(n *AppPerm, e *AppRolePerm) { n.appendNamedAppRolePerms(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range apq.loadTotal {
		if err := apq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (apq *AppPermQuery) loadApp(ctx context.Context, query *AppQuery, nodes []*AppPerm, init func(*AppPerm), assign func(*AppPerm, *App)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*AppPerm)
	for i := range nodes {
		fk := nodes[i].AppID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(app.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "app_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (apq *AppPermQuery) loadAppRoles(ctx context.Context, query *AppRoleQuery, nodes []*AppPerm, init func(*AppPerm), assign func(*AppPerm, *AppRole)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*AppPerm)
	nids := make(map[string]map[*AppPerm]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(appperm.AppRolesTable)
		s.Join(joinT).On(s.C(approle.FieldID), joinT.C(appperm.AppRolesPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(appperm.AppRolesPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(appperm.AppRolesPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*AppPerm]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*AppRole](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "app_roles" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (apq *AppPermQuery) loadAppRolePerms(ctx context.Context, query *AppRolePermQuery, nodes []*AppPerm, init func(*AppPerm), assign func(*AppPerm, *AppRolePerm)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*AppPerm)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(approleperm.FieldAppPermID)
	}
	query.Where(predicate.AppRolePerm(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(appperm.AppRolePermsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.AppPermID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "app_perm_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (apq *AppPermQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := apq.querySpec()
	if len(apq.modifiers) > 0 {
		_spec.Modifiers = apq.modifiers
	}
	_spec.Node.Columns = apq.ctx.Fields
	if len(apq.ctx.Fields) > 0 {
		_spec.Unique = apq.ctx.Unique != nil && *apq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, apq.driver, _spec)
}

func (apq *AppPermQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(appperm.Table, appperm.Columns, sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString))
	_spec.From = apq.sql
	if unique := apq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if apq.path != nil {
		_spec.Unique = true
	}
	if fields := apq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appperm.FieldID)
		for i := range fields {
			if fields[i] != appperm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if apq.withApp != nil {
			_spec.Node.AddColumnOnce(appperm.FieldAppID)
		}
	}
	if ps := apq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := apq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := apq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := apq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (apq *AppPermQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(apq.driver.Dialect())
	t1 := builder.Table(appperm.Table)
	columns := apq.ctx.Fields
	if len(columns) == 0 {
		columns = appperm.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if apq.sql != nil {
		selector = apq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if apq.ctx.Unique != nil && *apq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range apq.modifiers {
		m(selector)
	}
	for _, p := range apq.predicates {
		p(selector)
	}
	for _, p := range apq.order {
		p(selector)
	}
	if offset := apq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := apq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (apq *AppPermQuery) Modify(modifiers ...func(s *sql.Selector)) *AppPermSelect {
	apq.modifiers = append(apq.modifiers, modifiers...)
	return apq.Select()
}

// WithNamedAppRoles tells the query-builder to eager-load the nodes that are connected to the "app_roles"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *AppPermQuery) WithNamedAppRoles(name string, opts ...func(*AppRoleQuery)) *AppPermQuery {
	query := (&AppRoleClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedAppRoles == nil {
		apq.withNamedAppRoles = make(map[string]*AppRoleQuery)
	}
	apq.withNamedAppRoles[name] = query
	return apq
}

// WithNamedAppRolePerms tells the query-builder to eager-load the nodes that are connected to the "app_role_perms"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (apq *AppPermQuery) WithNamedAppRolePerms(name string, opts ...func(*AppRolePermQuery)) *AppPermQuery {
	query := (&AppRolePermClient{config: apq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if apq.withNamedAppRolePerms == nil {
		apq.withNamedAppRolePerms = make(map[string]*AppRolePermQuery)
	}
	apq.withNamedAppRolePerms[name] = query
	return apq
}

// AppPermGroupBy is the group-by builder for AppPerm entities.
type AppPermGroupBy struct {
	selector
	build *AppPermQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (apgb *AppPermGroupBy) Aggregate(fns ...AggregateFunc) *AppPermGroupBy {
	apgb.fns = append(apgb.fns, fns...)
	return apgb
}

// Scan applies the selector query and scans the result into the given value.
func (apgb *AppPermGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, apgb.build.ctx, ent.OpQueryGroupBy)
	if err := apgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppPermQuery, *AppPermGroupBy](ctx, apgb.build, apgb, apgb.build.inters, v)
}

func (apgb *AppPermGroupBy) sqlScan(ctx context.Context, root *AppPermQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(apgb.fns))
	for _, fn := range apgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*apgb.flds)+len(apgb.fns))
		for _, f := range *apgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*apgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := apgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// AppPermSelect is the builder for selecting fields of AppPerm entities.
type AppPermSelect struct {
	*AppPermQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (aps *AppPermSelect) Aggregate(fns ...AggregateFunc) *AppPermSelect {
	aps.fns = append(aps.fns, fns...)
	return aps
}

// Scan applies the selector query and scans the result into the given value.
func (aps *AppPermSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, aps.ctx, ent.OpQuerySelect)
	if err := aps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*AppPermQuery, *AppPermSelect](ctx, aps.AppPermQuery, aps, aps.inters, v)
}

func (aps *AppPermSelect) sqlScan(ctx context.Context, root *AppPermQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(aps.fns))
	for _, fn := range aps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*aps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := aps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (aps *AppPermSelect) Modify(modifiers ...func(s *sql.Selector)) *AppPermSelect {
	aps.modifiers = append(aps.modifiers, modifiers...)
	return aps
}
