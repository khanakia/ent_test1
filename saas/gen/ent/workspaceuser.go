// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkspaceUser is the model entity for the WorkspaceUser schema.
type WorkspaceUser struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID string `json:"workspace_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkspaceUserQuery when eager-loading is set.
	Edges        WorkspaceUserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkspaceUserEdges holds the relations/edges for other nodes in the graph.
type WorkspaceUserEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceUserEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceUserEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.Workspace != nil {
		return e.Workspace, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: workspace.Label}
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkspaceUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workspaceuser.FieldID, workspaceuser.FieldAppID, workspaceuser.FieldWorkspaceID, workspaceuser.FieldUserID, workspaceuser.FieldRole:
			values[i] = new(sql.NullString)
		case workspaceuser.FieldCreatedAt, workspaceuser.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkspaceUser fields.
func (wu *WorkspaceUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workspaceuser.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wu.ID = value.String
			}
		case workspaceuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wu.CreatedAt = value.Time
			}
		case workspaceuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wu.UpdatedAt = value.Time
			}
		case workspaceuser.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				wu.AppID = value.String
			}
		case workspaceuser.FieldWorkspaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value.Valid {
				wu.WorkspaceID = value.String
			}
		case workspaceuser.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				wu.UserID = value.String
			}
		case workspaceuser.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				wu.Role = value.String
			}
		default:
			wu.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkspaceUser.
// This includes values selected through modifiers, order, etc.
func (wu *WorkspaceUser) Value(name string) (ent.Value, error) {
	return wu.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the WorkspaceUser entity.
func (wu *WorkspaceUser) QueryUser() *UserQuery {
	return NewWorkspaceUserClient(wu.config).QueryUser(wu)
}

// QueryWorkspace queries the "workspace" edge of the WorkspaceUser entity.
func (wu *WorkspaceUser) QueryWorkspace() *WorkspaceQuery {
	return NewWorkspaceUserClient(wu.config).QueryWorkspace(wu)
}

// Update returns a builder for updating this WorkspaceUser.
// Note that you need to call WorkspaceUser.Unwrap() before calling this method if this WorkspaceUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (wu *WorkspaceUser) Update() *WorkspaceUserUpdateOne {
	return NewWorkspaceUserClient(wu.config).UpdateOne(wu)
}

// Unwrap unwraps the WorkspaceUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wu *WorkspaceUser) Unwrap() *WorkspaceUser {
	_tx, ok := wu.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkspaceUser is not a transactional entity")
	}
	wu.config.driver = _tx.drv
	return wu
}

// String implements the fmt.Stringer.
func (wu *WorkspaceUser) String() string {
	var builder strings.Builder
	builder.WriteString("WorkspaceUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wu.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wu.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wu.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(wu.AppID)
	builder.WriteString(", ")
	builder.WriteString("workspace_id=")
	builder.WriteString(wu.WorkspaceID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(wu.UserID)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(wu.Role)
	builder.WriteByte(')')
	return builder.String()
}

// WorkspaceUsers is a parsable slice of WorkspaceUser.
type WorkspaceUsers []*WorkspaceUser
