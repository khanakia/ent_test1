// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/adminuser"
	"saas/gen/ent/app"
	"saas/gen/ent/approle"
	"saas/gen/ent/appuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppUserCreate is the builder for creating a AppUser entity.
type AppUserCreate struct {
	config
	mutation *AppUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (auc *AppUserCreate) SetCreatedAt(t time.Time) *AppUserCreate {
	auc.mutation.SetCreatedAt(t)
	return auc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableCreatedAt(t *time.Time) *AppUserCreate {
	if t != nil {
		auc.SetCreatedAt(*t)
	}
	return auc
}

// SetUpdatedAt sets the "updated_at" field.
func (auc *AppUserCreate) SetUpdatedAt(t time.Time) *AppUserCreate {
	auc.mutation.SetUpdatedAt(t)
	return auc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableUpdatedAt(t *time.Time) *AppUserCreate {
	if t != nil {
		auc.SetUpdatedAt(*t)
	}
	return auc
}

// SetAppID sets the "app_id" field.
func (auc *AppUserCreate) SetAppID(s string) *AppUserCreate {
	auc.mutation.SetAppID(s)
	return auc
}

// SetAdminUserID sets the "admin_user_id" field.
func (auc *AppUserCreate) SetAdminUserID(s string) *AppUserCreate {
	auc.mutation.SetAdminUserID(s)
	return auc
}

// SetAppRoleID sets the "app_role_id" field.
func (auc *AppUserCreate) SetAppRoleID(s string) *AppUserCreate {
	auc.mutation.SetAppRoleID(s)
	return auc
}

// SetID sets the "id" field.
func (auc *AppUserCreate) SetID(s string) *AppUserCreate {
	auc.mutation.SetID(s)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *AppUserCreate) SetNillableID(s *string) *AppUserCreate {
	if s != nil {
		auc.SetID(*s)
	}
	return auc
}

// SetApp sets the "app" edge to the App entity.
func (auc *AppUserCreate) SetApp(a *App) *AppUserCreate {
	return auc.SetAppID(a.ID)
}

// SetAdminuserID sets the "adminuser" edge to the AdminUser entity by ID.
func (auc *AppUserCreate) SetAdminuserID(id string) *AppUserCreate {
	auc.mutation.SetAdminuserID(id)
	return auc
}

// SetAdminuser sets the "adminuser" edge to the AdminUser entity.
func (auc *AppUserCreate) SetAdminuser(a *AdminUser) *AppUserCreate {
	return auc.SetAdminuserID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (auc *AppUserCreate) SetAppRole(a *AppRole) *AppUserCreate {
	return auc.SetAppRoleID(a.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auc *AppUserCreate) Mutation() *AppUserMutation {
	return auc.mutation
}

// Save creates the AppUser in the database.
func (auc *AppUserCreate) Save(ctx context.Context) (*AppUser, error) {
	auc.defaults()
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AppUserCreate) SaveX(ctx context.Context) *AppUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AppUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AppUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AppUserCreate) defaults() {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		v := appuser.DefaultCreatedAt()
		auc.mutation.SetCreatedAt(v)
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		v := appuser.DefaultUpdatedAt()
		auc.mutation.SetUpdatedAt(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := appuser.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AppUserCreate) check() error {
	if _, ok := auc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppUser.app_id"`)}
	}
	if _, ok := auc.mutation.AdminUserID(); !ok {
		return &ValidationError{Name: "admin_user_id", err: errors.New(`ent: missing required field "AppUser.admin_user_id"`)}
	}
	if _, ok := auc.mutation.AppRoleID(); !ok {
		return &ValidationError{Name: "app_role_id", err: errors.New(`ent: missing required field "AppUser.app_role_id"`)}
	}
	if len(auc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppUser.app"`)}
	}
	if len(auc.mutation.AdminuserIDs()) == 0 {
		return &ValidationError{Name: "adminuser", err: errors.New(`ent: missing required edge "AppUser.adminuser"`)}
	}
	if len(auc.mutation.AppRoleIDs()) == 0 {
		return &ValidationError{Name: "app_role", err: errors.New(`ent: missing required edge "AppUser.app_role"`)}
	}
	return nil
}

func (auc *AppUserCreate) sqlSave(ctx context.Context) (*AppUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppUser.ID type: %T", _spec.ID.Value)
		}
	}
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *AppUserCreate) createSpec() (*AppUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AppUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(appuser.Table, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeString))
	)
	_spec.OnConflict = auc.conflict
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreatedAt(); ok {
		_spec.SetField(appuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := auc.mutation.UpdatedAt(); ok {
		_spec.SetField(appuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := auc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AdminuserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AdminuserTable,
			Columns: []string{appuser.AdminuserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AdminUserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := auc.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppRoleTable,
			Columns: []string{appuser.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppRoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (auc *AppUserCreate) OnConflict(opts ...sql.ConflictOption) *AppUserUpsertOne {
	auc.conflict = opts
	return &AppUserUpsertOne{
		create: auc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (auc *AppUserCreate) OnConflictColumns(columns ...string) *AppUserUpsertOne {
	auc.conflict = append(auc.conflict, sql.ConflictColumns(columns...))
	return &AppUserUpsertOne{
		create: auc,
	}
}

type (
	// AppUserUpsertOne is the builder for "upsert"-ing
	//  one AppUser node.
	AppUserUpsertOne struct {
		create *AppUserCreate
	}

	// AppUserUpsert is the "OnConflict" setter.
	AppUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserUpsert) SetUpdatedAt(v time.Time) *AppUserUpsert {
	u.Set(appuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateUpdatedAt() *AppUserUpsert {
	u.SetExcluded(appuser.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUserUpsert) ClearUpdatedAt() *AppUserUpsert {
	u.SetNull(appuser.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsert) SetAppID(v string) *AppUserUpsert {
	u.Set(appuser.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAppID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAppID)
	return u
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUserUpsert) SetAdminUserID(v string) *AppUserUpsert {
	u.Set(appuser.FieldAdminUserID, v)
	return u
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAdminUserID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAdminUserID)
	return u
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppUserUpsert) SetAppRoleID(v string) *AppUserUpsert {
	u.Set(appuser.FieldAppRoleID, v)
	return u
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppUserUpsert) UpdateAppRoleID() *AppUserUpsert {
	u.SetExcluded(appuser.FieldAppRoleID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUserUpsertOne) UpdateNewValues() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(appuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(appuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppUserUpsertOne) Ignore() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserUpsertOne) DoNothing() *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserCreate.OnConflict
// documentation for more info.
func (u *AppUserUpsertOne) Update(set func(*AppUserUpsert)) *AppUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserUpsertOne) SetUpdatedAt(v time.Time) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateUpdatedAt() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUserUpsertOne) ClearUpdatedAt() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsertOne) SetAppID(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAppID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppID()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUserUpsertOne) SetAdminUserID(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAdminUserID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAdminUserID()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppUserUpsertOne) SetAppRoleID(v string) *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppUserUpsertOne) UpdateAppRoleID() *AppUserUpsertOne {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppRoleID()
	})
}

// Exec executes the query.
func (u *AppUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppUserUpsertOne.ID is not supported by MySQL driver. Use AppUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppUserCreateBulk is the builder for creating many AppUser entities in bulk.
type AppUserCreateBulk struct {
	config
	err      error
	builders []*AppUserCreate
	conflict []sql.ConflictOption
}

// Save creates the AppUser entities in the database.
func (aucb *AppUserCreateBulk) Save(ctx context.Context) ([]*AppUser, error) {
	if aucb.err != nil {
		return nil, aucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AppUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AppUserCreateBulk) SaveX(ctx context.Context) []*AppUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AppUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AppUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aucb *AppUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUserUpsertBulk {
	aucb.conflict = opts
	return &AppUserUpsertBulk{
		create: aucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aucb *AppUserCreateBulk) OnConflictColumns(columns ...string) *AppUserUpsertBulk {
	aucb.conflict = append(aucb.conflict, sql.ConflictColumns(columns...))
	return &AppUserUpsertBulk{
		create: aucb,
	}
}

// AppUserUpsertBulk is the builder for "upsert"-ing
// a bulk of AppUser nodes.
type AppUserUpsertBulk struct {
	create *AppUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(appuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUserUpsertBulk) UpdateNewValues() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(appuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(appuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppUserUpsertBulk) Ignore() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUserUpsertBulk) DoNothing() *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppUserCreateBulk.OnConflict
// documentation for more info.
func (u *AppUserUpsertBulk) Update(set func(*AppUserUpsert)) *AppUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUserUpsertBulk) SetUpdatedAt(v time.Time) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateUpdatedAt() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUserUpsertBulk) ClearUpdatedAt() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppUserUpsertBulk) SetAppID(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAppID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppID()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUserUpsertBulk) SetAdminUserID(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAdminUserID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAdminUserID()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppUserUpsertBulk) SetAppRoleID(v string) *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppUserUpsertBulk) UpdateAppRoleID() *AppUserUpsertBulk {
	return u.Update(func(s *AppUserUpsert) {
		s.UpdateAppRoleID()
	})
}

// Exec executes the query.
func (u *AppUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
