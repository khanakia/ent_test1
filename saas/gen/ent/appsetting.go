// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/appsetting"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AppSetting is the model entity for the AppSetting schema.
type AppSetting struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppName holds the value of the "app_name" field.
	AppName string `json:"app_name,omitempty"`
	// Copyright holds the value of the "copyright" field.
	Copyright string `json:"copyright,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// SocialTw holds the value of the "social_tw" field.
	SocialTw string `json:"social_tw,omitempty"`
	// SocialFb holds the value of the "social_fb" field.
	SocialFb string `json:"social_fb,omitempty"`
	// SocialIn holds the value of the "social_in" field.
	SocialIn string `json:"social_in,omitempty"`
	// LogoURL holds the value of the "logo_url" field.
	LogoURL string `json:"logo_url,omitempty"`
	// SiteURL holds the value of the "site_url" field.
	SiteURL string `json:"site_url,omitempty"`
	// DefaultMailConnID holds the value of the "default_mail_conn_id" field.
	DefaultMailConnID string `json:"default_mail_conn_id,omitempty"`
	// MailLayoutTemplID holds the value of the "mail_layout_templ_id" field.
	MailLayoutTemplID string `json:"mail_layout_templ_id,omitempty"`
	// WsapceInviteTemplID holds the value of the "wsapce_invite_templ_id" field.
	WsapceInviteTemplID string `json:"wsapce_invite_templ_id,omitempty"`
	// WsapceSuccessTemplID holds the value of the "wsapce_success_templ_id" field.
	WsapceSuccessTemplID string `json:"wsapce_success_templ_id,omitempty"`
	// AuthFpTemplID holds the value of the "auth_fp_templ_id" field.
	AuthFpTemplID string `json:"auth_fp_templ_id,omitempty"`
	// AuthWelcomeEmailTemplID holds the value of the "auth_welcome_email_templ_id" field.
	AuthWelcomeEmailTemplID string `json:"auth_welcome_email_templ_id,omitempty"`
	// AuthVerificationTemplID holds the value of the "auth_verification_templ_id" field.
	AuthVerificationTemplID string `json:"auth_verification_templ_id,omitempty"`
	// AuthEmailVerify holds the value of the "auth_email_verify" field.
	AuthEmailVerify string `json:"auth_email_verify,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppSetting) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case appsetting.FieldID, appsetting.FieldAppName, appsetting.FieldCopyright, appsetting.FieldEmail, appsetting.FieldAddress, appsetting.FieldSocialTw, appsetting.FieldSocialFb, appsetting.FieldSocialIn, appsetting.FieldLogoURL, appsetting.FieldSiteURL, appsetting.FieldDefaultMailConnID, appsetting.FieldMailLayoutTemplID, appsetting.FieldWsapceInviteTemplID, appsetting.FieldWsapceSuccessTemplID, appsetting.FieldAuthFpTemplID, appsetting.FieldAuthWelcomeEmailTemplID, appsetting.FieldAuthVerificationTemplID, appsetting.FieldAuthEmailVerify:
			values[i] = new(sql.NullString)
		case appsetting.FieldCreatedAt, appsetting.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppSetting fields.
func (as *AppSetting) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case appsetting.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				as.ID = value.String
			}
		case appsetting.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				as.CreatedAt = value.Time
			}
		case appsetting.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				as.UpdatedAt = value.Time
			}
		case appsetting.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				as.AppName = value.String
			}
		case appsetting.FieldCopyright:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field copyright", values[i])
			} else if value.Valid {
				as.Copyright = value.String
			}
		case appsetting.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				as.Email = value.String
			}
		case appsetting.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				as.Address = value.String
			}
		case appsetting.FieldSocialTw:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_tw", values[i])
			} else if value.Valid {
				as.SocialTw = value.String
			}
		case appsetting.FieldSocialFb:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_fb", values[i])
			} else if value.Valid {
				as.SocialFb = value.String
			}
		case appsetting.FieldSocialIn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field social_in", values[i])
			} else if value.Valid {
				as.SocialIn = value.String
			}
		case appsetting.FieldLogoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field logo_url", values[i])
			} else if value.Valid {
				as.LogoURL = value.String
			}
		case appsetting.FieldSiteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field site_url", values[i])
			} else if value.Valid {
				as.SiteURL = value.String
			}
		case appsetting.FieldDefaultMailConnID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field default_mail_conn_id", values[i])
			} else if value.Valid {
				as.DefaultMailConnID = value.String
			}
		case appsetting.FieldMailLayoutTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mail_layout_templ_id", values[i])
			} else if value.Valid {
				as.MailLayoutTemplID = value.String
			}
		case appsetting.FieldWsapceInviteTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wsapce_invite_templ_id", values[i])
			} else if value.Valid {
				as.WsapceInviteTemplID = value.String
			}
		case appsetting.FieldWsapceSuccessTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field wsapce_success_templ_id", values[i])
			} else if value.Valid {
				as.WsapceSuccessTemplID = value.String
			}
		case appsetting.FieldAuthFpTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_fp_templ_id", values[i])
			} else if value.Valid {
				as.AuthFpTemplID = value.String
			}
		case appsetting.FieldAuthWelcomeEmailTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_welcome_email_templ_id", values[i])
			} else if value.Valid {
				as.AuthWelcomeEmailTemplID = value.String
			}
		case appsetting.FieldAuthVerificationTemplID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_verification_templ_id", values[i])
			} else if value.Valid {
				as.AuthVerificationTemplID = value.String
			}
		case appsetting.FieldAuthEmailVerify:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field auth_email_verify", values[i])
			} else if value.Valid {
				as.AuthEmailVerify = value.String
			}
		default:
			as.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppSetting.
// This includes values selected through modifiers, order, etc.
func (as *AppSetting) Value(name string) (ent.Value, error) {
	return as.selectValues.Get(name)
}

// Update returns a builder for updating this AppSetting.
// Note that you need to call AppSetting.Unwrap() before calling this method if this AppSetting
// was returned from a transaction, and the transaction was committed or rolled back.
func (as *AppSetting) Update() *AppSettingUpdateOne {
	return NewAppSettingClient(as.config).UpdateOne(as)
}

// Unwrap unwraps the AppSetting entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (as *AppSetting) Unwrap() *AppSetting {
	_tx, ok := as.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppSetting is not a transactional entity")
	}
	as.config.driver = _tx.drv
	return as
}

// String implements the fmt.Stringer.
func (as *AppSetting) String() string {
	var builder strings.Builder
	builder.WriteString("AppSetting(")
	builder.WriteString(fmt.Sprintf("id=%v, ", as.ID))
	builder.WriteString("created_at=")
	builder.WriteString(as.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(as.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(as.AppName)
	builder.WriteString(", ")
	builder.WriteString("copyright=")
	builder.WriteString(as.Copyright)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(as.Email)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(as.Address)
	builder.WriteString(", ")
	builder.WriteString("social_tw=")
	builder.WriteString(as.SocialTw)
	builder.WriteString(", ")
	builder.WriteString("social_fb=")
	builder.WriteString(as.SocialFb)
	builder.WriteString(", ")
	builder.WriteString("social_in=")
	builder.WriteString(as.SocialIn)
	builder.WriteString(", ")
	builder.WriteString("logo_url=")
	builder.WriteString(as.LogoURL)
	builder.WriteString(", ")
	builder.WriteString("site_url=")
	builder.WriteString(as.SiteURL)
	builder.WriteString(", ")
	builder.WriteString("default_mail_conn_id=")
	builder.WriteString(as.DefaultMailConnID)
	builder.WriteString(", ")
	builder.WriteString("mail_layout_templ_id=")
	builder.WriteString(as.MailLayoutTemplID)
	builder.WriteString(", ")
	builder.WriteString("wsapce_invite_templ_id=")
	builder.WriteString(as.WsapceInviteTemplID)
	builder.WriteString(", ")
	builder.WriteString("wsapce_success_templ_id=")
	builder.WriteString(as.WsapceSuccessTemplID)
	builder.WriteString(", ")
	builder.WriteString("auth_fp_templ_id=")
	builder.WriteString(as.AuthFpTemplID)
	builder.WriteString(", ")
	builder.WriteString("auth_welcome_email_templ_id=")
	builder.WriteString(as.AuthWelcomeEmailTemplID)
	builder.WriteString(", ")
	builder.WriteString("auth_verification_templ_id=")
	builder.WriteString(as.AuthVerificationTemplID)
	builder.WriteString(", ")
	builder.WriteString("auth_email_verify=")
	builder.WriteString(as.AuthEmailVerify)
	builder.WriteByte(')')
	return builder.String()
}

// AppSettings is a parsable slice of AppSetting.
type AppSettings []*AppSetting
