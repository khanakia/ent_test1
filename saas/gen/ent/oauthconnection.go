// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/oauthconnection"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// OauthConnection is the model entity for the OauthConnection schema.
type OauthConnection struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Provider holds the value of the "provider" field.
	Provider string `json:"provider,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// ClientSecret holds the value of the "client_secret" field.
	ClientSecret string `json:"client_secret,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes string `json:"scopes,omitempty"`
	// RedirectURL holds the value of the "redirect_url" field.
	RedirectURL string `json:"redirect_url,omitempty"`
	// DashboardLink holds the value of the "dashboard_link" field.
	DashboardLink string `json:"dashboard_link,omitempty"`
	// Note holds the value of the "note" field.
	Note string `json:"note,omitempty"`
	// Status holds the value of the "status" field.
	Status       bool `json:"status,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OauthConnection) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case oauthconnection.FieldStatus:
			values[i] = new(sql.NullBool)
		case oauthconnection.FieldID, oauthconnection.FieldAppID, oauthconnection.FieldName, oauthconnection.FieldProvider, oauthconnection.FieldClientID, oauthconnection.FieldClientSecret, oauthconnection.FieldScopes, oauthconnection.FieldRedirectURL, oauthconnection.FieldDashboardLink, oauthconnection.FieldNote:
			values[i] = new(sql.NullString)
		case oauthconnection.FieldCreatedAt, oauthconnection.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OauthConnection fields.
func (oc *OauthConnection) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case oauthconnection.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oc.ID = value.String
			}
		case oauthconnection.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				oc.CreatedAt = value.Time
			}
		case oauthconnection.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				oc.UpdatedAt = value.Time
			}
		case oauthconnection.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				oc.AppID = value.String
			}
		case oauthconnection.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				oc.Name = value.String
			}
		case oauthconnection.FieldProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field provider", values[i])
			} else if value.Valid {
				oc.Provider = value.String
			}
		case oauthconnection.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oc.ClientID = value.String
			}
		case oauthconnection.FieldClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_secret", values[i])
			} else if value.Valid {
				oc.ClientSecret = value.String
			}
		case oauthconnection.FieldScopes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value.Valid {
				oc.Scopes = value.String
			}
		case oauthconnection.FieldRedirectURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_url", values[i])
			} else if value.Valid {
				oc.RedirectURL = value.String
			}
		case oauthconnection.FieldDashboardLink:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field dashboard_link", values[i])
			} else if value.Valid {
				oc.DashboardLink = value.String
			}
		case oauthconnection.FieldNote:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field note", values[i])
			} else if value.Valid {
				oc.Note = value.String
			}
		case oauthconnection.FieldStatus:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				oc.Status = value.Bool
			}
		default:
			oc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OauthConnection.
// This includes values selected through modifiers, order, etc.
func (oc *OauthConnection) Value(name string) (ent.Value, error) {
	return oc.selectValues.Get(name)
}

// Update returns a builder for updating this OauthConnection.
// Note that you need to call OauthConnection.Unwrap() before calling this method if this OauthConnection
// was returned from a transaction, and the transaction was committed or rolled back.
func (oc *OauthConnection) Update() *OauthConnectionUpdateOne {
	return NewOauthConnectionClient(oc.config).UpdateOne(oc)
}

// Unwrap unwraps the OauthConnection entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oc *OauthConnection) Unwrap() *OauthConnection {
	_tx, ok := oc.config.driver.(*txDriver)
	if !ok {
		panic("ent: OauthConnection is not a transactional entity")
	}
	oc.config.driver = _tx.drv
	return oc
}

// String implements the fmt.Stringer.
func (oc *OauthConnection) String() string {
	var builder strings.Builder
	builder.WriteString("OauthConnection(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oc.ID))
	builder.WriteString("created_at=")
	builder.WriteString(oc.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(oc.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(oc.AppID)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(oc.Name)
	builder.WriteString(", ")
	builder.WriteString("provider=")
	builder.WriteString(oc.Provider)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oc.ClientID)
	builder.WriteString(", ")
	builder.WriteString("client_secret=")
	builder.WriteString(oc.ClientSecret)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(oc.Scopes)
	builder.WriteString(", ")
	builder.WriteString("redirect_url=")
	builder.WriteString(oc.RedirectURL)
	builder.WriteString(", ")
	builder.WriteString("dashboard_link=")
	builder.WriteString(oc.DashboardLink)
	builder.WriteString(", ")
	builder.WriteString("note=")
	builder.WriteString(oc.Note)
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", oc.Status))
	builder.WriteByte(')')
	return builder.String()
}

// OauthConnections is a parsable slice of OauthConnection.
type OauthConnections []*OauthConnection
