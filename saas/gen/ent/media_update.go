// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/media"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaUpdate is the builder for updating Media entities.
type MediaUpdate struct {
	config
	hooks     []Hook
	mutation  *MediaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MediaUpdate builder.
func (mu *MediaUpdate) Where(ps ...predicate.Media) *MediaUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetUpdatedAt sets the "updated_at" field.
func (mu *MediaUpdate) SetUpdatedAt(t time.Time) *MediaUpdate {
	mu.mutation.SetUpdatedAt(t)
	return mu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (mu *MediaUpdate) ClearUpdatedAt() *MediaUpdate {
	mu.mutation.ClearUpdatedAt()
	return mu
}

// SetDisk sets the "disk" field.
func (mu *MediaUpdate) SetDisk(s string) *MediaUpdate {
	mu.mutation.SetDisk(s)
	return mu
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDisk(s *string) *MediaUpdate {
	if s != nil {
		mu.SetDisk(*s)
	}
	return mu
}

// ClearDisk clears the value of the "disk" field.
func (mu *MediaUpdate) ClearDisk() *MediaUpdate {
	mu.mutation.ClearDisk()
	return mu
}

// SetDirectory sets the "directory" field.
func (mu *MediaUpdate) SetDirectory(s string) *MediaUpdate {
	mu.mutation.SetDirectory(s)
	return mu
}

// SetNillableDirectory sets the "directory" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDirectory(s *string) *MediaUpdate {
	if s != nil {
		mu.SetDirectory(*s)
	}
	return mu
}

// ClearDirectory clears the value of the "directory" field.
func (mu *MediaUpdate) ClearDirectory() *MediaUpdate {
	mu.mutation.ClearDirectory()
	return mu
}

// SetName sets the "name" field.
func (mu *MediaUpdate) SetName(s string) *MediaUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableName(s *string) *MediaUpdate {
	if s != nil {
		mu.SetName(*s)
	}
	return mu
}

// ClearName clears the value of the "name" field.
func (mu *MediaUpdate) ClearName() *MediaUpdate {
	mu.mutation.ClearName()
	return mu
}

// SetOriginalName sets the "original_name" field.
func (mu *MediaUpdate) SetOriginalName(s string) *MediaUpdate {
	mu.mutation.SetOriginalName(s)
	return mu
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableOriginalName(s *string) *MediaUpdate {
	if s != nil {
		mu.SetOriginalName(*s)
	}
	return mu
}

// ClearOriginalName clears the value of the "original_name" field.
func (mu *MediaUpdate) ClearOriginalName() *MediaUpdate {
	mu.mutation.ClearOriginalName()
	return mu
}

// SetExtension sets the "extension" field.
func (mu *MediaUpdate) SetExtension(s string) *MediaUpdate {
	mu.mutation.SetExtension(s)
	return mu
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableExtension(s *string) *MediaUpdate {
	if s != nil {
		mu.SetExtension(*s)
	}
	return mu
}

// ClearExtension clears the value of the "extension" field.
func (mu *MediaUpdate) ClearExtension() *MediaUpdate {
	mu.mutation.ClearExtension()
	return mu
}

// SetMimeType sets the "mime_type" field.
func (mu *MediaUpdate) SetMimeType(s string) *MediaUpdate {
	mu.mutation.SetMimeType(s)
	return mu
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableMimeType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetMimeType(*s)
	}
	return mu
}

// ClearMimeType clears the value of the "mime_type" field.
func (mu *MediaUpdate) ClearMimeType() *MediaUpdate {
	mu.mutation.ClearMimeType()
	return mu
}

// SetAggregateType sets the "aggregate_type" field.
func (mu *MediaUpdate) SetAggregateType(s string) *MediaUpdate {
	mu.mutation.SetAggregateType(s)
	return mu
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableAggregateType(s *string) *MediaUpdate {
	if s != nil {
		mu.SetAggregateType(*s)
	}
	return mu
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (mu *MediaUpdate) ClearAggregateType() *MediaUpdate {
	mu.mutation.ClearAggregateType()
	return mu
}

// SetSize sets the "size" field.
func (mu *MediaUpdate) SetSize(u uint) *MediaUpdate {
	mu.mutation.ResetSize()
	mu.mutation.SetSize(u)
	return mu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableSize(u *uint) *MediaUpdate {
	if u != nil {
		mu.SetSize(*u)
	}
	return mu
}

// AddSize adds u to the "size" field.
func (mu *MediaUpdate) AddSize(u int) *MediaUpdate {
	mu.mutation.AddSize(u)
	return mu
}

// ClearSize clears the value of the "size" field.
func (mu *MediaUpdate) ClearSize() *MediaUpdate {
	mu.mutation.ClearSize()
	return mu
}

// SetDescription sets the "description" field.
func (mu *MediaUpdate) SetDescription(s string) *MediaUpdate {
	mu.mutation.SetDescription(s)
	return mu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableDescription(s *string) *MediaUpdate {
	if s != nil {
		mu.SetDescription(*s)
	}
	return mu
}

// ClearDescription clears the value of the "description" field.
func (mu *MediaUpdate) ClearDescription() *MediaUpdate {
	mu.mutation.ClearDescription()
	return mu
}

// SetIsVariant sets the "is_variant" field.
func (mu *MediaUpdate) SetIsVariant(b bool) *MediaUpdate {
	mu.mutation.SetIsVariant(b)
	return mu
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableIsVariant(b *bool) *MediaUpdate {
	if b != nil {
		mu.SetIsVariant(*b)
	}
	return mu
}

// ClearIsVariant clears the value of the "is_variant" field.
func (mu *MediaUpdate) ClearIsVariant() *MediaUpdate {
	mu.mutation.ClearIsVariant()
	return mu
}

// SetVariantName sets the "variant_name" field.
func (mu *MediaUpdate) SetVariantName(s string) *MediaUpdate {
	mu.mutation.SetVariantName(s)
	return mu
}

// SetNillableVariantName sets the "variant_name" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableVariantName(s *string) *MediaUpdate {
	if s != nil {
		mu.SetVariantName(*s)
	}
	return mu
}

// ClearVariantName clears the value of the "variant_name" field.
func (mu *MediaUpdate) ClearVariantName() *MediaUpdate {
	mu.mutation.ClearVariantName()
	return mu
}

// SetOriginalMediaID sets the "original_media_id" field.
func (mu *MediaUpdate) SetOriginalMediaID(s string) *MediaUpdate {
	mu.mutation.SetOriginalMediaID(s)
	return mu
}

// SetNillableOriginalMediaID sets the "original_media_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableOriginalMediaID(s *string) *MediaUpdate {
	if s != nil {
		mu.SetOriginalMediaID(*s)
	}
	return mu
}

// ClearOriginalMediaID clears the value of the "original_media_id" field.
func (mu *MediaUpdate) ClearOriginalMediaID() *MediaUpdate {
	mu.mutation.ClearOriginalMediaID()
	return mu
}

// SetChecksum sets the "checksum" field.
func (mu *MediaUpdate) SetChecksum(s string) *MediaUpdate {
	mu.mutation.SetChecksum(s)
	return mu
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableChecksum(s *string) *MediaUpdate {
	if s != nil {
		mu.SetChecksum(*s)
	}
	return mu
}

// ClearChecksum clears the value of the "checksum" field.
func (mu *MediaUpdate) ClearChecksum() *MediaUpdate {
	mu.mutation.ClearChecksum()
	return mu
}

// SetWorkspaceID sets the "workspace_id" field.
func (mu *MediaUpdate) SetWorkspaceID(s string) *MediaUpdate {
	mu.mutation.SetWorkspaceID(s)
	return mu
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableWorkspaceID(s *string) *MediaUpdate {
	if s != nil {
		mu.SetWorkspaceID(*s)
	}
	return mu
}

// SetAlt sets the "alt" field.
func (mu *MediaUpdate) SetAlt(s string) *MediaUpdate {
	mu.mutation.SetAlt(s)
	return mu
}

// SetNillableAlt sets the "alt" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableAlt(s *string) *MediaUpdate {
	if s != nil {
		mu.SetAlt(*s)
	}
	return mu
}

// ClearAlt clears the value of the "alt" field.
func (mu *MediaUpdate) ClearAlt() *MediaUpdate {
	mu.mutation.ClearAlt()
	return mu
}

// SetUID sets the "uid" field.
func (mu *MediaUpdate) SetUID(s string) *MediaUpdate {
	mu.mutation.SetUID(s)
	return mu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableUID(s *string) *MediaUpdate {
	if s != nil {
		mu.SetUID(*s)
	}
	return mu
}

// ClearUID clears the value of the "uid" field.
func (mu *MediaUpdate) ClearUID() *MediaUpdate {
	mu.mutation.ClearUID()
	return mu
}

// SetStatus sets the "status" field.
func (mu *MediaUpdate) SetStatus(b bool) *MediaUpdate {
	mu.mutation.SetStatus(b)
	return mu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mu *MediaUpdate) SetNillableStatus(b *bool) *MediaUpdate {
	if b != nil {
		mu.SetStatus(*b)
	}
	return mu
}

// ClearStatus clears the value of the "status" field.
func (mu *MediaUpdate) ClearStatus() *MediaUpdate {
	mu.mutation.ClearStatus()
	return mu
}

// Mutation returns the MediaMutation object of the builder.
func (mu *MediaUpdate) Mutation() *MediaMutation {
	return mu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MediaUpdate) Save(ctx context.Context) (int, error) {
	mu.defaults()
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MediaUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MediaUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MediaUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mu *MediaUpdate) defaults() {
	if _, ok := mu.mutation.UpdatedAt(); !ok && !mu.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		mu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MediaUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MediaUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MediaUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if mu.mutation.CreatedAtCleared() {
		_spec.ClearField(media.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if mu.mutation.UpdatedAtCleared() {
		_spec.ClearField(media.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := mu.mutation.Disk(); ok {
		_spec.SetField(media.FieldDisk, field.TypeString, value)
	}
	if mu.mutation.DiskCleared() {
		_spec.ClearField(media.FieldDisk, field.TypeString)
	}
	if value, ok := mu.mutation.Directory(); ok {
		_spec.SetField(media.FieldDirectory, field.TypeString, value)
	}
	if mu.mutation.DirectoryCleared() {
		_spec.ClearField(media.FieldDirectory, field.TypeString)
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
	}
	if mu.mutation.NameCleared() {
		_spec.ClearField(media.FieldName, field.TypeString)
	}
	if value, ok := mu.mutation.OriginalName(); ok {
		_spec.SetField(media.FieldOriginalName, field.TypeString, value)
	}
	if mu.mutation.OriginalNameCleared() {
		_spec.ClearField(media.FieldOriginalName, field.TypeString)
	}
	if value, ok := mu.mutation.Extension(); ok {
		_spec.SetField(media.FieldExtension, field.TypeString, value)
	}
	if mu.mutation.ExtensionCleared() {
		_spec.ClearField(media.FieldExtension, field.TypeString)
	}
	if value, ok := mu.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if mu.mutation.MimeTypeCleared() {
		_spec.ClearField(media.FieldMimeType, field.TypeString)
	}
	if value, ok := mu.mutation.AggregateType(); ok {
		_spec.SetField(media.FieldAggregateType, field.TypeString, value)
	}
	if mu.mutation.AggregateTypeCleared() {
		_spec.ClearField(media.FieldAggregateType, field.TypeString)
	}
	if value, ok := mu.mutation.Size(); ok {
		_spec.SetField(media.FieldSize, field.TypeUint, value)
	}
	if value, ok := mu.mutation.AddedSize(); ok {
		_spec.AddField(media.FieldSize, field.TypeUint, value)
	}
	if mu.mutation.SizeCleared() {
		_spec.ClearField(media.FieldSize, field.TypeUint)
	}
	if value, ok := mu.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if mu.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := mu.mutation.IsVariant(); ok {
		_spec.SetField(media.FieldIsVariant, field.TypeBool, value)
	}
	if mu.mutation.IsVariantCleared() {
		_spec.ClearField(media.FieldIsVariant, field.TypeBool)
	}
	if value, ok := mu.mutation.VariantName(); ok {
		_spec.SetField(media.FieldVariantName, field.TypeString, value)
	}
	if mu.mutation.VariantNameCleared() {
		_spec.ClearField(media.FieldVariantName, field.TypeString)
	}
	if value, ok := mu.mutation.OriginalMediaID(); ok {
		_spec.SetField(media.FieldOriginalMediaID, field.TypeString, value)
	}
	if mu.mutation.OriginalMediaIDCleared() {
		_spec.ClearField(media.FieldOriginalMediaID, field.TypeString)
	}
	if value, ok := mu.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
	}
	if mu.mutation.ChecksumCleared() {
		_spec.ClearField(media.FieldChecksum, field.TypeString)
	}
	if value, ok := mu.mutation.WorkspaceID(); ok {
		_spec.SetField(media.FieldWorkspaceID, field.TypeString, value)
	}
	if value, ok := mu.mutation.Alt(); ok {
		_spec.SetField(media.FieldAlt, field.TypeString, value)
	}
	if mu.mutation.AltCleared() {
		_spec.ClearField(media.FieldAlt, field.TypeString)
	}
	if value, ok := mu.mutation.UID(); ok {
		_spec.SetField(media.FieldUID, field.TypeString, value)
	}
	if mu.mutation.UIDCleared() {
		_spec.ClearField(media.FieldUID, field.TypeString)
	}
	if value, ok := mu.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeBool, value)
	}
	if mu.mutation.StatusCleared() {
		_spec.ClearField(media.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MediaUpdateOne is the builder for updating a single Media entity.
type MediaUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MediaMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (muo *MediaUpdateOne) SetUpdatedAt(t time.Time) *MediaUpdateOne {
	muo.mutation.SetUpdatedAt(t)
	return muo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (muo *MediaUpdateOne) ClearUpdatedAt() *MediaUpdateOne {
	muo.mutation.ClearUpdatedAt()
	return muo
}

// SetDisk sets the "disk" field.
func (muo *MediaUpdateOne) SetDisk(s string) *MediaUpdateOne {
	muo.mutation.SetDisk(s)
	return muo
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDisk(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetDisk(*s)
	}
	return muo
}

// ClearDisk clears the value of the "disk" field.
func (muo *MediaUpdateOne) ClearDisk() *MediaUpdateOne {
	muo.mutation.ClearDisk()
	return muo
}

// SetDirectory sets the "directory" field.
func (muo *MediaUpdateOne) SetDirectory(s string) *MediaUpdateOne {
	muo.mutation.SetDirectory(s)
	return muo
}

// SetNillableDirectory sets the "directory" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDirectory(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetDirectory(*s)
	}
	return muo
}

// ClearDirectory clears the value of the "directory" field.
func (muo *MediaUpdateOne) ClearDirectory() *MediaUpdateOne {
	muo.mutation.ClearDirectory()
	return muo
}

// SetName sets the "name" field.
func (muo *MediaUpdateOne) SetName(s string) *MediaUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableName(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetName(*s)
	}
	return muo
}

// ClearName clears the value of the "name" field.
func (muo *MediaUpdateOne) ClearName() *MediaUpdateOne {
	muo.mutation.ClearName()
	return muo
}

// SetOriginalName sets the "original_name" field.
func (muo *MediaUpdateOne) SetOriginalName(s string) *MediaUpdateOne {
	muo.mutation.SetOriginalName(s)
	return muo
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableOriginalName(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetOriginalName(*s)
	}
	return muo
}

// ClearOriginalName clears the value of the "original_name" field.
func (muo *MediaUpdateOne) ClearOriginalName() *MediaUpdateOne {
	muo.mutation.ClearOriginalName()
	return muo
}

// SetExtension sets the "extension" field.
func (muo *MediaUpdateOne) SetExtension(s string) *MediaUpdateOne {
	muo.mutation.SetExtension(s)
	return muo
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableExtension(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetExtension(*s)
	}
	return muo
}

// ClearExtension clears the value of the "extension" field.
func (muo *MediaUpdateOne) ClearExtension() *MediaUpdateOne {
	muo.mutation.ClearExtension()
	return muo
}

// SetMimeType sets the "mime_type" field.
func (muo *MediaUpdateOne) SetMimeType(s string) *MediaUpdateOne {
	muo.mutation.SetMimeType(s)
	return muo
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableMimeType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetMimeType(*s)
	}
	return muo
}

// ClearMimeType clears the value of the "mime_type" field.
func (muo *MediaUpdateOne) ClearMimeType() *MediaUpdateOne {
	muo.mutation.ClearMimeType()
	return muo
}

// SetAggregateType sets the "aggregate_type" field.
func (muo *MediaUpdateOne) SetAggregateType(s string) *MediaUpdateOne {
	muo.mutation.SetAggregateType(s)
	return muo
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableAggregateType(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetAggregateType(*s)
	}
	return muo
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (muo *MediaUpdateOne) ClearAggregateType() *MediaUpdateOne {
	muo.mutation.ClearAggregateType()
	return muo
}

// SetSize sets the "size" field.
func (muo *MediaUpdateOne) SetSize(u uint) *MediaUpdateOne {
	muo.mutation.ResetSize()
	muo.mutation.SetSize(u)
	return muo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableSize(u *uint) *MediaUpdateOne {
	if u != nil {
		muo.SetSize(*u)
	}
	return muo
}

// AddSize adds u to the "size" field.
func (muo *MediaUpdateOne) AddSize(u int) *MediaUpdateOne {
	muo.mutation.AddSize(u)
	return muo
}

// ClearSize clears the value of the "size" field.
func (muo *MediaUpdateOne) ClearSize() *MediaUpdateOne {
	muo.mutation.ClearSize()
	return muo
}

// SetDescription sets the "description" field.
func (muo *MediaUpdateOne) SetDescription(s string) *MediaUpdateOne {
	muo.mutation.SetDescription(s)
	return muo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableDescription(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetDescription(*s)
	}
	return muo
}

// ClearDescription clears the value of the "description" field.
func (muo *MediaUpdateOne) ClearDescription() *MediaUpdateOne {
	muo.mutation.ClearDescription()
	return muo
}

// SetIsVariant sets the "is_variant" field.
func (muo *MediaUpdateOne) SetIsVariant(b bool) *MediaUpdateOne {
	muo.mutation.SetIsVariant(b)
	return muo
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableIsVariant(b *bool) *MediaUpdateOne {
	if b != nil {
		muo.SetIsVariant(*b)
	}
	return muo
}

// ClearIsVariant clears the value of the "is_variant" field.
func (muo *MediaUpdateOne) ClearIsVariant() *MediaUpdateOne {
	muo.mutation.ClearIsVariant()
	return muo
}

// SetVariantName sets the "variant_name" field.
func (muo *MediaUpdateOne) SetVariantName(s string) *MediaUpdateOne {
	muo.mutation.SetVariantName(s)
	return muo
}

// SetNillableVariantName sets the "variant_name" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableVariantName(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetVariantName(*s)
	}
	return muo
}

// ClearVariantName clears the value of the "variant_name" field.
func (muo *MediaUpdateOne) ClearVariantName() *MediaUpdateOne {
	muo.mutation.ClearVariantName()
	return muo
}

// SetOriginalMediaID sets the "original_media_id" field.
func (muo *MediaUpdateOne) SetOriginalMediaID(s string) *MediaUpdateOne {
	muo.mutation.SetOriginalMediaID(s)
	return muo
}

// SetNillableOriginalMediaID sets the "original_media_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableOriginalMediaID(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetOriginalMediaID(*s)
	}
	return muo
}

// ClearOriginalMediaID clears the value of the "original_media_id" field.
func (muo *MediaUpdateOne) ClearOriginalMediaID() *MediaUpdateOne {
	muo.mutation.ClearOriginalMediaID()
	return muo
}

// SetChecksum sets the "checksum" field.
func (muo *MediaUpdateOne) SetChecksum(s string) *MediaUpdateOne {
	muo.mutation.SetChecksum(s)
	return muo
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableChecksum(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetChecksum(*s)
	}
	return muo
}

// ClearChecksum clears the value of the "checksum" field.
func (muo *MediaUpdateOne) ClearChecksum() *MediaUpdateOne {
	muo.mutation.ClearChecksum()
	return muo
}

// SetWorkspaceID sets the "workspace_id" field.
func (muo *MediaUpdateOne) SetWorkspaceID(s string) *MediaUpdateOne {
	muo.mutation.SetWorkspaceID(s)
	return muo
}

// SetNillableWorkspaceID sets the "workspace_id" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableWorkspaceID(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetWorkspaceID(*s)
	}
	return muo
}

// SetAlt sets the "alt" field.
func (muo *MediaUpdateOne) SetAlt(s string) *MediaUpdateOne {
	muo.mutation.SetAlt(s)
	return muo
}

// SetNillableAlt sets the "alt" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableAlt(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetAlt(*s)
	}
	return muo
}

// ClearAlt clears the value of the "alt" field.
func (muo *MediaUpdateOne) ClearAlt() *MediaUpdateOne {
	muo.mutation.ClearAlt()
	return muo
}

// SetUID sets the "uid" field.
func (muo *MediaUpdateOne) SetUID(s string) *MediaUpdateOne {
	muo.mutation.SetUID(s)
	return muo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableUID(s *string) *MediaUpdateOne {
	if s != nil {
		muo.SetUID(*s)
	}
	return muo
}

// ClearUID clears the value of the "uid" field.
func (muo *MediaUpdateOne) ClearUID() *MediaUpdateOne {
	muo.mutation.ClearUID()
	return muo
}

// SetStatus sets the "status" field.
func (muo *MediaUpdateOne) SetStatus(b bool) *MediaUpdateOne {
	muo.mutation.SetStatus(b)
	return muo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (muo *MediaUpdateOne) SetNillableStatus(b *bool) *MediaUpdateOne {
	if b != nil {
		muo.SetStatus(*b)
	}
	return muo
}

// ClearStatus clears the value of the "status" field.
func (muo *MediaUpdateOne) ClearStatus() *MediaUpdateOne {
	muo.mutation.ClearStatus()
	return muo
}

// Mutation returns the MediaMutation object of the builder.
func (muo *MediaUpdateOne) Mutation() *MediaMutation {
	return muo.mutation
}

// Where appends a list predicates to the MediaUpdate builder.
func (muo *MediaUpdateOne) Where(ps ...predicate.Media) *MediaUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MediaUpdateOne) Select(field string, fields ...string) *MediaUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Media entity.
func (muo *MediaUpdateOne) Save(ctx context.Context) (*Media, error) {
	muo.defaults()
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MediaUpdateOne) SaveX(ctx context.Context) *Media {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MediaUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MediaUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (muo *MediaUpdateOne) defaults() {
	if _, ok := muo.mutation.UpdatedAt(); !ok && !muo.mutation.UpdatedAtCleared() {
		v := media.UpdateDefaultUpdatedAt()
		muo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MediaUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MediaUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MediaUpdateOne) sqlSave(ctx context.Context) (_node *Media, err error) {
	_spec := sqlgraph.NewUpdateSpec(media.Table, media.Columns, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Media.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, media.FieldID)
		for _, f := range fields {
			if !media.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != media.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if muo.mutation.CreatedAtCleared() {
		_spec.ClearField(media.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.UpdatedAt(); ok {
		_spec.SetField(media.FieldUpdatedAt, field.TypeTime, value)
	}
	if muo.mutation.UpdatedAtCleared() {
		_spec.ClearField(media.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := muo.mutation.Disk(); ok {
		_spec.SetField(media.FieldDisk, field.TypeString, value)
	}
	if muo.mutation.DiskCleared() {
		_spec.ClearField(media.FieldDisk, field.TypeString)
	}
	if value, ok := muo.mutation.Directory(); ok {
		_spec.SetField(media.FieldDirectory, field.TypeString, value)
	}
	if muo.mutation.DirectoryCleared() {
		_spec.ClearField(media.FieldDirectory, field.TypeString)
	}
	if value, ok := muo.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
	}
	if muo.mutation.NameCleared() {
		_spec.ClearField(media.FieldName, field.TypeString)
	}
	if value, ok := muo.mutation.OriginalName(); ok {
		_spec.SetField(media.FieldOriginalName, field.TypeString, value)
	}
	if muo.mutation.OriginalNameCleared() {
		_spec.ClearField(media.FieldOriginalName, field.TypeString)
	}
	if value, ok := muo.mutation.Extension(); ok {
		_spec.SetField(media.FieldExtension, field.TypeString, value)
	}
	if muo.mutation.ExtensionCleared() {
		_spec.ClearField(media.FieldExtension, field.TypeString)
	}
	if value, ok := muo.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
	}
	if muo.mutation.MimeTypeCleared() {
		_spec.ClearField(media.FieldMimeType, field.TypeString)
	}
	if value, ok := muo.mutation.AggregateType(); ok {
		_spec.SetField(media.FieldAggregateType, field.TypeString, value)
	}
	if muo.mutation.AggregateTypeCleared() {
		_spec.ClearField(media.FieldAggregateType, field.TypeString)
	}
	if value, ok := muo.mutation.Size(); ok {
		_spec.SetField(media.FieldSize, field.TypeUint, value)
	}
	if value, ok := muo.mutation.AddedSize(); ok {
		_spec.AddField(media.FieldSize, field.TypeUint, value)
	}
	if muo.mutation.SizeCleared() {
		_spec.ClearField(media.FieldSize, field.TypeUint)
	}
	if value, ok := muo.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
	}
	if muo.mutation.DescriptionCleared() {
		_spec.ClearField(media.FieldDescription, field.TypeString)
	}
	if value, ok := muo.mutation.IsVariant(); ok {
		_spec.SetField(media.FieldIsVariant, field.TypeBool, value)
	}
	if muo.mutation.IsVariantCleared() {
		_spec.ClearField(media.FieldIsVariant, field.TypeBool)
	}
	if value, ok := muo.mutation.VariantName(); ok {
		_spec.SetField(media.FieldVariantName, field.TypeString, value)
	}
	if muo.mutation.VariantNameCleared() {
		_spec.ClearField(media.FieldVariantName, field.TypeString)
	}
	if value, ok := muo.mutation.OriginalMediaID(); ok {
		_spec.SetField(media.FieldOriginalMediaID, field.TypeString, value)
	}
	if muo.mutation.OriginalMediaIDCleared() {
		_spec.ClearField(media.FieldOriginalMediaID, field.TypeString)
	}
	if value, ok := muo.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
	}
	if muo.mutation.ChecksumCleared() {
		_spec.ClearField(media.FieldChecksum, field.TypeString)
	}
	if value, ok := muo.mutation.WorkspaceID(); ok {
		_spec.SetField(media.FieldWorkspaceID, field.TypeString, value)
	}
	if value, ok := muo.mutation.Alt(); ok {
		_spec.SetField(media.FieldAlt, field.TypeString, value)
	}
	if muo.mutation.AltCleared() {
		_spec.ClearField(media.FieldAlt, field.TypeString)
	}
	if value, ok := muo.mutation.UID(); ok {
		_spec.SetField(media.FieldUID, field.TypeString, value)
	}
	if muo.mutation.UIDCleared() {
		_spec.ClearField(media.FieldUID, field.TypeString)
	}
	if value, ok := muo.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeBool, value)
	}
	if muo.mutation.StatusCleared() {
		_spec.ClearField(media.FieldStatus, field.TypeBool)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Media{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{media.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
