// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/kache"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KacheUpdate is the builder for updating Kache entities.
type KacheUpdate struct {
	config
	hooks     []Hook
	mutation  *KacheMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the KacheUpdate builder.
func (ku *KacheUpdate) Where(ps ...predicate.Kache) *KacheUpdate {
	ku.mutation.Where(ps...)
	return ku
}

// SetCreatedAt sets the "created_at" field.
func (ku *KacheUpdate) SetCreatedAt(t time.Time) *KacheUpdate {
	ku.mutation.SetCreatedAt(t)
	return ku
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ku *KacheUpdate) SetNillableCreatedAt(t *time.Time) *KacheUpdate {
	if t != nil {
		ku.SetCreatedAt(*t)
	}
	return ku
}

// ClearCreatedAt clears the value of the "created_at" field.
func (ku *KacheUpdate) ClearCreatedAt() *KacheUpdate {
	ku.mutation.ClearCreatedAt()
	return ku
}

// SetKey sets the "key" field.
func (ku *KacheUpdate) SetKey(s string) *KacheUpdate {
	ku.mutation.SetKey(s)
	return ku
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ku *KacheUpdate) SetNillableKey(s *string) *KacheUpdate {
	if s != nil {
		ku.SetKey(*s)
	}
	return ku
}

// ClearKey clears the value of the "key" field.
func (ku *KacheUpdate) ClearKey() *KacheUpdate {
	ku.mutation.ClearKey()
	return ku
}

// SetValue sets the "value" field.
func (ku *KacheUpdate) SetValue(s string) *KacheUpdate {
	ku.mutation.SetValue(s)
	return ku
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (ku *KacheUpdate) SetNillableValue(s *string) *KacheUpdate {
	if s != nil {
		ku.SetValue(*s)
	}
	return ku
}

// ClearValue clears the value of the "value" field.
func (ku *KacheUpdate) ClearValue() *KacheUpdate {
	ku.mutation.ClearValue()
	return ku
}

// SetExpires sets the "expires" field.
func (ku *KacheUpdate) SetExpires(i int) *KacheUpdate {
	ku.mutation.ResetExpires()
	ku.mutation.SetExpires(i)
	return ku
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (ku *KacheUpdate) SetNillableExpires(i *int) *KacheUpdate {
	if i != nil {
		ku.SetExpires(*i)
	}
	return ku
}

// AddExpires adds i to the "expires" field.
func (ku *KacheUpdate) AddExpires(i int) *KacheUpdate {
	ku.mutation.AddExpires(i)
	return ku
}

// ClearExpires clears the value of the "expires" field.
func (ku *KacheUpdate) ClearExpires() *KacheUpdate {
	ku.mutation.ClearExpires()
	return ku
}

// Mutation returns the KacheMutation object of the builder.
func (ku *KacheUpdate) Mutation() *KacheMutation {
	return ku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ku *KacheUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ku.sqlSave, ku.mutation, ku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ku *KacheUpdate) SaveX(ctx context.Context) int {
	affected, err := ku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ku *KacheUpdate) Exec(ctx context.Context) error {
	_, err := ku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ku *KacheUpdate) ExecX(ctx context.Context) {
	if err := ku.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ku *KacheUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KacheUpdate {
	ku.modifiers = append(ku.modifiers, modifiers...)
	return ku
}

func (ku *KacheUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(kache.Table, kache.Columns, sqlgraph.NewFieldSpec(kache.FieldID, field.TypeString))
	if ps := ku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ku.mutation.CreatedAt(); ok {
		_spec.SetField(kache.FieldCreatedAt, field.TypeTime, value)
	}
	if ku.mutation.CreatedAtCleared() {
		_spec.ClearField(kache.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ku.mutation.Key(); ok {
		_spec.SetField(kache.FieldKey, field.TypeString, value)
	}
	if ku.mutation.KeyCleared() {
		_spec.ClearField(kache.FieldKey, field.TypeString)
	}
	if value, ok := ku.mutation.Value(); ok {
		_spec.SetField(kache.FieldValue, field.TypeString, value)
	}
	if ku.mutation.ValueCleared() {
		_spec.ClearField(kache.FieldValue, field.TypeString)
	}
	if value, ok := ku.mutation.Expires(); ok {
		_spec.SetField(kache.FieldExpires, field.TypeInt, value)
	}
	if value, ok := ku.mutation.AddedExpires(); ok {
		_spec.AddField(kache.FieldExpires, field.TypeInt, value)
	}
	if ku.mutation.ExpiresCleared() {
		_spec.ClearField(kache.FieldExpires, field.TypeInt)
	}
	_spec.AddModifiers(ku.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ku.mutation.done = true
	return n, nil
}

// KacheUpdateOne is the builder for updating a single Kache entity.
type KacheUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *KacheMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCreatedAt sets the "created_at" field.
func (kuo *KacheUpdateOne) SetCreatedAt(t time.Time) *KacheUpdateOne {
	kuo.mutation.SetCreatedAt(t)
	return kuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kuo *KacheUpdateOne) SetNillableCreatedAt(t *time.Time) *KacheUpdateOne {
	if t != nil {
		kuo.SetCreatedAt(*t)
	}
	return kuo
}

// ClearCreatedAt clears the value of the "created_at" field.
func (kuo *KacheUpdateOne) ClearCreatedAt() *KacheUpdateOne {
	kuo.mutation.ClearCreatedAt()
	return kuo
}

// SetKey sets the "key" field.
func (kuo *KacheUpdateOne) SetKey(s string) *KacheUpdateOne {
	kuo.mutation.SetKey(s)
	return kuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (kuo *KacheUpdateOne) SetNillableKey(s *string) *KacheUpdateOne {
	if s != nil {
		kuo.SetKey(*s)
	}
	return kuo
}

// ClearKey clears the value of the "key" field.
func (kuo *KacheUpdateOne) ClearKey() *KacheUpdateOne {
	kuo.mutation.ClearKey()
	return kuo
}

// SetValue sets the "value" field.
func (kuo *KacheUpdateOne) SetValue(s string) *KacheUpdateOne {
	kuo.mutation.SetValue(s)
	return kuo
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (kuo *KacheUpdateOne) SetNillableValue(s *string) *KacheUpdateOne {
	if s != nil {
		kuo.SetValue(*s)
	}
	return kuo
}

// ClearValue clears the value of the "value" field.
func (kuo *KacheUpdateOne) ClearValue() *KacheUpdateOne {
	kuo.mutation.ClearValue()
	return kuo
}

// SetExpires sets the "expires" field.
func (kuo *KacheUpdateOne) SetExpires(i int) *KacheUpdateOne {
	kuo.mutation.ResetExpires()
	kuo.mutation.SetExpires(i)
	return kuo
}

// SetNillableExpires sets the "expires" field if the given value is not nil.
func (kuo *KacheUpdateOne) SetNillableExpires(i *int) *KacheUpdateOne {
	if i != nil {
		kuo.SetExpires(*i)
	}
	return kuo
}

// AddExpires adds i to the "expires" field.
func (kuo *KacheUpdateOne) AddExpires(i int) *KacheUpdateOne {
	kuo.mutation.AddExpires(i)
	return kuo
}

// ClearExpires clears the value of the "expires" field.
func (kuo *KacheUpdateOne) ClearExpires() *KacheUpdateOne {
	kuo.mutation.ClearExpires()
	return kuo
}

// Mutation returns the KacheMutation object of the builder.
func (kuo *KacheUpdateOne) Mutation() *KacheMutation {
	return kuo.mutation
}

// Where appends a list predicates to the KacheUpdate builder.
func (kuo *KacheUpdateOne) Where(ps ...predicate.Kache) *KacheUpdateOne {
	kuo.mutation.Where(ps...)
	return kuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (kuo *KacheUpdateOne) Select(field string, fields ...string) *KacheUpdateOne {
	kuo.fields = append([]string{field}, fields...)
	return kuo
}

// Save executes the query and returns the updated Kache entity.
func (kuo *KacheUpdateOne) Save(ctx context.Context) (*Kache, error) {
	return withHooks(ctx, kuo.sqlSave, kuo.mutation, kuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (kuo *KacheUpdateOne) SaveX(ctx context.Context) *Kache {
	node, err := kuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (kuo *KacheUpdateOne) Exec(ctx context.Context) error {
	_, err := kuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kuo *KacheUpdateOne) ExecX(ctx context.Context) {
	if err := kuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (kuo *KacheUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *KacheUpdateOne {
	kuo.modifiers = append(kuo.modifiers, modifiers...)
	return kuo
}

func (kuo *KacheUpdateOne) sqlSave(ctx context.Context) (_node *Kache, err error) {
	_spec := sqlgraph.NewUpdateSpec(kache.Table, kache.Columns, sqlgraph.NewFieldSpec(kache.FieldID, field.TypeString))
	id, ok := kuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Kache.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := kuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, kache.FieldID)
		for _, f := range fields {
			if !kache.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != kache.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := kuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := kuo.mutation.CreatedAt(); ok {
		_spec.SetField(kache.FieldCreatedAt, field.TypeTime, value)
	}
	if kuo.mutation.CreatedAtCleared() {
		_spec.ClearField(kache.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := kuo.mutation.Key(); ok {
		_spec.SetField(kache.FieldKey, field.TypeString, value)
	}
	if kuo.mutation.KeyCleared() {
		_spec.ClearField(kache.FieldKey, field.TypeString)
	}
	if value, ok := kuo.mutation.Value(); ok {
		_spec.SetField(kache.FieldValue, field.TypeString, value)
	}
	if kuo.mutation.ValueCleared() {
		_spec.ClearField(kache.FieldValue, field.TypeString)
	}
	if value, ok := kuo.mutation.Expires(); ok {
		_spec.SetField(kache.FieldExpires, field.TypeInt, value)
	}
	if value, ok := kuo.mutation.AddedExpires(); ok {
		_spec.AddField(kache.FieldExpires, field.TypeInt, value)
	}
	if kuo.mutation.ExpiresCleared() {
		_spec.ClearField(kache.FieldExpires, field.TypeInt)
	}
	_spec.AddModifiers(kuo.modifiers...)
	_node = &Kache{config: kuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, kuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{kache.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	kuo.mutation.done = true
	return _node, nil
}
