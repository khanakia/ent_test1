// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/predicate"
	"saas/gen/ent/session"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetAppID sets the "app_id" field.
func (uu *UserUpdate) SetAppID(s string) *UserUpdate {
	uu.mutation.SetAppID(s)
	return uu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAppID(s *string) *UserUpdate {
	if s != nil {
		uu.SetAppID(*s)
	}
	return uu
}

// ClearAppID clears the value of the "app_id" field.
func (uu *UserUpdate) ClearAppID() *UserUpdate {
	uu.mutation.ClearAppID()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetPhone sets the "phone" field.
func (uu *UserUpdate) SetPhone(s string) *UserUpdate {
	uu.mutation.SetPhone(s)
	return uu
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePhone(s *string) *UserUpdate {
	if s != nil {
		uu.SetPhone(*s)
	}
	return uu
}

// ClearPhone clears the value of the "phone" field.
func (uu *UserUpdate) ClearPhone() *UserUpdate {
	uu.mutation.ClearPhone()
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// ClearFirstName clears the value of the "first_name" field.
func (uu *UserUpdate) ClearFirstName() *UserUpdate {
	uu.mutation.ClearFirstName()
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// ClearLastName clears the value of the "last_name" field.
func (uu *UserUpdate) ClearLastName() *UserUpdate {
	uu.mutation.ClearLastName()
	return uu
}

// SetCompany sets the "company" field.
func (uu *UserUpdate) SetCompany(s string) *UserUpdate {
	uu.mutation.SetCompany(s)
	return uu
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCompany(s *string) *UserUpdate {
	if s != nil {
		uu.SetCompany(*s)
	}
	return uu
}

// ClearCompany clears the value of the "company" field.
func (uu *UserUpdate) ClearCompany() *UserUpdate {
	uu.mutation.ClearCompany()
	return uu
}

// SetLocale sets the "locale" field.
func (uu *UserUpdate) SetLocale(s string) *UserUpdate {
	uu.mutation.SetLocale(s)
	return uu
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLocale(s *string) *UserUpdate {
	if s != nil {
		uu.SetLocale(*s)
	}
	return uu
}

// ClearLocale clears the value of the "locale" field.
func (uu *UserUpdate) ClearLocale() *UserUpdate {
	uu.mutation.ClearLocale()
	return uu
}

// SetRoleID sets the "role_id" field.
func (uu *UserUpdate) SetRoleID(s string) *UserUpdate {
	uu.mutation.SetRoleID(s)
	return uu
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uu *UserUpdate) SetNillableRoleID(s *string) *UserUpdate {
	if s != nil {
		uu.SetRoleID(*s)
	}
	return uu
}

// ClearRoleID clears the value of the "role_id" field.
func (uu *UserUpdate) ClearRoleID() *UserUpdate {
	uu.mutation.ClearRoleID()
	return uu
}

// SetStatus sets the "status" field.
func (uu *UserUpdate) SetStatus(b bool) *UserUpdate {
	uu.mutation.SetStatus(b)
	return uu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uu *UserUpdate) SetNillableStatus(b *bool) *UserUpdate {
	if b != nil {
		uu.SetStatus(*b)
	}
	return uu
}

// ClearStatus clears the value of the "status" field.
func (uu *UserUpdate) ClearStatus() *UserUpdate {
	uu.mutation.ClearStatus()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetSecret sets the "secret" field.
func (uu *UserUpdate) SetSecret(s string) *UserUpdate {
	uu.mutation.SetSecret(s)
	return uu
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetSecret(*s)
	}
	return uu
}

// ClearSecret clears the value of the "secret" field.
func (uu *UserUpdate) ClearSecret() *UserUpdate {
	uu.mutation.ClearSecret()
	return uu
}

// SetAPIKey sets the "api_key" field.
func (uu *UserUpdate) SetAPIKey(s string) *UserUpdate {
	uu.mutation.SetAPIKey(s)
	return uu
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAPIKey(s *string) *UserUpdate {
	if s != nil {
		uu.SetAPIKey(*s)
	}
	return uu
}

// ClearAPIKey clears the value of the "api_key" field.
func (uu *UserUpdate) ClearAPIKey() *UserUpdate {
	uu.mutation.ClearAPIKey()
	return uu
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (uu *UserUpdate) SetWelcomeEmailSent(b bool) *UserUpdate {
	uu.mutation.SetWelcomeEmailSent(b)
	return uu
}

// SetNillableWelcomeEmailSent sets the "welcome_email_sent" field if the given value is not nil.
func (uu *UserUpdate) SetNillableWelcomeEmailSent(b *bool) *UserUpdate {
	if b != nil {
		uu.SetWelcomeEmailSent(*b)
	}
	return uu
}

// ClearWelcomeEmailSent clears the value of the "welcome_email_sent" field.
func (uu *UserUpdate) ClearWelcomeEmailSent() *UserUpdate {
	uu.mutation.ClearWelcomeEmailSent()
	return uu
}

// SetCanAdmin sets the "can_admin" field.
func (uu *UserUpdate) SetCanAdmin(b bool) *UserUpdate {
	uu.mutation.SetCanAdmin(b)
	return uu
}

// SetNillableCanAdmin sets the "can_admin" field if the given value is not nil.
func (uu *UserUpdate) SetNillableCanAdmin(b *bool) *UserUpdate {
	if b != nil {
		uu.SetCanAdmin(*b)
	}
	return uu
}

// ClearCanAdmin clears the value of the "can_admin" field.
func (uu *UserUpdate) ClearCanAdmin() *UserUpdate {
	uu.mutation.ClearCanAdmin()
	return uu
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uu *UserUpdate) AddSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.AddSessionIDs(ids...)
	return uu
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uu *UserUpdate) AddSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.AddSessionIDs(ids...)
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by IDs.
func (uu *UserUpdate) AddWorkspaceIDs(ids ...string) *UserUpdate {
	uu.mutation.AddWorkspaceIDs(ids...)
	return uu
}

// AddWorkspaces adds the "workspaces" edges to the Workspace entity.
func (uu *UserUpdate) AddWorkspaces(w ...*Workspace) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWorkspaceIDs(ids...)
}

// AddWorkspaceUserIDs adds the "workspace_users" edge to the WorkspaceUser entity by IDs.
func (uu *UserUpdate) AddWorkspaceUserIDs(ids ...string) *UserUpdate {
	uu.mutation.AddWorkspaceUserIDs(ids...)
	return uu
}

// AddWorkspaceUsers adds the "workspace_users" edges to the WorkspaceUser entity.
func (uu *UserUpdate) AddWorkspaceUsers(w ...*WorkspaceUser) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWorkspaceUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uu *UserUpdate) ClearSessions() *UserUpdate {
	uu.mutation.ClearSessions()
	return uu
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uu *UserUpdate) RemoveSessionIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveSessionIDs(ids...)
	return uu
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uu *UserUpdate) RemoveSessions(s ...*Session) *UserUpdate {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uu.RemoveSessionIDs(ids...)
}

// ClearWorkspaces clears all "workspaces" edges to the Workspace entity.
func (uu *UserUpdate) ClearWorkspaces() *UserUpdate {
	uu.mutation.ClearWorkspaces()
	return uu
}

// RemoveWorkspaceIDs removes the "workspaces" edge to Workspace entities by IDs.
func (uu *UserUpdate) RemoveWorkspaceIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveWorkspaceIDs(ids...)
	return uu
}

// RemoveWorkspaces removes "workspaces" edges to Workspace entities.
func (uu *UserUpdate) RemoveWorkspaces(w ...*Workspace) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWorkspaceIDs(ids...)
}

// ClearWorkspaceUsers clears all "workspace_users" edges to the WorkspaceUser entity.
func (uu *UserUpdate) ClearWorkspaceUsers() *UserUpdate {
	uu.mutation.ClearWorkspaceUsers()
	return uu
}

// RemoveWorkspaceUserIDs removes the "workspace_users" edge to WorkspaceUser entities by IDs.
func (uu *UserUpdate) RemoveWorkspaceUserIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveWorkspaceUserIDs(ids...)
	return uu
}

// RemoveWorkspaceUsers removes "workspace_users" edges to WorkspaceUser entities.
func (uu *UserUpdate) RemoveWorkspaceUsers(w ...*WorkspaceUser) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWorkspaceUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	uu.defaults()
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uu *UserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdate {
	uu.modifiers = append(uu.modifiers, modifiers...)
	return uu
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.AppID(); ok {
		_spec.SetField(user.FieldAppID, field.TypeString, value)
	}
	if uu.mutation.AppIDCleared() {
		_spec.ClearField(user.FieldAppID, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uu.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uu.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uu.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uu.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
	}
	if uu.mutation.CompanyCleared() {
		_spec.ClearField(user.FieldCompany, field.TypeString)
	}
	if value, ok := uu.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uu.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := uu.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeString, value)
	}
	if uu.mutation.RoleIDCleared() {
		_spec.ClearField(user.FieldRoleID, field.TypeString)
	}
	if value, ok := uu.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeBool, value)
	}
	if uu.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeBool)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Secret(); ok {
		_spec.SetField(user.FieldSecret, field.TypeString, value)
	}
	if uu.mutation.SecretCleared() {
		_spec.ClearField(user.FieldSecret, field.TypeString)
	}
	if value, ok := uu.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if uu.mutation.APIKeyCleared() {
		_spec.ClearField(user.FieldAPIKey, field.TypeString)
	}
	if value, ok := uu.mutation.WelcomeEmailSent(); ok {
		_spec.SetField(user.FieldWelcomeEmailSent, field.TypeBool, value)
	}
	if uu.mutation.WelcomeEmailSentCleared() {
		_spec.ClearField(user.FieldWelcomeEmailSent, field.TypeBool)
	}
	if value, ok := uu.mutation.CanAdmin(); ok {
		_spec.SetField(user.FieldCanAdmin, field.TypeBool, value)
	}
	if uu.mutation.CanAdminCleared() {
		_spec.ClearField(user.FieldCanAdmin, field.TypeBool)
	}
	if uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uu.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		createE := &WorkspaceUserCreate{config: uu.config, mutation: newWorkspaceUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWorkspacesIDs(); len(nodes) > 0 && !uu.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: uu.config, mutation: newWorkspaceUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: uu.config, mutation: newWorkspaceUserMutation(uu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWorkspaceUsersIDs(); len(nodes) > 0 && !uu.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WorkspaceUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *UserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetAppID sets the "app_id" field.
func (uuo *UserUpdateOne) SetAppID(s string) *UserUpdateOne {
	uuo.mutation.SetAppID(s)
	return uuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAppID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAppID(*s)
	}
	return uuo
}

// ClearAppID clears the value of the "app_id" field.
func (uuo *UserUpdateOne) ClearAppID() *UserUpdateOne {
	uuo.mutation.ClearAppID()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetPhone sets the "phone" field.
func (uuo *UserUpdateOne) SetPhone(s string) *UserUpdateOne {
	uuo.mutation.SetPhone(s)
	return uuo
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePhone(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPhone(*s)
	}
	return uuo
}

// ClearPhone clears the value of the "phone" field.
func (uuo *UserUpdateOne) ClearPhone() *UserUpdateOne {
	uuo.mutation.ClearPhone()
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// ClearFirstName clears the value of the "first_name" field.
func (uuo *UserUpdateOne) ClearFirstName() *UserUpdateOne {
	uuo.mutation.ClearFirstName()
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// ClearLastName clears the value of the "last_name" field.
func (uuo *UserUpdateOne) ClearLastName() *UserUpdateOne {
	uuo.mutation.ClearLastName()
	return uuo
}

// SetCompany sets the "company" field.
func (uuo *UserUpdateOne) SetCompany(s string) *UserUpdateOne {
	uuo.mutation.SetCompany(s)
	return uuo
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCompany(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetCompany(*s)
	}
	return uuo
}

// ClearCompany clears the value of the "company" field.
func (uuo *UserUpdateOne) ClearCompany() *UserUpdateOne {
	uuo.mutation.ClearCompany()
	return uuo
}

// SetLocale sets the "locale" field.
func (uuo *UserUpdateOne) SetLocale(s string) *UserUpdateOne {
	uuo.mutation.SetLocale(s)
	return uuo
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLocale(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLocale(*s)
	}
	return uuo
}

// ClearLocale clears the value of the "locale" field.
func (uuo *UserUpdateOne) ClearLocale() *UserUpdateOne {
	uuo.mutation.ClearLocale()
	return uuo
}

// SetRoleID sets the "role_id" field.
func (uuo *UserUpdateOne) SetRoleID(s string) *UserUpdateOne {
	uuo.mutation.SetRoleID(s)
	return uuo
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableRoleID(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetRoleID(*s)
	}
	return uuo
}

// ClearRoleID clears the value of the "role_id" field.
func (uuo *UserUpdateOne) ClearRoleID() *UserUpdateOne {
	uuo.mutation.ClearRoleID()
	return uuo
}

// SetStatus sets the "status" field.
func (uuo *UserUpdateOne) SetStatus(b bool) *UserUpdateOne {
	uuo.mutation.SetStatus(b)
	return uuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableStatus(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetStatus(*b)
	}
	return uuo
}

// ClearStatus clears the value of the "status" field.
func (uuo *UserUpdateOne) ClearStatus() *UserUpdateOne {
	uuo.mutation.ClearStatus()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetSecret sets the "secret" field.
func (uuo *UserUpdateOne) SetSecret(s string) *UserUpdateOne {
	uuo.mutation.SetSecret(s)
	return uuo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSecret(*s)
	}
	return uuo
}

// ClearSecret clears the value of the "secret" field.
func (uuo *UserUpdateOne) ClearSecret() *UserUpdateOne {
	uuo.mutation.ClearSecret()
	return uuo
}

// SetAPIKey sets the "api_key" field.
func (uuo *UserUpdateOne) SetAPIKey(s string) *UserUpdateOne {
	uuo.mutation.SetAPIKey(s)
	return uuo
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAPIKey(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAPIKey(*s)
	}
	return uuo
}

// ClearAPIKey clears the value of the "api_key" field.
func (uuo *UserUpdateOne) ClearAPIKey() *UserUpdateOne {
	uuo.mutation.ClearAPIKey()
	return uuo
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (uuo *UserUpdateOne) SetWelcomeEmailSent(b bool) *UserUpdateOne {
	uuo.mutation.SetWelcomeEmailSent(b)
	return uuo
}

// SetNillableWelcomeEmailSent sets the "welcome_email_sent" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableWelcomeEmailSent(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetWelcomeEmailSent(*b)
	}
	return uuo
}

// ClearWelcomeEmailSent clears the value of the "welcome_email_sent" field.
func (uuo *UserUpdateOne) ClearWelcomeEmailSent() *UserUpdateOne {
	uuo.mutation.ClearWelcomeEmailSent()
	return uuo
}

// SetCanAdmin sets the "can_admin" field.
func (uuo *UserUpdateOne) SetCanAdmin(b bool) *UserUpdateOne {
	uuo.mutation.SetCanAdmin(b)
	return uuo
}

// SetNillableCanAdmin sets the "can_admin" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableCanAdmin(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetCanAdmin(*b)
	}
	return uuo
}

// ClearCanAdmin clears the value of the "can_admin" field.
func (uuo *UserUpdateOne) ClearCanAdmin() *UserUpdateOne {
	uuo.mutation.ClearCanAdmin()
	return uuo
}

// AddSessionIDs adds the "sessions" edge to the Session entity by IDs.
func (uuo *UserUpdateOne) AddSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddSessionIDs(ids...)
	return uuo
}

// AddSessions adds the "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) AddSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.AddSessionIDs(ids...)
}

// AddWorkspaceIDs adds the "workspaces" edge to the Workspace entity by IDs.
func (uuo *UserUpdateOne) AddWorkspaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddWorkspaceIDs(ids...)
	return uuo
}

// AddWorkspaces adds the "workspaces" edges to the Workspace entity.
func (uuo *UserUpdateOne) AddWorkspaces(w ...*Workspace) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWorkspaceIDs(ids...)
}

// AddWorkspaceUserIDs adds the "workspace_users" edge to the WorkspaceUser entity by IDs.
func (uuo *UserUpdateOne) AddWorkspaceUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddWorkspaceUserIDs(ids...)
	return uuo
}

// AddWorkspaceUsers adds the "workspace_users" edges to the WorkspaceUser entity.
func (uuo *UserUpdateOne) AddWorkspaceUsers(w ...*WorkspaceUser) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWorkspaceUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearSessions clears all "sessions" edges to the Session entity.
func (uuo *UserUpdateOne) ClearSessions() *UserUpdateOne {
	uuo.mutation.ClearSessions()
	return uuo
}

// RemoveSessionIDs removes the "sessions" edge to Session entities by IDs.
func (uuo *UserUpdateOne) RemoveSessionIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveSessionIDs(ids...)
	return uuo
}

// RemoveSessions removes "sessions" edges to Session entities.
func (uuo *UserUpdateOne) RemoveSessions(s ...*Session) *UserUpdateOne {
	ids := make([]string, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return uuo.RemoveSessionIDs(ids...)
}

// ClearWorkspaces clears all "workspaces" edges to the Workspace entity.
func (uuo *UserUpdateOne) ClearWorkspaces() *UserUpdateOne {
	uuo.mutation.ClearWorkspaces()
	return uuo
}

// RemoveWorkspaceIDs removes the "workspaces" edge to Workspace entities by IDs.
func (uuo *UserUpdateOne) RemoveWorkspaceIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveWorkspaceIDs(ids...)
	return uuo
}

// RemoveWorkspaces removes "workspaces" edges to Workspace entities.
func (uuo *UserUpdateOne) RemoveWorkspaces(w ...*Workspace) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWorkspaceIDs(ids...)
}

// ClearWorkspaceUsers clears all "workspace_users" edges to the WorkspaceUser entity.
func (uuo *UserUpdateOne) ClearWorkspaceUsers() *UserUpdateOne {
	uuo.mutation.ClearWorkspaceUsers()
	return uuo
}

// RemoveWorkspaceUserIDs removes the "workspace_users" edge to WorkspaceUser entities by IDs.
func (uuo *UserUpdateOne) RemoveWorkspaceUserIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveWorkspaceUserIDs(ids...)
	return uuo
}

// RemoveWorkspaceUsers removes "workspace_users" edges to WorkspaceUser entities.
func (uuo *UserUpdateOne) RemoveWorkspaceUsers(w ...*WorkspaceUser) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWorkspaceUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	uuo.defaults()
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (uuo *UserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *UserUpdateOne {
	uuo.modifiers = append(uuo.modifiers, modifiers...)
	return uuo
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.AppID(); ok {
		_spec.SetField(user.FieldAppID, field.TypeString, value)
	}
	if uuo.mutation.AppIDCleared() {
		_spec.ClearField(user.FieldAppID, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.SetField(user.FieldPhone, field.TypeString, value)
	}
	if uuo.mutation.PhoneCleared() {
		_spec.ClearField(user.FieldPhone, field.TypeString)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if uuo.mutation.FirstNameCleared() {
		_spec.ClearField(user.FieldFirstName, field.TypeString)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if uuo.mutation.LastNameCleared() {
		_spec.ClearField(user.FieldLastName, field.TypeString)
	}
	if value, ok := uuo.mutation.Company(); ok {
		_spec.SetField(user.FieldCompany, field.TypeString, value)
	}
	if uuo.mutation.CompanyCleared() {
		_spec.ClearField(user.FieldCompany, field.TypeString)
	}
	if value, ok := uuo.mutation.Locale(); ok {
		_spec.SetField(user.FieldLocale, field.TypeString, value)
	}
	if uuo.mutation.LocaleCleared() {
		_spec.ClearField(user.FieldLocale, field.TypeString)
	}
	if value, ok := uuo.mutation.RoleID(); ok {
		_spec.SetField(user.FieldRoleID, field.TypeString, value)
	}
	if uuo.mutation.RoleIDCleared() {
		_spec.ClearField(user.FieldRoleID, field.TypeString)
	}
	if value, ok := uuo.mutation.Status(); ok {
		_spec.SetField(user.FieldStatus, field.TypeBool, value)
	}
	if uuo.mutation.StatusCleared() {
		_spec.ClearField(user.FieldStatus, field.TypeBool)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Secret(); ok {
		_spec.SetField(user.FieldSecret, field.TypeString, value)
	}
	if uuo.mutation.SecretCleared() {
		_spec.ClearField(user.FieldSecret, field.TypeString)
	}
	if value, ok := uuo.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if uuo.mutation.APIKeyCleared() {
		_spec.ClearField(user.FieldAPIKey, field.TypeString)
	}
	if value, ok := uuo.mutation.WelcomeEmailSent(); ok {
		_spec.SetField(user.FieldWelcomeEmailSent, field.TypeBool, value)
	}
	if uuo.mutation.WelcomeEmailSentCleared() {
		_spec.ClearField(user.FieldWelcomeEmailSent, field.TypeBool)
	}
	if value, ok := uuo.mutation.CanAdmin(); ok {
		_spec.SetField(user.FieldCanAdmin, field.TypeBool, value)
	}
	if uuo.mutation.CanAdminCleared() {
		_spec.ClearField(user.FieldCanAdmin, field.TypeBool)
	}
	if uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedSessionsIDs(); len(nodes) > 0 && !uuo.mutation.SessionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SessionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.SessionsTable,
			Columns: []string{user.SessionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(session.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		createE := &WorkspaceUserCreate{config: uuo.config, mutation: newWorkspaceUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWorkspacesIDs(); len(nodes) > 0 && !uuo.mutation.WorkspacesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: uuo.config, mutation: newWorkspaceUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WorkspacesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   user.WorkspacesTable,
			Columns: user.WorkspacesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: uuo.config, mutation: newWorkspaceUserMutation(uuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWorkspaceUsersIDs(); len(nodes) > 0 && !uuo.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WorkspaceUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.WorkspaceUsersTable,
			Columns: []string{user.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(uuo.modifiers...)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
