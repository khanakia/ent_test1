// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/adminuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUserCreate is the builder for creating a AdminUser entity.
type AdminUserCreate struct {
	config
	mutation *AdminUserMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (auc *AdminUserCreate) SetCreatedAt(t time.Time) *AdminUserCreate {
	auc.mutation.SetCreatedAt(t)
	return auc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableCreatedAt(t *time.Time) *AdminUserCreate {
	if t != nil {
		auc.SetCreatedAt(*t)
	}
	return auc
}

// SetUpdatedAt sets the "updated_at" field.
func (auc *AdminUserCreate) SetUpdatedAt(t time.Time) *AdminUserCreate {
	auc.mutation.SetUpdatedAt(t)
	return auc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableUpdatedAt(t *time.Time) *AdminUserCreate {
	if t != nil {
		auc.SetUpdatedAt(*t)
	}
	return auc
}

// SetEmail sets the "email" field.
func (auc *AdminUserCreate) SetEmail(s string) *AdminUserCreate {
	auc.mutation.SetEmail(s)
	return auc
}

// SetPhone sets the "phone" field.
func (auc *AdminUserCreate) SetPhone(s string) *AdminUserCreate {
	auc.mutation.SetPhone(s)
	return auc
}

// SetNillablePhone sets the "phone" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillablePhone(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetPhone(*s)
	}
	return auc
}

// SetFirstName sets the "first_name" field.
func (auc *AdminUserCreate) SetFirstName(s string) *AdminUserCreate {
	auc.mutation.SetFirstName(s)
	return auc
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableFirstName(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetFirstName(*s)
	}
	return auc
}

// SetLastName sets the "last_name" field.
func (auc *AdminUserCreate) SetLastName(s string) *AdminUserCreate {
	auc.mutation.SetLastName(s)
	return auc
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableLastName(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetLastName(*s)
	}
	return auc
}

// SetCompany sets the "company" field.
func (auc *AdminUserCreate) SetCompany(s string) *AdminUserCreate {
	auc.mutation.SetCompany(s)
	return auc
}

// SetNillableCompany sets the "company" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableCompany(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetCompany(*s)
	}
	return auc
}

// SetLocale sets the "locale" field.
func (auc *AdminUserCreate) SetLocale(s string) *AdminUserCreate {
	auc.mutation.SetLocale(s)
	return auc
}

// SetNillableLocale sets the "locale" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableLocale(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetLocale(*s)
	}
	return auc
}

// SetRoleID sets the "role_id" field.
func (auc *AdminUserCreate) SetRoleID(s string) *AdminUserCreate {
	auc.mutation.SetRoleID(s)
	return auc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableRoleID(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetRoleID(*s)
	}
	return auc
}

// SetStatus sets the "status" field.
func (auc *AdminUserCreate) SetStatus(b bool) *AdminUserCreate {
	auc.mutation.SetStatus(b)
	return auc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableStatus(b *bool) *AdminUserCreate {
	if b != nil {
		auc.SetStatus(*b)
	}
	return auc
}

// SetPassword sets the "password" field.
func (auc *AdminUserCreate) SetPassword(s string) *AdminUserCreate {
	auc.mutation.SetPassword(s)
	return auc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillablePassword(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetPassword(*s)
	}
	return auc
}

// SetSecret sets the "secret" field.
func (auc *AdminUserCreate) SetSecret(s string) *AdminUserCreate {
	auc.mutation.SetSecret(s)
	return auc
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableSecret(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetSecret(*s)
	}
	return auc
}

// SetAPIKey sets the "api_key" field.
func (auc *AdminUserCreate) SetAPIKey(s string) *AdminUserCreate {
	auc.mutation.SetAPIKey(s)
	return auc
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableAPIKey(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetAPIKey(*s)
	}
	return auc
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (auc *AdminUserCreate) SetWelcomeEmailSent(b bool) *AdminUserCreate {
	auc.mutation.SetWelcomeEmailSent(b)
	return auc
}

// SetNillableWelcomeEmailSent sets the "welcome_email_sent" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableWelcomeEmailSent(b *bool) *AdminUserCreate {
	if b != nil {
		auc.SetWelcomeEmailSent(*b)
	}
	return auc
}

// SetID sets the "id" field.
func (auc *AdminUserCreate) SetID(s string) *AdminUserCreate {
	auc.mutation.SetID(s)
	return auc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (auc *AdminUserCreate) SetNillableID(s *string) *AdminUserCreate {
	if s != nil {
		auc.SetID(*s)
	}
	return auc
}

// Mutation returns the AdminUserMutation object of the builder.
func (auc *AdminUserCreate) Mutation() *AdminUserMutation {
	return auc.mutation
}

// Save creates the AdminUser in the database.
func (auc *AdminUserCreate) Save(ctx context.Context) (*AdminUser, error) {
	auc.defaults()
	return withHooks(ctx, auc.sqlSave, auc.mutation, auc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (auc *AdminUserCreate) SaveX(ctx context.Context) *AdminUser {
	v, err := auc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (auc *AdminUserCreate) Exec(ctx context.Context) error {
	_, err := auc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auc *AdminUserCreate) ExecX(ctx context.Context) {
	if err := auc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auc *AdminUserCreate) defaults() {
	if _, ok := auc.mutation.CreatedAt(); !ok {
		v := adminuser.DefaultCreatedAt()
		auc.mutation.SetCreatedAt(v)
	}
	if _, ok := auc.mutation.UpdatedAt(); !ok {
		v := adminuser.DefaultUpdatedAt()
		auc.mutation.SetUpdatedAt(v)
	}
	if _, ok := auc.mutation.RoleID(); !ok {
		v := adminuser.DefaultRoleID
		auc.mutation.SetRoleID(v)
	}
	if _, ok := auc.mutation.Status(); !ok {
		v := adminuser.DefaultStatus
		auc.mutation.SetStatus(v)
	}
	if _, ok := auc.mutation.ID(); !ok {
		v := adminuser.DefaultID()
		auc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auc *AdminUserCreate) check() error {
	if _, ok := auc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`ent: missing required field "AdminUser.email"`)}
	}
	return nil
}

func (auc *AdminUserCreate) sqlSave(ctx context.Context) (*AdminUser, error) {
	if err := auc.check(); err != nil {
		return nil, err
	}
	_node, _spec := auc.createSpec()
	if err := sqlgraph.CreateNode(ctx, auc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AdminUser.ID type: %T", _spec.ID.Value)
		}
	}
	auc.mutation.id = &_node.ID
	auc.mutation.done = true
	return _node, nil
}

func (auc *AdminUserCreate) createSpec() (*AdminUser, *sqlgraph.CreateSpec) {
	var (
		_node = &AdminUser{config: auc.config}
		_spec = sqlgraph.NewCreateSpec(adminuser.Table, sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString))
	)
	_spec.OnConflict = auc.conflict
	if id, ok := auc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := auc.mutation.CreatedAt(); ok {
		_spec.SetField(adminuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := auc.mutation.UpdatedAt(); ok {
		_spec.SetField(adminuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := auc.mutation.Email(); ok {
		_spec.SetField(adminuser.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := auc.mutation.Phone(); ok {
		_spec.SetField(adminuser.FieldPhone, field.TypeString, value)
		_node.Phone = value
	}
	if value, ok := auc.mutation.FirstName(); ok {
		_spec.SetField(adminuser.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := auc.mutation.LastName(); ok {
		_spec.SetField(adminuser.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := auc.mutation.Company(); ok {
		_spec.SetField(adminuser.FieldCompany, field.TypeString, value)
		_node.Company = value
	}
	if value, ok := auc.mutation.Locale(); ok {
		_spec.SetField(adminuser.FieldLocale, field.TypeString, value)
		_node.Locale = value
	}
	if value, ok := auc.mutation.RoleID(); ok {
		_spec.SetField(adminuser.FieldRoleID, field.TypeString, value)
		_node.RoleID = value
	}
	if value, ok := auc.mutation.Status(); ok {
		_spec.SetField(adminuser.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := auc.mutation.Password(); ok {
		_spec.SetField(adminuser.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := auc.mutation.Secret(); ok {
		_spec.SetField(adminuser.FieldSecret, field.TypeString, value)
		_node.Secret = value
	}
	if value, ok := auc.mutation.APIKey(); ok {
		_spec.SetField(adminuser.FieldAPIKey, field.TypeString, value)
		_node.APIKey = value
	}
	if value, ok := auc.mutation.WelcomeEmailSent(); ok {
		_spec.SetField(adminuser.FieldWelcomeEmailSent, field.TypeBool, value)
		_node.WelcomeEmailSent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdminUser.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdminUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (auc *AdminUserCreate) OnConflict(opts ...sql.ConflictOption) *AdminUserUpsertOne {
	auc.conflict = opts
	return &AdminUserUpsertOne{
		create: auc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (auc *AdminUserCreate) OnConflictColumns(columns ...string) *AdminUserUpsertOne {
	auc.conflict = append(auc.conflict, sql.ConflictColumns(columns...))
	return &AdminUserUpsertOne{
		create: auc,
	}
}

type (
	// AdminUserUpsertOne is the builder for "upsert"-ing
	//  one AdminUser node.
	AdminUserUpsertOne struct {
		create *AdminUserCreate
	}

	// AdminUserUpsert is the "OnConflict" setter.
	AdminUserUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AdminUserUpsert) SetUpdatedAt(v time.Time) *AdminUserUpsert {
	u.Set(adminuser.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateUpdatedAt() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AdminUserUpsert) ClearUpdatedAt() *AdminUserUpsert {
	u.SetNull(adminuser.FieldUpdatedAt)
	return u
}

// SetEmail sets the "email" field.
func (u *AdminUserUpsert) SetEmail(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateEmail() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldEmail)
	return u
}

// SetPhone sets the "phone" field.
func (u *AdminUserUpsert) SetPhone(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldPhone, v)
	return u
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdatePhone() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldPhone)
	return u
}

// ClearPhone clears the value of the "phone" field.
func (u *AdminUserUpsert) ClearPhone() *AdminUserUpsert {
	u.SetNull(adminuser.FieldPhone)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *AdminUserUpsert) SetFirstName(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateFirstName() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldFirstName)
	return u
}

// ClearFirstName clears the value of the "first_name" field.
func (u *AdminUserUpsert) ClearFirstName() *AdminUserUpsert {
	u.SetNull(adminuser.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *AdminUserUpsert) SetLastName(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateLastName() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldLastName)
	return u
}

// ClearLastName clears the value of the "last_name" field.
func (u *AdminUserUpsert) ClearLastName() *AdminUserUpsert {
	u.SetNull(adminuser.FieldLastName)
	return u
}

// SetCompany sets the "company" field.
func (u *AdminUserUpsert) SetCompany(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldCompany, v)
	return u
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateCompany() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldCompany)
	return u
}

// ClearCompany clears the value of the "company" field.
func (u *AdminUserUpsert) ClearCompany() *AdminUserUpsert {
	u.SetNull(adminuser.FieldCompany)
	return u
}

// SetLocale sets the "locale" field.
func (u *AdminUserUpsert) SetLocale(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldLocale, v)
	return u
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateLocale() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldLocale)
	return u
}

// ClearLocale clears the value of the "locale" field.
func (u *AdminUserUpsert) ClearLocale() *AdminUserUpsert {
	u.SetNull(adminuser.FieldLocale)
	return u
}

// SetRoleID sets the "role_id" field.
func (u *AdminUserUpsert) SetRoleID(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldRoleID, v)
	return u
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateRoleID() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldRoleID)
	return u
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AdminUserUpsert) ClearRoleID() *AdminUserUpsert {
	u.SetNull(adminuser.FieldRoleID)
	return u
}

// SetStatus sets the "status" field.
func (u *AdminUserUpsert) SetStatus(v bool) *AdminUserUpsert {
	u.Set(adminuser.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateStatus() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *AdminUserUpsert) ClearStatus() *AdminUserUpsert {
	u.SetNull(adminuser.FieldStatus)
	return u
}

// SetPassword sets the "password" field.
func (u *AdminUserUpsert) SetPassword(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdatePassword() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *AdminUserUpsert) ClearPassword() *AdminUserUpsert {
	u.SetNull(adminuser.FieldPassword)
	return u
}

// SetSecret sets the "secret" field.
func (u *AdminUserUpsert) SetSecret(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldSecret, v)
	return u
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateSecret() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldSecret)
	return u
}

// ClearSecret clears the value of the "secret" field.
func (u *AdminUserUpsert) ClearSecret() *AdminUserUpsert {
	u.SetNull(adminuser.FieldSecret)
	return u
}

// SetAPIKey sets the "api_key" field.
func (u *AdminUserUpsert) SetAPIKey(v string) *AdminUserUpsert {
	u.Set(adminuser.FieldAPIKey, v)
	return u
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateAPIKey() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldAPIKey)
	return u
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *AdminUserUpsert) ClearAPIKey() *AdminUserUpsert {
	u.SetNull(adminuser.FieldAPIKey)
	return u
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (u *AdminUserUpsert) SetWelcomeEmailSent(v bool) *AdminUserUpsert {
	u.Set(adminuser.FieldWelcomeEmailSent, v)
	return u
}

// UpdateWelcomeEmailSent sets the "welcome_email_sent" field to the value that was provided on create.
func (u *AdminUserUpsert) UpdateWelcomeEmailSent() *AdminUserUpsert {
	u.SetExcluded(adminuser.FieldWelcomeEmailSent)
	return u
}

// ClearWelcomeEmailSent clears the value of the "welcome_email_sent" field.
func (u *AdminUserUpsert) ClearWelcomeEmailSent() *AdminUserUpsert {
	u.SetNull(adminuser.FieldWelcomeEmailSent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(adminuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AdminUserUpsertOne) UpdateNewValues() *AdminUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(adminuser.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(adminuser.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AdminUserUpsertOne) Ignore() *AdminUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdminUserUpsertOne) DoNothing() *AdminUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdminUserCreate.OnConflict
// documentation for more info.
func (u *AdminUserUpsertOne) Update(set func(*AdminUserUpsert)) *AdminUserUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdminUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AdminUserUpsertOne) SetUpdatedAt(v time.Time) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateUpdatedAt() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AdminUserUpsertOne) ClearUpdatedAt() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *AdminUserUpsertOne) SetEmail(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateEmail() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *AdminUserUpsertOne) SetPhone(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdatePhone() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *AdminUserUpsertOne) ClearPhone() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearPhone()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AdminUserUpsertOne) SetFirstName(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateFirstName() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *AdminUserUpsertOne) ClearFirstName() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AdminUserUpsertOne) SetLastName(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateLastName() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *AdminUserUpsertOne) ClearLastName() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearLastName()
	})
}

// SetCompany sets the "company" field.
func (u *AdminUserUpsertOne) SetCompany(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateCompany() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AdminUserUpsertOne) ClearCompany() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearCompany()
	})
}

// SetLocale sets the "locale" field.
func (u *AdminUserUpsertOne) SetLocale(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateLocale() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *AdminUserUpsertOne) ClearLocale() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearLocale()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AdminUserUpsertOne) SetRoleID(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateRoleID() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AdminUserUpsertOne) ClearRoleID() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearRoleID()
	})
}

// SetStatus sets the "status" field.
func (u *AdminUserUpsertOne) SetStatus(v bool) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateStatus() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AdminUserUpsertOne) ClearStatus() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearStatus()
	})
}

// SetPassword sets the "password" field.
func (u *AdminUserUpsertOne) SetPassword(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdatePassword() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *AdminUserUpsertOne) ClearPassword() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearPassword()
	})
}

// SetSecret sets the "secret" field.
func (u *AdminUserUpsertOne) SetSecret(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateSecret() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateSecret()
	})
}

// ClearSecret clears the value of the "secret" field.
func (u *AdminUserUpsertOne) ClearSecret() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearSecret()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *AdminUserUpsertOne) SetAPIKey(v string) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateAPIKey() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *AdminUserUpsertOne) ClearAPIKey() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearAPIKey()
	})
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (u *AdminUserUpsertOne) SetWelcomeEmailSent(v bool) *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetWelcomeEmailSent(v)
	})
}

// UpdateWelcomeEmailSent sets the "welcome_email_sent" field to the value that was provided on create.
func (u *AdminUserUpsertOne) UpdateWelcomeEmailSent() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateWelcomeEmailSent()
	})
}

// ClearWelcomeEmailSent clears the value of the "welcome_email_sent" field.
func (u *AdminUserUpsertOne) ClearWelcomeEmailSent() *AdminUserUpsertOne {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearWelcomeEmailSent()
	})
}

// Exec executes the query.
func (u *AdminUserUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdminUserCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdminUserUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AdminUserUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AdminUserUpsertOne.ID is not supported by MySQL driver. Use AdminUserUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AdminUserUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AdminUserCreateBulk is the builder for creating many AdminUser entities in bulk.
type AdminUserCreateBulk struct {
	config
	err      error
	builders []*AdminUserCreate
	conflict []sql.ConflictOption
}

// Save creates the AdminUser entities in the database.
func (aucb *AdminUserCreateBulk) Save(ctx context.Context) ([]*AdminUser, error) {
	if aucb.err != nil {
		return nil, aucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(aucb.builders))
	nodes := make([]*AdminUser, len(aucb.builders))
	mutators := make([]Mutator, len(aucb.builders))
	for i := range aucb.builders {
		func(i int, root context.Context) {
			builder := aucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AdminUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, aucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = aucb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, aucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, aucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (aucb *AdminUserCreateBulk) SaveX(ctx context.Context) []*AdminUser {
	v, err := aucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (aucb *AdminUserCreateBulk) Exec(ctx context.Context) error {
	_, err := aucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aucb *AdminUserCreateBulk) ExecX(ctx context.Context) {
	if err := aucb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AdminUser.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AdminUserUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (aucb *AdminUserCreateBulk) OnConflict(opts ...sql.ConflictOption) *AdminUserUpsertBulk {
	aucb.conflict = opts
	return &AdminUserUpsertBulk{
		create: aucb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (aucb *AdminUserCreateBulk) OnConflictColumns(columns ...string) *AdminUserUpsertBulk {
	aucb.conflict = append(aucb.conflict, sql.ConflictColumns(columns...))
	return &AdminUserUpsertBulk{
		create: aucb,
	}
}

// AdminUserUpsertBulk is the builder for "upsert"-ing
// a bulk of AdminUser nodes.
type AdminUserUpsertBulk struct {
	create *AdminUserCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(adminuser.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AdminUserUpsertBulk) UpdateNewValues() *AdminUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(adminuser.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(adminuser.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AdminUser.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AdminUserUpsertBulk) Ignore() *AdminUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AdminUserUpsertBulk) DoNothing() *AdminUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AdminUserCreateBulk.OnConflict
// documentation for more info.
func (u *AdminUserUpsertBulk) Update(set func(*AdminUserUpsert)) *AdminUserUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AdminUserUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AdminUserUpsertBulk) SetUpdatedAt(v time.Time) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateUpdatedAt() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AdminUserUpsertBulk) ClearUpdatedAt() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetEmail sets the "email" field.
func (u *AdminUserUpsertBulk) SetEmail(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateEmail() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateEmail()
	})
}

// SetPhone sets the "phone" field.
func (u *AdminUserUpsertBulk) SetPhone(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetPhone(v)
	})
}

// UpdatePhone sets the "phone" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdatePhone() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdatePhone()
	})
}

// ClearPhone clears the value of the "phone" field.
func (u *AdminUserUpsertBulk) ClearPhone() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearPhone()
	})
}

// SetFirstName sets the "first_name" field.
func (u *AdminUserUpsertBulk) SetFirstName(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateFirstName() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateFirstName()
	})
}

// ClearFirstName clears the value of the "first_name" field.
func (u *AdminUserUpsertBulk) ClearFirstName() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *AdminUserUpsertBulk) SetLastName(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateLastName() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateLastName()
	})
}

// ClearLastName clears the value of the "last_name" field.
func (u *AdminUserUpsertBulk) ClearLastName() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearLastName()
	})
}

// SetCompany sets the "company" field.
func (u *AdminUserUpsertBulk) SetCompany(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetCompany(v)
	})
}

// UpdateCompany sets the "company" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateCompany() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateCompany()
	})
}

// ClearCompany clears the value of the "company" field.
func (u *AdminUserUpsertBulk) ClearCompany() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearCompany()
	})
}

// SetLocale sets the "locale" field.
func (u *AdminUserUpsertBulk) SetLocale(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetLocale(v)
	})
}

// UpdateLocale sets the "locale" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateLocale() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateLocale()
	})
}

// ClearLocale clears the value of the "locale" field.
func (u *AdminUserUpsertBulk) ClearLocale() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearLocale()
	})
}

// SetRoleID sets the "role_id" field.
func (u *AdminUserUpsertBulk) SetRoleID(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetRoleID(v)
	})
}

// UpdateRoleID sets the "role_id" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateRoleID() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateRoleID()
	})
}

// ClearRoleID clears the value of the "role_id" field.
func (u *AdminUserUpsertBulk) ClearRoleID() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearRoleID()
	})
}

// SetStatus sets the "status" field.
func (u *AdminUserUpsertBulk) SetStatus(v bool) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateStatus() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *AdminUserUpsertBulk) ClearStatus() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearStatus()
	})
}

// SetPassword sets the "password" field.
func (u *AdminUserUpsertBulk) SetPassword(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdatePassword() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *AdminUserUpsertBulk) ClearPassword() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearPassword()
	})
}

// SetSecret sets the "secret" field.
func (u *AdminUserUpsertBulk) SetSecret(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetSecret(v)
	})
}

// UpdateSecret sets the "secret" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateSecret() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateSecret()
	})
}

// ClearSecret clears the value of the "secret" field.
func (u *AdminUserUpsertBulk) ClearSecret() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearSecret()
	})
}

// SetAPIKey sets the "api_key" field.
func (u *AdminUserUpsertBulk) SetAPIKey(v string) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetAPIKey(v)
	})
}

// UpdateAPIKey sets the "api_key" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateAPIKey() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateAPIKey()
	})
}

// ClearAPIKey clears the value of the "api_key" field.
func (u *AdminUserUpsertBulk) ClearAPIKey() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearAPIKey()
	})
}

// SetWelcomeEmailSent sets the "welcome_email_sent" field.
func (u *AdminUserUpsertBulk) SetWelcomeEmailSent(v bool) *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.SetWelcomeEmailSent(v)
	})
}

// UpdateWelcomeEmailSent sets the "welcome_email_sent" field to the value that was provided on create.
func (u *AdminUserUpsertBulk) UpdateWelcomeEmailSent() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.UpdateWelcomeEmailSent()
	})
}

// ClearWelcomeEmailSent clears the value of the "welcome_email_sent" field.
func (u *AdminUserUpsertBulk) ClearWelcomeEmailSent() *AdminUserUpsertBulk {
	return u.Update(func(s *AdminUserUpsert) {
		s.ClearWelcomeEmailSent()
	})
}

// Exec executes the query.
func (u *AdminUserUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AdminUserCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AdminUserCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AdminUserUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
