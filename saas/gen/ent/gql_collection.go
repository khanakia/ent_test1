// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttag"
	"saas/gen/ent/posttype"
	"saas/gen/ent/todo"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
)

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (po *PostQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return po, nil
	}
	if err := po.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return po, nil
}

func (po *PostQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(post.Columns))
		selectedFields = []string{post.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "postStatus":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostStatusClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, poststatusImplementors)...); err != nil {
				return err
			}
			po.withPostStatus = query
			if _, ok := fieldSeen[post.FieldPostStatusID]; !ok {
				selectedFields = append(selectedFields, post.FieldPostStatusID)
				fieldSeen[post.FieldPostStatusID] = struct{}{}
			}

		case "postType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostTypeClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, posttypeImplementors)...); err != nil {
				return err
			}
			po.withPostType = query
			if _, ok := fieldSeen[post.FieldPostTypeID]; !ok {
				selectedFields = append(selectedFields, post.FieldPostTypeID)
				fieldSeen[post.FieldPostTypeID] = struct{}{}
			}

		case "primaryCategory":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostCategoryClient{config: po.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, postcategoryImplementors)...); err != nil {
				return err
			}
			po.withPrimaryCategory = query
			if _, ok := fieldSeen[post.FieldPrimaryCategoryID]; !ok {
				selectedFields = append(selectedFields, post.FieldPrimaryCategoryID)
				fieldSeen[post.FieldPrimaryCategoryID] = struct{}{}
			}
		case "createdAt":
			if _, ok := fieldSeen[post.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, post.FieldCreatedAt)
				fieldSeen[post.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[post.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, post.FieldUpdatedAt)
				fieldSeen[post.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[post.FieldName]; !ok {
				selectedFields = append(selectedFields, post.FieldName)
				fieldSeen[post.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[post.FieldSlug]; !ok {
				selectedFields = append(selectedFields, post.FieldSlug)
				fieldSeen[post.FieldSlug] = struct{}{}
			}
		case "postStatusID":
			if _, ok := fieldSeen[post.FieldPostStatusID]; !ok {
				selectedFields = append(selectedFields, post.FieldPostStatusID)
				fieldSeen[post.FieldPostStatusID] = struct{}{}
			}
		case "postTypeID":
			if _, ok := fieldSeen[post.FieldPostTypeID]; !ok {
				selectedFields = append(selectedFields, post.FieldPostTypeID)
				fieldSeen[post.FieldPostTypeID] = struct{}{}
			}
		case "primaryCategoryID":
			if _, ok := fieldSeen[post.FieldPrimaryCategoryID]; !ok {
				selectedFields = append(selectedFields, post.FieldPrimaryCategoryID)
				fieldSeen[post.FieldPrimaryCategoryID] = struct{}{}
			}
		case "headline":
			if _, ok := fieldSeen[post.FieldHeadline]; !ok {
				selectedFields = append(selectedFields, post.FieldHeadline)
				fieldSeen[post.FieldHeadline] = struct{}{}
			}
		case "excerpt":
			if _, ok := fieldSeen[post.FieldExcerpt]; !ok {
				selectedFields = append(selectedFields, post.FieldExcerpt)
				fieldSeen[post.FieldExcerpt] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[post.FieldContent]; !ok {
				selectedFields = append(selectedFields, post.FieldContent)
				fieldSeen[post.FieldContent] = struct{}{}
			}
		case "metaTitle":
			if _, ok := fieldSeen[post.FieldMetaTitle]; !ok {
				selectedFields = append(selectedFields, post.FieldMetaTitle)
				fieldSeen[post.FieldMetaTitle] = struct{}{}
			}
		case "metaDescr":
			if _, ok := fieldSeen[post.FieldMetaDescr]; !ok {
				selectedFields = append(selectedFields, post.FieldMetaDescr)
				fieldSeen[post.FieldMetaDescr] = struct{}{}
			}
		case "metaCanonicalURL":
			if _, ok := fieldSeen[post.FieldMetaCanonicalURL]; !ok {
				selectedFields = append(selectedFields, post.FieldMetaCanonicalURL)
				fieldSeen[post.FieldMetaCanonicalURL] = struct{}{}
			}
		case "metaRobots":
			if _, ok := fieldSeen[post.FieldMetaRobots]; !ok {
				selectedFields = append(selectedFields, post.FieldMetaRobots)
				fieldSeen[post.FieldMetaRobots] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		po.Select(selectedFields...)
	}
	return nil
}

type postPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostPaginateOption
}

func newPostPaginateArgs(rv map[string]any) *postPaginateArgs {
	args := &postPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PostOrder{Field: &PostOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostOrder(order))
			}
		case *PostOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostWhereInput); ok {
		args.opts = append(args.opts, WithPostFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pc *PostCategoryQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostCategoryQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pc, nil
	}
	if err := pc.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pc, nil
}

func (pc *PostCategoryQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(postcategory.Columns))
		selectedFields = []string{postcategory.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: pc.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			pc.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[postcategory.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldCreatedAt)
				fieldSeen[postcategory.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[postcategory.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldUpdatedAt)
				fieldSeen[postcategory.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[postcategory.FieldName]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldName)
				fieldSeen[postcategory.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[postcategory.FieldSlug]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldSlug)
				fieldSeen[postcategory.FieldSlug] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[postcategory.FieldStatus]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldStatus)
				fieldSeen[postcategory.FieldStatus] = struct{}{}
			}
		case "excerpt":
			if _, ok := fieldSeen[postcategory.FieldExcerpt]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldExcerpt)
				fieldSeen[postcategory.FieldExcerpt] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[postcategory.FieldContent]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldContent)
				fieldSeen[postcategory.FieldContent] = struct{}{}
			}
		case "metaTitle":
			if _, ok := fieldSeen[postcategory.FieldMetaTitle]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldMetaTitle)
				fieldSeen[postcategory.FieldMetaTitle] = struct{}{}
			}
		case "metaDescr":
			if _, ok := fieldSeen[postcategory.FieldMetaDescr]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldMetaDescr)
				fieldSeen[postcategory.FieldMetaDescr] = struct{}{}
			}
		case "metaCanonicalURL":
			if _, ok := fieldSeen[postcategory.FieldMetaCanonicalURL]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldMetaCanonicalURL)
				fieldSeen[postcategory.FieldMetaCanonicalURL] = struct{}{}
			}
		case "metaRobots":
			if _, ok := fieldSeen[postcategory.FieldMetaRobots]; !ok {
				selectedFields = append(selectedFields, postcategory.FieldMetaRobots)
				fieldSeen[postcategory.FieldMetaRobots] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pc.Select(selectedFields...)
	}
	return nil
}

type postcategoryPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostCategoryPaginateOption
}

func newPostCategoryPaginateArgs(rv map[string]any) *postcategoryPaginateArgs {
	args := &postcategoryPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PostCategoryOrder{Field: &PostCategoryOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostCategoryOrder(order))
			}
		case *PostCategoryOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostCategoryOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostCategoryWhereInput); ok {
		args.opts = append(args.opts, WithPostCategoryFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (ps *PostStatusQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostStatusQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return ps, nil
	}
	if err := ps.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return ps, nil
}

func (ps *PostStatusQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(poststatus.Columns))
		selectedFields = []string{poststatus.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "postType":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostTypeClient{config: ps.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, posttypeImplementors)...); err != nil {
				return err
			}
			ps.withPostType = query
			if _, ok := fieldSeen[poststatus.FieldPostTypeID]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldPostTypeID)
				fieldSeen[poststatus.FieldPostTypeID] = struct{}{}
			}

		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: ps.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			ps.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[poststatus.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldCreatedAt)
				fieldSeen[poststatus.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[poststatus.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldUpdatedAt)
				fieldSeen[poststatus.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[poststatus.FieldName]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldName)
				fieldSeen[poststatus.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[poststatus.FieldSlug]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldSlug)
				fieldSeen[poststatus.FieldSlug] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[poststatus.FieldStatus]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldStatus)
				fieldSeen[poststatus.FieldStatus] = struct{}{}
			}
		case "postTypeID":
			if _, ok := fieldSeen[poststatus.FieldPostTypeID]; !ok {
				selectedFields = append(selectedFields, poststatus.FieldPostTypeID)
				fieldSeen[poststatus.FieldPostTypeID] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		ps.Select(selectedFields...)
	}
	return nil
}

type poststatusPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostStatusPaginateOption
}

func newPostStatusPaginateArgs(rv map[string]any) *poststatusPaginateArgs {
	args := &poststatusPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PostStatusOrder{Field: &PostStatusOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostStatusOrder(order))
			}
		case *PostStatusOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostStatusOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostStatusWhereInput); ok {
		args.opts = append(args.opts, WithPostStatusFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *PostTagQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostTagQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pt, nil
	}
	if err := pt.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pt, nil
}

func (pt *PostTagQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(posttag.Columns))
		selectedFields = []string{posttag.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {
		case "createdAt":
			if _, ok := fieldSeen[posttag.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, posttag.FieldCreatedAt)
				fieldSeen[posttag.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[posttag.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, posttag.FieldUpdatedAt)
				fieldSeen[posttag.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[posttag.FieldName]; !ok {
				selectedFields = append(selectedFields, posttag.FieldName)
				fieldSeen[posttag.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[posttag.FieldSlug]; !ok {
				selectedFields = append(selectedFields, posttag.FieldSlug)
				fieldSeen[posttag.FieldSlug] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[posttag.FieldStatus]; !ok {
				selectedFields = append(selectedFields, posttag.FieldStatus)
				fieldSeen[posttag.FieldStatus] = struct{}{}
			}
		case "excerpt":
			if _, ok := fieldSeen[posttag.FieldExcerpt]; !ok {
				selectedFields = append(selectedFields, posttag.FieldExcerpt)
				fieldSeen[posttag.FieldExcerpt] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[posttag.FieldContent]; !ok {
				selectedFields = append(selectedFields, posttag.FieldContent)
				fieldSeen[posttag.FieldContent] = struct{}{}
			}
		case "metaTitle":
			if _, ok := fieldSeen[posttag.FieldMetaTitle]; !ok {
				selectedFields = append(selectedFields, posttag.FieldMetaTitle)
				fieldSeen[posttag.FieldMetaTitle] = struct{}{}
			}
		case "metaDescr":
			if _, ok := fieldSeen[posttag.FieldMetaDescr]; !ok {
				selectedFields = append(selectedFields, posttag.FieldMetaDescr)
				fieldSeen[posttag.FieldMetaDescr] = struct{}{}
			}
		case "metaCanonicalURL":
			if _, ok := fieldSeen[posttag.FieldMetaCanonicalURL]; !ok {
				selectedFields = append(selectedFields, posttag.FieldMetaCanonicalURL)
				fieldSeen[posttag.FieldMetaCanonicalURL] = struct{}{}
			}
		case "metaRobots":
			if _, ok := fieldSeen[posttag.FieldMetaRobots]; !ok {
				selectedFields = append(selectedFields, posttag.FieldMetaRobots)
				fieldSeen[posttag.FieldMetaRobots] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pt.Select(selectedFields...)
	}
	return nil
}

type posttagPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostTagPaginateOption
}

func newPostTagPaginateArgs(rv map[string]any) *posttagPaginateArgs {
	args := &posttagPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &PostTagOrder{Field: &PostTagOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithPostTagOrder(order))
			}
		case *PostTagOrder:
			if v != nil {
				args.opts = append(args.opts, WithPostTagOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*PostTagWhereInput); ok {
		args.opts = append(args.opts, WithPostTagFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (pt *PostTypeQuery) CollectFields(ctx context.Context, satisfies ...string) (*PostTypeQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return pt, nil
	}
	if err := pt.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return pt, nil
}

func (pt *PostTypeQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(posttype.Columns))
		selectedFields = []string{posttype.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "posts":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, postImplementors)...); err != nil {
				return err
			}
			pt.WithNamedPosts(alias, func(wq *PostQuery) {
				*wq = *query
			})

		case "postStatuses":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&PostStatusClient{config: pt.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, poststatusImplementors)...); err != nil {
				return err
			}
			pt.WithNamedPostStatuses(alias, func(wq *PostStatusQuery) {
				*wq = *query
			})
		case "createdAt":
			if _, ok := fieldSeen[posttype.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, posttype.FieldCreatedAt)
				fieldSeen[posttype.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[posttype.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, posttype.FieldUpdatedAt)
				fieldSeen[posttype.FieldUpdatedAt] = struct{}{}
			}
		case "name":
			if _, ok := fieldSeen[posttype.FieldName]; !ok {
				selectedFields = append(selectedFields, posttype.FieldName)
				fieldSeen[posttype.FieldName] = struct{}{}
			}
		case "slug":
			if _, ok := fieldSeen[posttype.FieldSlug]; !ok {
				selectedFields = append(selectedFields, posttype.FieldSlug)
				fieldSeen[posttype.FieldSlug] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[posttype.FieldStatus]; !ok {
				selectedFields = append(selectedFields, posttype.FieldStatus)
				fieldSeen[posttype.FieldStatus] = struct{}{}
			}
		case "excerpt":
			if _, ok := fieldSeen[posttype.FieldExcerpt]; !ok {
				selectedFields = append(selectedFields, posttype.FieldExcerpt)
				fieldSeen[posttype.FieldExcerpt] = struct{}{}
			}
		case "content":
			if _, ok := fieldSeen[posttype.FieldContent]; !ok {
				selectedFields = append(selectedFields, posttype.FieldContent)
				fieldSeen[posttype.FieldContent] = struct{}{}
			}
		case "metaTitle":
			if _, ok := fieldSeen[posttype.FieldMetaTitle]; !ok {
				selectedFields = append(selectedFields, posttype.FieldMetaTitle)
				fieldSeen[posttype.FieldMetaTitle] = struct{}{}
			}
		case "metaDescr":
			if _, ok := fieldSeen[posttype.FieldMetaDescr]; !ok {
				selectedFields = append(selectedFields, posttype.FieldMetaDescr)
				fieldSeen[posttype.FieldMetaDescr] = struct{}{}
			}
		case "metaCanonicalURL":
			if _, ok := fieldSeen[posttype.FieldMetaCanonicalURL]; !ok {
				selectedFields = append(selectedFields, posttype.FieldMetaCanonicalURL)
				fieldSeen[posttype.FieldMetaCanonicalURL] = struct{}{}
			}
		case "metaRobots":
			if _, ok := fieldSeen[posttype.FieldMetaRobots]; !ok {
				selectedFields = append(selectedFields, posttype.FieldMetaRobots)
				fieldSeen[posttype.FieldMetaRobots] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		pt.Select(selectedFields...)
	}
	return nil
}

type posttypePaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []PostTypePaginateOption
}

func newPostTypePaginateArgs(rv map[string]any) *posttypePaginateArgs {
	args := &posttypePaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case []*PostTypeOrder:
			args.opts = append(args.opts, WithPostTypeOrder(v))
		case []any:
			var orders []*PostTypeOrder
			for i := range v {
				mv, ok := v[i].(map[string]any)
				if !ok {
					continue
				}
				var (
					err1, err2 error
					order      = &PostTypeOrder{Field: &PostTypeOrderField{}, Direction: entgql.OrderDirectionAsc}
				)
				if d, ok := mv[directionField]; ok {
					err1 = order.Direction.UnmarshalGQL(d)
				}
				if f, ok := mv[fieldField]; ok {
					err2 = order.Field.UnmarshalGQL(f)
				}
				if err1 == nil && err2 == nil {
					orders = append(orders, order)
				}
			}
			args.opts = append(args.opts, WithPostTypeOrder(orders))
		}
	}
	if v, ok := rv[whereField].(*PostTypeWhereInput); ok {
		args.opts = append(args.opts, WithPostTypeFilter(v.Filter))
	}
	return args
}

// CollectFields tells the query-builder to eagerly load connected nodes by resolver context.
func (t *TodoQuery) CollectFields(ctx context.Context, satisfies ...string) (*TodoQuery, error) {
	fc := graphql.GetFieldContext(ctx)
	if fc == nil {
		return t, nil
	}
	if err := t.collectField(ctx, false, graphql.GetOperationContext(ctx), fc.Field, nil, satisfies...); err != nil {
		return nil, err
	}
	return t, nil
}

func (t *TodoQuery) collectField(ctx context.Context, oneNode bool, opCtx *graphql.OperationContext, collected graphql.CollectedField, path []string, satisfies ...string) error {
	path = append([]string(nil), path...)
	var (
		unknownSeen    bool
		fieldSeen      = make(map[string]struct{}, len(todo.Columns))
		selectedFields = []string{todo.FieldID}
	)
	for _, field := range graphql.CollectFields(opCtx, collected.Selections, satisfies) {
		switch field.Name {

		case "children":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TodoClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, false, opCtx, field, path, mayAddCondition(satisfies, todoImplementors)...); err != nil {
				return err
			}
			t.WithNamedChildren(alias, func(wq *TodoQuery) {
				*wq = *query
			})

		case "parent":
			var (
				alias = field.Alias
				path  = append(path, alias)
				query = (&TodoClient{config: t.config}).Query()
			)
			if err := query.collectField(ctx, oneNode, opCtx, field, path, mayAddCondition(satisfies, todoImplementors)...); err != nil {
				return err
			}
			t.withParent = query
		case "createdAt":
			if _, ok := fieldSeen[todo.FieldCreatedAt]; !ok {
				selectedFields = append(selectedFields, todo.FieldCreatedAt)
				fieldSeen[todo.FieldCreatedAt] = struct{}{}
			}
		case "updatedAt":
			if _, ok := fieldSeen[todo.FieldUpdatedAt]; !ok {
				selectedFields = append(selectedFields, todo.FieldUpdatedAt)
				fieldSeen[todo.FieldUpdatedAt] = struct{}{}
			}
		case "text":
			if _, ok := fieldSeen[todo.FieldText]; !ok {
				selectedFields = append(selectedFields, todo.FieldText)
				fieldSeen[todo.FieldText] = struct{}{}
			}
		case "status":
			if _, ok := fieldSeen[todo.FieldStatus]; !ok {
				selectedFields = append(selectedFields, todo.FieldStatus)
				fieldSeen[todo.FieldStatus] = struct{}{}
			}
		case "priority":
			if _, ok := fieldSeen[todo.FieldPriority]; !ok {
				selectedFields = append(selectedFields, todo.FieldPriority)
				fieldSeen[todo.FieldPriority] = struct{}{}
			}
		case "id":
		case "__typename":
		default:
			unknownSeen = true
		}
	}
	if !unknownSeen {
		t.Select(selectedFields...)
	}
	return nil
}

type todoPaginateArgs struct {
	first, last   *int
	after, before *Cursor
	opts          []TodoPaginateOption
}

func newTodoPaginateArgs(rv map[string]any) *todoPaginateArgs {
	args := &todoPaginateArgs{}
	if rv == nil {
		return args
	}
	if v := rv[firstField]; v != nil {
		args.first = v.(*int)
	}
	if v := rv[lastField]; v != nil {
		args.last = v.(*int)
	}
	if v := rv[afterField]; v != nil {
		args.after = v.(*Cursor)
	}
	if v := rv[beforeField]; v != nil {
		args.before = v.(*Cursor)
	}
	if v, ok := rv[orderByField]; ok {
		switch v := v.(type) {
		case map[string]any:
			var (
				err1, err2 error
				order      = &TodoOrder{Field: &TodoOrderField{}, Direction: entgql.OrderDirectionAsc}
			)
			if d, ok := v[directionField]; ok {
				err1 = order.Direction.UnmarshalGQL(d)
			}
			if f, ok := v[fieldField]; ok {
				err2 = order.Field.UnmarshalGQL(f)
			}
			if err1 == nil && err2 == nil {
				args.opts = append(args.opts, WithTodoOrder(order))
			}
		case *TodoOrder:
			if v != nil {
				args.opts = append(args.opts, WithTodoOrder(v))
			}
		}
	}
	if v, ok := rv[whereField].(*TodoWhereInput); ok {
		args.opts = append(args.opts, WithTodoFilter(v.Filter))
	}
	return args
}

const (
	afterField     = "after"
	firstField     = "first"
	beforeField    = "before"
	lastField      = "last"
	orderByField   = "orderBy"
	directionField = "direction"
	fieldField     = "field"
	whereField     = "where"
)

func fieldArgs(ctx context.Context, whereInput any, path ...string) map[string]any {
	field := collectedField(ctx, path...)
	if field == nil || field.Arguments == nil {
		return nil
	}
	oc := graphql.GetOperationContext(ctx)
	args := field.ArgumentMap(oc.Variables)
	return unmarshalArgs(ctx, whereInput, args)
}

// unmarshalArgs allows extracting the field arguments from their raw representation.
func unmarshalArgs(ctx context.Context, whereInput any, args map[string]any) map[string]any {
	for _, k := range []string{firstField, lastField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		i, err := graphql.UnmarshalInt(v)
		if err == nil {
			args[k] = &i
		}
	}
	for _, k := range []string{beforeField, afterField} {
		v, ok := args[k]
		if !ok {
			continue
		}
		c := &Cursor{}
		if c.UnmarshalGQL(v) == nil {
			args[k] = c
		}
	}
	if v, ok := args[whereField]; ok && whereInput != nil {
		if err := graphql.UnmarshalInputFromContext(ctx, v, whereInput); err == nil {
			args[whereField] = whereInput
		}
	}

	return args
}

// mayAddCondition appends another type condition to the satisfies list
// if it does not exist in the list.
func mayAddCondition(satisfies []string, typeCond []string) []string {
Cond:
	for _, c := range typeCond {
		for _, s := range satisfies {
			if c == s {
				continue Cond
			}
		}
		satisfies = append(satisfies, c)
	}
	return satisfies
}
