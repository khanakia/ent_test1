// Code generated by ent, DO NOT EDIT.

package posttypeform

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the posttypeform type in the database.
	Label = "post_type_form"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldPostTypeID holds the string denoting the post_type_id field in the database.
	FieldPostTypeID = "post_type_id"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// EdgePostType holds the string denoting the post_type edge name in mutations.
	EdgePostType = "post_type"
	// Table holds the table name of the posttypeform in the database.
	Table = "post_type_forms"
	// PostTypeTable is the table that holds the post_type relation/edge.
	PostTypeTable = "post_type_forms"
	// PostTypeInverseTable is the table name for the PostType entity.
	// It exists in this package in order to avoid circular dependency with the "posttype" package.
	PostTypeInverseTable = "post_types"
	// PostTypeColumn is the table column denoting the post_type relation/edge.
	PostTypeColumn = "post_type_id"
)

// Columns holds all SQL columns for posttypeform fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAppID,
	FieldName,
	FieldStatus,
	FieldPostTypeID,
	FieldBody,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the PostTypeForm queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByPostTypeID orders the results by the post_type_id field.
func ByPostTypeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPostTypeID, opts...).ToFunc()
}

// ByPostTypeField orders the results by post_type field.
func ByPostTypeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPostTypeStep(), sql.OrderByField(field, opts...))
	}
}
func newPostTypeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PostTypeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, PostTypeTable, PostTypeColumn),
	)
}
