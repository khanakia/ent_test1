// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostCategoryCreate is the builder for creating a PostCategory entity.
type PostCategoryCreate struct {
	config
	mutation *PostCategoryMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pcc *PostCategoryCreate) SetCreatedAt(t time.Time) *PostCategoryCreate {
	pcc.mutation.SetCreatedAt(t)
	return pcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableCreatedAt(t *time.Time) *PostCategoryCreate {
	if t != nil {
		pcc.SetCreatedAt(*t)
	}
	return pcc
}

// SetUpdatedAt sets the "updated_at" field.
func (pcc *PostCategoryCreate) SetUpdatedAt(t time.Time) *PostCategoryCreate {
	pcc.mutation.SetUpdatedAt(t)
	return pcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableUpdatedAt(t *time.Time) *PostCategoryCreate {
	if t != nil {
		pcc.SetUpdatedAt(*t)
	}
	return pcc
}

// SetName sets the "name" field.
func (pcc *PostCategoryCreate) SetName(s string) *PostCategoryCreate {
	pcc.mutation.SetName(s)
	return pcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableName(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetName(*s)
	}
	return pcc
}

// SetSlug sets the "slug" field.
func (pcc *PostCategoryCreate) SetSlug(s string) *PostCategoryCreate {
	pcc.mutation.SetSlug(s)
	return pcc
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableSlug(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetSlug(*s)
	}
	return pcc
}

// SetStatus sets the "status" field.
func (pcc *PostCategoryCreate) SetStatus(s string) *PostCategoryCreate {
	pcc.mutation.SetStatus(s)
	return pcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableStatus(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetStatus(*s)
	}
	return pcc
}

// SetExcerpt sets the "excerpt" field.
func (pcc *PostCategoryCreate) SetExcerpt(s string) *PostCategoryCreate {
	pcc.mutation.SetExcerpt(s)
	return pcc
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableExcerpt(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetExcerpt(*s)
	}
	return pcc
}

// SetContent sets the "content" field.
func (pcc *PostCategoryCreate) SetContent(s string) *PostCategoryCreate {
	pcc.mutation.SetContent(s)
	return pcc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableContent(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetContent(*s)
	}
	return pcc
}

// SetMetaTitle sets the "meta_title" field.
func (pcc *PostCategoryCreate) SetMetaTitle(s string) *PostCategoryCreate {
	pcc.mutation.SetMetaTitle(s)
	return pcc
}

// SetNillableMetaTitle sets the "meta_title" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableMetaTitle(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetMetaTitle(*s)
	}
	return pcc
}

// SetMetaDescr sets the "meta_descr" field.
func (pcc *PostCategoryCreate) SetMetaDescr(s string) *PostCategoryCreate {
	pcc.mutation.SetMetaDescr(s)
	return pcc
}

// SetNillableMetaDescr sets the "meta_descr" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableMetaDescr(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetMetaDescr(*s)
	}
	return pcc
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (pcc *PostCategoryCreate) SetMetaCanonicalURL(s string) *PostCategoryCreate {
	pcc.mutation.SetMetaCanonicalURL(s)
	return pcc
}

// SetNillableMetaCanonicalURL sets the "meta_canonical_url" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableMetaCanonicalURL(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetMetaCanonicalURL(*s)
	}
	return pcc
}

// SetMetaRobots sets the "meta_robots" field.
func (pcc *PostCategoryCreate) SetMetaRobots(s string) *PostCategoryCreate {
	pcc.mutation.SetMetaRobots(s)
	return pcc
}

// SetNillableMetaRobots sets the "meta_robots" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableMetaRobots(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetMetaRobots(*s)
	}
	return pcc
}

// SetID sets the "id" field.
func (pcc *PostCategoryCreate) SetID(s string) *PostCategoryCreate {
	pcc.mutation.SetID(s)
	return pcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pcc *PostCategoryCreate) SetNillableID(s *string) *PostCategoryCreate {
	if s != nil {
		pcc.SetID(*s)
	}
	return pcc
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (pcc *PostCategoryCreate) AddPostIDs(ids ...string) *PostCategoryCreate {
	pcc.mutation.AddPostIDs(ids...)
	return pcc
}

// AddPosts adds the "posts" edges to the Post entity.
func (pcc *PostCategoryCreate) AddPosts(p ...*Post) *PostCategoryCreate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pcc.AddPostIDs(ids...)
}

// Mutation returns the PostCategoryMutation object of the builder.
func (pcc *PostCategoryCreate) Mutation() *PostCategoryMutation {
	return pcc.mutation
}

// Save creates the PostCategory in the database.
func (pcc *PostCategoryCreate) Save(ctx context.Context) (*PostCategory, error) {
	pcc.defaults()
	return withHooks(ctx, pcc.sqlSave, pcc.mutation, pcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pcc *PostCategoryCreate) SaveX(ctx context.Context) *PostCategory {
	v, err := pcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcc *PostCategoryCreate) Exec(ctx context.Context) error {
	_, err := pcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcc *PostCategoryCreate) ExecX(ctx context.Context) {
	if err := pcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pcc *PostCategoryCreate) defaults() {
	if _, ok := pcc.mutation.CreatedAt(); !ok {
		v := postcategory.DefaultCreatedAt()
		pcc.mutation.SetCreatedAt(v)
	}
	if _, ok := pcc.mutation.UpdatedAt(); !ok {
		v := postcategory.DefaultUpdatedAt()
		pcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pcc.mutation.ID(); !ok {
		v := postcategory.DefaultID()
		pcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcc *PostCategoryCreate) check() error {
	return nil
}

func (pcc *PostCategoryCreate) sqlSave(ctx context.Context) (*PostCategory, error) {
	if err := pcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostCategory.ID type: %T", _spec.ID.Value)
		}
	}
	pcc.mutation.id = &_node.ID
	pcc.mutation.done = true
	return _node, nil
}

func (pcc *PostCategoryCreate) createSpec() (*PostCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &PostCategory{config: pcc.config}
		_spec = sqlgraph.NewCreateSpec(postcategory.Table, sqlgraph.NewFieldSpec(postcategory.FieldID, field.TypeString))
	)
	_spec.OnConflict = pcc.conflict
	if id, ok := pcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcc.mutation.CreatedAt(); ok {
		_spec.SetField(postcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pcc.mutation.UpdatedAt(); ok {
		_spec.SetField(postcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pcc.mutation.Name(); ok {
		_spec.SetField(postcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pcc.mutation.Slug(); ok {
		_spec.SetField(postcategory.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := pcc.mutation.Status(); ok {
		_spec.SetField(postcategory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := pcc.mutation.Excerpt(); ok {
		_spec.SetField(postcategory.FieldExcerpt, field.TypeString, value)
		_node.Excerpt = value
	}
	if value, ok := pcc.mutation.Content(); ok {
		_spec.SetField(postcategory.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := pcc.mutation.MetaTitle(); ok {
		_spec.SetField(postcategory.FieldMetaTitle, field.TypeString, value)
		_node.MetaTitle = value
	}
	if value, ok := pcc.mutation.MetaDescr(); ok {
		_spec.SetField(postcategory.FieldMetaDescr, field.TypeString, value)
		_node.MetaDescr = value
	}
	if value, ok := pcc.mutation.MetaCanonicalURL(); ok {
		_spec.SetField(postcategory.FieldMetaCanonicalURL, field.TypeString, value)
		_node.MetaCanonicalURL = value
	}
	if value, ok := pcc.mutation.MetaRobots(); ok {
		_spec.SetField(postcategory.FieldMetaRobots, field.TypeString, value)
		_node.MetaRobots = value
	}
	if nodes := pcc.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   postcategory.PostsTable,
			Columns: []string{postcategory.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostCategory.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostCategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcc *PostCategoryCreate) OnConflict(opts ...sql.ConflictOption) *PostCategoryUpsertOne {
	pcc.conflict = opts
	return &PostCategoryUpsertOne{
		create: pcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcc *PostCategoryCreate) OnConflictColumns(columns ...string) *PostCategoryUpsertOne {
	pcc.conflict = append(pcc.conflict, sql.ConflictColumns(columns...))
	return &PostCategoryUpsertOne{
		create: pcc,
	}
}

type (
	// PostCategoryUpsertOne is the builder for "upsert"-ing
	//  one PostCategory node.
	PostCategoryUpsertOne struct {
		create *PostCategoryCreate
	}

	// PostCategoryUpsert is the "OnConflict" setter.
	PostCategoryUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PostCategoryUpsert) SetUpdatedAt(v time.Time) *PostCategoryUpsert {
	u.Set(postcategory.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateUpdatedAt() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostCategoryUpsert) ClearUpdatedAt() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *PostCategoryUpsert) SetName(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateName() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PostCategoryUpsert) ClearName() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldName)
	return u
}

// SetSlug sets the "slug" field.
func (u *PostCategoryUpsert) SetSlug(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldSlug, v)
	return u
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateSlug() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldSlug)
	return u
}

// ClearSlug clears the value of the "slug" field.
func (u *PostCategoryUpsert) ClearSlug() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldSlug)
	return u
}

// SetStatus sets the "status" field.
func (u *PostCategoryUpsert) SetStatus(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateStatus() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PostCategoryUpsert) ClearStatus() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldStatus)
	return u
}

// SetExcerpt sets the "excerpt" field.
func (u *PostCategoryUpsert) SetExcerpt(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldExcerpt, v)
	return u
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateExcerpt() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldExcerpt)
	return u
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PostCategoryUpsert) ClearExcerpt() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldExcerpt)
	return u
}

// SetContent sets the "content" field.
func (u *PostCategoryUpsert) SetContent(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldContent, v)
	return u
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateContent() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldContent)
	return u
}

// ClearContent clears the value of the "content" field.
func (u *PostCategoryUpsert) ClearContent() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldContent)
	return u
}

// SetMetaTitle sets the "meta_title" field.
func (u *PostCategoryUpsert) SetMetaTitle(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldMetaTitle, v)
	return u
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateMetaTitle() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldMetaTitle)
	return u
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (u *PostCategoryUpsert) ClearMetaTitle() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldMetaTitle)
	return u
}

// SetMetaDescr sets the "meta_descr" field.
func (u *PostCategoryUpsert) SetMetaDescr(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldMetaDescr, v)
	return u
}

// UpdateMetaDescr sets the "meta_descr" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateMetaDescr() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldMetaDescr)
	return u
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (u *PostCategoryUpsert) ClearMetaDescr() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldMetaDescr)
	return u
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (u *PostCategoryUpsert) SetMetaCanonicalURL(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldMetaCanonicalURL, v)
	return u
}

// UpdateMetaCanonicalURL sets the "meta_canonical_url" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateMetaCanonicalURL() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldMetaCanonicalURL)
	return u
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (u *PostCategoryUpsert) ClearMetaCanonicalURL() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldMetaCanonicalURL)
	return u
}

// SetMetaRobots sets the "meta_robots" field.
func (u *PostCategoryUpsert) SetMetaRobots(v string) *PostCategoryUpsert {
	u.Set(postcategory.FieldMetaRobots, v)
	return u
}

// UpdateMetaRobots sets the "meta_robots" field to the value that was provided on create.
func (u *PostCategoryUpsert) UpdateMetaRobots() *PostCategoryUpsert {
	u.SetExcluded(postcategory.FieldMetaRobots)
	return u
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (u *PostCategoryUpsert) ClearMetaRobots() *PostCategoryUpsert {
	u.SetNull(postcategory.FieldMetaRobots)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(postcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostCategoryUpsertOne) UpdateNewValues() *PostCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(postcategory.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(postcategory.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostCategoryUpsertOne) Ignore() *PostCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostCategoryUpsertOne) DoNothing() *PostCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCategoryCreate.OnConflict
// documentation for more info.
func (u *PostCategoryUpsertOne) Update(set func(*PostCategoryUpsert)) *PostCategoryUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostCategoryUpsertOne) SetUpdatedAt(v time.Time) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateUpdatedAt() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostCategoryUpsertOne) ClearUpdatedAt() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PostCategoryUpsertOne) SetName(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateName() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostCategoryUpsertOne) ClearName() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostCategoryUpsertOne) SetSlug(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateSlug() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostCategoryUpsertOne) ClearSlug() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearSlug()
	})
}

// SetStatus sets the "status" field.
func (u *PostCategoryUpsertOne) SetStatus(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateStatus() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostCategoryUpsertOne) ClearStatus() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearStatus()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *PostCategoryUpsertOne) SetExcerpt(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateExcerpt() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PostCategoryUpsertOne) ClearExcerpt() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearExcerpt()
	})
}

// SetContent sets the "content" field.
func (u *PostCategoryUpsertOne) SetContent(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateContent() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PostCategoryUpsertOne) ClearContent() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearContent()
	})
}

// SetMetaTitle sets the "meta_title" field.
func (u *PostCategoryUpsertOne) SetMetaTitle(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaTitle(v)
	})
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateMetaTitle() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaTitle()
	})
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (u *PostCategoryUpsertOne) ClearMetaTitle() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaTitle()
	})
}

// SetMetaDescr sets the "meta_descr" field.
func (u *PostCategoryUpsertOne) SetMetaDescr(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaDescr(v)
	})
}

// UpdateMetaDescr sets the "meta_descr" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateMetaDescr() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaDescr()
	})
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (u *PostCategoryUpsertOne) ClearMetaDescr() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaDescr()
	})
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (u *PostCategoryUpsertOne) SetMetaCanonicalURL(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaCanonicalURL(v)
	})
}

// UpdateMetaCanonicalURL sets the "meta_canonical_url" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateMetaCanonicalURL() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaCanonicalURL()
	})
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (u *PostCategoryUpsertOne) ClearMetaCanonicalURL() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaCanonicalURL()
	})
}

// SetMetaRobots sets the "meta_robots" field.
func (u *PostCategoryUpsertOne) SetMetaRobots(v string) *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaRobots(v)
	})
}

// UpdateMetaRobots sets the "meta_robots" field to the value that was provided on create.
func (u *PostCategoryUpsertOne) UpdateMetaRobots() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaRobots()
	})
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (u *PostCategoryUpsertOne) ClearMetaRobots() *PostCategoryUpsertOne {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaRobots()
	})
}

// Exec executes the query.
func (u *PostCategoryUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCategoryCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostCategoryUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostCategoryUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PostCategoryUpsertOne.ID is not supported by MySQL driver. Use PostCategoryUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostCategoryUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostCategoryCreateBulk is the builder for creating many PostCategory entities in bulk.
type PostCategoryCreateBulk struct {
	config
	err      error
	builders []*PostCategoryCreate
	conflict []sql.ConflictOption
}

// Save creates the PostCategory entities in the database.
func (pccb *PostCategoryCreateBulk) Save(ctx context.Context) ([]*PostCategory, error) {
	if pccb.err != nil {
		return nil, pccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pccb.builders))
	nodes := make([]*PostCategory, len(pccb.builders))
	mutators := make([]Mutator, len(pccb.builders))
	for i := range pccb.builders {
		func(i int, root context.Context) {
			builder := pccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pccb *PostCategoryCreateBulk) SaveX(ctx context.Context) []*PostCategory {
	v, err := pccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pccb *PostCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := pccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pccb *PostCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := pccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostCategory.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostCategoryUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pccb *PostCategoryCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostCategoryUpsertBulk {
	pccb.conflict = opts
	return &PostCategoryUpsertBulk{
		create: pccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pccb *PostCategoryCreateBulk) OnConflictColumns(columns ...string) *PostCategoryUpsertBulk {
	pccb.conflict = append(pccb.conflict, sql.ConflictColumns(columns...))
	return &PostCategoryUpsertBulk{
		create: pccb,
	}
}

// PostCategoryUpsertBulk is the builder for "upsert"-ing
// a bulk of PostCategory nodes.
type PostCategoryUpsertBulk struct {
	create *PostCategoryCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(postcategory.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostCategoryUpsertBulk) UpdateNewValues() *PostCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(postcategory.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(postcategory.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostCategory.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostCategoryUpsertBulk) Ignore() *PostCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostCategoryUpsertBulk) DoNothing() *PostCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostCategoryCreateBulk.OnConflict
// documentation for more info.
func (u *PostCategoryUpsertBulk) Update(set func(*PostCategoryUpsert)) *PostCategoryUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostCategoryUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostCategoryUpsertBulk) SetUpdatedAt(v time.Time) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateUpdatedAt() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostCategoryUpsertBulk) ClearUpdatedAt() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *PostCategoryUpsertBulk) SetName(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateName() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostCategoryUpsertBulk) ClearName() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearName()
	})
}

// SetSlug sets the "slug" field.
func (u *PostCategoryUpsertBulk) SetSlug(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetSlug(v)
	})
}

// UpdateSlug sets the "slug" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateSlug() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateSlug()
	})
}

// ClearSlug clears the value of the "slug" field.
func (u *PostCategoryUpsertBulk) ClearSlug() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearSlug()
	})
}

// SetStatus sets the "status" field.
func (u *PostCategoryUpsertBulk) SetStatus(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateStatus() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostCategoryUpsertBulk) ClearStatus() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearStatus()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *PostCategoryUpsertBulk) SetExcerpt(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateExcerpt() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PostCategoryUpsertBulk) ClearExcerpt() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearExcerpt()
	})
}

// SetContent sets the "content" field.
func (u *PostCategoryUpsertBulk) SetContent(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetContent(v)
	})
}

// UpdateContent sets the "content" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateContent() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateContent()
	})
}

// ClearContent clears the value of the "content" field.
func (u *PostCategoryUpsertBulk) ClearContent() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearContent()
	})
}

// SetMetaTitle sets the "meta_title" field.
func (u *PostCategoryUpsertBulk) SetMetaTitle(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaTitle(v)
	})
}

// UpdateMetaTitle sets the "meta_title" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateMetaTitle() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaTitle()
	})
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (u *PostCategoryUpsertBulk) ClearMetaTitle() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaTitle()
	})
}

// SetMetaDescr sets the "meta_descr" field.
func (u *PostCategoryUpsertBulk) SetMetaDescr(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaDescr(v)
	})
}

// UpdateMetaDescr sets the "meta_descr" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateMetaDescr() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaDescr()
	})
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (u *PostCategoryUpsertBulk) ClearMetaDescr() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaDescr()
	})
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (u *PostCategoryUpsertBulk) SetMetaCanonicalURL(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaCanonicalURL(v)
	})
}

// UpdateMetaCanonicalURL sets the "meta_canonical_url" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateMetaCanonicalURL() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaCanonicalURL()
	})
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (u *PostCategoryUpsertBulk) ClearMetaCanonicalURL() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaCanonicalURL()
	})
}

// SetMetaRobots sets the "meta_robots" field.
func (u *PostCategoryUpsertBulk) SetMetaRobots(v string) *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.SetMetaRobots(v)
	})
}

// UpdateMetaRobots sets the "meta_robots" field to the value that was provided on create.
func (u *PostCategoryUpsertBulk) UpdateMetaRobots() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.UpdateMetaRobots()
	})
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (u *PostCategoryUpsertBulk) ClearMetaRobots() *PostCategoryUpsertBulk {
	return u.Update(func(s *PostCategoryUpsert) {
		s.ClearMetaRobots()
	})
}

// Exec executes the query.
func (u *PostCategoryUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostCategoryCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostCategoryCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostCategoryUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
