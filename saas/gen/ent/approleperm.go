// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// AppRolePerm is the model entity for the AppRolePerm schema.
type AppRolePerm struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppRoleID holds the value of the "app_role_id" field.
	AppRoleID string `json:"app_role_id,omitempty"`
	// AppPermID holds the value of the "app_perm_id" field.
	AppPermID string `json:"app_perm_id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AppRolePermQuery when eager-loading is set.
	Edges        AppRolePermEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AppRolePermEdges holds the relations/edges for other nodes in the graph.
type AppRolePermEdges struct {
	// App holds the value of the app edge.
	App *App `json:"app,omitempty"`
	// AppPerm holds the value of the app_perm edge.
	AppPerm *AppPerm `json:"app_perm,omitempty"`
	// AppRole holds the value of the app_role edge.
	AppRole *AppRole `json:"app_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// AppOrErr returns the App value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppRolePermEdges) AppOrErr() (*App, error) {
	if e.App != nil {
		return e.App, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: app.Label}
	}
	return nil, &NotLoadedError{edge: "app"}
}

// AppPermOrErr returns the AppPerm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppRolePermEdges) AppPermOrErr() (*AppPerm, error) {
	if e.AppPerm != nil {
		return e.AppPerm, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: appperm.Label}
	}
	return nil, &NotLoadedError{edge: "app_perm"}
}

// AppRoleOrErr returns the AppRole value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AppRolePermEdges) AppRoleOrErr() (*AppRole, error) {
	if e.AppRole != nil {
		return e.AppRole, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: approle.Label}
	}
	return nil, &NotLoadedError{edge: "app_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AppRolePerm) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case approleperm.FieldID, approleperm.FieldAppRoleID, approleperm.FieldAppPermID, approleperm.FieldAppID:
			values[i] = new(sql.NullString)
		case approleperm.FieldCreatedAt, approleperm.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AppRolePerm fields.
func (arp *AppRolePerm) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case approleperm.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				arp.ID = value.String
			}
		case approleperm.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				arp.CreatedAt = value.Time
			}
		case approleperm.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				arp.UpdatedAt = value.Time
			}
		case approleperm.FieldAppRoleID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_role_id", values[i])
			} else if value.Valid {
				arp.AppRoleID = value.String
			}
		case approleperm.FieldAppPermID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_perm_id", values[i])
			} else if value.Valid {
				arp.AppPermID = value.String
			}
		case approleperm.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				arp.AppID = value.String
			}
		default:
			arp.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AppRolePerm.
// This includes values selected through modifiers, order, etc.
func (arp *AppRolePerm) Value(name string) (ent.Value, error) {
	return arp.selectValues.Get(name)
}

// QueryApp queries the "app" edge of the AppRolePerm entity.
func (arp *AppRolePerm) QueryApp() *AppQuery {
	return NewAppRolePermClient(arp.config).QueryApp(arp)
}

// QueryAppPerm queries the "app_perm" edge of the AppRolePerm entity.
func (arp *AppRolePerm) QueryAppPerm() *AppPermQuery {
	return NewAppRolePermClient(arp.config).QueryAppPerm(arp)
}

// QueryAppRole queries the "app_role" edge of the AppRolePerm entity.
func (arp *AppRolePerm) QueryAppRole() *AppRoleQuery {
	return NewAppRolePermClient(arp.config).QueryAppRole(arp)
}

// Update returns a builder for updating this AppRolePerm.
// Note that you need to call AppRolePerm.Unwrap() before calling this method if this AppRolePerm
// was returned from a transaction, and the transaction was committed or rolled back.
func (arp *AppRolePerm) Update() *AppRolePermUpdateOne {
	return NewAppRolePermClient(arp.config).UpdateOne(arp)
}

// Unwrap unwraps the AppRolePerm entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (arp *AppRolePerm) Unwrap() *AppRolePerm {
	_tx, ok := arp.config.driver.(*txDriver)
	if !ok {
		panic("ent: AppRolePerm is not a transactional entity")
	}
	arp.config.driver = _tx.drv
	return arp
}

// String implements the fmt.Stringer.
func (arp *AppRolePerm) String() string {
	var builder strings.Builder
	builder.WriteString("AppRolePerm(")
	builder.WriteString(fmt.Sprintf("id=%v, ", arp.ID))
	builder.WriteString("created_at=")
	builder.WriteString(arp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(arp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_role_id=")
	builder.WriteString(arp.AppRoleID)
	builder.WriteString(", ")
	builder.WriteString("app_perm_id=")
	builder.WriteString(arp.AppPermID)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(arp.AppID)
	builder.WriteByte(')')
	return builder.String()
}

// AppRolePerms is a parsable slice of AppRolePerm.
type AppRolePerms []*AppRolePerm
