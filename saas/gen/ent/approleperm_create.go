// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppRolePermCreate is the builder for creating a AppRolePerm entity.
type AppRolePermCreate struct {
	config
	mutation *AppRolePermMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (arpc *AppRolePermCreate) SetCreatedAt(t time.Time) *AppRolePermCreate {
	arpc.mutation.SetCreatedAt(t)
	return arpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (arpc *AppRolePermCreate) SetNillableCreatedAt(t *time.Time) *AppRolePermCreate {
	if t != nil {
		arpc.SetCreatedAt(*t)
	}
	return arpc
}

// SetUpdatedAt sets the "updated_at" field.
func (arpc *AppRolePermCreate) SetUpdatedAt(t time.Time) *AppRolePermCreate {
	arpc.mutation.SetUpdatedAt(t)
	return arpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (arpc *AppRolePermCreate) SetNillableUpdatedAt(t *time.Time) *AppRolePermCreate {
	if t != nil {
		arpc.SetUpdatedAt(*t)
	}
	return arpc
}

// SetAppRoleID sets the "app_role_id" field.
func (arpc *AppRolePermCreate) SetAppRoleID(s string) *AppRolePermCreate {
	arpc.mutation.SetAppRoleID(s)
	return arpc
}

// SetAppPermID sets the "app_perm_id" field.
func (arpc *AppRolePermCreate) SetAppPermID(s string) *AppRolePermCreate {
	arpc.mutation.SetAppPermID(s)
	return arpc
}

// SetAppID sets the "app_id" field.
func (arpc *AppRolePermCreate) SetAppID(s string) *AppRolePermCreate {
	arpc.mutation.SetAppID(s)
	return arpc
}

// SetID sets the "id" field.
func (arpc *AppRolePermCreate) SetID(s string) *AppRolePermCreate {
	arpc.mutation.SetID(s)
	return arpc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (arpc *AppRolePermCreate) SetNillableID(s *string) *AppRolePermCreate {
	if s != nil {
		arpc.SetID(*s)
	}
	return arpc
}

// SetApp sets the "app" edge to the App entity.
func (arpc *AppRolePermCreate) SetApp(a *App) *AppRolePermCreate {
	return arpc.SetAppID(a.ID)
}

// SetAppPerm sets the "app_perm" edge to the AppPerm entity.
func (arpc *AppRolePermCreate) SetAppPerm(a *AppPerm) *AppRolePermCreate {
	return arpc.SetAppPermID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (arpc *AppRolePermCreate) SetAppRole(a *AppRole) *AppRolePermCreate {
	return arpc.SetAppRoleID(a.ID)
}

// Mutation returns the AppRolePermMutation object of the builder.
func (arpc *AppRolePermCreate) Mutation() *AppRolePermMutation {
	return arpc.mutation
}

// Save creates the AppRolePerm in the database.
func (arpc *AppRolePermCreate) Save(ctx context.Context) (*AppRolePerm, error) {
	arpc.defaults()
	return withHooks(ctx, arpc.sqlSave, arpc.mutation, arpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (arpc *AppRolePermCreate) SaveX(ctx context.Context) *AppRolePerm {
	v, err := arpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpc *AppRolePermCreate) Exec(ctx context.Context) error {
	_, err := arpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpc *AppRolePermCreate) ExecX(ctx context.Context) {
	if err := arpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arpc *AppRolePermCreate) defaults() {
	if _, ok := arpc.mutation.CreatedAt(); !ok {
		v := approleperm.DefaultCreatedAt()
		arpc.mutation.SetCreatedAt(v)
	}
	if _, ok := arpc.mutation.UpdatedAt(); !ok {
		v := approleperm.DefaultUpdatedAt()
		arpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := arpc.mutation.ID(); !ok {
		v := approleperm.DefaultID()
		arpc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arpc *AppRolePermCreate) check() error {
	if _, ok := arpc.mutation.AppRoleID(); !ok {
		return &ValidationError{Name: "app_role_id", err: errors.New(`ent: missing required field "AppRolePerm.app_role_id"`)}
	}
	if _, ok := arpc.mutation.AppPermID(); !ok {
		return &ValidationError{Name: "app_perm_id", err: errors.New(`ent: missing required field "AppRolePerm.app_perm_id"`)}
	}
	if _, ok := arpc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`ent: missing required field "AppRolePerm.app_id"`)}
	}
	if len(arpc.mutation.AppIDs()) == 0 {
		return &ValidationError{Name: "app", err: errors.New(`ent: missing required edge "AppRolePerm.app"`)}
	}
	if len(arpc.mutation.AppPermIDs()) == 0 {
		return &ValidationError{Name: "app_perm", err: errors.New(`ent: missing required edge "AppRolePerm.app_perm"`)}
	}
	if len(arpc.mutation.AppRoleIDs()) == 0 {
		return &ValidationError{Name: "app_role", err: errors.New(`ent: missing required edge "AppRolePerm.app_role"`)}
	}
	return nil
}

func (arpc *AppRolePermCreate) sqlSave(ctx context.Context) (*AppRolePerm, error) {
	if err := arpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := arpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, arpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AppRolePerm.ID type: %T", _spec.ID.Value)
		}
	}
	arpc.mutation.id = &_node.ID
	arpc.mutation.done = true
	return _node, nil
}

func (arpc *AppRolePermCreate) createSpec() (*AppRolePerm, *sqlgraph.CreateSpec) {
	var (
		_node = &AppRolePerm{config: arpc.config}
		_spec = sqlgraph.NewCreateSpec(approleperm.Table, sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString))
	)
	_spec.OnConflict = arpc.conflict
	if id, ok := arpc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := arpc.mutation.CreatedAt(); ok {
		_spec.SetField(approleperm.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := arpc.mutation.UpdatedAt(); ok {
		_spec.SetField(approleperm.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := arpc.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppTable,
			Columns: []string{approleperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arpc.mutation.AppPermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppPermTable,
			Columns: []string{approleperm.AppPermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppPermID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := arpc.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppRoleTable,
			Columns: []string{approleperm.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AppRoleID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRolePerm.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRolePermUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (arpc *AppRolePermCreate) OnConflict(opts ...sql.ConflictOption) *AppRolePermUpsertOne {
	arpc.conflict = opts
	return &AppRolePermUpsertOne{
		create: arpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arpc *AppRolePermCreate) OnConflictColumns(columns ...string) *AppRolePermUpsertOne {
	arpc.conflict = append(arpc.conflict, sql.ConflictColumns(columns...))
	return &AppRolePermUpsertOne{
		create: arpc,
	}
}

type (
	// AppRolePermUpsertOne is the builder for "upsert"-ing
	//  one AppRolePerm node.
	AppRolePermUpsertOne struct {
		create *AppRolePermCreate
	}

	// AppRolePermUpsert is the "OnConflict" setter.
	AppRolePermUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePermUpsert) SetUpdatedAt(v time.Time) *AppRolePermUpsert {
	u.Set(approleperm.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePermUpsert) UpdateUpdatedAt() *AppRolePermUpsert {
	u.SetExcluded(approleperm.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePermUpsert) ClearUpdatedAt() *AppRolePermUpsert {
	u.SetNull(approleperm.FieldUpdatedAt)
	return u
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePermUpsert) SetAppRoleID(v string) *AppRolePermUpsert {
	u.Set(approleperm.FieldAppRoleID, v)
	return u
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePermUpsert) UpdateAppRoleID() *AppRolePermUpsert {
	u.SetExcluded(approleperm.FieldAppRoleID)
	return u
}

// SetAppPermID sets the "app_perm_id" field.
func (u *AppRolePermUpsert) SetAppPermID(v string) *AppRolePermUpsert {
	u.Set(approleperm.FieldAppPermID, v)
	return u
}

// UpdateAppPermID sets the "app_perm_id" field to the value that was provided on create.
func (u *AppRolePermUpsert) UpdateAppPermID() *AppRolePermUpsert {
	u.SetExcluded(approleperm.FieldAppPermID)
	return u
}

// SetAppID sets the "app_id" field.
func (u *AppRolePermUpsert) SetAppID(v string) *AppRolePermUpsert {
	u.Set(approleperm.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePermUpsert) UpdateAppID() *AppRolePermUpsert {
	u.SetExcluded(approleperm.FieldAppID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approleperm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRolePermUpsertOne) UpdateNewValues() *AppRolePermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(approleperm.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(approleperm.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppRolePermUpsertOne) Ignore() *AppRolePermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRolePermUpsertOne) DoNothing() *AppRolePermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRolePermCreate.OnConflict
// documentation for more info.
func (u *AppRolePermUpsertOne) Update(set func(*AppRolePermUpsert)) *AppRolePermUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRolePermUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePermUpsertOne) SetUpdatedAt(v time.Time) *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePermUpsertOne) UpdateUpdatedAt() *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePermUpsertOne) ClearUpdatedAt() *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePermUpsertOne) SetAppRoleID(v string) *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePermUpsertOne) UpdateAppRoleID() *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppRoleID()
	})
}

// SetAppPermID sets the "app_perm_id" field.
func (u *AppRolePermUpsertOne) SetAppPermID(v string) *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppPermID(v)
	})
}

// UpdateAppPermID sets the "app_perm_id" field to the value that was provided on create.
func (u *AppRolePermUpsertOne) UpdateAppPermID() *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppPermID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRolePermUpsertOne) SetAppID(v string) *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePermUpsertOne) UpdateAppID() *AppRolePermUpsertOne {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppRolePermUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRolePermCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRolePermUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppRolePermUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppRolePermUpsertOne.ID is not supported by MySQL driver. Use AppRolePermUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppRolePermUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppRolePermCreateBulk is the builder for creating many AppRolePerm entities in bulk.
type AppRolePermCreateBulk struct {
	config
	err      error
	builders []*AppRolePermCreate
	conflict []sql.ConflictOption
}

// Save creates the AppRolePerm entities in the database.
func (arpcb *AppRolePermCreateBulk) Save(ctx context.Context) ([]*AppRolePerm, error) {
	if arpcb.err != nil {
		return nil, arpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(arpcb.builders))
	nodes := make([]*AppRolePerm, len(arpcb.builders))
	mutators := make([]Mutator, len(arpcb.builders))
	for i := range arpcb.builders {
		func(i int, root context.Context) {
			builder := arpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppRolePermMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, arpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = arpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, arpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, arpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (arpcb *AppRolePermCreateBulk) SaveX(ctx context.Context) []*AppRolePerm {
	v, err := arpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (arpcb *AppRolePermCreateBulk) Exec(ctx context.Context) error {
	_, err := arpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpcb *AppRolePermCreateBulk) ExecX(ctx context.Context) {
	if err := arpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.AppRolePerm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppRolePermUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (arpcb *AppRolePermCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppRolePermUpsertBulk {
	arpcb.conflict = opts
	return &AppRolePermUpsertBulk{
		create: arpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (arpcb *AppRolePermCreateBulk) OnConflictColumns(columns ...string) *AppRolePermUpsertBulk {
	arpcb.conflict = append(arpcb.conflict, sql.ConflictColumns(columns...))
	return &AppRolePermUpsertBulk{
		create: arpcb,
	}
}

// AppRolePermUpsertBulk is the builder for "upsert"-ing
// a bulk of AppRolePerm nodes.
type AppRolePermUpsertBulk struct {
	create *AppRolePermCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(approleperm.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppRolePermUpsertBulk) UpdateNewValues() *AppRolePermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(approleperm.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(approleperm.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.AppRolePerm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppRolePermUpsertBulk) Ignore() *AppRolePermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppRolePermUpsertBulk) DoNothing() *AppRolePermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppRolePermCreateBulk.OnConflict
// documentation for more info.
func (u *AppRolePermUpsertBulk) Update(set func(*AppRolePermUpsert)) *AppRolePermUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppRolePermUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppRolePermUpsertBulk) SetUpdatedAt(v time.Time) *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppRolePermUpsertBulk) UpdateUpdatedAt() *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppRolePermUpsertBulk) ClearUpdatedAt() *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppRoleID sets the "app_role_id" field.
func (u *AppRolePermUpsertBulk) SetAppRoleID(v string) *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppRoleID(v)
	})
}

// UpdateAppRoleID sets the "app_role_id" field to the value that was provided on create.
func (u *AppRolePermUpsertBulk) UpdateAppRoleID() *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppRoleID()
	})
}

// SetAppPermID sets the "app_perm_id" field.
func (u *AppRolePermUpsertBulk) SetAppPermID(v string) *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppPermID(v)
	})
}

// UpdateAppPermID sets the "app_perm_id" field to the value that was provided on create.
func (u *AppRolePermUpsertBulk) UpdateAppPermID() *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppPermID()
	})
}

// SetAppID sets the "app_id" field.
func (u *AppRolePermUpsertBulk) SetAppID(v string) *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *AppRolePermUpsertBulk) UpdateAppID() *AppRolePermUpsertBulk {
	return u.Update(func(s *AppRolePermUpsert) {
		s.UpdateAppID()
	})
}

// Exec executes the query.
func (u *AppRolePermUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppRolePermCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppRolePermCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppRolePermUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
