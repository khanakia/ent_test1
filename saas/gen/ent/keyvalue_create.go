// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/keyvalue"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeyvalueCreate is the builder for creating a Keyvalue entity.
type KeyvalueCreate struct {
	config
	mutation *KeyvalueMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (kc *KeyvalueCreate) SetCreatedAt(t time.Time) *KeyvalueCreate {
	kc.mutation.SetCreatedAt(t)
	return kc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (kc *KeyvalueCreate) SetNillableCreatedAt(t *time.Time) *KeyvalueCreate {
	if t != nil {
		kc.SetCreatedAt(*t)
	}
	return kc
}

// SetValue sets the "value" field.
func (kc *KeyvalueCreate) SetValue(s string) *KeyvalueCreate {
	kc.mutation.SetValue(s)
	return kc
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (kc *KeyvalueCreate) SetNillableValue(s *string) *KeyvalueCreate {
	if s != nil {
		kc.SetValue(*s)
	}
	return kc
}

// SetID sets the "id" field.
func (kc *KeyvalueCreate) SetID(s string) *KeyvalueCreate {
	kc.mutation.SetID(s)
	return kc
}

// Mutation returns the KeyvalueMutation object of the builder.
func (kc *KeyvalueCreate) Mutation() *KeyvalueMutation {
	return kc.mutation
}

// Save creates the Keyvalue in the database.
func (kc *KeyvalueCreate) Save(ctx context.Context) (*Keyvalue, error) {
	kc.defaults()
	return withHooks(ctx, kc.sqlSave, kc.mutation, kc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (kc *KeyvalueCreate) SaveX(ctx context.Context) *Keyvalue {
	v, err := kc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kc *KeyvalueCreate) Exec(ctx context.Context) error {
	_, err := kc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kc *KeyvalueCreate) ExecX(ctx context.Context) {
	if err := kc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (kc *KeyvalueCreate) defaults() {
	if _, ok := kc.mutation.CreatedAt(); !ok {
		v := keyvalue.DefaultCreatedAt()
		kc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (kc *KeyvalueCreate) check() error {
	if v, ok := kc.mutation.ID(); ok {
		if err := keyvalue.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Keyvalue.id": %w`, err)}
		}
	}
	return nil
}

func (kc *KeyvalueCreate) sqlSave(ctx context.Context) (*Keyvalue, error) {
	if err := kc.check(); err != nil {
		return nil, err
	}
	_node, _spec := kc.createSpec()
	if err := sqlgraph.CreateNode(ctx, kc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Keyvalue.ID type: %T", _spec.ID.Value)
		}
	}
	kc.mutation.id = &_node.ID
	kc.mutation.done = true
	return _node, nil
}

func (kc *KeyvalueCreate) createSpec() (*Keyvalue, *sqlgraph.CreateSpec) {
	var (
		_node = &Keyvalue{config: kc.config}
		_spec = sqlgraph.NewCreateSpec(keyvalue.Table, sqlgraph.NewFieldSpec(keyvalue.FieldID, field.TypeString))
	)
	_spec.OnConflict = kc.conflict
	if id, ok := kc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := kc.mutation.CreatedAt(); ok {
		_spec.SetField(keyvalue.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := kc.mutation.Value(); ok {
		_spec.SetField(keyvalue.FieldValue, field.TypeString, value)
		_node.Value = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Keyvalue.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeyvalueUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kc *KeyvalueCreate) OnConflict(opts ...sql.ConflictOption) *KeyvalueUpsertOne {
	kc.conflict = opts
	return &KeyvalueUpsertOne{
		create: kc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kc *KeyvalueCreate) OnConflictColumns(columns ...string) *KeyvalueUpsertOne {
	kc.conflict = append(kc.conflict, sql.ConflictColumns(columns...))
	return &KeyvalueUpsertOne{
		create: kc,
	}
}

type (
	// KeyvalueUpsertOne is the builder for "upsert"-ing
	//  one Keyvalue node.
	KeyvalueUpsertOne struct {
		create *KeyvalueCreate
	}

	// KeyvalueUpsert is the "OnConflict" setter.
	KeyvalueUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *KeyvalueUpsert) SetCreatedAt(v time.Time) *KeyvalueUpsert {
	u.Set(keyvalue.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyvalueUpsert) UpdateCreatedAt() *KeyvalueUpsert {
	u.SetExcluded(keyvalue.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *KeyvalueUpsert) ClearCreatedAt() *KeyvalueUpsert {
	u.SetNull(keyvalue.FieldCreatedAt)
	return u
}

// SetValue sets the "value" field.
func (u *KeyvalueUpsert) SetValue(v string) *KeyvalueUpsert {
	u.Set(keyvalue.FieldValue, v)
	return u
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *KeyvalueUpsert) UpdateValue() *KeyvalueUpsert {
	u.SetExcluded(keyvalue.FieldValue)
	return u
}

// ClearValue clears the value of the "value" field.
func (u *KeyvalueUpsert) ClearValue() *KeyvalueUpsert {
	u.SetNull(keyvalue.FieldValue)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keyvalue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeyvalueUpsertOne) UpdateNewValues() *KeyvalueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(keyvalue.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *KeyvalueUpsertOne) Ignore() *KeyvalueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeyvalueUpsertOne) DoNothing() *KeyvalueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeyvalueCreate.OnConflict
// documentation for more info.
func (u *KeyvalueUpsertOne) Update(set func(*KeyvalueUpsert)) *KeyvalueUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeyvalueUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KeyvalueUpsertOne) SetCreatedAt(v time.Time) *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyvalueUpsertOne) UpdateCreatedAt() *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *KeyvalueUpsertOne) ClearCreatedAt() *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.ClearCreatedAt()
	})
}

// SetValue sets the "value" field.
func (u *KeyvalueUpsertOne) SetValue(v string) *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *KeyvalueUpsertOne) UpdateValue() *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *KeyvalueUpsertOne) ClearValue() *KeyvalueUpsertOne {
	return u.Update(func(s *KeyvalueUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *KeyvalueUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeyvalueCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeyvalueUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *KeyvalueUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: KeyvalueUpsertOne.ID is not supported by MySQL driver. Use KeyvalueUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *KeyvalueUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// KeyvalueCreateBulk is the builder for creating many Keyvalue entities in bulk.
type KeyvalueCreateBulk struct {
	config
	err      error
	builders []*KeyvalueCreate
	conflict []sql.ConflictOption
}

// Save creates the Keyvalue entities in the database.
func (kcb *KeyvalueCreateBulk) Save(ctx context.Context) ([]*Keyvalue, error) {
	if kcb.err != nil {
		return nil, kcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(kcb.builders))
	nodes := make([]*Keyvalue, len(kcb.builders))
	mutators := make([]Mutator, len(kcb.builders))
	for i := range kcb.builders {
		func(i int, root context.Context) {
			builder := kcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*KeyvalueMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, kcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = kcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, kcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, kcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (kcb *KeyvalueCreateBulk) SaveX(ctx context.Context) []*Keyvalue {
	v, err := kcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (kcb *KeyvalueCreateBulk) Exec(ctx context.Context) error {
	_, err := kcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (kcb *KeyvalueCreateBulk) ExecX(ctx context.Context) {
	if err := kcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Keyvalue.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.KeyvalueUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (kcb *KeyvalueCreateBulk) OnConflict(opts ...sql.ConflictOption) *KeyvalueUpsertBulk {
	kcb.conflict = opts
	return &KeyvalueUpsertBulk{
		create: kcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (kcb *KeyvalueCreateBulk) OnConflictColumns(columns ...string) *KeyvalueUpsertBulk {
	kcb.conflict = append(kcb.conflict, sql.ConflictColumns(columns...))
	return &KeyvalueUpsertBulk{
		create: kcb,
	}
}

// KeyvalueUpsertBulk is the builder for "upsert"-ing
// a bulk of Keyvalue nodes.
type KeyvalueUpsertBulk struct {
	create *KeyvalueCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(keyvalue.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *KeyvalueUpsertBulk) UpdateNewValues() *KeyvalueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(keyvalue.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Keyvalue.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *KeyvalueUpsertBulk) Ignore() *KeyvalueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *KeyvalueUpsertBulk) DoNothing() *KeyvalueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the KeyvalueCreateBulk.OnConflict
// documentation for more info.
func (u *KeyvalueUpsertBulk) Update(set func(*KeyvalueUpsert)) *KeyvalueUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&KeyvalueUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *KeyvalueUpsertBulk) SetCreatedAt(v time.Time) *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *KeyvalueUpsertBulk) UpdateCreatedAt() *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *KeyvalueUpsertBulk) ClearCreatedAt() *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.ClearCreatedAt()
	})
}

// SetValue sets the "value" field.
func (u *KeyvalueUpsertBulk) SetValue(v string) *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.SetValue(v)
	})
}

// UpdateValue sets the "value" field to the value that was provided on create.
func (u *KeyvalueUpsertBulk) UpdateValue() *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.UpdateValue()
	})
}

// ClearValue clears the value of the "value" field.
func (u *KeyvalueUpsertBulk) ClearValue() *KeyvalueUpsertBulk {
	return u.Update(func(s *KeyvalueUpsert) {
		s.ClearValue()
	})
}

// Exec executes the query.
func (u *KeyvalueUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the KeyvalueCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for KeyvalueCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *KeyvalueUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
