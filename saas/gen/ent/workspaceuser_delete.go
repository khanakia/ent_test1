// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/gen/ent/predicate"
	"saas/gen/ent/workspaceuser"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceUserDelete is the builder for deleting a WorkspaceUser entity.
type WorkspaceUserDelete struct {
	config
	hooks    []Hook
	mutation *WorkspaceUserMutation
}

// Where appends a list predicates to the WorkspaceUserDelete builder.
func (wud *WorkspaceUserDelete) Where(ps ...predicate.WorkspaceUser) *WorkspaceUserDelete {
	wud.mutation.Where(ps...)
	return wud
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wud *WorkspaceUserDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wud.sqlExec, wud.mutation, wud.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wud *WorkspaceUserDelete) ExecX(ctx context.Context) int {
	n, err := wud.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wud *WorkspaceUserDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(workspaceuser.Table, sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString))
	if ps := wud.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wud.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wud.mutation.done = true
	return affected, err
}

// WorkspaceUserDeleteOne is the builder for deleting a single WorkspaceUser entity.
type WorkspaceUserDeleteOne struct {
	wud *WorkspaceUserDelete
}

// Where appends a list predicates to the WorkspaceUserDelete builder.
func (wudo *WorkspaceUserDeleteOne) Where(ps ...predicate.WorkspaceUser) *WorkspaceUserDeleteOne {
	wudo.wud.mutation.Where(ps...)
	return wudo
}

// Exec executes the deletion query.
func (wudo *WorkspaceUserDeleteOne) Exec(ctx context.Context) error {
	n, err := wudo.wud.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{workspaceuser.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wudo *WorkspaceUserDeleteOne) ExecX(ctx context.Context) {
	if err := wudo.Exec(ctx); err != nil {
		panic(err)
	}
}
