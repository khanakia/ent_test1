// Code generated by ent, DO NOT EDIT.

package ent

import (
	"lace/jsonslice"
	"saas/gen/ent/todo"
	"time"
)

// CreateAppInput represents a mutation input for creating apps.
type CreateAppInput struct {
	CreatedAt               *time.Time
	UpdatedAt               *time.Time
	Name                    *string
	Copyright               *string
	Email                   *string
	Address                 *string
	SocialTw                *string
	SocialFb                *string
	SocialIn                *string
	LogoURL                 *string
	SiteURL                 *string
	AuthEmailVerify         *bool
	OauthSigninCanSignup    *bool
	AuthEnablePasswordLogin *bool
	AdminUserID             *string
	DefaultMailConnID       *string
	MailLayoutTemplID       *string
	WsapceInviteTemplID     *string
	WsapceSuccessTemplID    *string
	AuthFpTemplID           *string
	AuthWelcomeEmailTemplID *string
	AuthVerificationTemplID *string
}

// Mutate applies the CreateAppInput on the AppMutation builder.
func (i *CreateAppInput) Mutate(m *AppMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Copyright; v != nil {
		m.SetCopyright(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if v := i.SocialTw; v != nil {
		m.SetSocialTw(*v)
	}
	if v := i.SocialFb; v != nil {
		m.SetSocialFb(*v)
	}
	if v := i.SocialIn; v != nil {
		m.SetSocialIn(*v)
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if v := i.SiteURL; v != nil {
		m.SetSiteURL(*v)
	}
	if v := i.AuthEmailVerify; v != nil {
		m.SetAuthEmailVerify(*v)
	}
	if v := i.OauthSigninCanSignup; v != nil {
		m.SetOauthSigninCanSignup(*v)
	}
	if v := i.AuthEnablePasswordLogin; v != nil {
		m.SetAuthEnablePasswordLogin(*v)
	}
	if v := i.AdminUserID; v != nil {
		m.SetAdminUserID(*v)
	}
	if v := i.DefaultMailConnID; v != nil {
		m.SetDefaultMailConnID(*v)
	}
	if v := i.MailLayoutTemplID; v != nil {
		m.SetMailLayoutTemplID(*v)
	}
	if v := i.WsapceInviteTemplID; v != nil {
		m.SetWsapceInviteTemplID(*v)
	}
	if v := i.WsapceSuccessTemplID; v != nil {
		m.SetWsapceSuccessTemplID(*v)
	}
	if v := i.AuthFpTemplID; v != nil {
		m.SetAuthFpTemplID(*v)
	}
	if v := i.AuthWelcomeEmailTemplID; v != nil {
		m.SetAuthWelcomeEmailTemplID(*v)
	}
	if v := i.AuthVerificationTemplID; v != nil {
		m.SetAuthVerificationTemplID(*v)
	}
}

// SetInput applies the change-set in the CreateAppInput on the AppCreate builder.
func (c *AppCreate) SetInput(i CreateAppInput) *AppCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateAppInput represents a mutation input for updating apps.
type UpdateAppInput struct {
	ClearUpdatedAt               bool
	UpdatedAt                    *time.Time
	ClearName                    bool
	Name                         *string
	ClearCopyright               bool
	Copyright                    *string
	ClearEmail                   bool
	Email                        *string
	ClearAddress                 bool
	Address                      *string
	ClearSocialTw                bool
	SocialTw                     *string
	ClearSocialFb                bool
	SocialFb                     *string
	ClearSocialIn                bool
	SocialIn                     *string
	ClearLogoURL                 bool
	LogoURL                      *string
	ClearSiteURL                 bool
	SiteURL                      *string
	ClearAuthEmailVerify         bool
	AuthEmailVerify              *bool
	ClearOauthSigninCanSignup    bool
	OauthSigninCanSignup         *bool
	ClearAuthEnablePasswordLogin bool
	AuthEnablePasswordLogin      *bool
	ClearAdminUserID             bool
	AdminUserID                  *string
	ClearDefaultMailConn         bool
	DefaultMailConnID            *string
	ClearMailLayoutTempl         bool
	MailLayoutTemplID            *string
	ClearWsapceInviteTempl       bool
	WsapceInviteTemplID          *string
	ClearWsapceSuccessTempl      bool
	WsapceSuccessTemplID         *string
	ClearAuthFpTempl             bool
	AuthFpTemplID                *string
	ClearAuthWelcomeEmailTempl   bool
	AuthWelcomeEmailTemplID      *string
	ClearAuthVerificationTempl   bool
	AuthVerificationTemplID      *string
}

// Mutate applies the UpdateAppInput on the AppMutation builder.
func (i *UpdateAppInput) Mutate(m *AppMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearCopyright {
		m.ClearCopyright()
	}
	if v := i.Copyright; v != nil {
		m.SetCopyright(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearAddress {
		m.ClearAddress()
	}
	if v := i.Address; v != nil {
		m.SetAddress(*v)
	}
	if i.ClearSocialTw {
		m.ClearSocialTw()
	}
	if v := i.SocialTw; v != nil {
		m.SetSocialTw(*v)
	}
	if i.ClearSocialFb {
		m.ClearSocialFb()
	}
	if v := i.SocialFb; v != nil {
		m.SetSocialFb(*v)
	}
	if i.ClearSocialIn {
		m.ClearSocialIn()
	}
	if v := i.SocialIn; v != nil {
		m.SetSocialIn(*v)
	}
	if i.ClearLogoURL {
		m.ClearLogoURL()
	}
	if v := i.LogoURL; v != nil {
		m.SetLogoURL(*v)
	}
	if i.ClearSiteURL {
		m.ClearSiteURL()
	}
	if v := i.SiteURL; v != nil {
		m.SetSiteURL(*v)
	}
	if i.ClearAuthEmailVerify {
		m.ClearAuthEmailVerify()
	}
	if v := i.AuthEmailVerify; v != nil {
		m.SetAuthEmailVerify(*v)
	}
	if i.ClearOauthSigninCanSignup {
		m.ClearOauthSigninCanSignup()
	}
	if v := i.OauthSigninCanSignup; v != nil {
		m.SetOauthSigninCanSignup(*v)
	}
	if i.ClearAuthEnablePasswordLogin {
		m.ClearAuthEnablePasswordLogin()
	}
	if v := i.AuthEnablePasswordLogin; v != nil {
		m.SetAuthEnablePasswordLogin(*v)
	}
	if i.ClearAdminUserID {
		m.ClearAdminUserID()
	}
	if v := i.AdminUserID; v != nil {
		m.SetAdminUserID(*v)
	}
	if i.ClearDefaultMailConn {
		m.ClearDefaultMailConn()
	}
	if v := i.DefaultMailConnID; v != nil {
		m.SetDefaultMailConnID(*v)
	}
	if i.ClearMailLayoutTempl {
		m.ClearMailLayoutTempl()
	}
	if v := i.MailLayoutTemplID; v != nil {
		m.SetMailLayoutTemplID(*v)
	}
	if i.ClearWsapceInviteTempl {
		m.ClearWsapceInviteTempl()
	}
	if v := i.WsapceInviteTemplID; v != nil {
		m.SetWsapceInviteTemplID(*v)
	}
	if i.ClearWsapceSuccessTempl {
		m.ClearWsapceSuccessTempl()
	}
	if v := i.WsapceSuccessTemplID; v != nil {
		m.SetWsapceSuccessTemplID(*v)
	}
	if i.ClearAuthFpTempl {
		m.ClearAuthFpTempl()
	}
	if v := i.AuthFpTemplID; v != nil {
		m.SetAuthFpTemplID(*v)
	}
	if i.ClearAuthWelcomeEmailTempl {
		m.ClearAuthWelcomeEmailTempl()
	}
	if v := i.AuthWelcomeEmailTemplID; v != nil {
		m.SetAuthWelcomeEmailTemplID(*v)
	}
	if i.ClearAuthVerificationTempl {
		m.ClearAuthVerificationTempl()
	}
	if v := i.AuthVerificationTemplID; v != nil {
		m.SetAuthVerificationTemplID(*v)
	}
}

// SetInput applies the change-set in the UpdateAppInput on the AppUpdate builder.
func (c *AppUpdate) SetInput(i UpdateAppInput) *AppUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateAppInput on the AppUpdateOne builder.
func (c *AppUpdateOne) SetInput(i UpdateAppInput) *AppUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMailConnInput represents a mutation input for creating mailconns.
type CreateMailConnInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Name       *string
	Host       *string
	Port       *int
	Username   *string
	Password   *string
	Encryption *int
	FromName   *string
	FromEmail  *string
	Status     *bool
}

// Mutate applies the CreateMailConnInput on the MailConnMutation builder.
func (i *CreateMailConnInput) Mutate(m *MailConnMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Host; v != nil {
		m.SetHost(*v)
	}
	if v := i.Port; v != nil {
		m.SetPort(*v)
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Encryption; v != nil {
		m.SetEncryption(*v)
	}
	if v := i.FromName; v != nil {
		m.SetFromName(*v)
	}
	if v := i.FromEmail; v != nil {
		m.SetFromEmail(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the CreateMailConnInput on the MailConnCreate builder.
func (c *MailConnCreate) SetInput(i CreateMailConnInput) *MailConnCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMailConnInput represents a mutation input for updating mailconns.
type UpdateMailConnInput struct {
	ClearUpdatedAt  bool
	UpdatedAt       *time.Time
	ClearAppID      bool
	AppID           *string
	ClearName       bool
	Name            *string
	ClearHost       bool
	Host            *string
	ClearPort       bool
	Port            *int
	ClearUsername   bool
	Username        *string
	ClearPassword   bool
	Password        *string
	ClearEncryption bool
	Encryption      *int
	ClearFromName   bool
	FromName        *string
	ClearFromEmail  bool
	FromEmail       *string
	ClearStatus     bool
	Status          *bool
}

// Mutate applies the UpdateMailConnInput on the MailConnMutation builder.
func (i *UpdateMailConnInput) Mutate(m *MailConnMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearHost {
		m.ClearHost()
	}
	if v := i.Host; v != nil {
		m.SetHost(*v)
	}
	if i.ClearPort {
		m.ClearPort()
	}
	if v := i.Port; v != nil {
		m.SetPort(*v)
	}
	if i.ClearUsername {
		m.ClearUsername()
	}
	if v := i.Username; v != nil {
		m.SetUsername(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearEncryption {
		m.ClearEncryption()
	}
	if v := i.Encryption; v != nil {
		m.SetEncryption(*v)
	}
	if i.ClearFromName {
		m.ClearFromName()
	}
	if v := i.FromName; v != nil {
		m.SetFromName(*v)
	}
	if i.ClearFromEmail {
		m.ClearFromEmail()
	}
	if v := i.FromEmail; v != nil {
		m.SetFromEmail(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the UpdateMailConnInput on the MailConnUpdate builder.
func (c *MailConnUpdate) SetInput(i UpdateMailConnInput) *MailConnUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMailConnInput on the MailConnUpdateOne builder.
func (c *MailConnUpdateOne) SetInput(i UpdateMailConnInput) *MailConnUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOauthConnectionInput represents a mutation input for creating oauthconnections.
type CreateOauthConnectionInput struct {
	CreatedAt     *time.Time
	UpdatedAt     *time.Time
	Name          *string
	Provider      *string
	ClientID      *string
	ClientSecret  *string
	Scopes        *string
	RedirectURL   *string
	DashboardLink *string
	Note          *string
	Status        *bool
}

// Mutate applies the CreateOauthConnectionInput on the OauthConnectionMutation builder.
func (i *CreateOauthConnectionInput) Mutate(m *OauthConnectionMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if v := i.ClientSecret; v != nil {
		m.SetClientSecret(*v)
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(*v)
	}
	if v := i.RedirectURL; v != nil {
		m.SetRedirectURL(*v)
	}
	if v := i.DashboardLink; v != nil {
		m.SetDashboardLink(*v)
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the CreateOauthConnectionInput on the OauthConnectionCreate builder.
func (c *OauthConnectionCreate) SetInput(i CreateOauthConnectionInput) *OauthConnectionCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOauthConnectionInput represents a mutation input for updating oauthconnections.
type UpdateOauthConnectionInput struct {
	ClearUpdatedAt     bool
	UpdatedAt          *time.Time
	ClearAppID         bool
	AppID              *string
	ClearName          bool
	Name               *string
	ClearProvider      bool
	Provider           *string
	ClearClientID      bool
	ClientID           *string
	ClearClientSecret  bool
	ClientSecret       *string
	ClearScopes        bool
	Scopes             *string
	ClearRedirectURL   bool
	RedirectURL        *string
	ClearDashboardLink bool
	DashboardLink      *string
	ClearNote          bool
	Note               *string
	ClearStatus        bool
	Status             *bool
}

// Mutate applies the UpdateOauthConnectionInput on the OauthConnectionMutation builder.
func (i *UpdateOauthConnectionInput) Mutate(m *OauthConnectionMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearProvider {
		m.ClearProvider()
	}
	if v := i.Provider; v != nil {
		m.SetProvider(*v)
	}
	if i.ClearClientID {
		m.ClearClientID()
	}
	if v := i.ClientID; v != nil {
		m.SetClientID(*v)
	}
	if i.ClearClientSecret {
		m.ClearClientSecret()
	}
	if v := i.ClientSecret; v != nil {
		m.SetClientSecret(*v)
	}
	if i.ClearScopes {
		m.ClearScopes()
	}
	if v := i.Scopes; v != nil {
		m.SetScopes(*v)
	}
	if i.ClearRedirectURL {
		m.ClearRedirectURL()
	}
	if v := i.RedirectURL; v != nil {
		m.SetRedirectURL(*v)
	}
	if i.ClearDashboardLink {
		m.ClearDashboardLink()
	}
	if v := i.DashboardLink; v != nil {
		m.SetDashboardLink(*v)
	}
	if i.ClearNote {
		m.ClearNote()
	}
	if v := i.Note; v != nil {
		m.SetNote(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the UpdateOauthConnectionInput on the OauthConnectionUpdate builder.
func (c *OauthConnectionUpdate) SetInput(i UpdateOauthConnectionInput) *OauthConnectionUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOauthConnectionInput on the OauthConnectionUpdateOne builder.
func (c *OauthConnectionUpdateOne) SetInput(i UpdateOauthConnectionInput) *OauthConnectionUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostInput represents a mutation input for creating posts.
type CreatePostInput struct {
	CreatedAt         *time.Time
	UpdatedAt         *time.Time
	Name              *string
	Slug              *string
	Headline          *string
	Excerpt           *string
	Content           *string
	MetaTitle         *string
	MetaDescr         *string
	MetaCanonicalURL  *string
	MetaRobots        *string
	Custom            map[string]interface{}
	PostStatusID      *string
	PostTypeID        *string
	PrimaryCategoryID *string
	PostTagIDs        []string
}

// Mutate applies the CreatePostInput on the PostMutation builder.
func (i *CreatePostInput) Mutate(m *PostMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Headline; v != nil {
		m.SetHeadline(*v)
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if v := i.Custom; v != nil {
		m.SetCustom(v)
	}
	if v := i.PostStatusID; v != nil {
		m.SetPostStatusID(*v)
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
	if v := i.PrimaryCategoryID; v != nil {
		m.SetPrimaryCategoryID(*v)
	}
	if v := i.PostTagIDs; len(v) > 0 {
		m.AddPostTagIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostInput on the PostCreate builder.
func (c *PostCreate) SetInput(i CreatePostInput) *PostCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostInput represents a mutation input for updating posts.
type UpdatePostInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearAppID            bool
	AppID                 *string
	ClearName             bool
	Name                  *string
	ClearSlug             bool
	Slug                  *string
	ClearHeadline         bool
	Headline              *string
	ClearExcerpt          bool
	Excerpt               *string
	ClearContent          bool
	Content               *string
	ClearMetaTitle        bool
	MetaTitle             *string
	ClearMetaDescr        bool
	MetaDescr             *string
	ClearMetaCanonicalURL bool
	MetaCanonicalURL      *string
	ClearMetaRobots       bool
	MetaRobots            *string
	ClearCustom           bool
	Custom                map[string]interface{}
	ClearPostStatus       bool
	PostStatusID          *string
	ClearPostType         bool
	PostTypeID            *string
	ClearPrimaryCategory  bool
	PrimaryCategoryID     *string
	ClearPostTags         bool
	AddPostTagIDs         []string
	RemovePostTagIDs      []string
}

// Mutate applies the UpdatePostInput on the PostMutation builder.
func (i *UpdatePostInput) Mutate(m *PostMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearHeadline {
		m.ClearHeadline()
	}
	if v := i.Headline; v != nil {
		m.SetHeadline(*v)
	}
	if i.ClearExcerpt {
		m.ClearExcerpt()
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearMetaTitle {
		m.ClearMetaTitle()
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if i.ClearMetaDescr {
		m.ClearMetaDescr()
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if i.ClearMetaCanonicalURL {
		m.ClearMetaCanonicalURL()
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if i.ClearMetaRobots {
		m.ClearMetaRobots()
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if i.ClearCustom {
		m.ClearCustom()
	}
	if v := i.Custom; v != nil {
		m.SetCustom(v)
	}
	if i.ClearPostStatus {
		m.ClearPostStatus()
	}
	if v := i.PostStatusID; v != nil {
		m.SetPostStatusID(*v)
	}
	if i.ClearPostType {
		m.ClearPostType()
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
	if i.ClearPrimaryCategory {
		m.ClearPrimaryCategory()
	}
	if v := i.PrimaryCategoryID; v != nil {
		m.SetPrimaryCategoryID(*v)
	}
	if i.ClearPostTags {
		m.ClearPostTags()
	}
	if v := i.AddPostTagIDs; len(v) > 0 {
		m.AddPostTagIDs(v...)
	}
	if v := i.RemovePostTagIDs; len(v) > 0 {
		m.RemovePostTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdate builder.
func (c *PostUpdate) SetInput(i UpdatePostInput) *PostUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostInput on the PostUpdateOne builder.
func (c *PostUpdateOne) SetInput(i UpdatePostInput) *PostUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostCategoryInput represents a mutation input for creating postcategories.
type CreatePostCategoryInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Name             *string
	Slug             *string
	Status           *string
	Excerpt          *string
	Content          *string
	MetaTitle        *string
	MetaDescr        *string
	MetaCanonicalURL *string
	MetaRobots       *string
	PostIDs          []string
}

// Mutate applies the CreatePostCategoryInput on the PostCategoryMutation builder.
func (i *CreatePostCategoryInput) Mutate(m *PostCategoryMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostCategoryInput on the PostCategoryCreate builder.
func (c *PostCategoryCreate) SetInput(i CreatePostCategoryInput) *PostCategoryCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostCategoryInput represents a mutation input for updating postcategories.
type UpdatePostCategoryInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearAppID            bool
	AppID                 *string
	ClearName             bool
	Name                  *string
	ClearSlug             bool
	Slug                  *string
	ClearStatus           bool
	Status                *string
	ClearExcerpt          bool
	Excerpt               *string
	ClearContent          bool
	Content               *string
	ClearMetaTitle        bool
	MetaTitle             *string
	ClearMetaDescr        bool
	MetaDescr             *string
	ClearMetaCanonicalURL bool
	MetaCanonicalURL      *string
	ClearMetaRobots       bool
	MetaRobots            *string
	ClearPosts            bool
	AddPostIDs            []string
	RemovePostIDs         []string
}

// Mutate applies the UpdatePostCategoryInput on the PostCategoryMutation builder.
func (i *UpdatePostCategoryInput) Mutate(m *PostCategoryMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearExcerpt {
		m.ClearExcerpt()
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearMetaTitle {
		m.ClearMetaTitle()
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if i.ClearMetaDescr {
		m.ClearMetaDescr()
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if i.ClearMetaCanonicalURL {
		m.ClearMetaCanonicalURL()
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if i.ClearMetaRobots {
		m.ClearMetaRobots()
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostCategoryInput on the PostCategoryUpdate builder.
func (c *PostCategoryUpdate) SetInput(i UpdatePostCategoryInput) *PostCategoryUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostCategoryInput on the PostCategoryUpdateOne builder.
func (c *PostCategoryUpdateOne) SetInput(i UpdatePostCategoryInput) *PostCategoryUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostStatusInput represents a mutation input for creating poststatusslice.
type CreatePostStatusInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Name       *string
	Slug       *string
	Status     *bool
	PostTypeID *string
}

// Mutate applies the CreatePostStatusInput on the PostStatusMutation builder.
func (i *CreatePostStatusInput) Mutate(m *PostStatusMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
}

// SetInput applies the change-set in the CreatePostStatusInput on the PostStatusCreate builder.
func (c *PostStatusCreate) SetInput(i CreatePostStatusInput) *PostStatusCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostStatusInput represents a mutation input for updating poststatusslice.
type UpdatePostStatusInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	ClearName      bool
	Name           *string
	ClearSlug      bool
	Slug           *string
	ClearStatus    bool
	Status         *bool
	ClearPostType  bool
	PostTypeID     *string
}

// Mutate applies the UpdatePostStatusInput on the PostStatusMutation builder.
func (i *UpdatePostStatusInput) Mutate(m *PostStatusMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPostType {
		m.ClearPostType()
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdatePostStatusInput on the PostStatusUpdate builder.
func (c *PostStatusUpdate) SetInput(i UpdatePostStatusInput) *PostStatusUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostStatusInput on the PostStatusUpdateOne builder.
func (c *PostStatusUpdateOne) SetInput(i UpdatePostStatusInput) *PostStatusUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostTagInput represents a mutation input for creating posttags.
type CreatePostTagInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Name             *string
	Slug             *string
	Status           *string
	Excerpt          *string
	MetaTitle        *string
	MetaDescr        *string
	MetaCanonicalURL *string
	MetaRobots       *string
	PostIDs          []string
}

// Mutate applies the CreatePostTagInput on the PostTagMutation builder.
func (i *CreatePostTagInput) Mutate(m *PostTagMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostTagInput on the PostTagCreate builder.
func (c *PostTagCreate) SetInput(i CreatePostTagInput) *PostTagCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostTagInput represents a mutation input for updating posttags.
type UpdatePostTagInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearAppID            bool
	AppID                 *string
	ClearName             bool
	Name                  *string
	ClearSlug             bool
	Slug                  *string
	ClearStatus           bool
	Status                *string
	ClearExcerpt          bool
	Excerpt               *string
	ClearMetaTitle        bool
	MetaTitle             *string
	ClearMetaDescr        bool
	MetaDescr             *string
	ClearMetaCanonicalURL bool
	MetaCanonicalURL      *string
	ClearMetaRobots       bool
	MetaRobots            *string
	ClearPosts            bool
	AddPostIDs            []string
	RemovePostIDs         []string
}

// Mutate applies the UpdatePostTagInput on the PostTagMutation builder.
func (i *UpdatePostTagInput) Mutate(m *PostTagMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearExcerpt {
		m.ClearExcerpt()
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if i.ClearMetaTitle {
		m.ClearMetaTitle()
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if i.ClearMetaDescr {
		m.ClearMetaDescr()
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if i.ClearMetaCanonicalURL {
		m.ClearMetaCanonicalURL()
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if i.ClearMetaRobots {
		m.ClearMetaRobots()
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostTagInput on the PostTagUpdate builder.
func (c *PostTagUpdate) SetInput(i UpdatePostTagInput) *PostTagUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostTagInput on the PostTagUpdateOne builder.
func (c *PostTagUpdateOne) SetInput(i UpdatePostTagInput) *PostTagUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostTypeInput represents a mutation input for creating posttypes.
type CreatePostTypeInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Name             *string
	Slug             *string
	Status           *string
	Excerpt          *string
	Content          *string
	MetaTitle        *string
	MetaDescr        *string
	MetaCanonicalURL *string
	MetaRobots       *string
}

// Mutate applies the CreatePostTypeInput on the PostTypeMutation builder.
func (i *CreatePostTypeInput) Mutate(m *PostTypeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
}

// SetInput applies the change-set in the CreatePostTypeInput on the PostTypeCreate builder.
func (c *PostTypeCreate) SetInput(i CreatePostTypeInput) *PostTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostTypeInput represents a mutation input for updating posttypes.
type UpdatePostTypeInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearAppID            bool
	AppID                 *string
	ClearName             bool
	Name                  *string
	ClearSlug             bool
	Slug                  *string
	ClearStatus           bool
	Status                *string
	ClearExcerpt          bool
	Excerpt               *string
	ClearContent          bool
	Content               *string
	ClearMetaTitle        bool
	MetaTitle             *string
	ClearMetaDescr        bool
	MetaDescr             *string
	ClearMetaCanonicalURL bool
	MetaCanonicalURL      *string
	ClearMetaRobots       bool
	MetaRobots            *string
}

// Mutate applies the UpdatePostTypeInput on the PostTypeMutation builder.
func (i *UpdatePostTypeInput) Mutate(m *PostTypeMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearExcerpt {
		m.ClearExcerpt()
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearMetaTitle {
		m.ClearMetaTitle()
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if i.ClearMetaDescr {
		m.ClearMetaDescr()
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if i.ClearMetaCanonicalURL {
		m.ClearMetaCanonicalURL()
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if i.ClearMetaRobots {
		m.ClearMetaRobots()
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
}

// SetInput applies the change-set in the UpdatePostTypeInput on the PostTypeUpdate builder.
func (c *PostTypeUpdate) SetInput(i UpdatePostTypeInput) *PostTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostTypeInput on the PostTypeUpdateOne builder.
func (c *PostTypeUpdateOne) SetInput(i UpdatePostTypeInput) *PostTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreatePostTypeFormInput represents a mutation input for creating posttypeforms.
type CreatePostTypeFormInput struct {
	CreatedAt  *time.Time
	UpdatedAt  *time.Time
	Name       *string
	Status     *bool
	Body       jsonslice.JsonSlice
	PostTypeID *string
}

// Mutate applies the CreatePostTypeFormInput on the PostTypeFormMutation builder.
func (i *CreatePostTypeFormInput) Mutate(m *PostTypeFormMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Body; v != nil {
		m.SetBody(v)
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
}

// SetInput applies the change-set in the CreatePostTypeFormInput on the PostTypeFormCreate builder.
func (c *PostTypeFormCreate) SetInput(i CreatePostTypeFormInput) *PostTypeFormCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostTypeFormInput represents a mutation input for updating posttypeforms.
type UpdatePostTypeFormInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	ClearName      bool
	Name           *string
	ClearStatus    bool
	Status         *bool
	ClearBody      bool
	Body           jsonslice.JsonSlice
	AppendBody     jsonslice.JsonSlice
	ClearPostType  bool
	PostTypeID     *string
}

// Mutate applies the UpdatePostTypeFormInput on the PostTypeFormMutation builder.
func (i *UpdatePostTypeFormInput) Mutate(m *PostTypeFormMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearBody {
		m.ClearBody()
	}
	if v := i.Body; v != nil {
		m.SetBody(v)
	}
	if i.AppendBody != nil {
		m.AppendBody(i.Body)
	}
	if i.ClearPostType {
		m.ClearPostType()
	}
	if v := i.PostTypeID; v != nil {
		m.SetPostTypeID(*v)
	}
}

// SetInput applies the change-set in the UpdatePostTypeFormInput on the PostTypeFormUpdate builder.
func (c *PostTypeFormUpdate) SetInput(i UpdatePostTypeFormInput) *PostTypeFormUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostTypeFormInput on the PostTypeFormUpdateOne builder.
func (c *PostTypeFormUpdateOne) SetInput(i UpdatePostTypeFormInput) *PostTypeFormUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTemplInput represents a mutation input for creating templs.
type CreateTemplInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      *string
	Body      *string
	Compiled  *string
	Status    *bool
}

// Mutate applies the CreateTemplInput on the TemplMutation builder.
func (i *CreateTemplInput) Mutate(m *TemplMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Body; v != nil {
		m.SetBody(*v)
	}
	if v := i.Compiled; v != nil {
		m.SetCompiled(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the CreateTemplInput on the TemplCreate builder.
func (c *TemplCreate) SetInput(i CreateTemplInput) *TemplCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTemplInput represents a mutation input for updating templs.
type UpdateTemplInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	ClearName      bool
	Name           *string
	ClearBody      bool
	Body           *string
	ClearCompiled  bool
	Compiled       *string
	ClearStatus    bool
	Status         *bool
}

// Mutate applies the UpdateTemplInput on the TemplMutation builder.
func (i *UpdateTemplInput) Mutate(m *TemplMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearBody {
		m.ClearBody()
	}
	if v := i.Body; v != nil {
		m.SetBody(*v)
	}
	if i.ClearCompiled {
		m.ClearCompiled()
	}
	if v := i.Compiled; v != nil {
		m.SetCompiled(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the UpdateTemplInput on the TemplUpdate builder.
func (c *TemplUpdate) SetInput(i UpdateTemplInput) *TemplUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTemplInput on the TemplUpdateOne builder.
func (c *TemplUpdateOne) SetInput(i UpdateTemplInput) *TemplUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Text      string
	Status    *todo.Status
	Priority  *int
	ChildIDs  []string
	ParentID  *string
}

// Mutate applies the CreateTodoInput on the TodoMutation builder.
func (i *CreateTodoInput) Mutate(m *TodoMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetText(i.Text)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the TodoCreate builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	Text           *string
	Status         *todo.Status
	Priority       *int
	ClearChildren  bool
	AddChildIDs    []string
	RemoveChildIDs []string
	ClearParent    bool
	ParentID       *string
}

// Mutate applies the UpdateTodoInput on the TodoMutation builder.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdate builder.
func (c *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdateOne builder.
func (c *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Email            string
	Phone            *string
	FirstName        *string
	LastName         *string
	Company          *string
	Locale           *string
	RoleID           *string
	Status           *bool
	Password         *string
	Secret           *string
	APIKey           *string
	WelcomeEmailSent *bool
	CanAdmin         *bool
	SessionIDs       []string
	WorkspaceIDs     []string
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetEmail(i.Email)
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if v := i.Locale; v != nil {
		m.SetLocale(*v)
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if v := i.Secret; v != nil {
		m.SetSecret(*v)
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if v := i.WelcomeEmailSent; v != nil {
		m.SetWelcomeEmailSent(*v)
	}
	if v := i.CanAdmin; v != nil {
		m.SetCanAdmin(*v)
	}
	if v := i.SessionIDs; len(v) > 0 {
		m.AddSessionIDs(v...)
	}
	if v := i.WorkspaceIDs; len(v) > 0 {
		m.AddWorkspaceIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearAppID            bool
	AppID                 *string
	Email                 *string
	ClearPhone            bool
	Phone                 *string
	ClearFirstName        bool
	FirstName             *string
	ClearLastName         bool
	LastName              *string
	ClearCompany          bool
	Company               *string
	ClearLocale           bool
	Locale                *string
	ClearRoleID           bool
	RoleID                *string
	ClearStatus           bool
	Status                *bool
	ClearPassword         bool
	Password              *string
	ClearSecret           bool
	Secret                *string
	ClearAPIKey           bool
	APIKey                *string
	ClearWelcomeEmailSent bool
	WelcomeEmailSent      *bool
	ClearCanAdmin         bool
	CanAdmin              *bool
	ClearSessions         bool
	AddSessionIDs         []string
	RemoveSessionIDs      []string
	ClearWorkspaces       bool
	AddWorkspaceIDs       []string
	RemoveWorkspaceIDs    []string
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearPhone {
		m.ClearPhone()
	}
	if v := i.Phone; v != nil {
		m.SetPhone(*v)
	}
	if i.ClearFirstName {
		m.ClearFirstName()
	}
	if v := i.FirstName; v != nil {
		m.SetFirstName(*v)
	}
	if i.ClearLastName {
		m.ClearLastName()
	}
	if v := i.LastName; v != nil {
		m.SetLastName(*v)
	}
	if i.ClearCompany {
		m.ClearCompany()
	}
	if v := i.Company; v != nil {
		m.SetCompany(*v)
	}
	if i.ClearLocale {
		m.ClearLocale()
	}
	if v := i.Locale; v != nil {
		m.SetLocale(*v)
	}
	if i.ClearRoleID {
		m.ClearRoleID()
	}
	if v := i.RoleID; v != nil {
		m.SetRoleID(*v)
	}
	if i.ClearStatus {
		m.ClearStatus()
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearPassword {
		m.ClearPassword()
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if i.ClearSecret {
		m.ClearSecret()
	}
	if v := i.Secret; v != nil {
		m.SetSecret(*v)
	}
	if i.ClearAPIKey {
		m.ClearAPIKey()
	}
	if v := i.APIKey; v != nil {
		m.SetAPIKey(*v)
	}
	if i.ClearWelcomeEmailSent {
		m.ClearWelcomeEmailSent()
	}
	if v := i.WelcomeEmailSent; v != nil {
		m.SetWelcomeEmailSent(*v)
	}
	if i.ClearCanAdmin {
		m.ClearCanAdmin()
	}
	if v := i.CanAdmin; v != nil {
		m.SetCanAdmin(*v)
	}
	if i.ClearSessions {
		m.ClearSessions()
	}
	if v := i.AddSessionIDs; len(v) > 0 {
		m.AddSessionIDs(v...)
	}
	if v := i.RemoveSessionIDs; len(v) > 0 {
		m.RemoveSessionIDs(v...)
	}
	if i.ClearWorkspaces {
		m.ClearWorkspaces()
	}
	if v := i.AddWorkspaceIDs; len(v) > 0 {
		m.AddWorkspaceIDs(v...)
	}
	if v := i.RemoveWorkspaceIDs; len(v) > 0 {
		m.RemoveWorkspaceIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkspaceInput represents a mutation input for creating workspaces.
type CreateWorkspaceInput struct {
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	Name               *string
	IsPersonal         *bool
	UserID             *string
	UserIDs            []string
	WorkspaceInviteIDs []string
}

// Mutate applies the CreateWorkspaceInput on the WorkspaceMutation builder.
func (i *CreateWorkspaceInput) Mutate(m *WorkspaceMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.IsPersonal; v != nil {
		m.SetIsPersonal(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.UserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.WorkspaceInviteIDs; len(v) > 0 {
		m.AddWorkspaceInviteIDs(v...)
	}
}

// SetInput applies the change-set in the CreateWorkspaceInput on the WorkspaceCreate builder.
func (c *WorkspaceCreate) SetInput(i CreateWorkspaceInput) *WorkspaceCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkspaceInput represents a mutation input for updating workspaces.
type UpdateWorkspaceInput struct {
	ClearUpdatedAt           bool
	UpdatedAt                *time.Time
	ClearAppID               bool
	AppID                    *string
	ClearName                bool
	Name                     *string
	ClearIsPersonal          bool
	IsPersonal               *bool
	ClearUserID              bool
	UserID                   *string
	ClearUsers               bool
	AddUserIDs               []string
	RemoveUserIDs            []string
	ClearWorkspaceInvites    bool
	AddWorkspaceInviteIDs    []string
	RemoveWorkspaceInviteIDs []string
}

// Mutate applies the UpdateWorkspaceInput on the WorkspaceMutation builder.
func (i *UpdateWorkspaceInput) Mutate(m *WorkspaceMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearIsPersonal {
		m.ClearIsPersonal()
	}
	if v := i.IsPersonal; v != nil {
		m.SetIsPersonal(*v)
	}
	if i.ClearUserID {
		m.ClearUserID()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if i.ClearUsers {
		m.ClearUsers()
	}
	if v := i.AddUserIDs; len(v) > 0 {
		m.AddUserIDs(v...)
	}
	if v := i.RemoveUserIDs; len(v) > 0 {
		m.RemoveUserIDs(v...)
	}
	if i.ClearWorkspaceInvites {
		m.ClearWorkspaceInvites()
	}
	if v := i.AddWorkspaceInviteIDs; len(v) > 0 {
		m.AddWorkspaceInviteIDs(v...)
	}
	if v := i.RemoveWorkspaceInviteIDs; len(v) > 0 {
		m.RemoveWorkspaceInviteIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the WorkspaceUpdate builder.
func (c *WorkspaceUpdate) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkspaceInput on the WorkspaceUpdateOne builder.
func (c *WorkspaceUpdateOne) SetInput(i UpdateWorkspaceInput) *WorkspaceUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkspaceInviteInput represents a mutation input for creating workspaceinvites.
type CreateWorkspaceInviteInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Email       *string
	Role        *string
	WorkspaceID *string
}

// Mutate applies the CreateWorkspaceInviteInput on the WorkspaceInviteMutation builder.
func (i *CreateWorkspaceInviteInput) Mutate(m *WorkspaceInviteMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the CreateWorkspaceInviteInput on the WorkspaceInviteCreate builder.
func (c *WorkspaceInviteCreate) SetInput(i CreateWorkspaceInviteInput) *WorkspaceInviteCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkspaceInviteInput represents a mutation input for updating workspaceinvites.
type UpdateWorkspaceInviteInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	ClearEmail     bool
	Email          *string
	ClearRole      bool
	Role           *string
	ClearWorkspace bool
	WorkspaceID    *string
}

// Mutate applies the UpdateWorkspaceInviteInput on the WorkspaceInviteMutation builder.
func (i *UpdateWorkspaceInviteInput) Mutate(m *WorkspaceInviteMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearEmail {
		m.ClearEmail()
	}
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if i.ClearWorkspace {
		m.ClearWorkspace()
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceInviteInput on the WorkspaceInviteUpdate builder.
func (c *WorkspaceInviteUpdate) SetInput(i UpdateWorkspaceInviteInput) *WorkspaceInviteUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkspaceInviteInput on the WorkspaceInviteUpdateOne builder.
func (c *WorkspaceInviteUpdateOne) SetInput(i UpdateWorkspaceInviteInput) *WorkspaceInviteUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateWorkspaceUserInput represents a mutation input for creating workspaceusers.
type CreateWorkspaceUserInput struct {
	CreatedAt   *time.Time
	UpdatedAt   *time.Time
	Role        *string
	UserID      string
	WorkspaceID string
}

// Mutate applies the CreateWorkspaceUserInput on the WorkspaceUserMutation builder.
func (i *CreateWorkspaceUserInput) Mutate(m *WorkspaceUserMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	m.SetUserID(i.UserID)
	m.SetWorkspaceID(i.WorkspaceID)
}

// SetInput applies the change-set in the CreateWorkspaceUserInput on the WorkspaceUserCreate builder.
func (c *WorkspaceUserCreate) SetInput(i CreateWorkspaceUserInput) *WorkspaceUserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateWorkspaceUserInput represents a mutation input for updating workspaceusers.
type UpdateWorkspaceUserInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	ClearAppID     bool
	AppID          *string
	ClearRole      bool
	Role           *string
	UserID         *string
	WorkspaceID    *string
}

// Mutate applies the UpdateWorkspaceUserInput on the WorkspaceUserMutation builder.
func (i *UpdateWorkspaceUserInput) Mutate(m *WorkspaceUserMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearAppID {
		m.ClearAppID()
	}
	if v := i.AppID; v != nil {
		m.SetAppID(*v)
	}
	if i.ClearRole {
		m.ClearRole()
	}
	if v := i.Role; v != nil {
		m.SetRole(*v)
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
	if v := i.WorkspaceID; v != nil {
		m.SetWorkspaceID(*v)
	}
}

// SetInput applies the change-set in the UpdateWorkspaceUserInput on the WorkspaceUserUpdate builder.
func (c *WorkspaceUserUpdate) SetInput(i UpdateWorkspaceUserInput) *WorkspaceUserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateWorkspaceUserInput on the WorkspaceUserUpdateOne builder.
func (c *WorkspaceUserUpdateOne) SetInput(i UpdateWorkspaceUserInput) *WorkspaceUserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
