// Code generated by ent, DO NOT EDIT.

package ent

import (
	"saas/gen/ent/posttype"
	"saas/gen/ent/todo"
	"time"
)

// CreatePostTypeInput represents a mutation input for creating posttypes.
type CreatePostTypeInput struct {
	CreatedAt        *time.Time
	UpdatedAt        *time.Time
	Name             *string
	Slug             *string
	Status           *posttype.Status
	Excerpt          *string
	Content          *string
	MetaTitle        *string
	MetaDescr        *string
	MetaCanonicalURL *string
	MetaRobots       *string
	PostIDs          []string
	PostStatusIDs    []string
}

// Mutate applies the CreatePostTypeInput on the PostTypeMutation builder.
func (i *CreatePostTypeInput) Mutate(m *PostTypeMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if v := i.PostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.PostStatusIDs; len(v) > 0 {
		m.AddPostStatusIDs(v...)
	}
}

// SetInput applies the change-set in the CreatePostTypeInput on the PostTypeCreate builder.
func (c *PostTypeCreate) SetInput(i CreatePostTypeInput) *PostTypeCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdatePostTypeInput represents a mutation input for updating posttypes.
type UpdatePostTypeInput struct {
	ClearUpdatedAt        bool
	UpdatedAt             *time.Time
	ClearName             bool
	Name                  *string
	ClearSlug             bool
	Slug                  *string
	Status                *posttype.Status
	ClearExcerpt          bool
	Excerpt               *string
	ClearContent          bool
	Content               *string
	ClearMetaTitle        bool
	MetaTitle             *string
	ClearMetaDescr        bool
	MetaDescr             *string
	ClearMetaCanonicalURL bool
	MetaCanonicalURL      *string
	ClearMetaRobots       bool
	MetaRobots            *string
	ClearPosts            bool
	AddPostIDs            []string
	RemovePostIDs         []string
	ClearPostStatuses     bool
	AddPostStatusIDs      []string
	RemovePostStatusIDs   []string
}

// Mutate applies the UpdatePostTypeInput on the PostTypeMutation builder.
func (i *UpdatePostTypeInput) Mutate(m *PostTypeMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearName {
		m.ClearName()
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearSlug {
		m.ClearSlug()
	}
	if v := i.Slug; v != nil {
		m.SetSlug(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if i.ClearExcerpt {
		m.ClearExcerpt()
	}
	if v := i.Excerpt; v != nil {
		m.SetExcerpt(*v)
	}
	if i.ClearContent {
		m.ClearContent()
	}
	if v := i.Content; v != nil {
		m.SetContent(*v)
	}
	if i.ClearMetaTitle {
		m.ClearMetaTitle()
	}
	if v := i.MetaTitle; v != nil {
		m.SetMetaTitle(*v)
	}
	if i.ClearMetaDescr {
		m.ClearMetaDescr()
	}
	if v := i.MetaDescr; v != nil {
		m.SetMetaDescr(*v)
	}
	if i.ClearMetaCanonicalURL {
		m.ClearMetaCanonicalURL()
	}
	if v := i.MetaCanonicalURL; v != nil {
		m.SetMetaCanonicalURL(*v)
	}
	if i.ClearMetaRobots {
		m.ClearMetaRobots()
	}
	if v := i.MetaRobots; v != nil {
		m.SetMetaRobots(*v)
	}
	if i.ClearPosts {
		m.ClearPosts()
	}
	if v := i.AddPostIDs; len(v) > 0 {
		m.AddPostIDs(v...)
	}
	if v := i.RemovePostIDs; len(v) > 0 {
		m.RemovePostIDs(v...)
	}
	if i.ClearPostStatuses {
		m.ClearPostStatuses()
	}
	if v := i.AddPostStatusIDs; len(v) > 0 {
		m.AddPostStatusIDs(v...)
	}
	if v := i.RemovePostStatusIDs; len(v) > 0 {
		m.RemovePostStatusIDs(v...)
	}
}

// SetInput applies the change-set in the UpdatePostTypeInput on the PostTypeUpdate builder.
func (c *PostTypeUpdate) SetInput(i UpdatePostTypeInput) *PostTypeUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdatePostTypeInput on the PostTypeUpdateOne builder.
func (c *PostTypeUpdateOne) SetInput(i UpdatePostTypeInput) *PostTypeUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTodoInput represents a mutation input for creating todos.
type CreateTodoInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Text      string
	Status    *todo.Status
	Priority  *int
	ChildIDs  []string
	ParentID  *string
}

// Mutate applies the CreateTodoInput on the TodoMutation builder.
func (i *CreateTodoInput) Mutate(m *TodoMutation) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetText(i.Text)
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if v := i.ChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the CreateTodoInput on the TodoCreate builder.
func (c *TodoCreate) SetInput(i CreateTodoInput) *TodoCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateTodoInput represents a mutation input for updating todos.
type UpdateTodoInput struct {
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	Text           *string
	Status         *todo.Status
	Priority       *int
	ClearChildren  bool
	AddChildIDs    []string
	RemoveChildIDs []string
	ClearParent    bool
	ParentID       *string
}

// Mutate applies the UpdateTodoInput on the TodoMutation builder.
func (i *UpdateTodoInput) Mutate(m *TodoMutation) {
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Text; v != nil {
		m.SetText(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
	if v := i.Priority; v != nil {
		m.SetPriority(*v)
	}
	if i.ClearChildren {
		m.ClearChildren()
	}
	if v := i.AddChildIDs; len(v) > 0 {
		m.AddChildIDs(v...)
	}
	if v := i.RemoveChildIDs; len(v) > 0 {
		m.RemoveChildIDs(v...)
	}
	if i.ClearParent {
		m.ClearParent()
	}
	if v := i.ParentID; v != nil {
		m.SetParentID(*v)
	}
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdate builder.
func (c *TodoUpdate) SetInput(i UpdateTodoInput) *TodoUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateTodoInput on the TodoUpdateOne builder.
func (c *TodoUpdateOne) SetInput(i UpdateTodoInput) *TodoUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
