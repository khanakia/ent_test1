// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/media"
	"saas/gen/ent/mediable"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MediaCreate is the builder for creating a Media entity.
type MediaCreate struct {
	config
	mutation *MediaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetAppID sets the "app_id" field.
func (mc *MediaCreate) SetAppID(s string) *MediaCreate {
	mc.mutation.SetAppID(s)
	return mc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableAppID(s *string) *MediaCreate {
	if s != nil {
		mc.SetAppID(*s)
	}
	return mc
}

// SetDisk sets the "disk" field.
func (mc *MediaCreate) SetDisk(s string) *MediaCreate {
	mc.mutation.SetDisk(s)
	return mc
}

// SetNillableDisk sets the "disk" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDisk(s *string) *MediaCreate {
	if s != nil {
		mc.SetDisk(*s)
	}
	return mc
}

// SetDirectory sets the "directory" field.
func (mc *MediaCreate) SetDirectory(s string) *MediaCreate {
	mc.mutation.SetDirectory(s)
	return mc
}

// SetNillableDirectory sets the "directory" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDirectory(s *string) *MediaCreate {
	if s != nil {
		mc.SetDirectory(*s)
	}
	return mc
}

// SetName sets the "name" field.
func (mc *MediaCreate) SetName(s string) *MediaCreate {
	mc.mutation.SetName(s)
	return mc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mc *MediaCreate) SetNillableName(s *string) *MediaCreate {
	if s != nil {
		mc.SetName(*s)
	}
	return mc
}

// SetOriginalName sets the "original_name" field.
func (mc *MediaCreate) SetOriginalName(s string) *MediaCreate {
	mc.mutation.SetOriginalName(s)
	return mc
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (mc *MediaCreate) SetNillableOriginalName(s *string) *MediaCreate {
	if s != nil {
		mc.SetOriginalName(*s)
	}
	return mc
}

// SetExtension sets the "extension" field.
func (mc *MediaCreate) SetExtension(s string) *MediaCreate {
	mc.mutation.SetExtension(s)
	return mc
}

// SetNillableExtension sets the "extension" field if the given value is not nil.
func (mc *MediaCreate) SetNillableExtension(s *string) *MediaCreate {
	if s != nil {
		mc.SetExtension(*s)
	}
	return mc
}

// SetMimeType sets the "mime_type" field.
func (mc *MediaCreate) SetMimeType(s string) *MediaCreate {
	mc.mutation.SetMimeType(s)
	return mc
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (mc *MediaCreate) SetNillableMimeType(s *string) *MediaCreate {
	if s != nil {
		mc.SetMimeType(*s)
	}
	return mc
}

// SetAggregateType sets the "aggregate_type" field.
func (mc *MediaCreate) SetAggregateType(s string) *MediaCreate {
	mc.mutation.SetAggregateType(s)
	return mc
}

// SetNillableAggregateType sets the "aggregate_type" field if the given value is not nil.
func (mc *MediaCreate) SetNillableAggregateType(s *string) *MediaCreate {
	if s != nil {
		mc.SetAggregateType(*s)
	}
	return mc
}

// SetSize sets the "size" field.
func (mc *MediaCreate) SetSize(u uint) *MediaCreate {
	mc.mutation.SetSize(u)
	return mc
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (mc *MediaCreate) SetNillableSize(u *uint) *MediaCreate {
	if u != nil {
		mc.SetSize(*u)
	}
	return mc
}

// SetDescription sets the "description" field.
func (mc *MediaCreate) SetDescription(s string) *MediaCreate {
	mc.mutation.SetDescription(s)
	return mc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (mc *MediaCreate) SetNillableDescription(s *string) *MediaCreate {
	if s != nil {
		mc.SetDescription(*s)
	}
	return mc
}

// SetIsVariant sets the "is_variant" field.
func (mc *MediaCreate) SetIsVariant(b bool) *MediaCreate {
	mc.mutation.SetIsVariant(b)
	return mc
}

// SetNillableIsVariant sets the "is_variant" field if the given value is not nil.
func (mc *MediaCreate) SetNillableIsVariant(b *bool) *MediaCreate {
	if b != nil {
		mc.SetIsVariant(*b)
	}
	return mc
}

// SetVariantName sets the "variant_name" field.
func (mc *MediaCreate) SetVariantName(s string) *MediaCreate {
	mc.mutation.SetVariantName(s)
	return mc
}

// SetNillableVariantName sets the "variant_name" field if the given value is not nil.
func (mc *MediaCreate) SetNillableVariantName(s *string) *MediaCreate {
	if s != nil {
		mc.SetVariantName(*s)
	}
	return mc
}

// SetOriginalMediaID sets the "original_media_id" field.
func (mc *MediaCreate) SetOriginalMediaID(s string) *MediaCreate {
	mc.mutation.SetOriginalMediaID(s)
	return mc
}

// SetNillableOriginalMediaID sets the "original_media_id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableOriginalMediaID(s *string) *MediaCreate {
	if s != nil {
		mc.SetOriginalMediaID(*s)
	}
	return mc
}

// SetChecksum sets the "checksum" field.
func (mc *MediaCreate) SetChecksum(s string) *MediaCreate {
	mc.mutation.SetChecksum(s)
	return mc
}

// SetNillableChecksum sets the "checksum" field if the given value is not nil.
func (mc *MediaCreate) SetNillableChecksum(s *string) *MediaCreate {
	if s != nil {
		mc.SetChecksum(*s)
	}
	return mc
}

// SetWorkspaceID sets the "workspace_id" field.
func (mc *MediaCreate) SetWorkspaceID(s string) *MediaCreate {
	mc.mutation.SetWorkspaceID(s)
	return mc
}

// SetAlt sets the "alt" field.
func (mc *MediaCreate) SetAlt(s string) *MediaCreate {
	mc.mutation.SetAlt(s)
	return mc
}

// SetNillableAlt sets the "alt" field if the given value is not nil.
func (mc *MediaCreate) SetNillableAlt(s *string) *MediaCreate {
	if s != nil {
		mc.SetAlt(*s)
	}
	return mc
}

// SetUID sets the "uid" field.
func (mc *MediaCreate) SetUID(s string) *MediaCreate {
	mc.mutation.SetUID(s)
	return mc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (mc *MediaCreate) SetNillableUID(s *string) *MediaCreate {
	if s != nil {
		mc.SetUID(*s)
	}
	return mc
}

// SetStatus sets the "status" field.
func (mc *MediaCreate) SetStatus(b bool) *MediaCreate {
	mc.mutation.SetStatus(b)
	return mc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mc *MediaCreate) SetNillableStatus(b *bool) *MediaCreate {
	if b != nil {
		mc.SetStatus(*b)
	}
	return mc
}

// SetID sets the "id" field.
func (mc *MediaCreate) SetID(s string) *MediaCreate {
	mc.mutation.SetID(s)
	return mc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (mc *MediaCreate) SetNillableID(s *string) *MediaCreate {
	if s != nil {
		mc.SetID(*s)
	}
	return mc
}

// AddMediableIDs adds the "mediables" edge to the Mediable entity by IDs.
func (mc *MediaCreate) AddMediableIDs(ids ...string) *MediaCreate {
	mc.mutation.AddMediableIDs(ids...)
	return mc
}

// AddMediables adds the "mediables" edges to the Mediable entity.
func (mc *MediaCreate) AddMediables(m ...*Mediable) *MediaCreate {
	ids := make([]string, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return mc.AddMediableIDs(ids...)
}

// Mutation returns the MediaMutation object of the builder.
func (mc *MediaCreate) Mutation() *MediaMutation {
	return mc.mutation
}

// Save creates the Media in the database.
func (mc *MediaCreate) Save(ctx context.Context) (*Media, error) {
	mc.defaults()
	return withHooks(ctx, mc.sqlSave, mc.mutation, mc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mc *MediaCreate) SaveX(ctx context.Context) *Media {
	v, err := mc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mc *MediaCreate) Exec(ctx context.Context) error {
	_, err := mc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mc *MediaCreate) ExecX(ctx context.Context) {
	if err := mc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mc *MediaCreate) defaults() {
	if _, ok := mc.mutation.Status(); !ok {
		v := media.DefaultStatus
		mc.mutation.SetStatus(v)
	}
	if _, ok := mc.mutation.ID(); !ok {
		v := media.DefaultID()
		mc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mc *MediaCreate) check() error {
	if _, ok := mc.mutation.WorkspaceID(); !ok {
		return &ValidationError{Name: "workspace_id", err: errors.New(`ent: missing required field "Media.workspace_id"`)}
	}
	return nil
}

func (mc *MediaCreate) sqlSave(ctx context.Context) (*Media, error) {
	if err := mc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Media.ID type: %T", _spec.ID.Value)
		}
	}
	mc.mutation.id = &_node.ID
	mc.mutation.done = true
	return _node, nil
}

func (mc *MediaCreate) createSpec() (*Media, *sqlgraph.CreateSpec) {
	var (
		_node = &Media{config: mc.config}
		_spec = sqlgraph.NewCreateSpec(media.Table, sqlgraph.NewFieldSpec(media.FieldID, field.TypeString))
	)
	_spec.OnConflict = mc.conflict
	if id, ok := mc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mc.mutation.AppID(); ok {
		_spec.SetField(media.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := mc.mutation.Disk(); ok {
		_spec.SetField(media.FieldDisk, field.TypeString, value)
		_node.Disk = value
	}
	if value, ok := mc.mutation.Directory(); ok {
		_spec.SetField(media.FieldDirectory, field.TypeString, value)
		_node.Directory = value
	}
	if value, ok := mc.mutation.Name(); ok {
		_spec.SetField(media.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mc.mutation.OriginalName(); ok {
		_spec.SetField(media.FieldOriginalName, field.TypeString, value)
		_node.OriginalName = value
	}
	if value, ok := mc.mutation.Extension(); ok {
		_spec.SetField(media.FieldExtension, field.TypeString, value)
		_node.Extension = value
	}
	if value, ok := mc.mutation.MimeType(); ok {
		_spec.SetField(media.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := mc.mutation.AggregateType(); ok {
		_spec.SetField(media.FieldAggregateType, field.TypeString, value)
		_node.AggregateType = value
	}
	if value, ok := mc.mutation.Size(); ok {
		_spec.SetField(media.FieldSize, field.TypeUint, value)
		_node.Size = value
	}
	if value, ok := mc.mutation.Description(); ok {
		_spec.SetField(media.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := mc.mutation.IsVariant(); ok {
		_spec.SetField(media.FieldIsVariant, field.TypeBool, value)
		_node.IsVariant = value
	}
	if value, ok := mc.mutation.VariantName(); ok {
		_spec.SetField(media.FieldVariantName, field.TypeString, value)
		_node.VariantName = value
	}
	if value, ok := mc.mutation.OriginalMediaID(); ok {
		_spec.SetField(media.FieldOriginalMediaID, field.TypeString, value)
		_node.OriginalMediaID = value
	}
	if value, ok := mc.mutation.Checksum(); ok {
		_spec.SetField(media.FieldChecksum, field.TypeString, value)
		_node.Checksum = value
	}
	if value, ok := mc.mutation.WorkspaceID(); ok {
		_spec.SetField(media.FieldWorkspaceID, field.TypeString, value)
		_node.WorkspaceID = value
	}
	if value, ok := mc.mutation.Alt(); ok {
		_spec.SetField(media.FieldAlt, field.TypeString, value)
		_node.Alt = value
	}
	if value, ok := mc.mutation.UID(); ok {
		_spec.SetField(media.FieldUID, field.TypeString, value)
		_node.UID = value
	}
	if value, ok := mc.mutation.Status(); ok {
		_spec.SetField(media.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if nodes := mc.mutation.MediablesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   media.MediablesTable,
			Columns: []string{media.MediablesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mediable.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Media.Create().
//		SetAppID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MediaUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
func (mc *MediaCreate) OnConflict(opts ...sql.ConflictOption) *MediaUpsertOne {
	mc.conflict = opts
	return &MediaUpsertOne{
		create: mc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mc *MediaCreate) OnConflictColumns(columns ...string) *MediaUpsertOne {
	mc.conflict = append(mc.conflict, sql.ConflictColumns(columns...))
	return &MediaUpsertOne{
		create: mc,
	}
}

type (
	// MediaUpsertOne is the builder for "upsert"-ing
	//  one Media node.
	MediaUpsertOne struct {
		create *MediaCreate
	}

	// MediaUpsert is the "OnConflict" setter.
	MediaUpsert struct {
		*sql.UpdateSet
	}
)

// SetAppID sets the "app_id" field.
func (u *MediaUpsert) SetAppID(v string) *MediaUpsert {
	u.Set(media.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsert) UpdateAppID() *MediaUpsert {
	u.SetExcluded(media.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *MediaUpsert) ClearAppID() *MediaUpsert {
	u.SetNull(media.FieldAppID)
	return u
}

// SetDisk sets the "disk" field.
func (u *MediaUpsert) SetDisk(v string) *MediaUpsert {
	u.Set(media.FieldDisk, v)
	return u
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *MediaUpsert) UpdateDisk() *MediaUpsert {
	u.SetExcluded(media.FieldDisk)
	return u
}

// ClearDisk clears the value of the "disk" field.
func (u *MediaUpsert) ClearDisk() *MediaUpsert {
	u.SetNull(media.FieldDisk)
	return u
}

// SetDirectory sets the "directory" field.
func (u *MediaUpsert) SetDirectory(v string) *MediaUpsert {
	u.Set(media.FieldDirectory, v)
	return u
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *MediaUpsert) UpdateDirectory() *MediaUpsert {
	u.SetExcluded(media.FieldDirectory)
	return u
}

// ClearDirectory clears the value of the "directory" field.
func (u *MediaUpsert) ClearDirectory() *MediaUpsert {
	u.SetNull(media.FieldDirectory)
	return u
}

// SetName sets the "name" field.
func (u *MediaUpsert) SetName(v string) *MediaUpsert {
	u.Set(media.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsert) UpdateName() *MediaUpsert {
	u.SetExcluded(media.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsert) ClearName() *MediaUpsert {
	u.SetNull(media.FieldName)
	return u
}

// SetOriginalName sets the "original_name" field.
func (u *MediaUpsert) SetOriginalName(v string) *MediaUpsert {
	u.Set(media.FieldOriginalName, v)
	return u
}

// UpdateOriginalName sets the "original_name" field to the value that was provided on create.
func (u *MediaUpsert) UpdateOriginalName() *MediaUpsert {
	u.SetExcluded(media.FieldOriginalName)
	return u
}

// ClearOriginalName clears the value of the "original_name" field.
func (u *MediaUpsert) ClearOriginalName() *MediaUpsert {
	u.SetNull(media.FieldOriginalName)
	return u
}

// SetExtension sets the "extension" field.
func (u *MediaUpsert) SetExtension(v string) *MediaUpsert {
	u.Set(media.FieldExtension, v)
	return u
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *MediaUpsert) UpdateExtension() *MediaUpsert {
	u.SetExcluded(media.FieldExtension)
	return u
}

// ClearExtension clears the value of the "extension" field.
func (u *MediaUpsert) ClearExtension() *MediaUpsert {
	u.SetNull(media.FieldExtension)
	return u
}

// SetMimeType sets the "mime_type" field.
func (u *MediaUpsert) SetMimeType(v string) *MediaUpsert {
	u.Set(media.FieldMimeType, v)
	return u
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *MediaUpsert) UpdateMimeType() *MediaUpsert {
	u.SetExcluded(media.FieldMimeType)
	return u
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *MediaUpsert) ClearMimeType() *MediaUpsert {
	u.SetNull(media.FieldMimeType)
	return u
}

// SetAggregateType sets the "aggregate_type" field.
func (u *MediaUpsert) SetAggregateType(v string) *MediaUpsert {
	u.Set(media.FieldAggregateType, v)
	return u
}

// UpdateAggregateType sets the "aggregate_type" field to the value that was provided on create.
func (u *MediaUpsert) UpdateAggregateType() *MediaUpsert {
	u.SetExcluded(media.FieldAggregateType)
	return u
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (u *MediaUpsert) ClearAggregateType() *MediaUpsert {
	u.SetNull(media.FieldAggregateType)
	return u
}

// SetSize sets the "size" field.
func (u *MediaUpsert) SetSize(v uint) *MediaUpsert {
	u.Set(media.FieldSize, v)
	return u
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *MediaUpsert) UpdateSize() *MediaUpsert {
	u.SetExcluded(media.FieldSize)
	return u
}

// AddSize adds v to the "size" field.
func (u *MediaUpsert) AddSize(v uint) *MediaUpsert {
	u.Add(media.FieldSize, v)
	return u
}

// ClearSize clears the value of the "size" field.
func (u *MediaUpsert) ClearSize() *MediaUpsert {
	u.SetNull(media.FieldSize)
	return u
}

// SetDescription sets the "description" field.
func (u *MediaUpsert) SetDescription(v string) *MediaUpsert {
	u.Set(media.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MediaUpsert) UpdateDescription() *MediaUpsert {
	u.SetExcluded(media.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *MediaUpsert) ClearDescription() *MediaUpsert {
	u.SetNull(media.FieldDescription)
	return u
}

// SetIsVariant sets the "is_variant" field.
func (u *MediaUpsert) SetIsVariant(v bool) *MediaUpsert {
	u.Set(media.FieldIsVariant, v)
	return u
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *MediaUpsert) UpdateIsVariant() *MediaUpsert {
	u.SetExcluded(media.FieldIsVariant)
	return u
}

// ClearIsVariant clears the value of the "is_variant" field.
func (u *MediaUpsert) ClearIsVariant() *MediaUpsert {
	u.SetNull(media.FieldIsVariant)
	return u
}

// SetVariantName sets the "variant_name" field.
func (u *MediaUpsert) SetVariantName(v string) *MediaUpsert {
	u.Set(media.FieldVariantName, v)
	return u
}

// UpdateVariantName sets the "variant_name" field to the value that was provided on create.
func (u *MediaUpsert) UpdateVariantName() *MediaUpsert {
	u.SetExcluded(media.FieldVariantName)
	return u
}

// ClearVariantName clears the value of the "variant_name" field.
func (u *MediaUpsert) ClearVariantName() *MediaUpsert {
	u.SetNull(media.FieldVariantName)
	return u
}

// SetOriginalMediaID sets the "original_media_id" field.
func (u *MediaUpsert) SetOriginalMediaID(v string) *MediaUpsert {
	u.Set(media.FieldOriginalMediaID, v)
	return u
}

// UpdateOriginalMediaID sets the "original_media_id" field to the value that was provided on create.
func (u *MediaUpsert) UpdateOriginalMediaID() *MediaUpsert {
	u.SetExcluded(media.FieldOriginalMediaID)
	return u
}

// ClearOriginalMediaID clears the value of the "original_media_id" field.
func (u *MediaUpsert) ClearOriginalMediaID() *MediaUpsert {
	u.SetNull(media.FieldOriginalMediaID)
	return u
}

// SetChecksum sets the "checksum" field.
func (u *MediaUpsert) SetChecksum(v string) *MediaUpsert {
	u.Set(media.FieldChecksum, v)
	return u
}

// UpdateChecksum sets the "checksum" field to the value that was provided on create.
func (u *MediaUpsert) UpdateChecksum() *MediaUpsert {
	u.SetExcluded(media.FieldChecksum)
	return u
}

// ClearChecksum clears the value of the "checksum" field.
func (u *MediaUpsert) ClearChecksum() *MediaUpsert {
	u.SetNull(media.FieldChecksum)
	return u
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *MediaUpsert) SetWorkspaceID(v string) *MediaUpsert {
	u.Set(media.FieldWorkspaceID, v)
	return u
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *MediaUpsert) UpdateWorkspaceID() *MediaUpsert {
	u.SetExcluded(media.FieldWorkspaceID)
	return u
}

// SetAlt sets the "alt" field.
func (u *MediaUpsert) SetAlt(v string) *MediaUpsert {
	u.Set(media.FieldAlt, v)
	return u
}

// UpdateAlt sets the "alt" field to the value that was provided on create.
func (u *MediaUpsert) UpdateAlt() *MediaUpsert {
	u.SetExcluded(media.FieldAlt)
	return u
}

// ClearAlt clears the value of the "alt" field.
func (u *MediaUpsert) ClearAlt() *MediaUpsert {
	u.SetNull(media.FieldAlt)
	return u
}

// SetUID sets the "uid" field.
func (u *MediaUpsert) SetUID(v string) *MediaUpsert {
	u.Set(media.FieldUID, v)
	return u
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *MediaUpsert) UpdateUID() *MediaUpsert {
	u.SetExcluded(media.FieldUID)
	return u
}

// ClearUID clears the value of the "uid" field.
func (u *MediaUpsert) ClearUID() *MediaUpsert {
	u.SetNull(media.FieldUID)
	return u
}

// SetStatus sets the "status" field.
func (u *MediaUpsert) SetStatus(v bool) *MediaUpsert {
	u.Set(media.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MediaUpsert) UpdateStatus() *MediaUpsert {
	u.SetExcluded(media.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *MediaUpsert) ClearStatus() *MediaUpsert {
	u.SetNull(media.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(media.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MediaUpsertOne) UpdateNewValues() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(media.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Media.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MediaUpsertOne) Ignore() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MediaUpsertOne) DoNothing() *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MediaCreate.OnConflict
// documentation for more info.
func (u *MediaUpsertOne) Update(set func(*MediaUpsert)) *MediaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *MediaUpsertOne) SetAppID(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateAppID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *MediaUpsertOne) ClearAppID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAppID()
	})
}

// SetDisk sets the "disk" field.
func (u *MediaUpsertOne) SetDisk(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateDisk() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDisk()
	})
}

// ClearDisk clears the value of the "disk" field.
func (u *MediaUpsertOne) ClearDisk() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDisk()
	})
}

// SetDirectory sets the "directory" field.
func (u *MediaUpsertOne) SetDirectory(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateDirectory() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDirectory()
	})
}

// ClearDirectory clears the value of the "directory" field.
func (u *MediaUpsertOne) ClearDirectory() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDirectory()
	})
}

// SetName sets the "name" field.
func (u *MediaUpsertOne) SetName(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsertOne) ClearName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearName()
	})
}

// SetOriginalName sets the "original_name" field.
func (u *MediaUpsertOne) SetOriginalName(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetOriginalName(v)
	})
}

// UpdateOriginalName sets the "original_name" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateOriginalName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateOriginalName()
	})
}

// ClearOriginalName clears the value of the "original_name" field.
func (u *MediaUpsertOne) ClearOriginalName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearOriginalName()
	})
}

// SetExtension sets the "extension" field.
func (u *MediaUpsertOne) SetExtension(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetExtension(v)
	})
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateExtension() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateExtension()
	})
}

// ClearExtension clears the value of the "extension" field.
func (u *MediaUpsertOne) ClearExtension() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearExtension()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *MediaUpsertOne) SetMimeType(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateMimeType() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *MediaUpsertOne) ClearMimeType() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearMimeType()
	})
}

// SetAggregateType sets the "aggregate_type" field.
func (u *MediaUpsertOne) SetAggregateType(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetAggregateType(v)
	})
}

// UpdateAggregateType sets the "aggregate_type" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateAggregateType() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAggregateType()
	})
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (u *MediaUpsertOne) ClearAggregateType() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAggregateType()
	})
}

// SetSize sets the "size" field.
func (u *MediaUpsertOne) SetSize(v uint) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *MediaUpsertOne) AddSize(v uint) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateSize() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *MediaUpsertOne) ClearSize() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearSize()
	})
}

// SetDescription sets the "description" field.
func (u *MediaUpsertOne) SetDescription(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateDescription() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MediaUpsertOne) ClearDescription() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDescription()
	})
}

// SetIsVariant sets the "is_variant" field.
func (u *MediaUpsertOne) SetIsVariant(v bool) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetIsVariant(v)
	})
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateIsVariant() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateIsVariant()
	})
}

// ClearIsVariant clears the value of the "is_variant" field.
func (u *MediaUpsertOne) ClearIsVariant() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearIsVariant()
	})
}

// SetVariantName sets the "variant_name" field.
func (u *MediaUpsertOne) SetVariantName(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetVariantName(v)
	})
}

// UpdateVariantName sets the "variant_name" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateVariantName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateVariantName()
	})
}

// ClearVariantName clears the value of the "variant_name" field.
func (u *MediaUpsertOne) ClearVariantName() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearVariantName()
	})
}

// SetOriginalMediaID sets the "original_media_id" field.
func (u *MediaUpsertOne) SetOriginalMediaID(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetOriginalMediaID(v)
	})
}

// UpdateOriginalMediaID sets the "original_media_id" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateOriginalMediaID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateOriginalMediaID()
	})
}

// ClearOriginalMediaID clears the value of the "original_media_id" field.
func (u *MediaUpsertOne) ClearOriginalMediaID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearOriginalMediaID()
	})
}

// SetChecksum sets the "checksum" field.
func (u *MediaUpsertOne) SetChecksum(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetChecksum(v)
	})
}

// UpdateChecksum sets the "checksum" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateChecksum() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateChecksum()
	})
}

// ClearChecksum clears the value of the "checksum" field.
func (u *MediaUpsertOne) ClearChecksum() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearChecksum()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *MediaUpsertOne) SetWorkspaceID(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateWorkspaceID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetAlt sets the "alt" field.
func (u *MediaUpsertOne) SetAlt(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetAlt(v)
	})
}

// UpdateAlt sets the "alt" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateAlt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAlt()
	})
}

// ClearAlt clears the value of the "alt" field.
func (u *MediaUpsertOne) ClearAlt() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAlt()
	})
}

// SetUID sets the "uid" field.
func (u *MediaUpsertOne) SetUID(v string) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateUID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateUID()
	})
}

// ClearUID clears the value of the "uid" field.
func (u *MediaUpsertOne) ClearUID() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearUID()
	})
}

// SetStatus sets the "status" field.
func (u *MediaUpsertOne) SetStatus(v bool) *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MediaUpsertOne) UpdateStatus() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MediaUpsertOne) ClearStatus() *MediaUpsertOne {
	return u.Update(func(s *MediaUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *MediaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MediaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MediaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MediaUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: MediaUpsertOne.ID is not supported by MySQL driver. Use MediaUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MediaUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MediaCreateBulk is the builder for creating many Media entities in bulk.
type MediaCreateBulk struct {
	config
	err      error
	builders []*MediaCreate
	conflict []sql.ConflictOption
}

// Save creates the Media entities in the database.
func (mcb *MediaCreateBulk) Save(ctx context.Context) ([]*Media, error) {
	if mcb.err != nil {
		return nil, mcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mcb.builders))
	nodes := make([]*Media, len(mcb.builders))
	mutators := make([]Mutator, len(mcb.builders))
	for i := range mcb.builders {
		func(i int, root context.Context) {
			builder := mcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MediaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mcb *MediaCreateBulk) SaveX(ctx context.Context) []*Media {
	v, err := mcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcb *MediaCreateBulk) Exec(ctx context.Context) error {
	_, err := mcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcb *MediaCreateBulk) ExecX(ctx context.Context) {
	if err := mcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Media.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MediaUpsert) {
//			SetAppID(v+v).
//		}).
//		Exec(ctx)
func (mcb *MediaCreateBulk) OnConflict(opts ...sql.ConflictOption) *MediaUpsertBulk {
	mcb.conflict = opts
	return &MediaUpsertBulk{
		create: mcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcb *MediaCreateBulk) OnConflictColumns(columns ...string) *MediaUpsertBulk {
	mcb.conflict = append(mcb.conflict, sql.ConflictColumns(columns...))
	return &MediaUpsertBulk{
		create: mcb,
	}
}

// MediaUpsertBulk is the builder for "upsert"-ing
// a bulk of Media nodes.
type MediaUpsertBulk struct {
	create *MediaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(media.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *MediaUpsertBulk) UpdateNewValues() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(media.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Media.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MediaUpsertBulk) Ignore() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MediaUpsertBulk) DoNothing() *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MediaCreateBulk.OnConflict
// documentation for more info.
func (u *MediaUpsertBulk) Update(set func(*MediaUpsert)) *MediaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MediaUpsert{UpdateSet: update})
	}))
	return u
}

// SetAppID sets the "app_id" field.
func (u *MediaUpsertBulk) SetAppID(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateAppID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *MediaUpsertBulk) ClearAppID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAppID()
	})
}

// SetDisk sets the "disk" field.
func (u *MediaUpsertBulk) SetDisk(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetDisk(v)
	})
}

// UpdateDisk sets the "disk" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateDisk() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDisk()
	})
}

// ClearDisk clears the value of the "disk" field.
func (u *MediaUpsertBulk) ClearDisk() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDisk()
	})
}

// SetDirectory sets the "directory" field.
func (u *MediaUpsertBulk) SetDirectory(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetDirectory(v)
	})
}

// UpdateDirectory sets the "directory" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateDirectory() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDirectory()
	})
}

// ClearDirectory clears the value of the "directory" field.
func (u *MediaUpsertBulk) ClearDirectory() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDirectory()
	})
}

// SetName sets the "name" field.
func (u *MediaUpsertBulk) SetName(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MediaUpsertBulk) ClearName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearName()
	})
}

// SetOriginalName sets the "original_name" field.
func (u *MediaUpsertBulk) SetOriginalName(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetOriginalName(v)
	})
}

// UpdateOriginalName sets the "original_name" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateOriginalName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateOriginalName()
	})
}

// ClearOriginalName clears the value of the "original_name" field.
func (u *MediaUpsertBulk) ClearOriginalName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearOriginalName()
	})
}

// SetExtension sets the "extension" field.
func (u *MediaUpsertBulk) SetExtension(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetExtension(v)
	})
}

// UpdateExtension sets the "extension" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateExtension() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateExtension()
	})
}

// ClearExtension clears the value of the "extension" field.
func (u *MediaUpsertBulk) ClearExtension() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearExtension()
	})
}

// SetMimeType sets the "mime_type" field.
func (u *MediaUpsertBulk) SetMimeType(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetMimeType(v)
	})
}

// UpdateMimeType sets the "mime_type" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateMimeType() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateMimeType()
	})
}

// ClearMimeType clears the value of the "mime_type" field.
func (u *MediaUpsertBulk) ClearMimeType() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearMimeType()
	})
}

// SetAggregateType sets the "aggregate_type" field.
func (u *MediaUpsertBulk) SetAggregateType(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetAggregateType(v)
	})
}

// UpdateAggregateType sets the "aggregate_type" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateAggregateType() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAggregateType()
	})
}

// ClearAggregateType clears the value of the "aggregate_type" field.
func (u *MediaUpsertBulk) ClearAggregateType() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAggregateType()
	})
}

// SetSize sets the "size" field.
func (u *MediaUpsertBulk) SetSize(v uint) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetSize(v)
	})
}

// AddSize adds v to the "size" field.
func (u *MediaUpsertBulk) AddSize(v uint) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.AddSize(v)
	})
}

// UpdateSize sets the "size" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateSize() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateSize()
	})
}

// ClearSize clears the value of the "size" field.
func (u *MediaUpsertBulk) ClearSize() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearSize()
	})
}

// SetDescription sets the "description" field.
func (u *MediaUpsertBulk) SetDescription(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateDescription() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *MediaUpsertBulk) ClearDescription() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearDescription()
	})
}

// SetIsVariant sets the "is_variant" field.
func (u *MediaUpsertBulk) SetIsVariant(v bool) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetIsVariant(v)
	})
}

// UpdateIsVariant sets the "is_variant" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateIsVariant() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateIsVariant()
	})
}

// ClearIsVariant clears the value of the "is_variant" field.
func (u *MediaUpsertBulk) ClearIsVariant() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearIsVariant()
	})
}

// SetVariantName sets the "variant_name" field.
func (u *MediaUpsertBulk) SetVariantName(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetVariantName(v)
	})
}

// UpdateVariantName sets the "variant_name" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateVariantName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateVariantName()
	})
}

// ClearVariantName clears the value of the "variant_name" field.
func (u *MediaUpsertBulk) ClearVariantName() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearVariantName()
	})
}

// SetOriginalMediaID sets the "original_media_id" field.
func (u *MediaUpsertBulk) SetOriginalMediaID(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetOriginalMediaID(v)
	})
}

// UpdateOriginalMediaID sets the "original_media_id" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateOriginalMediaID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateOriginalMediaID()
	})
}

// ClearOriginalMediaID clears the value of the "original_media_id" field.
func (u *MediaUpsertBulk) ClearOriginalMediaID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearOriginalMediaID()
	})
}

// SetChecksum sets the "checksum" field.
func (u *MediaUpsertBulk) SetChecksum(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetChecksum(v)
	})
}

// UpdateChecksum sets the "checksum" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateChecksum() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateChecksum()
	})
}

// ClearChecksum clears the value of the "checksum" field.
func (u *MediaUpsertBulk) ClearChecksum() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearChecksum()
	})
}

// SetWorkspaceID sets the "workspace_id" field.
func (u *MediaUpsertBulk) SetWorkspaceID(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetWorkspaceID(v)
	})
}

// UpdateWorkspaceID sets the "workspace_id" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateWorkspaceID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateWorkspaceID()
	})
}

// SetAlt sets the "alt" field.
func (u *MediaUpsertBulk) SetAlt(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetAlt(v)
	})
}

// UpdateAlt sets the "alt" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateAlt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateAlt()
	})
}

// ClearAlt clears the value of the "alt" field.
func (u *MediaUpsertBulk) ClearAlt() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearAlt()
	})
}

// SetUID sets the "uid" field.
func (u *MediaUpsertBulk) SetUID(v string) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetUID(v)
	})
}

// UpdateUID sets the "uid" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateUID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateUID()
	})
}

// ClearUID clears the value of the "uid" field.
func (u *MediaUpsertBulk) ClearUID() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearUID()
	})
}

// SetStatus sets the "status" field.
func (u *MediaUpsertBulk) SetStatus(v bool) *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MediaUpsertBulk) UpdateStatus() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MediaUpsertBulk) ClearStatus() *MediaUpsertBulk {
	return u.Update(func(s *MediaUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *MediaUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MediaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MediaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MediaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
