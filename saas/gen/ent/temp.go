// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"lace/jsontype"
	"saas/gen/ent/temp"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Temp is the model entity for the Temp schema.
type Temp struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Body holds the value of the "body" field.
	Body jsontype.JSON `json:"body,omitempty"`
	// Meta holds the value of the "meta" field.
	Meta         jsontype.JSON `json:"meta,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Temp) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case temp.FieldBody, temp.FieldMeta:
			values[i] = new(jsontype.JSON)
		case temp.FieldID, temp.FieldAppID, temp.FieldIP, temp.FieldType:
			values[i] = new(sql.NullString)
		case temp.FieldCreatedAt, temp.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Temp fields.
func (t *Temp) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case temp.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case temp.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case temp.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case temp.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				t.AppID = value.String
			}
		case temp.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				t.IP = value.String
			}
		case temp.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case temp.FieldBody:
			if value, ok := values[i].(*jsontype.JSON); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Body); err != nil {
					return fmt.Errorf("unmarshal field body: %w", err)
				}
			}
		case temp.FieldMeta:
			if value, ok := values[i].(*jsontype.JSON); !ok {
				return fmt.Errorf("unexpected type %T for field meta", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Meta); err != nil {
					return fmt.Errorf("unmarshal field meta: %w", err)
				}
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Temp.
// This includes values selected through modifiers, order, etc.
func (t *Temp) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Temp.
// Note that you need to call Temp.Unwrap() before calling this method if this Temp
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Temp) Update() *TempUpdateOne {
	return NewTempClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Temp entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Temp) Unwrap() *Temp {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Temp is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Temp) String() string {
	var builder strings.Builder
	builder.WriteString("Temp(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(t.AppID)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(t.IP)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(fmt.Sprintf("%v", t.Body))
	builder.WriteString(", ")
	builder.WriteString("meta=")
	builder.WriteString(fmt.Sprintf("%v", t.Meta))
	builder.WriteByte(')')
	return builder.String()
}

// Temps is a parsable slice of Temp.
type Temps []*Temp
