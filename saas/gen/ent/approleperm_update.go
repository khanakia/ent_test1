// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppRolePermUpdate is the builder for updating AppRolePerm entities.
type AppRolePermUpdate struct {
	config
	hooks     []Hook
	mutation  *AppRolePermMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppRolePermUpdate builder.
func (arpu *AppRolePermUpdate) Where(ps ...predicate.AppRolePerm) *AppRolePermUpdate {
	arpu.mutation.Where(ps...)
	return arpu
}

// SetUpdatedAt sets the "updated_at" field.
func (arpu *AppRolePermUpdate) SetUpdatedAt(t time.Time) *AppRolePermUpdate {
	arpu.mutation.SetUpdatedAt(t)
	return arpu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (arpu *AppRolePermUpdate) ClearUpdatedAt() *AppRolePermUpdate {
	arpu.mutation.ClearUpdatedAt()
	return arpu
}

// SetAppRoleID sets the "app_role_id" field.
func (arpu *AppRolePermUpdate) SetAppRoleID(s string) *AppRolePermUpdate {
	arpu.mutation.SetAppRoleID(s)
	return arpu
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (arpu *AppRolePermUpdate) SetNillableAppRoleID(s *string) *AppRolePermUpdate {
	if s != nil {
		arpu.SetAppRoleID(*s)
	}
	return arpu
}

// SetAppPermID sets the "app_perm_id" field.
func (arpu *AppRolePermUpdate) SetAppPermID(s string) *AppRolePermUpdate {
	arpu.mutation.SetAppPermID(s)
	return arpu
}

// SetNillableAppPermID sets the "app_perm_id" field if the given value is not nil.
func (arpu *AppRolePermUpdate) SetNillableAppPermID(s *string) *AppRolePermUpdate {
	if s != nil {
		arpu.SetAppPermID(*s)
	}
	return arpu
}

// SetAppID sets the "app_id" field.
func (arpu *AppRolePermUpdate) SetAppID(s string) *AppRolePermUpdate {
	arpu.mutation.SetAppID(s)
	return arpu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (arpu *AppRolePermUpdate) SetNillableAppID(s *string) *AppRolePermUpdate {
	if s != nil {
		arpu.SetAppID(*s)
	}
	return arpu
}

// SetApp sets the "app" edge to the App entity.
func (arpu *AppRolePermUpdate) SetApp(a *App) *AppRolePermUpdate {
	return arpu.SetAppID(a.ID)
}

// SetAppPerm sets the "app_perm" edge to the AppPerm entity.
func (arpu *AppRolePermUpdate) SetAppPerm(a *AppPerm) *AppRolePermUpdate {
	return arpu.SetAppPermID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (arpu *AppRolePermUpdate) SetAppRole(a *AppRole) *AppRolePermUpdate {
	return arpu.SetAppRoleID(a.ID)
}

// Mutation returns the AppRolePermMutation object of the builder.
func (arpu *AppRolePermUpdate) Mutation() *AppRolePermMutation {
	return arpu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (arpu *AppRolePermUpdate) ClearApp() *AppRolePermUpdate {
	arpu.mutation.ClearApp()
	return arpu
}

// ClearAppPerm clears the "app_perm" edge to the AppPerm entity.
func (arpu *AppRolePermUpdate) ClearAppPerm() *AppRolePermUpdate {
	arpu.mutation.ClearAppPerm()
	return arpu
}

// ClearAppRole clears the "app_role" edge to the AppRole entity.
func (arpu *AppRolePermUpdate) ClearAppRole() *AppRolePermUpdate {
	arpu.mutation.ClearAppRole()
	return arpu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (arpu *AppRolePermUpdate) Save(ctx context.Context) (int, error) {
	arpu.defaults()
	return withHooks(ctx, arpu.sqlSave, arpu.mutation, arpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arpu *AppRolePermUpdate) SaveX(ctx context.Context) int {
	affected, err := arpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (arpu *AppRolePermUpdate) Exec(ctx context.Context) error {
	_, err := arpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpu *AppRolePermUpdate) ExecX(ctx context.Context) {
	if err := arpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arpu *AppRolePermUpdate) defaults() {
	if _, ok := arpu.mutation.UpdatedAt(); !ok && !arpu.mutation.UpdatedAtCleared() {
		v := approleperm.UpdateDefaultUpdatedAt()
		arpu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arpu *AppRolePermUpdate) check() error {
	if arpu.mutation.AppCleared() && len(arpu.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app"`)
	}
	if arpu.mutation.AppPermCleared() && len(arpu.mutation.AppPermIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app_perm"`)
	}
	if arpu.mutation.AppRoleCleared() && len(arpu.mutation.AppRoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app_role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (arpu *AppRolePermUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRolePermUpdate {
	arpu.modifiers = append(arpu.modifiers, modifiers...)
	return arpu
}

func (arpu *AppRolePermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := arpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(approleperm.Table, approleperm.Columns, sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString))
	if ps := arpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arpu.mutation.CreatedAtCleared() {
		_spec.ClearField(approleperm.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := arpu.mutation.UpdatedAt(); ok {
		_spec.SetField(approleperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if arpu.mutation.UpdatedAtCleared() {
		_spec.ClearField(approleperm.FieldUpdatedAt, field.TypeTime)
	}
	if arpu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppTable,
			Columns: []string{approleperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppTable,
			Columns: []string{approleperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpu.mutation.AppPermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppPermTable,
			Columns: []string{approleperm.AppPermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpu.mutation.AppPermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppPermTable,
			Columns: []string{approleperm.AppPermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpu.mutation.AppRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppRoleTable,
			Columns: []string{approleperm.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpu.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppRoleTable,
			Columns: []string{approleperm.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(arpu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, arpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	arpu.mutation.done = true
	return n, nil
}

// AppRolePermUpdateOne is the builder for updating a single AppRolePerm entity.
type AppRolePermUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppRolePermMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (arpuo *AppRolePermUpdateOne) SetUpdatedAt(t time.Time) *AppRolePermUpdateOne {
	arpuo.mutation.SetUpdatedAt(t)
	return arpuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (arpuo *AppRolePermUpdateOne) ClearUpdatedAt() *AppRolePermUpdateOne {
	arpuo.mutation.ClearUpdatedAt()
	return arpuo
}

// SetAppRoleID sets the "app_role_id" field.
func (arpuo *AppRolePermUpdateOne) SetAppRoleID(s string) *AppRolePermUpdateOne {
	arpuo.mutation.SetAppRoleID(s)
	return arpuo
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (arpuo *AppRolePermUpdateOne) SetNillableAppRoleID(s *string) *AppRolePermUpdateOne {
	if s != nil {
		arpuo.SetAppRoleID(*s)
	}
	return arpuo
}

// SetAppPermID sets the "app_perm_id" field.
func (arpuo *AppRolePermUpdateOne) SetAppPermID(s string) *AppRolePermUpdateOne {
	arpuo.mutation.SetAppPermID(s)
	return arpuo
}

// SetNillableAppPermID sets the "app_perm_id" field if the given value is not nil.
func (arpuo *AppRolePermUpdateOne) SetNillableAppPermID(s *string) *AppRolePermUpdateOne {
	if s != nil {
		arpuo.SetAppPermID(*s)
	}
	return arpuo
}

// SetAppID sets the "app_id" field.
func (arpuo *AppRolePermUpdateOne) SetAppID(s string) *AppRolePermUpdateOne {
	arpuo.mutation.SetAppID(s)
	return arpuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (arpuo *AppRolePermUpdateOne) SetNillableAppID(s *string) *AppRolePermUpdateOne {
	if s != nil {
		arpuo.SetAppID(*s)
	}
	return arpuo
}

// SetApp sets the "app" edge to the App entity.
func (arpuo *AppRolePermUpdateOne) SetApp(a *App) *AppRolePermUpdateOne {
	return arpuo.SetAppID(a.ID)
}

// SetAppPerm sets the "app_perm" edge to the AppPerm entity.
func (arpuo *AppRolePermUpdateOne) SetAppPerm(a *AppPerm) *AppRolePermUpdateOne {
	return arpuo.SetAppPermID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (arpuo *AppRolePermUpdateOne) SetAppRole(a *AppRole) *AppRolePermUpdateOne {
	return arpuo.SetAppRoleID(a.ID)
}

// Mutation returns the AppRolePermMutation object of the builder.
func (arpuo *AppRolePermUpdateOne) Mutation() *AppRolePermMutation {
	return arpuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (arpuo *AppRolePermUpdateOne) ClearApp() *AppRolePermUpdateOne {
	arpuo.mutation.ClearApp()
	return arpuo
}

// ClearAppPerm clears the "app_perm" edge to the AppPerm entity.
func (arpuo *AppRolePermUpdateOne) ClearAppPerm() *AppRolePermUpdateOne {
	arpuo.mutation.ClearAppPerm()
	return arpuo
}

// ClearAppRole clears the "app_role" edge to the AppRole entity.
func (arpuo *AppRolePermUpdateOne) ClearAppRole() *AppRolePermUpdateOne {
	arpuo.mutation.ClearAppRole()
	return arpuo
}

// Where appends a list predicates to the AppRolePermUpdate builder.
func (arpuo *AppRolePermUpdateOne) Where(ps ...predicate.AppRolePerm) *AppRolePermUpdateOne {
	arpuo.mutation.Where(ps...)
	return arpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (arpuo *AppRolePermUpdateOne) Select(field string, fields ...string) *AppRolePermUpdateOne {
	arpuo.fields = append([]string{field}, fields...)
	return arpuo
}

// Save executes the query and returns the updated AppRolePerm entity.
func (arpuo *AppRolePermUpdateOne) Save(ctx context.Context) (*AppRolePerm, error) {
	arpuo.defaults()
	return withHooks(ctx, arpuo.sqlSave, arpuo.mutation, arpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (arpuo *AppRolePermUpdateOne) SaveX(ctx context.Context) *AppRolePerm {
	node, err := arpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (arpuo *AppRolePermUpdateOne) Exec(ctx context.Context) error {
	_, err := arpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (arpuo *AppRolePermUpdateOne) ExecX(ctx context.Context) {
	if err := arpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (arpuo *AppRolePermUpdateOne) defaults() {
	if _, ok := arpuo.mutation.UpdatedAt(); !ok && !arpuo.mutation.UpdatedAtCleared() {
		v := approleperm.UpdateDefaultUpdatedAt()
		arpuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (arpuo *AppRolePermUpdateOne) check() error {
	if arpuo.mutation.AppCleared() && len(arpuo.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app"`)
	}
	if arpuo.mutation.AppPermCleared() && len(arpuo.mutation.AppPermIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app_perm"`)
	}
	if arpuo.mutation.AppRoleCleared() && len(arpuo.mutation.AppRoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppRolePerm.app_role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (arpuo *AppRolePermUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppRolePermUpdateOne {
	arpuo.modifiers = append(arpuo.modifiers, modifiers...)
	return arpuo
}

func (arpuo *AppRolePermUpdateOne) sqlSave(ctx context.Context) (_node *AppRolePerm, err error) {
	if err := arpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(approleperm.Table, approleperm.Columns, sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString))
	id, ok := arpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppRolePerm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := arpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, approleperm.FieldID)
		for _, f := range fields {
			if !approleperm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != approleperm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := arpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if arpuo.mutation.CreatedAtCleared() {
		_spec.ClearField(approleperm.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := arpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(approleperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if arpuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(approleperm.FieldUpdatedAt, field.TypeTime)
	}
	if arpuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppTable,
			Columns: []string{approleperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppTable,
			Columns: []string{approleperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpuo.mutation.AppPermCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppPermTable,
			Columns: []string{approleperm.AppPermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpuo.mutation.AppPermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppPermTable,
			Columns: []string{approleperm.AppPermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if arpuo.mutation.AppRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppRoleTable,
			Columns: []string{approleperm.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := arpuo.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   approleperm.AppRoleTable,
			Columns: []string{approleperm.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(arpuo.modifiers...)
	_node = &AppRolePerm{config: arpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, arpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{approleperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	arpuo.mutation.done = true
	return _node, nil
}
