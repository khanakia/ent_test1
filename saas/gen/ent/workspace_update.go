// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/predicate"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceinvite"
	"saas/gen/ent/workspaceuser"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceUpdate is the builder for updating Workspace entities.
type WorkspaceUpdate struct {
	config
	hooks     []Hook
	mutation  *WorkspaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WorkspaceUpdate builder.
func (wu *WorkspaceUpdate) Where(ps ...predicate.Workspace) *WorkspaceUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetUpdatedAt sets the "updated_at" field.
func (wu *WorkspaceUpdate) SetUpdatedAt(t time.Time) *WorkspaceUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wu *WorkspaceUpdate) ClearUpdatedAt() *WorkspaceUpdate {
	wu.mutation.ClearUpdatedAt()
	return wu
}

// SetName sets the "name" field.
func (wu *WorkspaceUpdate) SetName(s string) *WorkspaceUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wu *WorkspaceUpdate) SetNillableName(s *string) *WorkspaceUpdate {
	if s != nil {
		wu.SetName(*s)
	}
	return wu
}

// ClearName clears the value of the "name" field.
func (wu *WorkspaceUpdate) ClearName() *WorkspaceUpdate {
	wu.mutation.ClearName()
	return wu
}

// SetIsPersonal sets the "is_personal" field.
func (wu *WorkspaceUpdate) SetIsPersonal(b bool) *WorkspaceUpdate {
	wu.mutation.SetIsPersonal(b)
	return wu
}

// SetNillableIsPersonal sets the "is_personal" field if the given value is not nil.
func (wu *WorkspaceUpdate) SetNillableIsPersonal(b *bool) *WorkspaceUpdate {
	if b != nil {
		wu.SetIsPersonal(*b)
	}
	return wu
}

// ClearIsPersonal clears the value of the "is_personal" field.
func (wu *WorkspaceUpdate) ClearIsPersonal() *WorkspaceUpdate {
	wu.mutation.ClearIsPersonal()
	return wu
}

// SetUserID sets the "user_id" field.
func (wu *WorkspaceUpdate) SetUserID(s string) *WorkspaceUpdate {
	wu.mutation.SetUserID(s)
	return wu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wu *WorkspaceUpdate) SetNillableUserID(s *string) *WorkspaceUpdate {
	if s != nil {
		wu.SetUserID(*s)
	}
	return wu
}

// ClearUserID clears the value of the "user_id" field.
func (wu *WorkspaceUpdate) ClearUserID() *WorkspaceUpdate {
	wu.mutation.ClearUserID()
	return wu
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (wu *WorkspaceUpdate) AddUserIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.AddUserIDs(ids...)
	return wu
}

// AddUsers adds the "users" edges to the User entity.
func (wu *WorkspaceUpdate) AddUsers(u ...*User) *WorkspaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.AddUserIDs(ids...)
}

// AddWorkspaceInviteIDs adds the "workspace_invites" edge to the WorkspaceInvite entity by IDs.
func (wu *WorkspaceUpdate) AddWorkspaceInviteIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.AddWorkspaceInviteIDs(ids...)
	return wu
}

// AddWorkspaceInvites adds the "workspace_invites" edges to the WorkspaceInvite entity.
func (wu *WorkspaceUpdate) AddWorkspaceInvites(w ...*WorkspaceInvite) *WorkspaceUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkspaceInviteIDs(ids...)
}

// AddWorkspaceUserIDs adds the "workspace_users" edge to the WorkspaceUser entity by IDs.
func (wu *WorkspaceUpdate) AddWorkspaceUserIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.AddWorkspaceUserIDs(ids...)
	return wu
}

// AddWorkspaceUsers adds the "workspace_users" edges to the WorkspaceUser entity.
func (wu *WorkspaceUpdate) AddWorkspaceUsers(w ...*WorkspaceUser) *WorkspaceUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.AddWorkspaceUserIDs(ids...)
}

// Mutation returns the WorkspaceMutation object of the builder.
func (wu *WorkspaceUpdate) Mutation() *WorkspaceMutation {
	return wu.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (wu *WorkspaceUpdate) ClearUsers() *WorkspaceUpdate {
	wu.mutation.ClearUsers()
	return wu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (wu *WorkspaceUpdate) RemoveUserIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.RemoveUserIDs(ids...)
	return wu
}

// RemoveUsers removes "users" edges to User entities.
func (wu *WorkspaceUpdate) RemoveUsers(u ...*User) *WorkspaceUpdate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wu.RemoveUserIDs(ids...)
}

// ClearWorkspaceInvites clears all "workspace_invites" edges to the WorkspaceInvite entity.
func (wu *WorkspaceUpdate) ClearWorkspaceInvites() *WorkspaceUpdate {
	wu.mutation.ClearWorkspaceInvites()
	return wu
}

// RemoveWorkspaceInviteIDs removes the "workspace_invites" edge to WorkspaceInvite entities by IDs.
func (wu *WorkspaceUpdate) RemoveWorkspaceInviteIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.RemoveWorkspaceInviteIDs(ids...)
	return wu
}

// RemoveWorkspaceInvites removes "workspace_invites" edges to WorkspaceInvite entities.
func (wu *WorkspaceUpdate) RemoveWorkspaceInvites(w ...*WorkspaceInvite) *WorkspaceUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkspaceInviteIDs(ids...)
}

// ClearWorkspaceUsers clears all "workspace_users" edges to the WorkspaceUser entity.
func (wu *WorkspaceUpdate) ClearWorkspaceUsers() *WorkspaceUpdate {
	wu.mutation.ClearWorkspaceUsers()
	return wu
}

// RemoveWorkspaceUserIDs removes the "workspace_users" edge to WorkspaceUser entities by IDs.
func (wu *WorkspaceUpdate) RemoveWorkspaceUserIDs(ids ...string) *WorkspaceUpdate {
	wu.mutation.RemoveWorkspaceUserIDs(ids...)
	return wu
}

// RemoveWorkspaceUsers removes "workspace_users" edges to WorkspaceUser entities.
func (wu *WorkspaceUpdate) RemoveWorkspaceUsers(w ...*WorkspaceUser) *WorkspaceUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wu.RemoveWorkspaceUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WorkspaceUpdate) Save(ctx context.Context) (int, error) {
	wu.defaults()
	return withHooks(ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WorkspaceUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WorkspaceUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WorkspaceUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wu *WorkspaceUpdate) defaults() {
	if _, ok := wu.mutation.UpdatedAt(); !ok && !wu.mutation.UpdatedAtCleared() {
		v := workspace.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wu *WorkspaceUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkspaceUpdate {
	wu.modifiers = append(wu.modifiers, modifiers...)
	return wu
}

func (wu *WorkspaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(workspace.Table, workspace.Columns, sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wu.mutation.CreatedAtCleared() {
		_spec.ClearField(workspace.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.SetField(workspace.FieldUpdatedAt, field.TypeTime, value)
	}
	if wu.mutation.UpdatedAtCleared() {
		_spec.ClearField(workspace.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.SetField(workspace.FieldName, field.TypeString, value)
	}
	if wu.mutation.NameCleared() {
		_spec.ClearField(workspace.FieldName, field.TypeString)
	}
	if value, ok := wu.mutation.IsPersonal(); ok {
		_spec.SetField(workspace.FieldIsPersonal, field.TypeBool, value)
	}
	if wu.mutation.IsPersonalCleared() {
		_spec.ClearField(workspace.FieldIsPersonal, field.TypeBool)
	}
	if value, ok := wu.mutation.UserID(); ok {
		_spec.SetField(workspace.FieldUserID, field.TypeString, value)
	}
	if wu.mutation.UserIDCleared() {
		_spec.ClearField(workspace.FieldUserID, field.TypeString)
	}
	if wu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &WorkspaceUserCreate{config: wu.config, mutation: newWorkspaceUserMutation(wu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !wu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: wu.config, mutation: newWorkspaceUserMutation(wu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: wu.config, mutation: newWorkspaceUserMutation(wu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkspaceInvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkspaceInvitesIDs(); len(nodes) > 0 && !wu.mutation.WorkspaceInvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkspaceInvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wu.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.RemovedWorkspaceUsersIDs(); len(nodes) > 0 && !wu.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.WorkspaceUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WorkspaceUpdateOne is the builder for updating a single Workspace entity.
type WorkspaceUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WorkspaceMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (wuo *WorkspaceUpdateOne) SetUpdatedAt(t time.Time) *WorkspaceUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (wuo *WorkspaceUpdateOne) ClearUpdatedAt() *WorkspaceUpdateOne {
	wuo.mutation.ClearUpdatedAt()
	return wuo
}

// SetName sets the "name" field.
func (wuo *WorkspaceUpdateOne) SetName(s string) *WorkspaceUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wuo *WorkspaceUpdateOne) SetNillableName(s *string) *WorkspaceUpdateOne {
	if s != nil {
		wuo.SetName(*s)
	}
	return wuo
}

// ClearName clears the value of the "name" field.
func (wuo *WorkspaceUpdateOne) ClearName() *WorkspaceUpdateOne {
	wuo.mutation.ClearName()
	return wuo
}

// SetIsPersonal sets the "is_personal" field.
func (wuo *WorkspaceUpdateOne) SetIsPersonal(b bool) *WorkspaceUpdateOne {
	wuo.mutation.SetIsPersonal(b)
	return wuo
}

// SetNillableIsPersonal sets the "is_personal" field if the given value is not nil.
func (wuo *WorkspaceUpdateOne) SetNillableIsPersonal(b *bool) *WorkspaceUpdateOne {
	if b != nil {
		wuo.SetIsPersonal(*b)
	}
	return wuo
}

// ClearIsPersonal clears the value of the "is_personal" field.
func (wuo *WorkspaceUpdateOne) ClearIsPersonal() *WorkspaceUpdateOne {
	wuo.mutation.ClearIsPersonal()
	return wuo
}

// SetUserID sets the "user_id" field.
func (wuo *WorkspaceUpdateOne) SetUserID(s string) *WorkspaceUpdateOne {
	wuo.mutation.SetUserID(s)
	return wuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wuo *WorkspaceUpdateOne) SetNillableUserID(s *string) *WorkspaceUpdateOne {
	if s != nil {
		wuo.SetUserID(*s)
	}
	return wuo
}

// ClearUserID clears the value of the "user_id" field.
func (wuo *WorkspaceUpdateOne) ClearUserID() *WorkspaceUpdateOne {
	wuo.mutation.ClearUserID()
	return wuo
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (wuo *WorkspaceUpdateOne) AddUserIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.AddUserIDs(ids...)
	return wuo
}

// AddUsers adds the "users" edges to the User entity.
func (wuo *WorkspaceUpdateOne) AddUsers(u ...*User) *WorkspaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.AddUserIDs(ids...)
}

// AddWorkspaceInviteIDs adds the "workspace_invites" edge to the WorkspaceInvite entity by IDs.
func (wuo *WorkspaceUpdateOne) AddWorkspaceInviteIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.AddWorkspaceInviteIDs(ids...)
	return wuo
}

// AddWorkspaceInvites adds the "workspace_invites" edges to the WorkspaceInvite entity.
func (wuo *WorkspaceUpdateOne) AddWorkspaceInvites(w ...*WorkspaceInvite) *WorkspaceUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkspaceInviteIDs(ids...)
}

// AddWorkspaceUserIDs adds the "workspace_users" edge to the WorkspaceUser entity by IDs.
func (wuo *WorkspaceUpdateOne) AddWorkspaceUserIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.AddWorkspaceUserIDs(ids...)
	return wuo
}

// AddWorkspaceUsers adds the "workspace_users" edges to the WorkspaceUser entity.
func (wuo *WorkspaceUpdateOne) AddWorkspaceUsers(w ...*WorkspaceUser) *WorkspaceUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.AddWorkspaceUserIDs(ids...)
}

// Mutation returns the WorkspaceMutation object of the builder.
func (wuo *WorkspaceUpdateOne) Mutation() *WorkspaceMutation {
	return wuo.mutation
}

// ClearUsers clears all "users" edges to the User entity.
func (wuo *WorkspaceUpdateOne) ClearUsers() *WorkspaceUpdateOne {
	wuo.mutation.ClearUsers()
	return wuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (wuo *WorkspaceUpdateOne) RemoveUserIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.RemoveUserIDs(ids...)
	return wuo
}

// RemoveUsers removes "users" edges to User entities.
func (wuo *WorkspaceUpdateOne) RemoveUsers(u ...*User) *WorkspaceUpdateOne {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wuo.RemoveUserIDs(ids...)
}

// ClearWorkspaceInvites clears all "workspace_invites" edges to the WorkspaceInvite entity.
func (wuo *WorkspaceUpdateOne) ClearWorkspaceInvites() *WorkspaceUpdateOne {
	wuo.mutation.ClearWorkspaceInvites()
	return wuo
}

// RemoveWorkspaceInviteIDs removes the "workspace_invites" edge to WorkspaceInvite entities by IDs.
func (wuo *WorkspaceUpdateOne) RemoveWorkspaceInviteIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.RemoveWorkspaceInviteIDs(ids...)
	return wuo
}

// RemoveWorkspaceInvites removes "workspace_invites" edges to WorkspaceInvite entities.
func (wuo *WorkspaceUpdateOne) RemoveWorkspaceInvites(w ...*WorkspaceInvite) *WorkspaceUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkspaceInviteIDs(ids...)
}

// ClearWorkspaceUsers clears all "workspace_users" edges to the WorkspaceUser entity.
func (wuo *WorkspaceUpdateOne) ClearWorkspaceUsers() *WorkspaceUpdateOne {
	wuo.mutation.ClearWorkspaceUsers()
	return wuo
}

// RemoveWorkspaceUserIDs removes the "workspace_users" edge to WorkspaceUser entities by IDs.
func (wuo *WorkspaceUpdateOne) RemoveWorkspaceUserIDs(ids ...string) *WorkspaceUpdateOne {
	wuo.mutation.RemoveWorkspaceUserIDs(ids...)
	return wuo
}

// RemoveWorkspaceUsers removes "workspace_users" edges to WorkspaceUser entities.
func (wuo *WorkspaceUpdateOne) RemoveWorkspaceUsers(w ...*WorkspaceUser) *WorkspaceUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wuo.RemoveWorkspaceUserIDs(ids...)
}

// Where appends a list predicates to the WorkspaceUpdate builder.
func (wuo *WorkspaceUpdateOne) Where(ps ...predicate.Workspace) *WorkspaceUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WorkspaceUpdateOne) Select(field string, fields ...string) *WorkspaceUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Workspace entity.
func (wuo *WorkspaceUpdateOne) Save(ctx context.Context) (*Workspace, error) {
	wuo.defaults()
	return withHooks(ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WorkspaceUpdateOne) SaveX(ctx context.Context) *Workspace {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WorkspaceUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WorkspaceUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wuo *WorkspaceUpdateOne) defaults() {
	if _, ok := wuo.mutation.UpdatedAt(); !ok && !wuo.mutation.UpdatedAtCleared() {
		v := workspace.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wuo *WorkspaceUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WorkspaceUpdateOne {
	wuo.modifiers = append(wuo.modifiers, modifiers...)
	return wuo
}

func (wuo *WorkspaceUpdateOne) sqlSave(ctx context.Context) (_node *Workspace, err error) {
	_spec := sqlgraph.NewUpdateSpec(workspace.Table, workspace.Columns, sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Workspace.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, workspace.FieldID)
		for _, f := range fields {
			if !workspace.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != workspace.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if wuo.mutation.CreatedAtCleared() {
		_spec.ClearField(workspace.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.SetField(workspace.FieldUpdatedAt, field.TypeTime, value)
	}
	if wuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(workspace.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.SetField(workspace.FieldName, field.TypeString, value)
	}
	if wuo.mutation.NameCleared() {
		_spec.ClearField(workspace.FieldName, field.TypeString)
	}
	if value, ok := wuo.mutation.IsPersonal(); ok {
		_spec.SetField(workspace.FieldIsPersonal, field.TypeBool, value)
	}
	if wuo.mutation.IsPersonalCleared() {
		_spec.ClearField(workspace.FieldIsPersonal, field.TypeBool)
	}
	if value, ok := wuo.mutation.UserID(); ok {
		_spec.SetField(workspace.FieldUserID, field.TypeString, value)
	}
	if wuo.mutation.UserIDCleared() {
		_spec.ClearField(workspace.FieldUserID, field.TypeString)
	}
	if wuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		createE := &WorkspaceUserCreate{config: wuo.config, mutation: newWorkspaceUserMutation(wuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !wuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: wuo.config, mutation: newWorkspaceUserMutation(wuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: wuo.config, mutation: newWorkspaceUserMutation(wuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkspaceInvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkspaceInvitesIDs(); len(nodes) > 0 && !wuo.mutation.WorkspaceInvitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkspaceInvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if wuo.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.RemovedWorkspaceUsersIDs(); len(nodes) > 0 && !wuo.mutation.WorkspaceUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.WorkspaceUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wuo.modifiers...)
	_node = &Workspace{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{workspace.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
