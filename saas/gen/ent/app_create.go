// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/mailconn"
	"saas/gen/ent/templ"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppCreate is the builder for creating a App entity.
type AppCreate struct {
	config
	mutation *AppMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ac *AppCreate) SetCreatedAt(t time.Time) *AppCreate {
	ac.mutation.SetCreatedAt(t)
	return ac
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableCreatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetCreatedAt(*t)
	}
	return ac
}

// SetUpdatedAt sets the "updated_at" field.
func (ac *AppCreate) SetUpdatedAt(t time.Time) *AppCreate {
	ac.mutation.SetUpdatedAt(t)
	return ac
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ac *AppCreate) SetNillableUpdatedAt(t *time.Time) *AppCreate {
	if t != nil {
		ac.SetUpdatedAt(*t)
	}
	return ac
}

// SetName sets the "name" field.
func (ac *AppCreate) SetName(s string) *AppCreate {
	ac.mutation.SetName(s)
	return ac
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ac *AppCreate) SetNillableName(s *string) *AppCreate {
	if s != nil {
		ac.SetName(*s)
	}
	return ac
}

// SetCopyright sets the "copyright" field.
func (ac *AppCreate) SetCopyright(s string) *AppCreate {
	ac.mutation.SetCopyright(s)
	return ac
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (ac *AppCreate) SetNillableCopyright(s *string) *AppCreate {
	if s != nil {
		ac.SetCopyright(*s)
	}
	return ac
}

// SetEmail sets the "email" field.
func (ac *AppCreate) SetEmail(s string) *AppCreate {
	ac.mutation.SetEmail(s)
	return ac
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (ac *AppCreate) SetNillableEmail(s *string) *AppCreate {
	if s != nil {
		ac.SetEmail(*s)
	}
	return ac
}

// SetAddress sets the "address" field.
func (ac *AppCreate) SetAddress(s string) *AppCreate {
	ac.mutation.SetAddress(s)
	return ac
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (ac *AppCreate) SetNillableAddress(s *string) *AppCreate {
	if s != nil {
		ac.SetAddress(*s)
	}
	return ac
}

// SetSocialTw sets the "social_tw" field.
func (ac *AppCreate) SetSocialTw(s string) *AppCreate {
	ac.mutation.SetSocialTw(s)
	return ac
}

// SetNillableSocialTw sets the "social_tw" field if the given value is not nil.
func (ac *AppCreate) SetNillableSocialTw(s *string) *AppCreate {
	if s != nil {
		ac.SetSocialTw(*s)
	}
	return ac
}

// SetSocialFb sets the "social_fb" field.
func (ac *AppCreate) SetSocialFb(s string) *AppCreate {
	ac.mutation.SetSocialFb(s)
	return ac
}

// SetNillableSocialFb sets the "social_fb" field if the given value is not nil.
func (ac *AppCreate) SetNillableSocialFb(s *string) *AppCreate {
	if s != nil {
		ac.SetSocialFb(*s)
	}
	return ac
}

// SetSocialIn sets the "social_in" field.
func (ac *AppCreate) SetSocialIn(s string) *AppCreate {
	ac.mutation.SetSocialIn(s)
	return ac
}

// SetNillableSocialIn sets the "social_in" field if the given value is not nil.
func (ac *AppCreate) SetNillableSocialIn(s *string) *AppCreate {
	if s != nil {
		ac.SetSocialIn(*s)
	}
	return ac
}

// SetLogoURL sets the "logo_url" field.
func (ac *AppCreate) SetLogoURL(s string) *AppCreate {
	ac.mutation.SetLogoURL(s)
	return ac
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (ac *AppCreate) SetNillableLogoURL(s *string) *AppCreate {
	if s != nil {
		ac.SetLogoURL(*s)
	}
	return ac
}

// SetSiteURL sets the "site_url" field.
func (ac *AppCreate) SetSiteURL(s string) *AppCreate {
	ac.mutation.SetSiteURL(s)
	return ac
}

// SetNillableSiteURL sets the "site_url" field if the given value is not nil.
func (ac *AppCreate) SetNillableSiteURL(s *string) *AppCreate {
	if s != nil {
		ac.SetSiteURL(*s)
	}
	return ac
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (ac *AppCreate) SetDefaultMailConnID(s string) *AppCreate {
	ac.mutation.SetDefaultMailConnID(s)
	return ac
}

// SetNillableDefaultMailConnID sets the "default_mail_conn_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableDefaultMailConnID(s *string) *AppCreate {
	if s != nil {
		ac.SetDefaultMailConnID(*s)
	}
	return ac
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (ac *AppCreate) SetMailLayoutTemplID(s string) *AppCreate {
	ac.mutation.SetMailLayoutTemplID(s)
	return ac
}

// SetNillableMailLayoutTemplID sets the "mail_layout_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableMailLayoutTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetMailLayoutTemplID(*s)
	}
	return ac
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (ac *AppCreate) SetWsapceInviteTemplID(s string) *AppCreate {
	ac.mutation.SetWsapceInviteTemplID(s)
	return ac
}

// SetNillableWsapceInviteTemplID sets the "wsapce_invite_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableWsapceInviteTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetWsapceInviteTemplID(*s)
	}
	return ac
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (ac *AppCreate) SetWsapceSuccessTemplID(s string) *AppCreate {
	ac.mutation.SetWsapceSuccessTemplID(s)
	return ac
}

// SetNillableWsapceSuccessTemplID sets the "wsapce_success_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableWsapceSuccessTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetWsapceSuccessTemplID(*s)
	}
	return ac
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (ac *AppCreate) SetAuthFpTemplID(s string) *AppCreate {
	ac.mutation.SetAuthFpTemplID(s)
	return ac
}

// SetNillableAuthFpTemplID sets the "auth_fp_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAuthFpTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetAuthFpTemplID(*s)
	}
	return ac
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (ac *AppCreate) SetAuthWelcomeEmailTemplID(s string) *AppCreate {
	ac.mutation.SetAuthWelcomeEmailTemplID(s)
	return ac
}

// SetNillableAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAuthWelcomeEmailTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetAuthWelcomeEmailTemplID(*s)
	}
	return ac
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (ac *AppCreate) SetAuthVerificationTemplID(s string) *AppCreate {
	ac.mutation.SetAuthVerificationTemplID(s)
	return ac
}

// SetNillableAuthVerificationTemplID sets the "auth_verification_templ_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAuthVerificationTemplID(s *string) *AppCreate {
	if s != nil {
		ac.SetAuthVerificationTemplID(*s)
	}
	return ac
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (ac *AppCreate) SetAuthEmailVerify(b bool) *AppCreate {
	ac.mutation.SetAuthEmailVerify(b)
	return ac
}

// SetNillableAuthEmailVerify sets the "auth_email_verify" field if the given value is not nil.
func (ac *AppCreate) SetNillableAuthEmailVerify(b *bool) *AppCreate {
	if b != nil {
		ac.SetAuthEmailVerify(*b)
	}
	return ac
}

// SetOauthSigninCanSignup sets the "oauth_signin_can_signup" field.
func (ac *AppCreate) SetOauthSigninCanSignup(b bool) *AppCreate {
	ac.mutation.SetOauthSigninCanSignup(b)
	return ac
}

// SetNillableOauthSigninCanSignup sets the "oauth_signin_can_signup" field if the given value is not nil.
func (ac *AppCreate) SetNillableOauthSigninCanSignup(b *bool) *AppCreate {
	if b != nil {
		ac.SetOauthSigninCanSignup(*b)
	}
	return ac
}

// SetAuthEnablePasswordLogin sets the "auth_enable_password_login" field.
func (ac *AppCreate) SetAuthEnablePasswordLogin(b bool) *AppCreate {
	ac.mutation.SetAuthEnablePasswordLogin(b)
	return ac
}

// SetNillableAuthEnablePasswordLogin sets the "auth_enable_password_login" field if the given value is not nil.
func (ac *AppCreate) SetNillableAuthEnablePasswordLogin(b *bool) *AppCreate {
	if b != nil {
		ac.SetAuthEnablePasswordLogin(*b)
	}
	return ac
}

// SetAdminUserID sets the "admin_user_id" field.
func (ac *AppCreate) SetAdminUserID(s string) *AppCreate {
	ac.mutation.SetAdminUserID(s)
	return ac
}

// SetNillableAdminUserID sets the "admin_user_id" field if the given value is not nil.
func (ac *AppCreate) SetNillableAdminUserID(s *string) *AppCreate {
	if s != nil {
		ac.SetAdminUserID(*s)
	}
	return ac
}

// SetID sets the "id" field.
func (ac *AppCreate) SetID(s string) *AppCreate {
	ac.mutation.SetID(s)
	return ac
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ac *AppCreate) SetNillableID(s *string) *AppCreate {
	if s != nil {
		ac.SetID(*s)
	}
	return ac
}

// SetDefaultMailConn sets the "default_mail_conn" edge to the MailConn entity.
func (ac *AppCreate) SetDefaultMailConn(m *MailConn) *AppCreate {
	return ac.SetDefaultMailConnID(m.ID)
}

// SetMailLayoutTempl sets the "mail_layout_templ" edge to the Templ entity.
func (ac *AppCreate) SetMailLayoutTempl(t *Templ) *AppCreate {
	return ac.SetMailLayoutTemplID(t.ID)
}

// SetWsapceInviteTempl sets the "wsapce_invite_templ" edge to the Templ entity.
func (ac *AppCreate) SetWsapceInviteTempl(t *Templ) *AppCreate {
	return ac.SetWsapceInviteTemplID(t.ID)
}

// SetWsapceSuccessTempl sets the "wsapce_success_templ" edge to the Templ entity.
func (ac *AppCreate) SetWsapceSuccessTempl(t *Templ) *AppCreate {
	return ac.SetWsapceSuccessTemplID(t.ID)
}

// SetAuthFpTempl sets the "auth_fp_templ" edge to the Templ entity.
func (ac *AppCreate) SetAuthFpTempl(t *Templ) *AppCreate {
	return ac.SetAuthFpTemplID(t.ID)
}

// SetAuthWelcomeEmailTempl sets the "auth_welcome_email_templ" edge to the Templ entity.
func (ac *AppCreate) SetAuthWelcomeEmailTempl(t *Templ) *AppCreate {
	return ac.SetAuthWelcomeEmailTemplID(t.ID)
}

// SetAuthVerificationTempl sets the "auth_verification_templ" edge to the Templ entity.
func (ac *AppCreate) SetAuthVerificationTempl(t *Templ) *AppCreate {
	return ac.SetAuthVerificationTemplID(t.ID)
}

// Mutation returns the AppMutation object of the builder.
func (ac *AppCreate) Mutation() *AppMutation {
	return ac.mutation
}

// Save creates the App in the database.
func (ac *AppCreate) Save(ctx context.Context) (*App, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AppCreate) SaveX(ctx context.Context) *App {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AppCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AppCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AppCreate) defaults() {
	if _, ok := ac.mutation.CreatedAt(); !ok {
		v := app.DefaultCreatedAt()
		ac.mutation.SetCreatedAt(v)
	}
	if _, ok := ac.mutation.UpdatedAt(); !ok {
		v := app.DefaultUpdatedAt()
		ac.mutation.SetUpdatedAt(v)
	}
	if _, ok := ac.mutation.AuthEmailVerify(); !ok {
		v := app.DefaultAuthEmailVerify
		ac.mutation.SetAuthEmailVerify(v)
	}
	if _, ok := ac.mutation.OauthSigninCanSignup(); !ok {
		v := app.DefaultOauthSigninCanSignup
		ac.mutation.SetOauthSigninCanSignup(v)
	}
	if _, ok := ac.mutation.AuthEnablePasswordLogin(); !ok {
		v := app.DefaultAuthEnablePasswordLogin
		ac.mutation.SetAuthEnablePasswordLogin(v)
	}
	if _, ok := ac.mutation.ID(); !ok {
		v := app.DefaultID()
		ac.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AppCreate) check() error {
	return nil
}

func (ac *AppCreate) sqlSave(ctx context.Context) (*App, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected App.ID type: %T", _spec.ID.Value)
		}
	}
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AppCreate) createSpec() (*App, *sqlgraph.CreateSpec) {
	var (
		_node = &App{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(app.Table, sqlgraph.NewFieldSpec(app.FieldID, field.TypeString))
	)
	_spec.OnConflict = ac.conflict
	if id, ok := ac.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ac.mutation.CreatedAt(); ok {
		_spec.SetField(app.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ac.mutation.UpdatedAt(); ok {
		_spec.SetField(app.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ac.mutation.Name(); ok {
		_spec.SetField(app.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ac.mutation.Copyright(); ok {
		_spec.SetField(app.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := ac.mutation.Email(); ok {
		_spec.SetField(app.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := ac.mutation.Address(); ok {
		_spec.SetField(app.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ac.mutation.SocialTw(); ok {
		_spec.SetField(app.FieldSocialTw, field.TypeString, value)
		_node.SocialTw = value
	}
	if value, ok := ac.mutation.SocialFb(); ok {
		_spec.SetField(app.FieldSocialFb, field.TypeString, value)
		_node.SocialFb = value
	}
	if value, ok := ac.mutation.SocialIn(); ok {
		_spec.SetField(app.FieldSocialIn, field.TypeString, value)
		_node.SocialIn = value
	}
	if value, ok := ac.mutation.LogoURL(); ok {
		_spec.SetField(app.FieldLogoURL, field.TypeString, value)
		_node.LogoURL = value
	}
	if value, ok := ac.mutation.SiteURL(); ok {
		_spec.SetField(app.FieldSiteURL, field.TypeString, value)
		_node.SiteURL = value
	}
	if value, ok := ac.mutation.AuthEmailVerify(); ok {
		_spec.SetField(app.FieldAuthEmailVerify, field.TypeBool, value)
		_node.AuthEmailVerify = value
	}
	if value, ok := ac.mutation.OauthSigninCanSignup(); ok {
		_spec.SetField(app.FieldOauthSigninCanSignup, field.TypeBool, value)
		_node.OauthSigninCanSignup = value
	}
	if value, ok := ac.mutation.AuthEnablePasswordLogin(); ok {
		_spec.SetField(app.FieldAuthEnablePasswordLogin, field.TypeBool, value)
		_node.AuthEnablePasswordLogin = value
	}
	if value, ok := ac.mutation.AdminUserID(); ok {
		_spec.SetField(app.FieldAdminUserID, field.TypeString, value)
		_node.AdminUserID = value
	}
	if nodes := ac.mutation.DefaultMailConnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.DefaultMailConnTable,
			Columns: []string{app.DefaultMailConnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(mailconn.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DefaultMailConnID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.MailLayoutTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.MailLayoutTemplTable,
			Columns: []string{app.MailLayoutTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.MailLayoutTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.WsapceInviteTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.WsapceInviteTemplTable,
			Columns: []string{app.WsapceInviteTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WsapceInviteTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.WsapceSuccessTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.WsapceSuccessTemplTable,
			Columns: []string{app.WsapceSuccessTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.WsapceSuccessTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AuthFpTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.AuthFpTemplTable,
			Columns: []string{app.AuthFpTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthFpTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AuthWelcomeEmailTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.AuthWelcomeEmailTemplTable,
			Columns: []string{app.AuthWelcomeEmailTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthWelcomeEmailTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.AuthVerificationTemplIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   app.AuthVerificationTemplTable,
			Columns: []string{app.AuthVerificationTemplColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(templ.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.AuthVerificationTemplID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ac *AppCreate) OnConflict(opts ...sql.ConflictOption) *AppUpsertOne {
	ac.conflict = opts
	return &AppUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AppCreate) OnConflictColumns(columns ...string) *AppUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertOne{
		create: ac,
	}
}

type (
	// AppUpsertOne is the builder for "upsert"-ing
	//  one App node.
	AppUpsertOne struct {
		create *AppCreate
	}

	// AppUpsert is the "OnConflict" setter.
	AppUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsert) SetUpdatedAt(v time.Time) *AppUpsert {
	u.Set(app.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsert) UpdateUpdatedAt() *AppUpsert {
	u.SetExcluded(app.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsert) ClearUpdatedAt() *AppUpsert {
	u.SetNull(app.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *AppUpsert) SetName(v string) *AppUpsert {
	u.Set(app.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsert) UpdateName() *AppUpsert {
	u.SetExcluded(app.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *AppUpsert) ClearName() *AppUpsert {
	u.SetNull(app.FieldName)
	return u
}

// SetCopyright sets the "copyright" field.
func (u *AppUpsert) SetCopyright(v string) *AppUpsert {
	u.Set(app.FieldCopyright, v)
	return u
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppUpsert) UpdateCopyright() *AppUpsert {
	u.SetExcluded(app.FieldCopyright)
	return u
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppUpsert) ClearCopyright() *AppUpsert {
	u.SetNull(app.FieldCopyright)
	return u
}

// SetEmail sets the "email" field.
func (u *AppUpsert) SetEmail(v string) *AppUpsert {
	u.Set(app.FieldEmail, v)
	return u
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppUpsert) UpdateEmail() *AppUpsert {
	u.SetExcluded(app.FieldEmail)
	return u
}

// ClearEmail clears the value of the "email" field.
func (u *AppUpsert) ClearEmail() *AppUpsert {
	u.SetNull(app.FieldEmail)
	return u
}

// SetAddress sets the "address" field.
func (u *AppUpsert) SetAddress(v string) *AppUpsert {
	u.Set(app.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppUpsert) UpdateAddress() *AppUpsert {
	u.SetExcluded(app.FieldAddress)
	return u
}

// ClearAddress clears the value of the "address" field.
func (u *AppUpsert) ClearAddress() *AppUpsert {
	u.SetNull(app.FieldAddress)
	return u
}

// SetSocialTw sets the "social_tw" field.
func (u *AppUpsert) SetSocialTw(v string) *AppUpsert {
	u.Set(app.FieldSocialTw, v)
	return u
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppUpsert) UpdateSocialTw() *AppUpsert {
	u.SetExcluded(app.FieldSocialTw)
	return u
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppUpsert) ClearSocialTw() *AppUpsert {
	u.SetNull(app.FieldSocialTw)
	return u
}

// SetSocialFb sets the "social_fb" field.
func (u *AppUpsert) SetSocialFb(v string) *AppUpsert {
	u.Set(app.FieldSocialFb, v)
	return u
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppUpsert) UpdateSocialFb() *AppUpsert {
	u.SetExcluded(app.FieldSocialFb)
	return u
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppUpsert) ClearSocialFb() *AppUpsert {
	u.SetNull(app.FieldSocialFb)
	return u
}

// SetSocialIn sets the "social_in" field.
func (u *AppUpsert) SetSocialIn(v string) *AppUpsert {
	u.Set(app.FieldSocialIn, v)
	return u
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppUpsert) UpdateSocialIn() *AppUpsert {
	u.SetExcluded(app.FieldSocialIn)
	return u
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppUpsert) ClearSocialIn() *AppUpsert {
	u.SetNull(app.FieldSocialIn)
	return u
}

// SetLogoURL sets the "logo_url" field.
func (u *AppUpsert) SetLogoURL(v string) *AppUpsert {
	u.Set(app.FieldLogoURL, v)
	return u
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppUpsert) UpdateLogoURL() *AppUpsert {
	u.SetExcluded(app.FieldLogoURL)
	return u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppUpsert) ClearLogoURL() *AppUpsert {
	u.SetNull(app.FieldLogoURL)
	return u
}

// SetSiteURL sets the "site_url" field.
func (u *AppUpsert) SetSiteURL(v string) *AppUpsert {
	u.Set(app.FieldSiteURL, v)
	return u
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppUpsert) UpdateSiteURL() *AppUpsert {
	u.SetExcluded(app.FieldSiteURL)
	return u
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppUpsert) ClearSiteURL() *AppUpsert {
	u.SetNull(app.FieldSiteURL)
	return u
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppUpsert) SetDefaultMailConnID(v string) *AppUpsert {
	u.Set(app.FieldDefaultMailConnID, v)
	return u
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateDefaultMailConnID() *AppUpsert {
	u.SetExcluded(app.FieldDefaultMailConnID)
	return u
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppUpsert) ClearDefaultMailConnID() *AppUpsert {
	u.SetNull(app.FieldDefaultMailConnID)
	return u
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppUpsert) SetMailLayoutTemplID(v string) *AppUpsert {
	u.Set(app.FieldMailLayoutTemplID, v)
	return u
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateMailLayoutTemplID() *AppUpsert {
	u.SetExcluded(app.FieldMailLayoutTemplID)
	return u
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppUpsert) ClearMailLayoutTemplID() *AppUpsert {
	u.SetNull(app.FieldMailLayoutTemplID)
	return u
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppUpsert) SetWsapceInviteTemplID(v string) *AppUpsert {
	u.Set(app.FieldWsapceInviteTemplID, v)
	return u
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateWsapceInviteTemplID() *AppUpsert {
	u.SetExcluded(app.FieldWsapceInviteTemplID)
	return u
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppUpsert) ClearWsapceInviteTemplID() *AppUpsert {
	u.SetNull(app.FieldWsapceInviteTemplID)
	return u
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppUpsert) SetWsapceSuccessTemplID(v string) *AppUpsert {
	u.Set(app.FieldWsapceSuccessTemplID, v)
	return u
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateWsapceSuccessTemplID() *AppUpsert {
	u.SetExcluded(app.FieldWsapceSuccessTemplID)
	return u
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppUpsert) ClearWsapceSuccessTemplID() *AppUpsert {
	u.SetNull(app.FieldWsapceSuccessTemplID)
	return u
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppUpsert) SetAuthFpTemplID(v string) *AppUpsert {
	u.Set(app.FieldAuthFpTemplID, v)
	return u
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateAuthFpTemplID() *AppUpsert {
	u.SetExcluded(app.FieldAuthFpTemplID)
	return u
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppUpsert) ClearAuthFpTemplID() *AppUpsert {
	u.SetNull(app.FieldAuthFpTemplID)
	return u
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppUpsert) SetAuthWelcomeEmailTemplID(v string) *AppUpsert {
	u.Set(app.FieldAuthWelcomeEmailTemplID, v)
	return u
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateAuthWelcomeEmailTemplID() *AppUpsert {
	u.SetExcluded(app.FieldAuthWelcomeEmailTemplID)
	return u
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppUpsert) ClearAuthWelcomeEmailTemplID() *AppUpsert {
	u.SetNull(app.FieldAuthWelcomeEmailTemplID)
	return u
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppUpsert) SetAuthVerificationTemplID(v string) *AppUpsert {
	u.Set(app.FieldAuthVerificationTemplID, v)
	return u
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateAuthVerificationTemplID() *AppUpsert {
	u.SetExcluded(app.FieldAuthVerificationTemplID)
	return u
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppUpsert) ClearAuthVerificationTemplID() *AppUpsert {
	u.SetNull(app.FieldAuthVerificationTemplID)
	return u
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppUpsert) SetAuthEmailVerify(v bool) *AppUpsert {
	u.Set(app.FieldAuthEmailVerify, v)
	return u
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppUpsert) UpdateAuthEmailVerify() *AppUpsert {
	u.SetExcluded(app.FieldAuthEmailVerify)
	return u
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppUpsert) ClearAuthEmailVerify() *AppUpsert {
	u.SetNull(app.FieldAuthEmailVerify)
	return u
}

// SetOauthSigninCanSignup sets the "oauth_signin_can_signup" field.
func (u *AppUpsert) SetOauthSigninCanSignup(v bool) *AppUpsert {
	u.Set(app.FieldOauthSigninCanSignup, v)
	return u
}

// UpdateOauthSigninCanSignup sets the "oauth_signin_can_signup" field to the value that was provided on create.
func (u *AppUpsert) UpdateOauthSigninCanSignup() *AppUpsert {
	u.SetExcluded(app.FieldOauthSigninCanSignup)
	return u
}

// ClearOauthSigninCanSignup clears the value of the "oauth_signin_can_signup" field.
func (u *AppUpsert) ClearOauthSigninCanSignup() *AppUpsert {
	u.SetNull(app.FieldOauthSigninCanSignup)
	return u
}

// SetAuthEnablePasswordLogin sets the "auth_enable_password_login" field.
func (u *AppUpsert) SetAuthEnablePasswordLogin(v bool) *AppUpsert {
	u.Set(app.FieldAuthEnablePasswordLogin, v)
	return u
}

// UpdateAuthEnablePasswordLogin sets the "auth_enable_password_login" field to the value that was provided on create.
func (u *AppUpsert) UpdateAuthEnablePasswordLogin() *AppUpsert {
	u.SetExcluded(app.FieldAuthEnablePasswordLogin)
	return u
}

// ClearAuthEnablePasswordLogin clears the value of the "auth_enable_password_login" field.
func (u *AppUpsert) ClearAuthEnablePasswordLogin() *AppUpsert {
	u.SetNull(app.FieldAuthEnablePasswordLogin)
	return u
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUpsert) SetAdminUserID(v string) *AppUpsert {
	u.Set(app.FieldAdminUserID, v)
	return u
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUpsert) UpdateAdminUserID() *AppUpsert {
	u.SetExcluded(app.FieldAdminUserID)
	return u
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *AppUpsert) ClearAdminUserID() *AppUpsert {
	u.SetNull(app.FieldAdminUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUpsertOne) UpdateNewValues() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(app.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(app.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.App.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AppUpsertOne) Ignore() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertOne) DoNothing() *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreate.OnConflict
// documentation for more info.
func (u *AppUpsertOne) Update(set func(*AppUpsert)) *AppUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsertOne) SetUpdatedAt(v time.Time) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateUpdatedAt() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsertOne) ClearUpdatedAt() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppUpsertOne) SetName(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateName() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppUpsertOne) ClearName() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearName()
	})
}

// SetCopyright sets the "copyright" field.
func (u *AppUpsertOne) SetCopyright(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateCopyright() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCopyright()
	})
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppUpsertOne) ClearCopyright() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearCopyright()
	})
}

// SetEmail sets the "email" field.
func (u *AppUpsertOne) SetEmail(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateEmail() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AppUpsertOne) ClearEmail() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearEmail()
	})
}

// SetAddress sets the "address" field.
func (u *AppUpsertOne) SetAddress(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAddress() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AppUpsertOne) ClearAddress() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAddress()
	})
}

// SetSocialTw sets the "social_tw" field.
func (u *AppUpsertOne) SetSocialTw(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialTw(v)
	})
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateSocialTw() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialTw()
	})
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppUpsertOne) ClearSocialTw() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialTw()
	})
}

// SetSocialFb sets the "social_fb" field.
func (u *AppUpsertOne) SetSocialFb(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialFb(v)
	})
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateSocialFb() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialFb()
	})
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppUpsertOne) ClearSocialFb() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialFb()
	})
}

// SetSocialIn sets the "social_in" field.
func (u *AppUpsertOne) SetSocialIn(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialIn(v)
	})
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateSocialIn() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialIn()
	})
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppUpsertOne) ClearSocialIn() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialIn()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *AppUpsertOne) SetLogoURL(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateLogoURL() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppUpsertOne) ClearLogoURL() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearLogoURL()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *AppUpsertOne) SetSiteURL(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateSiteURL() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSiteURL()
	})
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppUpsertOne) ClearSiteURL() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearSiteURL()
	})
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppUpsertOne) SetDefaultMailConnID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetDefaultMailConnID(v)
	})
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateDefaultMailConnID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateDefaultMailConnID()
	})
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppUpsertOne) ClearDefaultMailConnID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearDefaultMailConnID()
	})
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppUpsertOne) SetMailLayoutTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetMailLayoutTemplID(v)
	})
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateMailLayoutTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateMailLayoutTemplID()
	})
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppUpsertOne) ClearMailLayoutTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearMailLayoutTemplID()
	})
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppUpsertOne) SetWsapceInviteTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetWsapceInviteTemplID(v)
	})
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateWsapceInviteTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateWsapceInviteTemplID()
	})
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppUpsertOne) ClearWsapceInviteTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearWsapceInviteTemplID()
	})
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppUpsertOne) SetWsapceSuccessTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetWsapceSuccessTemplID(v)
	})
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateWsapceSuccessTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateWsapceSuccessTemplID()
	})
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppUpsertOne) ClearWsapceSuccessTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearWsapceSuccessTemplID()
	})
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppUpsertOne) SetAuthFpTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthFpTemplID(v)
	})
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAuthFpTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthFpTemplID()
	})
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppUpsertOne) ClearAuthFpTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthFpTemplID()
	})
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppUpsertOne) SetAuthWelcomeEmailTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthWelcomeEmailTemplID(v)
	})
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAuthWelcomeEmailTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthWelcomeEmailTemplID()
	})
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppUpsertOne) ClearAuthWelcomeEmailTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthWelcomeEmailTemplID()
	})
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppUpsertOne) SetAuthVerificationTemplID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthVerificationTemplID(v)
	})
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAuthVerificationTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthVerificationTemplID()
	})
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppUpsertOne) ClearAuthVerificationTemplID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthVerificationTemplID()
	})
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppUpsertOne) SetAuthEmailVerify(v bool) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthEmailVerify(v)
	})
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAuthEmailVerify() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthEmailVerify()
	})
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppUpsertOne) ClearAuthEmailVerify() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthEmailVerify()
	})
}

// SetOauthSigninCanSignup sets the "oauth_signin_can_signup" field.
func (u *AppUpsertOne) SetOauthSigninCanSignup(v bool) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetOauthSigninCanSignup(v)
	})
}

// UpdateOauthSigninCanSignup sets the "oauth_signin_can_signup" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateOauthSigninCanSignup() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateOauthSigninCanSignup()
	})
}

// ClearOauthSigninCanSignup clears the value of the "oauth_signin_can_signup" field.
func (u *AppUpsertOne) ClearOauthSigninCanSignup() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearOauthSigninCanSignup()
	})
}

// SetAuthEnablePasswordLogin sets the "auth_enable_password_login" field.
func (u *AppUpsertOne) SetAuthEnablePasswordLogin(v bool) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthEnablePasswordLogin(v)
	})
}

// UpdateAuthEnablePasswordLogin sets the "auth_enable_password_login" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAuthEnablePasswordLogin() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthEnablePasswordLogin()
	})
}

// ClearAuthEnablePasswordLogin clears the value of the "auth_enable_password_login" field.
func (u *AppUpsertOne) ClearAuthEnablePasswordLogin() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthEnablePasswordLogin()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUpsertOne) SetAdminUserID(v string) *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.SetAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUpsertOne) UpdateAdminUserID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAdminUserID()
	})
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *AppUpsertOne) ClearAdminUserID() *AppUpsertOne {
	return u.Update(func(s *AppUpsert) {
		s.ClearAdminUserID()
	})
}

// Exec executes the query.
func (u *AppUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AppUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: AppUpsertOne.ID is not supported by MySQL driver. Use AppUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AppUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AppCreateBulk is the builder for creating many App entities in bulk.
type AppCreateBulk struct {
	config
	err      error
	builders []*AppCreate
	conflict []sql.ConflictOption
}

// Save creates the App entities in the database.
func (acb *AppCreateBulk) Save(ctx context.Context) ([]*App, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*App, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AppMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AppCreateBulk) SaveX(ctx context.Context) []*App {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AppCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AppCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.App.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AppUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (acb *AppCreateBulk) OnConflict(opts ...sql.ConflictOption) *AppUpsertBulk {
	acb.conflict = opts
	return &AppUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AppCreateBulk) OnConflictColumns(columns ...string) *AppUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AppUpsertBulk{
		create: acb,
	}
}

// AppUpsertBulk is the builder for "upsert"-ing
// a bulk of App nodes.
type AppUpsertBulk struct {
	create *AppCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(app.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *AppUpsertBulk) UpdateNewValues() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(app.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(app.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.App.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AppUpsertBulk) Ignore() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AppUpsertBulk) DoNothing() *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AppCreateBulk.OnConflict
// documentation for more info.
func (u *AppUpsertBulk) Update(set func(*AppUpsert)) *AppUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AppUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *AppUpsertBulk) SetUpdatedAt(v time.Time) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateUpdatedAt() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *AppUpsertBulk) ClearUpdatedAt() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *AppUpsertBulk) SetName(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateName() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *AppUpsertBulk) ClearName() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearName()
	})
}

// SetCopyright sets the "copyright" field.
func (u *AppUpsertBulk) SetCopyright(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetCopyright(v)
	})
}

// UpdateCopyright sets the "copyright" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateCopyright() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateCopyright()
	})
}

// ClearCopyright clears the value of the "copyright" field.
func (u *AppUpsertBulk) ClearCopyright() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearCopyright()
	})
}

// SetEmail sets the "email" field.
func (u *AppUpsertBulk) SetEmail(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetEmail(v)
	})
}

// UpdateEmail sets the "email" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateEmail() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateEmail()
	})
}

// ClearEmail clears the value of the "email" field.
func (u *AppUpsertBulk) ClearEmail() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearEmail()
	})
}

// SetAddress sets the "address" field.
func (u *AppUpsertBulk) SetAddress(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAddress() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAddress()
	})
}

// ClearAddress clears the value of the "address" field.
func (u *AppUpsertBulk) ClearAddress() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAddress()
	})
}

// SetSocialTw sets the "social_tw" field.
func (u *AppUpsertBulk) SetSocialTw(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialTw(v)
	})
}

// UpdateSocialTw sets the "social_tw" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateSocialTw() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialTw()
	})
}

// ClearSocialTw clears the value of the "social_tw" field.
func (u *AppUpsertBulk) ClearSocialTw() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialTw()
	})
}

// SetSocialFb sets the "social_fb" field.
func (u *AppUpsertBulk) SetSocialFb(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialFb(v)
	})
}

// UpdateSocialFb sets the "social_fb" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateSocialFb() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialFb()
	})
}

// ClearSocialFb clears the value of the "social_fb" field.
func (u *AppUpsertBulk) ClearSocialFb() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialFb()
	})
}

// SetSocialIn sets the "social_in" field.
func (u *AppUpsertBulk) SetSocialIn(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetSocialIn(v)
	})
}

// UpdateSocialIn sets the "social_in" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateSocialIn() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSocialIn()
	})
}

// ClearSocialIn clears the value of the "social_in" field.
func (u *AppUpsertBulk) ClearSocialIn() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearSocialIn()
	})
}

// SetLogoURL sets the "logo_url" field.
func (u *AppUpsertBulk) SetLogoURL(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetLogoURL(v)
	})
}

// UpdateLogoURL sets the "logo_url" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateLogoURL() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateLogoURL()
	})
}

// ClearLogoURL clears the value of the "logo_url" field.
func (u *AppUpsertBulk) ClearLogoURL() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearLogoURL()
	})
}

// SetSiteURL sets the "site_url" field.
func (u *AppUpsertBulk) SetSiteURL(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetSiteURL(v)
	})
}

// UpdateSiteURL sets the "site_url" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateSiteURL() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateSiteURL()
	})
}

// ClearSiteURL clears the value of the "site_url" field.
func (u *AppUpsertBulk) ClearSiteURL() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearSiteURL()
	})
}

// SetDefaultMailConnID sets the "default_mail_conn_id" field.
func (u *AppUpsertBulk) SetDefaultMailConnID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetDefaultMailConnID(v)
	})
}

// UpdateDefaultMailConnID sets the "default_mail_conn_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateDefaultMailConnID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateDefaultMailConnID()
	})
}

// ClearDefaultMailConnID clears the value of the "default_mail_conn_id" field.
func (u *AppUpsertBulk) ClearDefaultMailConnID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearDefaultMailConnID()
	})
}

// SetMailLayoutTemplID sets the "mail_layout_templ_id" field.
func (u *AppUpsertBulk) SetMailLayoutTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetMailLayoutTemplID(v)
	})
}

// UpdateMailLayoutTemplID sets the "mail_layout_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateMailLayoutTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateMailLayoutTemplID()
	})
}

// ClearMailLayoutTemplID clears the value of the "mail_layout_templ_id" field.
func (u *AppUpsertBulk) ClearMailLayoutTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearMailLayoutTemplID()
	})
}

// SetWsapceInviteTemplID sets the "wsapce_invite_templ_id" field.
func (u *AppUpsertBulk) SetWsapceInviteTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetWsapceInviteTemplID(v)
	})
}

// UpdateWsapceInviteTemplID sets the "wsapce_invite_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateWsapceInviteTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateWsapceInviteTemplID()
	})
}

// ClearWsapceInviteTemplID clears the value of the "wsapce_invite_templ_id" field.
func (u *AppUpsertBulk) ClearWsapceInviteTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearWsapceInviteTemplID()
	})
}

// SetWsapceSuccessTemplID sets the "wsapce_success_templ_id" field.
func (u *AppUpsertBulk) SetWsapceSuccessTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetWsapceSuccessTemplID(v)
	})
}

// UpdateWsapceSuccessTemplID sets the "wsapce_success_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateWsapceSuccessTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateWsapceSuccessTemplID()
	})
}

// ClearWsapceSuccessTemplID clears the value of the "wsapce_success_templ_id" field.
func (u *AppUpsertBulk) ClearWsapceSuccessTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearWsapceSuccessTemplID()
	})
}

// SetAuthFpTemplID sets the "auth_fp_templ_id" field.
func (u *AppUpsertBulk) SetAuthFpTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthFpTemplID(v)
	})
}

// UpdateAuthFpTemplID sets the "auth_fp_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAuthFpTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthFpTemplID()
	})
}

// ClearAuthFpTemplID clears the value of the "auth_fp_templ_id" field.
func (u *AppUpsertBulk) ClearAuthFpTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthFpTemplID()
	})
}

// SetAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field.
func (u *AppUpsertBulk) SetAuthWelcomeEmailTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthWelcomeEmailTemplID(v)
	})
}

// UpdateAuthWelcomeEmailTemplID sets the "auth_welcome_email_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAuthWelcomeEmailTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthWelcomeEmailTemplID()
	})
}

// ClearAuthWelcomeEmailTemplID clears the value of the "auth_welcome_email_templ_id" field.
func (u *AppUpsertBulk) ClearAuthWelcomeEmailTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthWelcomeEmailTemplID()
	})
}

// SetAuthVerificationTemplID sets the "auth_verification_templ_id" field.
func (u *AppUpsertBulk) SetAuthVerificationTemplID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthVerificationTemplID(v)
	})
}

// UpdateAuthVerificationTemplID sets the "auth_verification_templ_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAuthVerificationTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthVerificationTemplID()
	})
}

// ClearAuthVerificationTemplID clears the value of the "auth_verification_templ_id" field.
func (u *AppUpsertBulk) ClearAuthVerificationTemplID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthVerificationTemplID()
	})
}

// SetAuthEmailVerify sets the "auth_email_verify" field.
func (u *AppUpsertBulk) SetAuthEmailVerify(v bool) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthEmailVerify(v)
	})
}

// UpdateAuthEmailVerify sets the "auth_email_verify" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAuthEmailVerify() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthEmailVerify()
	})
}

// ClearAuthEmailVerify clears the value of the "auth_email_verify" field.
func (u *AppUpsertBulk) ClearAuthEmailVerify() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthEmailVerify()
	})
}

// SetOauthSigninCanSignup sets the "oauth_signin_can_signup" field.
func (u *AppUpsertBulk) SetOauthSigninCanSignup(v bool) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetOauthSigninCanSignup(v)
	})
}

// UpdateOauthSigninCanSignup sets the "oauth_signin_can_signup" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateOauthSigninCanSignup() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateOauthSigninCanSignup()
	})
}

// ClearOauthSigninCanSignup clears the value of the "oauth_signin_can_signup" field.
func (u *AppUpsertBulk) ClearOauthSigninCanSignup() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearOauthSigninCanSignup()
	})
}

// SetAuthEnablePasswordLogin sets the "auth_enable_password_login" field.
func (u *AppUpsertBulk) SetAuthEnablePasswordLogin(v bool) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAuthEnablePasswordLogin(v)
	})
}

// UpdateAuthEnablePasswordLogin sets the "auth_enable_password_login" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAuthEnablePasswordLogin() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAuthEnablePasswordLogin()
	})
}

// ClearAuthEnablePasswordLogin clears the value of the "auth_enable_password_login" field.
func (u *AppUpsertBulk) ClearAuthEnablePasswordLogin() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAuthEnablePasswordLogin()
	})
}

// SetAdminUserID sets the "admin_user_id" field.
func (u *AppUpsertBulk) SetAdminUserID(v string) *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.SetAdminUserID(v)
	})
}

// UpdateAdminUserID sets the "admin_user_id" field to the value that was provided on create.
func (u *AppUpsertBulk) UpdateAdminUserID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.UpdateAdminUserID()
	})
}

// ClearAdminUserID clears the value of the "admin_user_id" field.
func (u *AppUpsertBulk) ClearAdminUserID() *AppUpsertBulk {
	return u.Update(func(s *AppUpsert) {
		s.ClearAdminUserID()
	})
}

// Exec executes the query.
func (u *AppUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AppCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AppCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AppUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
