// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/mailconn"
	"saas/gen/ent/media"
	"saas/gen/ent/oauthconnection"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttag"
	"saas/gen/ent/posttype"
	"saas/gen/ent/posttypeform"
	"saas/gen/ent/predicate"
	"saas/gen/ent/templ"
	"saas/gen/ent/todo"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceinvite"
	"saas/gen/ent/workspaceuser"
	"time"
)

// AppWhereInput represents a where input for filtering App queries.
type AppWhereInput struct {
	Predicates []predicate.App  `json:"-"`
	Not        *AppWhereInput   `json:"not,omitempty"`
	Or         []*AppWhereInput `json:"or,omitempty"`
	And        []*AppWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "copyright" field predicates.
	Copyright             *string  `json:"copyright,omitempty"`
	CopyrightNEQ          *string  `json:"copyrightNEQ,omitempty"`
	CopyrightIn           []string `json:"copyrightIn,omitempty"`
	CopyrightNotIn        []string `json:"copyrightNotIn,omitempty"`
	CopyrightGT           *string  `json:"copyrightGT,omitempty"`
	CopyrightGTE          *string  `json:"copyrightGTE,omitempty"`
	CopyrightLT           *string  `json:"copyrightLT,omitempty"`
	CopyrightLTE          *string  `json:"copyrightLTE,omitempty"`
	CopyrightContains     *string  `json:"copyrightContains,omitempty"`
	CopyrightHasPrefix    *string  `json:"copyrightHasPrefix,omitempty"`
	CopyrightHasSuffix    *string  `json:"copyrightHasSuffix,omitempty"`
	CopyrightIsNil        bool     `json:"copyrightIsNil,omitempty"`
	CopyrightNotNil       bool     `json:"copyrightNotNil,omitempty"`
	CopyrightEqualFold    *string  `json:"copyrightEqualFold,omitempty"`
	CopyrightContainsFold *string  `json:"copyrightContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "address" field predicates.
	Address             *string  `json:"address,omitempty"`
	AddressNEQ          *string  `json:"addressNEQ,omitempty"`
	AddressIn           []string `json:"addressIn,omitempty"`
	AddressNotIn        []string `json:"addressNotIn,omitempty"`
	AddressGT           *string  `json:"addressGT,omitempty"`
	AddressGTE          *string  `json:"addressGTE,omitempty"`
	AddressLT           *string  `json:"addressLT,omitempty"`
	AddressLTE          *string  `json:"addressLTE,omitempty"`
	AddressContains     *string  `json:"addressContains,omitempty"`
	AddressHasPrefix    *string  `json:"addressHasPrefix,omitempty"`
	AddressHasSuffix    *string  `json:"addressHasSuffix,omitempty"`
	AddressIsNil        bool     `json:"addressIsNil,omitempty"`
	AddressNotNil       bool     `json:"addressNotNil,omitempty"`
	AddressEqualFold    *string  `json:"addressEqualFold,omitempty"`
	AddressContainsFold *string  `json:"addressContainsFold,omitempty"`

	// "social_tw" field predicates.
	SocialTw             *string  `json:"socialTw,omitempty"`
	SocialTwNEQ          *string  `json:"socialTwNEQ,omitempty"`
	SocialTwIn           []string `json:"socialTwIn,omitempty"`
	SocialTwNotIn        []string `json:"socialTwNotIn,omitempty"`
	SocialTwGT           *string  `json:"socialTwGT,omitempty"`
	SocialTwGTE          *string  `json:"socialTwGTE,omitempty"`
	SocialTwLT           *string  `json:"socialTwLT,omitempty"`
	SocialTwLTE          *string  `json:"socialTwLTE,omitempty"`
	SocialTwContains     *string  `json:"socialTwContains,omitempty"`
	SocialTwHasPrefix    *string  `json:"socialTwHasPrefix,omitempty"`
	SocialTwHasSuffix    *string  `json:"socialTwHasSuffix,omitempty"`
	SocialTwIsNil        bool     `json:"socialTwIsNil,omitempty"`
	SocialTwNotNil       bool     `json:"socialTwNotNil,omitempty"`
	SocialTwEqualFold    *string  `json:"socialTwEqualFold,omitempty"`
	SocialTwContainsFold *string  `json:"socialTwContainsFold,omitempty"`

	// "social_fb" field predicates.
	SocialFb             *string  `json:"socialFb,omitempty"`
	SocialFbNEQ          *string  `json:"socialFbNEQ,omitempty"`
	SocialFbIn           []string `json:"socialFbIn,omitempty"`
	SocialFbNotIn        []string `json:"socialFbNotIn,omitempty"`
	SocialFbGT           *string  `json:"socialFbGT,omitempty"`
	SocialFbGTE          *string  `json:"socialFbGTE,omitempty"`
	SocialFbLT           *string  `json:"socialFbLT,omitempty"`
	SocialFbLTE          *string  `json:"socialFbLTE,omitempty"`
	SocialFbContains     *string  `json:"socialFbContains,omitempty"`
	SocialFbHasPrefix    *string  `json:"socialFbHasPrefix,omitempty"`
	SocialFbHasSuffix    *string  `json:"socialFbHasSuffix,omitempty"`
	SocialFbIsNil        bool     `json:"socialFbIsNil,omitempty"`
	SocialFbNotNil       bool     `json:"socialFbNotNil,omitempty"`
	SocialFbEqualFold    *string  `json:"socialFbEqualFold,omitempty"`
	SocialFbContainsFold *string  `json:"socialFbContainsFold,omitempty"`

	// "social_in" field predicates.
	SocialIn             *string  `json:"socialIn,omitempty"`
	SocialInNEQ          *string  `json:"socialInNEQ,omitempty"`
	SocialInIn           []string `json:"socialInIn,omitempty"`
	SocialInNotIn        []string `json:"socialInNotIn,omitempty"`
	SocialInGT           *string  `json:"socialInGT,omitempty"`
	SocialInGTE          *string  `json:"socialInGTE,omitempty"`
	SocialInLT           *string  `json:"socialInLT,omitempty"`
	SocialInLTE          *string  `json:"socialInLTE,omitempty"`
	SocialInContains     *string  `json:"socialInContains,omitempty"`
	SocialInHasPrefix    *string  `json:"socialInHasPrefix,omitempty"`
	SocialInHasSuffix    *string  `json:"socialInHasSuffix,omitempty"`
	SocialInIsNil        bool     `json:"socialInIsNil,omitempty"`
	SocialInNotNil       bool     `json:"socialInNotNil,omitempty"`
	SocialInEqualFold    *string  `json:"socialInEqualFold,omitempty"`
	SocialInContainsFold *string  `json:"socialInContainsFold,omitempty"`

	// "logo_url" field predicates.
	LogoURL             *string  `json:"logoURL,omitempty"`
	LogoURLNEQ          *string  `json:"logoURLNEQ,omitempty"`
	LogoURLIn           []string `json:"logoURLIn,omitempty"`
	LogoURLNotIn        []string `json:"logoURLNotIn,omitempty"`
	LogoURLGT           *string  `json:"logoURLGT,omitempty"`
	LogoURLGTE          *string  `json:"logoURLGTE,omitempty"`
	LogoURLLT           *string  `json:"logoURLLT,omitempty"`
	LogoURLLTE          *string  `json:"logoURLLTE,omitempty"`
	LogoURLContains     *string  `json:"logoURLContains,omitempty"`
	LogoURLHasPrefix    *string  `json:"logoURLHasPrefix,omitempty"`
	LogoURLHasSuffix    *string  `json:"logoURLHasSuffix,omitempty"`
	LogoURLIsNil        bool     `json:"logoURLIsNil,omitempty"`
	LogoURLNotNil       bool     `json:"logoURLNotNil,omitempty"`
	LogoURLEqualFold    *string  `json:"logoURLEqualFold,omitempty"`
	LogoURLContainsFold *string  `json:"logoURLContainsFold,omitempty"`

	// "site_url" field predicates.
	SiteURL             *string  `json:"siteURL,omitempty"`
	SiteURLNEQ          *string  `json:"siteURLNEQ,omitempty"`
	SiteURLIn           []string `json:"siteURLIn,omitempty"`
	SiteURLNotIn        []string `json:"siteURLNotIn,omitempty"`
	SiteURLGT           *string  `json:"siteURLGT,omitempty"`
	SiteURLGTE          *string  `json:"siteURLGTE,omitempty"`
	SiteURLLT           *string  `json:"siteURLLT,omitempty"`
	SiteURLLTE          *string  `json:"siteURLLTE,omitempty"`
	SiteURLContains     *string  `json:"siteURLContains,omitempty"`
	SiteURLHasPrefix    *string  `json:"siteURLHasPrefix,omitempty"`
	SiteURLHasSuffix    *string  `json:"siteURLHasSuffix,omitempty"`
	SiteURLIsNil        bool     `json:"siteURLIsNil,omitempty"`
	SiteURLNotNil       bool     `json:"siteURLNotNil,omitempty"`
	SiteURLEqualFold    *string  `json:"siteURLEqualFold,omitempty"`
	SiteURLContainsFold *string  `json:"siteURLContainsFold,omitempty"`

	// "default_mail_conn_id" field predicates.
	DefaultMailConnID             *string  `json:"defaultMailConnID,omitempty"`
	DefaultMailConnIDNEQ          *string  `json:"defaultMailConnIDNEQ,omitempty"`
	DefaultMailConnIDIn           []string `json:"defaultMailConnIDIn,omitempty"`
	DefaultMailConnIDNotIn        []string `json:"defaultMailConnIDNotIn,omitempty"`
	DefaultMailConnIDGT           *string  `json:"defaultMailConnIDGT,omitempty"`
	DefaultMailConnIDGTE          *string  `json:"defaultMailConnIDGTE,omitempty"`
	DefaultMailConnIDLT           *string  `json:"defaultMailConnIDLT,omitempty"`
	DefaultMailConnIDLTE          *string  `json:"defaultMailConnIDLTE,omitempty"`
	DefaultMailConnIDContains     *string  `json:"defaultMailConnIDContains,omitempty"`
	DefaultMailConnIDHasPrefix    *string  `json:"defaultMailConnIDHasPrefix,omitempty"`
	DefaultMailConnIDHasSuffix    *string  `json:"defaultMailConnIDHasSuffix,omitempty"`
	DefaultMailConnIDIsNil        bool     `json:"defaultMailConnIDIsNil,omitempty"`
	DefaultMailConnIDNotNil       bool     `json:"defaultMailConnIDNotNil,omitempty"`
	DefaultMailConnIDEqualFold    *string  `json:"defaultMailConnIDEqualFold,omitempty"`
	DefaultMailConnIDContainsFold *string  `json:"defaultMailConnIDContainsFold,omitempty"`

	// "mail_layout_templ_id" field predicates.
	MailLayoutTemplID             *string  `json:"mailLayoutTemplID,omitempty"`
	MailLayoutTemplIDNEQ          *string  `json:"mailLayoutTemplIDNEQ,omitempty"`
	MailLayoutTemplIDIn           []string `json:"mailLayoutTemplIDIn,omitempty"`
	MailLayoutTemplIDNotIn        []string `json:"mailLayoutTemplIDNotIn,omitempty"`
	MailLayoutTemplIDGT           *string  `json:"mailLayoutTemplIDGT,omitempty"`
	MailLayoutTemplIDGTE          *string  `json:"mailLayoutTemplIDGTE,omitempty"`
	MailLayoutTemplIDLT           *string  `json:"mailLayoutTemplIDLT,omitempty"`
	MailLayoutTemplIDLTE          *string  `json:"mailLayoutTemplIDLTE,omitempty"`
	MailLayoutTemplIDContains     *string  `json:"mailLayoutTemplIDContains,omitempty"`
	MailLayoutTemplIDHasPrefix    *string  `json:"mailLayoutTemplIDHasPrefix,omitempty"`
	MailLayoutTemplIDHasSuffix    *string  `json:"mailLayoutTemplIDHasSuffix,omitempty"`
	MailLayoutTemplIDIsNil        bool     `json:"mailLayoutTemplIDIsNil,omitempty"`
	MailLayoutTemplIDNotNil       bool     `json:"mailLayoutTemplIDNotNil,omitempty"`
	MailLayoutTemplIDEqualFold    *string  `json:"mailLayoutTemplIDEqualFold,omitempty"`
	MailLayoutTemplIDContainsFold *string  `json:"mailLayoutTemplIDContainsFold,omitempty"`

	// "wsapce_invite_templ_id" field predicates.
	WsapceInviteTemplID             *string  `json:"wsapceInviteTemplID,omitempty"`
	WsapceInviteTemplIDNEQ          *string  `json:"wsapceInviteTemplIDNEQ,omitempty"`
	WsapceInviteTemplIDIn           []string `json:"wsapceInviteTemplIDIn,omitempty"`
	WsapceInviteTemplIDNotIn        []string `json:"wsapceInviteTemplIDNotIn,omitempty"`
	WsapceInviteTemplIDGT           *string  `json:"wsapceInviteTemplIDGT,omitempty"`
	WsapceInviteTemplIDGTE          *string  `json:"wsapceInviteTemplIDGTE,omitempty"`
	WsapceInviteTemplIDLT           *string  `json:"wsapceInviteTemplIDLT,omitempty"`
	WsapceInviteTemplIDLTE          *string  `json:"wsapceInviteTemplIDLTE,omitempty"`
	WsapceInviteTemplIDContains     *string  `json:"wsapceInviteTemplIDContains,omitempty"`
	WsapceInviteTemplIDHasPrefix    *string  `json:"wsapceInviteTemplIDHasPrefix,omitempty"`
	WsapceInviteTemplIDHasSuffix    *string  `json:"wsapceInviteTemplIDHasSuffix,omitempty"`
	WsapceInviteTemplIDIsNil        bool     `json:"wsapceInviteTemplIDIsNil,omitempty"`
	WsapceInviteTemplIDNotNil       bool     `json:"wsapceInviteTemplIDNotNil,omitempty"`
	WsapceInviteTemplIDEqualFold    *string  `json:"wsapceInviteTemplIDEqualFold,omitempty"`
	WsapceInviteTemplIDContainsFold *string  `json:"wsapceInviteTemplIDContainsFold,omitempty"`

	// "wsapce_success_templ_id" field predicates.
	WsapceSuccessTemplID             *string  `json:"wsapceSuccessTemplID,omitempty"`
	WsapceSuccessTemplIDNEQ          *string  `json:"wsapceSuccessTemplIDNEQ,omitempty"`
	WsapceSuccessTemplIDIn           []string `json:"wsapceSuccessTemplIDIn,omitempty"`
	WsapceSuccessTemplIDNotIn        []string `json:"wsapceSuccessTemplIDNotIn,omitempty"`
	WsapceSuccessTemplIDGT           *string  `json:"wsapceSuccessTemplIDGT,omitempty"`
	WsapceSuccessTemplIDGTE          *string  `json:"wsapceSuccessTemplIDGTE,omitempty"`
	WsapceSuccessTemplIDLT           *string  `json:"wsapceSuccessTemplIDLT,omitempty"`
	WsapceSuccessTemplIDLTE          *string  `json:"wsapceSuccessTemplIDLTE,omitempty"`
	WsapceSuccessTemplIDContains     *string  `json:"wsapceSuccessTemplIDContains,omitempty"`
	WsapceSuccessTemplIDHasPrefix    *string  `json:"wsapceSuccessTemplIDHasPrefix,omitempty"`
	WsapceSuccessTemplIDHasSuffix    *string  `json:"wsapceSuccessTemplIDHasSuffix,omitempty"`
	WsapceSuccessTemplIDIsNil        bool     `json:"wsapceSuccessTemplIDIsNil,omitempty"`
	WsapceSuccessTemplIDNotNil       bool     `json:"wsapceSuccessTemplIDNotNil,omitempty"`
	WsapceSuccessTemplIDEqualFold    *string  `json:"wsapceSuccessTemplIDEqualFold,omitempty"`
	WsapceSuccessTemplIDContainsFold *string  `json:"wsapceSuccessTemplIDContainsFold,omitempty"`

	// "auth_fp_templ_id" field predicates.
	AuthFpTemplID             *string  `json:"authFpTemplID,omitempty"`
	AuthFpTemplIDNEQ          *string  `json:"authFpTemplIDNEQ,omitempty"`
	AuthFpTemplIDIn           []string `json:"authFpTemplIDIn,omitempty"`
	AuthFpTemplIDNotIn        []string `json:"authFpTemplIDNotIn,omitempty"`
	AuthFpTemplIDGT           *string  `json:"authFpTemplIDGT,omitempty"`
	AuthFpTemplIDGTE          *string  `json:"authFpTemplIDGTE,omitempty"`
	AuthFpTemplIDLT           *string  `json:"authFpTemplIDLT,omitempty"`
	AuthFpTemplIDLTE          *string  `json:"authFpTemplIDLTE,omitempty"`
	AuthFpTemplIDContains     *string  `json:"authFpTemplIDContains,omitempty"`
	AuthFpTemplIDHasPrefix    *string  `json:"authFpTemplIDHasPrefix,omitempty"`
	AuthFpTemplIDHasSuffix    *string  `json:"authFpTemplIDHasSuffix,omitempty"`
	AuthFpTemplIDIsNil        bool     `json:"authFpTemplIDIsNil,omitempty"`
	AuthFpTemplIDNotNil       bool     `json:"authFpTemplIDNotNil,omitempty"`
	AuthFpTemplIDEqualFold    *string  `json:"authFpTemplIDEqualFold,omitempty"`
	AuthFpTemplIDContainsFold *string  `json:"authFpTemplIDContainsFold,omitempty"`

	// "auth_welcome_email_templ_id" field predicates.
	AuthWelcomeEmailTemplID             *string  `json:"authWelcomeEmailTemplID,omitempty"`
	AuthWelcomeEmailTemplIDNEQ          *string  `json:"authWelcomeEmailTemplIDNEQ,omitempty"`
	AuthWelcomeEmailTemplIDIn           []string `json:"authWelcomeEmailTemplIDIn,omitempty"`
	AuthWelcomeEmailTemplIDNotIn        []string `json:"authWelcomeEmailTemplIDNotIn,omitempty"`
	AuthWelcomeEmailTemplIDGT           *string  `json:"authWelcomeEmailTemplIDGT,omitempty"`
	AuthWelcomeEmailTemplIDGTE          *string  `json:"authWelcomeEmailTemplIDGTE,omitempty"`
	AuthWelcomeEmailTemplIDLT           *string  `json:"authWelcomeEmailTemplIDLT,omitempty"`
	AuthWelcomeEmailTemplIDLTE          *string  `json:"authWelcomeEmailTemplIDLTE,omitempty"`
	AuthWelcomeEmailTemplIDContains     *string  `json:"authWelcomeEmailTemplIDContains,omitempty"`
	AuthWelcomeEmailTemplIDHasPrefix    *string  `json:"authWelcomeEmailTemplIDHasPrefix,omitempty"`
	AuthWelcomeEmailTemplIDHasSuffix    *string  `json:"authWelcomeEmailTemplIDHasSuffix,omitempty"`
	AuthWelcomeEmailTemplIDIsNil        bool     `json:"authWelcomeEmailTemplIDIsNil,omitempty"`
	AuthWelcomeEmailTemplIDNotNil       bool     `json:"authWelcomeEmailTemplIDNotNil,omitempty"`
	AuthWelcomeEmailTemplIDEqualFold    *string  `json:"authWelcomeEmailTemplIDEqualFold,omitempty"`
	AuthWelcomeEmailTemplIDContainsFold *string  `json:"authWelcomeEmailTemplIDContainsFold,omitempty"`

	// "auth_verification_templ_id" field predicates.
	AuthVerificationTemplID             *string  `json:"authVerificationTemplID,omitempty"`
	AuthVerificationTemplIDNEQ          *string  `json:"authVerificationTemplIDNEQ,omitempty"`
	AuthVerificationTemplIDIn           []string `json:"authVerificationTemplIDIn,omitempty"`
	AuthVerificationTemplIDNotIn        []string `json:"authVerificationTemplIDNotIn,omitempty"`
	AuthVerificationTemplIDGT           *string  `json:"authVerificationTemplIDGT,omitempty"`
	AuthVerificationTemplIDGTE          *string  `json:"authVerificationTemplIDGTE,omitempty"`
	AuthVerificationTemplIDLT           *string  `json:"authVerificationTemplIDLT,omitempty"`
	AuthVerificationTemplIDLTE          *string  `json:"authVerificationTemplIDLTE,omitempty"`
	AuthVerificationTemplIDContains     *string  `json:"authVerificationTemplIDContains,omitempty"`
	AuthVerificationTemplIDHasPrefix    *string  `json:"authVerificationTemplIDHasPrefix,omitempty"`
	AuthVerificationTemplIDHasSuffix    *string  `json:"authVerificationTemplIDHasSuffix,omitempty"`
	AuthVerificationTemplIDIsNil        bool     `json:"authVerificationTemplIDIsNil,omitempty"`
	AuthVerificationTemplIDNotNil       bool     `json:"authVerificationTemplIDNotNil,omitempty"`
	AuthVerificationTemplIDEqualFold    *string  `json:"authVerificationTemplIDEqualFold,omitempty"`
	AuthVerificationTemplIDContainsFold *string  `json:"authVerificationTemplIDContainsFold,omitempty"`

	// "auth_email_verify" field predicates.
	AuthEmailVerify       *bool `json:"authEmailVerify,omitempty"`
	AuthEmailVerifyNEQ    *bool `json:"authEmailVerifyNEQ,omitempty"`
	AuthEmailVerifyIsNil  bool  `json:"authEmailVerifyIsNil,omitempty"`
	AuthEmailVerifyNotNil bool  `json:"authEmailVerifyNotNil,omitempty"`

	// "oauth_signin_can_signup" field predicates.
	OauthSigninCanSignup       *bool `json:"oauthSigninCanSignup,omitempty"`
	OauthSigninCanSignupNEQ    *bool `json:"oauthSigninCanSignupNEQ,omitempty"`
	OauthSigninCanSignupIsNil  bool  `json:"oauthSigninCanSignupIsNil,omitempty"`
	OauthSigninCanSignupNotNil bool  `json:"oauthSigninCanSignupNotNil,omitempty"`

	// "auth_enable_password_login" field predicates.
	AuthEnablePasswordLogin       *bool `json:"authEnablePasswordLogin,omitempty"`
	AuthEnablePasswordLoginNEQ    *bool `json:"authEnablePasswordLoginNEQ,omitempty"`
	AuthEnablePasswordLoginIsNil  bool  `json:"authEnablePasswordLoginIsNil,omitempty"`
	AuthEnablePasswordLoginNotNil bool  `json:"authEnablePasswordLoginNotNil,omitempty"`

	// "admin_user_id" field predicates.
	AdminUserID             *string  `json:"adminUserID,omitempty"`
	AdminUserIDNEQ          *string  `json:"adminUserIDNEQ,omitempty"`
	AdminUserIDIn           []string `json:"adminUserIDIn,omitempty"`
	AdminUserIDNotIn        []string `json:"adminUserIDNotIn,omitempty"`
	AdminUserIDGT           *string  `json:"adminUserIDGT,omitempty"`
	AdminUserIDGTE          *string  `json:"adminUserIDGTE,omitempty"`
	AdminUserIDLT           *string  `json:"adminUserIDLT,omitempty"`
	AdminUserIDLTE          *string  `json:"adminUserIDLTE,omitempty"`
	AdminUserIDContains     *string  `json:"adminUserIDContains,omitempty"`
	AdminUserIDHasPrefix    *string  `json:"adminUserIDHasPrefix,omitempty"`
	AdminUserIDHasSuffix    *string  `json:"adminUserIDHasSuffix,omitempty"`
	AdminUserIDIsNil        bool     `json:"adminUserIDIsNil,omitempty"`
	AdminUserIDNotNil       bool     `json:"adminUserIDNotNil,omitempty"`
	AdminUserIDEqualFold    *string  `json:"adminUserIDEqualFold,omitempty"`
	AdminUserIDContainsFold *string  `json:"adminUserIDContainsFold,omitempty"`

	// "default_mail_conn" edge predicates.
	HasDefaultMailConn     *bool                 `json:"hasDefaultMailConn,omitempty"`
	HasDefaultMailConnWith []*MailConnWhereInput `json:"hasDefaultMailConnWith,omitempty"`

	// "mail_layout_templ" edge predicates.
	HasMailLayoutTempl     *bool              `json:"hasMailLayoutTempl,omitempty"`
	HasMailLayoutTemplWith []*TemplWhereInput `json:"hasMailLayoutTemplWith,omitempty"`

	// "wsapce_invite_templ" edge predicates.
	HasWsapceInviteTempl     *bool              `json:"hasWsapceInviteTempl,omitempty"`
	HasWsapceInviteTemplWith []*TemplWhereInput `json:"hasWsapceInviteTemplWith,omitempty"`

	// "wsapce_success_templ" edge predicates.
	HasWsapceSuccessTempl     *bool              `json:"hasWsapceSuccessTempl,omitempty"`
	HasWsapceSuccessTemplWith []*TemplWhereInput `json:"hasWsapceSuccessTemplWith,omitempty"`

	// "auth_fp_templ" edge predicates.
	HasAuthFpTempl     *bool              `json:"hasAuthFpTempl,omitempty"`
	HasAuthFpTemplWith []*TemplWhereInput `json:"hasAuthFpTemplWith,omitempty"`

	// "auth_welcome_email_templ" edge predicates.
	HasAuthWelcomeEmailTempl     *bool              `json:"hasAuthWelcomeEmailTempl,omitempty"`
	HasAuthWelcomeEmailTemplWith []*TemplWhereInput `json:"hasAuthWelcomeEmailTemplWith,omitempty"`

	// "auth_verification_templ" edge predicates.
	HasAuthVerificationTempl     *bool              `json:"hasAuthVerificationTempl,omitempty"`
	HasAuthVerificationTemplWith []*TemplWhereInput `json:"hasAuthVerificationTemplWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AppWhereInput) AddPredicates(predicates ...predicate.App) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AppWhereInput filter on the AppQuery builder.
func (i *AppWhereInput) Filter(q *AppQuery) (*AppQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAppWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAppWhereInput is returned in case the AppWhereInput is empty.
var ErrEmptyAppWhereInput = errors.New("ent: empty predicate AppWhereInput")

// P returns a predicate for filtering apps.
// An error is returned if the input is empty or invalid.
func (i *AppWhereInput) P() (predicate.App, error) {
	var predicates []predicate.App
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, app.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.App, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, app.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.App, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, app.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, app.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, app.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, app.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, app.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, app.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, app.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, app.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, app.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, app.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, app.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, app.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, app.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, app.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, app.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, app.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, app.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, app.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, app.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, app.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, app.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, app.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, app.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, app.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, app.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, app.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, app.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, app.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, app.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, app.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, app.UpdatedAtNotNil())
	}
	if i.Name != nil {
		predicates = append(predicates, app.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, app.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, app.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, app.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, app.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, app.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, app.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, app.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, app.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, app.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, app.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, app.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, app.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, app.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, app.NameContainsFold(*i.NameContainsFold))
	}
	if i.Copyright != nil {
		predicates = append(predicates, app.CopyrightEQ(*i.Copyright))
	}
	if i.CopyrightNEQ != nil {
		predicates = append(predicates, app.CopyrightNEQ(*i.CopyrightNEQ))
	}
	if len(i.CopyrightIn) > 0 {
		predicates = append(predicates, app.CopyrightIn(i.CopyrightIn...))
	}
	if len(i.CopyrightNotIn) > 0 {
		predicates = append(predicates, app.CopyrightNotIn(i.CopyrightNotIn...))
	}
	if i.CopyrightGT != nil {
		predicates = append(predicates, app.CopyrightGT(*i.CopyrightGT))
	}
	if i.CopyrightGTE != nil {
		predicates = append(predicates, app.CopyrightGTE(*i.CopyrightGTE))
	}
	if i.CopyrightLT != nil {
		predicates = append(predicates, app.CopyrightLT(*i.CopyrightLT))
	}
	if i.CopyrightLTE != nil {
		predicates = append(predicates, app.CopyrightLTE(*i.CopyrightLTE))
	}
	if i.CopyrightContains != nil {
		predicates = append(predicates, app.CopyrightContains(*i.CopyrightContains))
	}
	if i.CopyrightHasPrefix != nil {
		predicates = append(predicates, app.CopyrightHasPrefix(*i.CopyrightHasPrefix))
	}
	if i.CopyrightHasSuffix != nil {
		predicates = append(predicates, app.CopyrightHasSuffix(*i.CopyrightHasSuffix))
	}
	if i.CopyrightIsNil {
		predicates = append(predicates, app.CopyrightIsNil())
	}
	if i.CopyrightNotNil {
		predicates = append(predicates, app.CopyrightNotNil())
	}
	if i.CopyrightEqualFold != nil {
		predicates = append(predicates, app.CopyrightEqualFold(*i.CopyrightEqualFold))
	}
	if i.CopyrightContainsFold != nil {
		predicates = append(predicates, app.CopyrightContainsFold(*i.CopyrightContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, app.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, app.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, app.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, app.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, app.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, app.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, app.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, app.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, app.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, app.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, app.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, app.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, app.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, app.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, app.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Address != nil {
		predicates = append(predicates, app.AddressEQ(*i.Address))
	}
	if i.AddressNEQ != nil {
		predicates = append(predicates, app.AddressNEQ(*i.AddressNEQ))
	}
	if len(i.AddressIn) > 0 {
		predicates = append(predicates, app.AddressIn(i.AddressIn...))
	}
	if len(i.AddressNotIn) > 0 {
		predicates = append(predicates, app.AddressNotIn(i.AddressNotIn...))
	}
	if i.AddressGT != nil {
		predicates = append(predicates, app.AddressGT(*i.AddressGT))
	}
	if i.AddressGTE != nil {
		predicates = append(predicates, app.AddressGTE(*i.AddressGTE))
	}
	if i.AddressLT != nil {
		predicates = append(predicates, app.AddressLT(*i.AddressLT))
	}
	if i.AddressLTE != nil {
		predicates = append(predicates, app.AddressLTE(*i.AddressLTE))
	}
	if i.AddressContains != nil {
		predicates = append(predicates, app.AddressContains(*i.AddressContains))
	}
	if i.AddressHasPrefix != nil {
		predicates = append(predicates, app.AddressHasPrefix(*i.AddressHasPrefix))
	}
	if i.AddressHasSuffix != nil {
		predicates = append(predicates, app.AddressHasSuffix(*i.AddressHasSuffix))
	}
	if i.AddressIsNil {
		predicates = append(predicates, app.AddressIsNil())
	}
	if i.AddressNotNil {
		predicates = append(predicates, app.AddressNotNil())
	}
	if i.AddressEqualFold != nil {
		predicates = append(predicates, app.AddressEqualFold(*i.AddressEqualFold))
	}
	if i.AddressContainsFold != nil {
		predicates = append(predicates, app.AddressContainsFold(*i.AddressContainsFold))
	}
	if i.SocialTw != nil {
		predicates = append(predicates, app.SocialTwEQ(*i.SocialTw))
	}
	if i.SocialTwNEQ != nil {
		predicates = append(predicates, app.SocialTwNEQ(*i.SocialTwNEQ))
	}
	if len(i.SocialTwIn) > 0 {
		predicates = append(predicates, app.SocialTwIn(i.SocialTwIn...))
	}
	if len(i.SocialTwNotIn) > 0 {
		predicates = append(predicates, app.SocialTwNotIn(i.SocialTwNotIn...))
	}
	if i.SocialTwGT != nil {
		predicates = append(predicates, app.SocialTwGT(*i.SocialTwGT))
	}
	if i.SocialTwGTE != nil {
		predicates = append(predicates, app.SocialTwGTE(*i.SocialTwGTE))
	}
	if i.SocialTwLT != nil {
		predicates = append(predicates, app.SocialTwLT(*i.SocialTwLT))
	}
	if i.SocialTwLTE != nil {
		predicates = append(predicates, app.SocialTwLTE(*i.SocialTwLTE))
	}
	if i.SocialTwContains != nil {
		predicates = append(predicates, app.SocialTwContains(*i.SocialTwContains))
	}
	if i.SocialTwHasPrefix != nil {
		predicates = append(predicates, app.SocialTwHasPrefix(*i.SocialTwHasPrefix))
	}
	if i.SocialTwHasSuffix != nil {
		predicates = append(predicates, app.SocialTwHasSuffix(*i.SocialTwHasSuffix))
	}
	if i.SocialTwIsNil {
		predicates = append(predicates, app.SocialTwIsNil())
	}
	if i.SocialTwNotNil {
		predicates = append(predicates, app.SocialTwNotNil())
	}
	if i.SocialTwEqualFold != nil {
		predicates = append(predicates, app.SocialTwEqualFold(*i.SocialTwEqualFold))
	}
	if i.SocialTwContainsFold != nil {
		predicates = append(predicates, app.SocialTwContainsFold(*i.SocialTwContainsFold))
	}
	if i.SocialFb != nil {
		predicates = append(predicates, app.SocialFbEQ(*i.SocialFb))
	}
	if i.SocialFbNEQ != nil {
		predicates = append(predicates, app.SocialFbNEQ(*i.SocialFbNEQ))
	}
	if len(i.SocialFbIn) > 0 {
		predicates = append(predicates, app.SocialFbIn(i.SocialFbIn...))
	}
	if len(i.SocialFbNotIn) > 0 {
		predicates = append(predicates, app.SocialFbNotIn(i.SocialFbNotIn...))
	}
	if i.SocialFbGT != nil {
		predicates = append(predicates, app.SocialFbGT(*i.SocialFbGT))
	}
	if i.SocialFbGTE != nil {
		predicates = append(predicates, app.SocialFbGTE(*i.SocialFbGTE))
	}
	if i.SocialFbLT != nil {
		predicates = append(predicates, app.SocialFbLT(*i.SocialFbLT))
	}
	if i.SocialFbLTE != nil {
		predicates = append(predicates, app.SocialFbLTE(*i.SocialFbLTE))
	}
	if i.SocialFbContains != nil {
		predicates = append(predicates, app.SocialFbContains(*i.SocialFbContains))
	}
	if i.SocialFbHasPrefix != nil {
		predicates = append(predicates, app.SocialFbHasPrefix(*i.SocialFbHasPrefix))
	}
	if i.SocialFbHasSuffix != nil {
		predicates = append(predicates, app.SocialFbHasSuffix(*i.SocialFbHasSuffix))
	}
	if i.SocialFbIsNil {
		predicates = append(predicates, app.SocialFbIsNil())
	}
	if i.SocialFbNotNil {
		predicates = append(predicates, app.SocialFbNotNil())
	}
	if i.SocialFbEqualFold != nil {
		predicates = append(predicates, app.SocialFbEqualFold(*i.SocialFbEqualFold))
	}
	if i.SocialFbContainsFold != nil {
		predicates = append(predicates, app.SocialFbContainsFold(*i.SocialFbContainsFold))
	}
	if i.SocialIn != nil {
		predicates = append(predicates, app.SocialInEQ(*i.SocialIn))
	}
	if i.SocialInNEQ != nil {
		predicates = append(predicates, app.SocialInNEQ(*i.SocialInNEQ))
	}
	if len(i.SocialInIn) > 0 {
		predicates = append(predicates, app.SocialInIn(i.SocialInIn...))
	}
	if len(i.SocialInNotIn) > 0 {
		predicates = append(predicates, app.SocialInNotIn(i.SocialInNotIn...))
	}
	if i.SocialInGT != nil {
		predicates = append(predicates, app.SocialInGT(*i.SocialInGT))
	}
	if i.SocialInGTE != nil {
		predicates = append(predicates, app.SocialInGTE(*i.SocialInGTE))
	}
	if i.SocialInLT != nil {
		predicates = append(predicates, app.SocialInLT(*i.SocialInLT))
	}
	if i.SocialInLTE != nil {
		predicates = append(predicates, app.SocialInLTE(*i.SocialInLTE))
	}
	if i.SocialInContains != nil {
		predicates = append(predicates, app.SocialInContains(*i.SocialInContains))
	}
	if i.SocialInHasPrefix != nil {
		predicates = append(predicates, app.SocialInHasPrefix(*i.SocialInHasPrefix))
	}
	if i.SocialInHasSuffix != nil {
		predicates = append(predicates, app.SocialInHasSuffix(*i.SocialInHasSuffix))
	}
	if i.SocialInIsNil {
		predicates = append(predicates, app.SocialInIsNil())
	}
	if i.SocialInNotNil {
		predicates = append(predicates, app.SocialInNotNil())
	}
	if i.SocialInEqualFold != nil {
		predicates = append(predicates, app.SocialInEqualFold(*i.SocialInEqualFold))
	}
	if i.SocialInContainsFold != nil {
		predicates = append(predicates, app.SocialInContainsFold(*i.SocialInContainsFold))
	}
	if i.LogoURL != nil {
		predicates = append(predicates, app.LogoURLEQ(*i.LogoURL))
	}
	if i.LogoURLNEQ != nil {
		predicates = append(predicates, app.LogoURLNEQ(*i.LogoURLNEQ))
	}
	if len(i.LogoURLIn) > 0 {
		predicates = append(predicates, app.LogoURLIn(i.LogoURLIn...))
	}
	if len(i.LogoURLNotIn) > 0 {
		predicates = append(predicates, app.LogoURLNotIn(i.LogoURLNotIn...))
	}
	if i.LogoURLGT != nil {
		predicates = append(predicates, app.LogoURLGT(*i.LogoURLGT))
	}
	if i.LogoURLGTE != nil {
		predicates = append(predicates, app.LogoURLGTE(*i.LogoURLGTE))
	}
	if i.LogoURLLT != nil {
		predicates = append(predicates, app.LogoURLLT(*i.LogoURLLT))
	}
	if i.LogoURLLTE != nil {
		predicates = append(predicates, app.LogoURLLTE(*i.LogoURLLTE))
	}
	if i.LogoURLContains != nil {
		predicates = append(predicates, app.LogoURLContains(*i.LogoURLContains))
	}
	if i.LogoURLHasPrefix != nil {
		predicates = append(predicates, app.LogoURLHasPrefix(*i.LogoURLHasPrefix))
	}
	if i.LogoURLHasSuffix != nil {
		predicates = append(predicates, app.LogoURLHasSuffix(*i.LogoURLHasSuffix))
	}
	if i.LogoURLIsNil {
		predicates = append(predicates, app.LogoURLIsNil())
	}
	if i.LogoURLNotNil {
		predicates = append(predicates, app.LogoURLNotNil())
	}
	if i.LogoURLEqualFold != nil {
		predicates = append(predicates, app.LogoURLEqualFold(*i.LogoURLEqualFold))
	}
	if i.LogoURLContainsFold != nil {
		predicates = append(predicates, app.LogoURLContainsFold(*i.LogoURLContainsFold))
	}
	if i.SiteURL != nil {
		predicates = append(predicates, app.SiteURLEQ(*i.SiteURL))
	}
	if i.SiteURLNEQ != nil {
		predicates = append(predicates, app.SiteURLNEQ(*i.SiteURLNEQ))
	}
	if len(i.SiteURLIn) > 0 {
		predicates = append(predicates, app.SiteURLIn(i.SiteURLIn...))
	}
	if len(i.SiteURLNotIn) > 0 {
		predicates = append(predicates, app.SiteURLNotIn(i.SiteURLNotIn...))
	}
	if i.SiteURLGT != nil {
		predicates = append(predicates, app.SiteURLGT(*i.SiteURLGT))
	}
	if i.SiteURLGTE != nil {
		predicates = append(predicates, app.SiteURLGTE(*i.SiteURLGTE))
	}
	if i.SiteURLLT != nil {
		predicates = append(predicates, app.SiteURLLT(*i.SiteURLLT))
	}
	if i.SiteURLLTE != nil {
		predicates = append(predicates, app.SiteURLLTE(*i.SiteURLLTE))
	}
	if i.SiteURLContains != nil {
		predicates = append(predicates, app.SiteURLContains(*i.SiteURLContains))
	}
	if i.SiteURLHasPrefix != nil {
		predicates = append(predicates, app.SiteURLHasPrefix(*i.SiteURLHasPrefix))
	}
	if i.SiteURLHasSuffix != nil {
		predicates = append(predicates, app.SiteURLHasSuffix(*i.SiteURLHasSuffix))
	}
	if i.SiteURLIsNil {
		predicates = append(predicates, app.SiteURLIsNil())
	}
	if i.SiteURLNotNil {
		predicates = append(predicates, app.SiteURLNotNil())
	}
	if i.SiteURLEqualFold != nil {
		predicates = append(predicates, app.SiteURLEqualFold(*i.SiteURLEqualFold))
	}
	if i.SiteURLContainsFold != nil {
		predicates = append(predicates, app.SiteURLContainsFold(*i.SiteURLContainsFold))
	}
	if i.DefaultMailConnID != nil {
		predicates = append(predicates, app.DefaultMailConnIDEQ(*i.DefaultMailConnID))
	}
	if i.DefaultMailConnIDNEQ != nil {
		predicates = append(predicates, app.DefaultMailConnIDNEQ(*i.DefaultMailConnIDNEQ))
	}
	if len(i.DefaultMailConnIDIn) > 0 {
		predicates = append(predicates, app.DefaultMailConnIDIn(i.DefaultMailConnIDIn...))
	}
	if len(i.DefaultMailConnIDNotIn) > 0 {
		predicates = append(predicates, app.DefaultMailConnIDNotIn(i.DefaultMailConnIDNotIn...))
	}
	if i.DefaultMailConnIDGT != nil {
		predicates = append(predicates, app.DefaultMailConnIDGT(*i.DefaultMailConnIDGT))
	}
	if i.DefaultMailConnIDGTE != nil {
		predicates = append(predicates, app.DefaultMailConnIDGTE(*i.DefaultMailConnIDGTE))
	}
	if i.DefaultMailConnIDLT != nil {
		predicates = append(predicates, app.DefaultMailConnIDLT(*i.DefaultMailConnIDLT))
	}
	if i.DefaultMailConnIDLTE != nil {
		predicates = append(predicates, app.DefaultMailConnIDLTE(*i.DefaultMailConnIDLTE))
	}
	if i.DefaultMailConnIDContains != nil {
		predicates = append(predicates, app.DefaultMailConnIDContains(*i.DefaultMailConnIDContains))
	}
	if i.DefaultMailConnIDHasPrefix != nil {
		predicates = append(predicates, app.DefaultMailConnIDHasPrefix(*i.DefaultMailConnIDHasPrefix))
	}
	if i.DefaultMailConnIDHasSuffix != nil {
		predicates = append(predicates, app.DefaultMailConnIDHasSuffix(*i.DefaultMailConnIDHasSuffix))
	}
	if i.DefaultMailConnIDIsNil {
		predicates = append(predicates, app.DefaultMailConnIDIsNil())
	}
	if i.DefaultMailConnIDNotNil {
		predicates = append(predicates, app.DefaultMailConnIDNotNil())
	}
	if i.DefaultMailConnIDEqualFold != nil {
		predicates = append(predicates, app.DefaultMailConnIDEqualFold(*i.DefaultMailConnIDEqualFold))
	}
	if i.DefaultMailConnIDContainsFold != nil {
		predicates = append(predicates, app.DefaultMailConnIDContainsFold(*i.DefaultMailConnIDContainsFold))
	}
	if i.MailLayoutTemplID != nil {
		predicates = append(predicates, app.MailLayoutTemplIDEQ(*i.MailLayoutTemplID))
	}
	if i.MailLayoutTemplIDNEQ != nil {
		predicates = append(predicates, app.MailLayoutTemplIDNEQ(*i.MailLayoutTemplIDNEQ))
	}
	if len(i.MailLayoutTemplIDIn) > 0 {
		predicates = append(predicates, app.MailLayoutTemplIDIn(i.MailLayoutTemplIDIn...))
	}
	if len(i.MailLayoutTemplIDNotIn) > 0 {
		predicates = append(predicates, app.MailLayoutTemplIDNotIn(i.MailLayoutTemplIDNotIn...))
	}
	if i.MailLayoutTemplIDGT != nil {
		predicates = append(predicates, app.MailLayoutTemplIDGT(*i.MailLayoutTemplIDGT))
	}
	if i.MailLayoutTemplIDGTE != nil {
		predicates = append(predicates, app.MailLayoutTemplIDGTE(*i.MailLayoutTemplIDGTE))
	}
	if i.MailLayoutTemplIDLT != nil {
		predicates = append(predicates, app.MailLayoutTemplIDLT(*i.MailLayoutTemplIDLT))
	}
	if i.MailLayoutTemplIDLTE != nil {
		predicates = append(predicates, app.MailLayoutTemplIDLTE(*i.MailLayoutTemplIDLTE))
	}
	if i.MailLayoutTemplIDContains != nil {
		predicates = append(predicates, app.MailLayoutTemplIDContains(*i.MailLayoutTemplIDContains))
	}
	if i.MailLayoutTemplIDHasPrefix != nil {
		predicates = append(predicates, app.MailLayoutTemplIDHasPrefix(*i.MailLayoutTemplIDHasPrefix))
	}
	if i.MailLayoutTemplIDHasSuffix != nil {
		predicates = append(predicates, app.MailLayoutTemplIDHasSuffix(*i.MailLayoutTemplIDHasSuffix))
	}
	if i.MailLayoutTemplIDIsNil {
		predicates = append(predicates, app.MailLayoutTemplIDIsNil())
	}
	if i.MailLayoutTemplIDNotNil {
		predicates = append(predicates, app.MailLayoutTemplIDNotNil())
	}
	if i.MailLayoutTemplIDEqualFold != nil {
		predicates = append(predicates, app.MailLayoutTemplIDEqualFold(*i.MailLayoutTemplIDEqualFold))
	}
	if i.MailLayoutTemplIDContainsFold != nil {
		predicates = append(predicates, app.MailLayoutTemplIDContainsFold(*i.MailLayoutTemplIDContainsFold))
	}
	if i.WsapceInviteTemplID != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDEQ(*i.WsapceInviteTemplID))
	}
	if i.WsapceInviteTemplIDNEQ != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDNEQ(*i.WsapceInviteTemplIDNEQ))
	}
	if len(i.WsapceInviteTemplIDIn) > 0 {
		predicates = append(predicates, app.WsapceInviteTemplIDIn(i.WsapceInviteTemplIDIn...))
	}
	if len(i.WsapceInviteTemplIDNotIn) > 0 {
		predicates = append(predicates, app.WsapceInviteTemplIDNotIn(i.WsapceInviteTemplIDNotIn...))
	}
	if i.WsapceInviteTemplIDGT != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDGT(*i.WsapceInviteTemplIDGT))
	}
	if i.WsapceInviteTemplIDGTE != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDGTE(*i.WsapceInviteTemplIDGTE))
	}
	if i.WsapceInviteTemplIDLT != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDLT(*i.WsapceInviteTemplIDLT))
	}
	if i.WsapceInviteTemplIDLTE != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDLTE(*i.WsapceInviteTemplIDLTE))
	}
	if i.WsapceInviteTemplIDContains != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDContains(*i.WsapceInviteTemplIDContains))
	}
	if i.WsapceInviteTemplIDHasPrefix != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDHasPrefix(*i.WsapceInviteTemplIDHasPrefix))
	}
	if i.WsapceInviteTemplIDHasSuffix != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDHasSuffix(*i.WsapceInviteTemplIDHasSuffix))
	}
	if i.WsapceInviteTemplIDIsNil {
		predicates = append(predicates, app.WsapceInviteTemplIDIsNil())
	}
	if i.WsapceInviteTemplIDNotNil {
		predicates = append(predicates, app.WsapceInviteTemplIDNotNil())
	}
	if i.WsapceInviteTemplIDEqualFold != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDEqualFold(*i.WsapceInviteTemplIDEqualFold))
	}
	if i.WsapceInviteTemplIDContainsFold != nil {
		predicates = append(predicates, app.WsapceInviteTemplIDContainsFold(*i.WsapceInviteTemplIDContainsFold))
	}
	if i.WsapceSuccessTemplID != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDEQ(*i.WsapceSuccessTemplID))
	}
	if i.WsapceSuccessTemplIDNEQ != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDNEQ(*i.WsapceSuccessTemplIDNEQ))
	}
	if len(i.WsapceSuccessTemplIDIn) > 0 {
		predicates = append(predicates, app.WsapceSuccessTemplIDIn(i.WsapceSuccessTemplIDIn...))
	}
	if len(i.WsapceSuccessTemplIDNotIn) > 0 {
		predicates = append(predicates, app.WsapceSuccessTemplIDNotIn(i.WsapceSuccessTemplIDNotIn...))
	}
	if i.WsapceSuccessTemplIDGT != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDGT(*i.WsapceSuccessTemplIDGT))
	}
	if i.WsapceSuccessTemplIDGTE != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDGTE(*i.WsapceSuccessTemplIDGTE))
	}
	if i.WsapceSuccessTemplIDLT != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDLT(*i.WsapceSuccessTemplIDLT))
	}
	if i.WsapceSuccessTemplIDLTE != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDLTE(*i.WsapceSuccessTemplIDLTE))
	}
	if i.WsapceSuccessTemplIDContains != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDContains(*i.WsapceSuccessTemplIDContains))
	}
	if i.WsapceSuccessTemplIDHasPrefix != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDHasPrefix(*i.WsapceSuccessTemplIDHasPrefix))
	}
	if i.WsapceSuccessTemplIDHasSuffix != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDHasSuffix(*i.WsapceSuccessTemplIDHasSuffix))
	}
	if i.WsapceSuccessTemplIDIsNil {
		predicates = append(predicates, app.WsapceSuccessTemplIDIsNil())
	}
	if i.WsapceSuccessTemplIDNotNil {
		predicates = append(predicates, app.WsapceSuccessTemplIDNotNil())
	}
	if i.WsapceSuccessTemplIDEqualFold != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDEqualFold(*i.WsapceSuccessTemplIDEqualFold))
	}
	if i.WsapceSuccessTemplIDContainsFold != nil {
		predicates = append(predicates, app.WsapceSuccessTemplIDContainsFold(*i.WsapceSuccessTemplIDContainsFold))
	}
	if i.AuthFpTemplID != nil {
		predicates = append(predicates, app.AuthFpTemplIDEQ(*i.AuthFpTemplID))
	}
	if i.AuthFpTemplIDNEQ != nil {
		predicates = append(predicates, app.AuthFpTemplIDNEQ(*i.AuthFpTemplIDNEQ))
	}
	if len(i.AuthFpTemplIDIn) > 0 {
		predicates = append(predicates, app.AuthFpTemplIDIn(i.AuthFpTemplIDIn...))
	}
	if len(i.AuthFpTemplIDNotIn) > 0 {
		predicates = append(predicates, app.AuthFpTemplIDNotIn(i.AuthFpTemplIDNotIn...))
	}
	if i.AuthFpTemplIDGT != nil {
		predicates = append(predicates, app.AuthFpTemplIDGT(*i.AuthFpTemplIDGT))
	}
	if i.AuthFpTemplIDGTE != nil {
		predicates = append(predicates, app.AuthFpTemplIDGTE(*i.AuthFpTemplIDGTE))
	}
	if i.AuthFpTemplIDLT != nil {
		predicates = append(predicates, app.AuthFpTemplIDLT(*i.AuthFpTemplIDLT))
	}
	if i.AuthFpTemplIDLTE != nil {
		predicates = append(predicates, app.AuthFpTemplIDLTE(*i.AuthFpTemplIDLTE))
	}
	if i.AuthFpTemplIDContains != nil {
		predicates = append(predicates, app.AuthFpTemplIDContains(*i.AuthFpTemplIDContains))
	}
	if i.AuthFpTemplIDHasPrefix != nil {
		predicates = append(predicates, app.AuthFpTemplIDHasPrefix(*i.AuthFpTemplIDHasPrefix))
	}
	if i.AuthFpTemplIDHasSuffix != nil {
		predicates = append(predicates, app.AuthFpTemplIDHasSuffix(*i.AuthFpTemplIDHasSuffix))
	}
	if i.AuthFpTemplIDIsNil {
		predicates = append(predicates, app.AuthFpTemplIDIsNil())
	}
	if i.AuthFpTemplIDNotNil {
		predicates = append(predicates, app.AuthFpTemplIDNotNil())
	}
	if i.AuthFpTemplIDEqualFold != nil {
		predicates = append(predicates, app.AuthFpTemplIDEqualFold(*i.AuthFpTemplIDEqualFold))
	}
	if i.AuthFpTemplIDContainsFold != nil {
		predicates = append(predicates, app.AuthFpTemplIDContainsFold(*i.AuthFpTemplIDContainsFold))
	}
	if i.AuthWelcomeEmailTemplID != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDEQ(*i.AuthWelcomeEmailTemplID))
	}
	if i.AuthWelcomeEmailTemplIDNEQ != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDNEQ(*i.AuthWelcomeEmailTemplIDNEQ))
	}
	if len(i.AuthWelcomeEmailTemplIDIn) > 0 {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDIn(i.AuthWelcomeEmailTemplIDIn...))
	}
	if len(i.AuthWelcomeEmailTemplIDNotIn) > 0 {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDNotIn(i.AuthWelcomeEmailTemplIDNotIn...))
	}
	if i.AuthWelcomeEmailTemplIDGT != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDGT(*i.AuthWelcomeEmailTemplIDGT))
	}
	if i.AuthWelcomeEmailTemplIDGTE != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDGTE(*i.AuthWelcomeEmailTemplIDGTE))
	}
	if i.AuthWelcomeEmailTemplIDLT != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDLT(*i.AuthWelcomeEmailTemplIDLT))
	}
	if i.AuthWelcomeEmailTemplIDLTE != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDLTE(*i.AuthWelcomeEmailTemplIDLTE))
	}
	if i.AuthWelcomeEmailTemplIDContains != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDContains(*i.AuthWelcomeEmailTemplIDContains))
	}
	if i.AuthWelcomeEmailTemplIDHasPrefix != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDHasPrefix(*i.AuthWelcomeEmailTemplIDHasPrefix))
	}
	if i.AuthWelcomeEmailTemplIDHasSuffix != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDHasSuffix(*i.AuthWelcomeEmailTemplIDHasSuffix))
	}
	if i.AuthWelcomeEmailTemplIDIsNil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDIsNil())
	}
	if i.AuthWelcomeEmailTemplIDNotNil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDNotNil())
	}
	if i.AuthWelcomeEmailTemplIDEqualFold != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDEqualFold(*i.AuthWelcomeEmailTemplIDEqualFold))
	}
	if i.AuthWelcomeEmailTemplIDContainsFold != nil {
		predicates = append(predicates, app.AuthWelcomeEmailTemplIDContainsFold(*i.AuthWelcomeEmailTemplIDContainsFold))
	}
	if i.AuthVerificationTemplID != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDEQ(*i.AuthVerificationTemplID))
	}
	if i.AuthVerificationTemplIDNEQ != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDNEQ(*i.AuthVerificationTemplIDNEQ))
	}
	if len(i.AuthVerificationTemplIDIn) > 0 {
		predicates = append(predicates, app.AuthVerificationTemplIDIn(i.AuthVerificationTemplIDIn...))
	}
	if len(i.AuthVerificationTemplIDNotIn) > 0 {
		predicates = append(predicates, app.AuthVerificationTemplIDNotIn(i.AuthVerificationTemplIDNotIn...))
	}
	if i.AuthVerificationTemplIDGT != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDGT(*i.AuthVerificationTemplIDGT))
	}
	if i.AuthVerificationTemplIDGTE != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDGTE(*i.AuthVerificationTemplIDGTE))
	}
	if i.AuthVerificationTemplIDLT != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDLT(*i.AuthVerificationTemplIDLT))
	}
	if i.AuthVerificationTemplIDLTE != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDLTE(*i.AuthVerificationTemplIDLTE))
	}
	if i.AuthVerificationTemplIDContains != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDContains(*i.AuthVerificationTemplIDContains))
	}
	if i.AuthVerificationTemplIDHasPrefix != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDHasPrefix(*i.AuthVerificationTemplIDHasPrefix))
	}
	if i.AuthVerificationTemplIDHasSuffix != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDHasSuffix(*i.AuthVerificationTemplIDHasSuffix))
	}
	if i.AuthVerificationTemplIDIsNil {
		predicates = append(predicates, app.AuthVerificationTemplIDIsNil())
	}
	if i.AuthVerificationTemplIDNotNil {
		predicates = append(predicates, app.AuthVerificationTemplIDNotNil())
	}
	if i.AuthVerificationTemplIDEqualFold != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDEqualFold(*i.AuthVerificationTemplIDEqualFold))
	}
	if i.AuthVerificationTemplIDContainsFold != nil {
		predicates = append(predicates, app.AuthVerificationTemplIDContainsFold(*i.AuthVerificationTemplIDContainsFold))
	}
	if i.AuthEmailVerify != nil {
		predicates = append(predicates, app.AuthEmailVerifyEQ(*i.AuthEmailVerify))
	}
	if i.AuthEmailVerifyNEQ != nil {
		predicates = append(predicates, app.AuthEmailVerifyNEQ(*i.AuthEmailVerifyNEQ))
	}
	if i.AuthEmailVerifyIsNil {
		predicates = append(predicates, app.AuthEmailVerifyIsNil())
	}
	if i.AuthEmailVerifyNotNil {
		predicates = append(predicates, app.AuthEmailVerifyNotNil())
	}
	if i.OauthSigninCanSignup != nil {
		predicates = append(predicates, app.OauthSigninCanSignupEQ(*i.OauthSigninCanSignup))
	}
	if i.OauthSigninCanSignupNEQ != nil {
		predicates = append(predicates, app.OauthSigninCanSignupNEQ(*i.OauthSigninCanSignupNEQ))
	}
	if i.OauthSigninCanSignupIsNil {
		predicates = append(predicates, app.OauthSigninCanSignupIsNil())
	}
	if i.OauthSigninCanSignupNotNil {
		predicates = append(predicates, app.OauthSigninCanSignupNotNil())
	}
	if i.AuthEnablePasswordLogin != nil {
		predicates = append(predicates, app.AuthEnablePasswordLoginEQ(*i.AuthEnablePasswordLogin))
	}
	if i.AuthEnablePasswordLoginNEQ != nil {
		predicates = append(predicates, app.AuthEnablePasswordLoginNEQ(*i.AuthEnablePasswordLoginNEQ))
	}
	if i.AuthEnablePasswordLoginIsNil {
		predicates = append(predicates, app.AuthEnablePasswordLoginIsNil())
	}
	if i.AuthEnablePasswordLoginNotNil {
		predicates = append(predicates, app.AuthEnablePasswordLoginNotNil())
	}
	if i.AdminUserID != nil {
		predicates = append(predicates, app.AdminUserIDEQ(*i.AdminUserID))
	}
	if i.AdminUserIDNEQ != nil {
		predicates = append(predicates, app.AdminUserIDNEQ(*i.AdminUserIDNEQ))
	}
	if len(i.AdminUserIDIn) > 0 {
		predicates = append(predicates, app.AdminUserIDIn(i.AdminUserIDIn...))
	}
	if len(i.AdminUserIDNotIn) > 0 {
		predicates = append(predicates, app.AdminUserIDNotIn(i.AdminUserIDNotIn...))
	}
	if i.AdminUserIDGT != nil {
		predicates = append(predicates, app.AdminUserIDGT(*i.AdminUserIDGT))
	}
	if i.AdminUserIDGTE != nil {
		predicates = append(predicates, app.AdminUserIDGTE(*i.AdminUserIDGTE))
	}
	if i.AdminUserIDLT != nil {
		predicates = append(predicates, app.AdminUserIDLT(*i.AdminUserIDLT))
	}
	if i.AdminUserIDLTE != nil {
		predicates = append(predicates, app.AdminUserIDLTE(*i.AdminUserIDLTE))
	}
	if i.AdminUserIDContains != nil {
		predicates = append(predicates, app.AdminUserIDContains(*i.AdminUserIDContains))
	}
	if i.AdminUserIDHasPrefix != nil {
		predicates = append(predicates, app.AdminUserIDHasPrefix(*i.AdminUserIDHasPrefix))
	}
	if i.AdminUserIDHasSuffix != nil {
		predicates = append(predicates, app.AdminUserIDHasSuffix(*i.AdminUserIDHasSuffix))
	}
	if i.AdminUserIDIsNil {
		predicates = append(predicates, app.AdminUserIDIsNil())
	}
	if i.AdminUserIDNotNil {
		predicates = append(predicates, app.AdminUserIDNotNil())
	}
	if i.AdminUserIDEqualFold != nil {
		predicates = append(predicates, app.AdminUserIDEqualFold(*i.AdminUserIDEqualFold))
	}
	if i.AdminUserIDContainsFold != nil {
		predicates = append(predicates, app.AdminUserIDContainsFold(*i.AdminUserIDContainsFold))
	}

	if i.HasDefaultMailConn != nil {
		p := app.HasDefaultMailConn()
		if !*i.HasDefaultMailConn {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasDefaultMailConnWith) > 0 {
		with := make([]predicate.MailConn, 0, len(i.HasDefaultMailConnWith))
		for _, w := range i.HasDefaultMailConnWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasDefaultMailConnWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasDefaultMailConnWith(with...))
	}
	if i.HasMailLayoutTempl != nil {
		p := app.HasMailLayoutTempl()
		if !*i.HasMailLayoutTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasMailLayoutTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasMailLayoutTemplWith))
		for _, w := range i.HasMailLayoutTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasMailLayoutTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasMailLayoutTemplWith(with...))
	}
	if i.HasWsapceInviteTempl != nil {
		p := app.HasWsapceInviteTempl()
		if !*i.HasWsapceInviteTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWsapceInviteTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasWsapceInviteTemplWith))
		for _, w := range i.HasWsapceInviteTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWsapceInviteTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasWsapceInviteTemplWith(with...))
	}
	if i.HasWsapceSuccessTempl != nil {
		p := app.HasWsapceSuccessTempl()
		if !*i.HasWsapceSuccessTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWsapceSuccessTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasWsapceSuccessTemplWith))
		for _, w := range i.HasWsapceSuccessTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWsapceSuccessTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasWsapceSuccessTemplWith(with...))
	}
	if i.HasAuthFpTempl != nil {
		p := app.HasAuthFpTempl()
		if !*i.HasAuthFpTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthFpTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasAuthFpTemplWith))
		for _, w := range i.HasAuthFpTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthFpTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasAuthFpTemplWith(with...))
	}
	if i.HasAuthWelcomeEmailTempl != nil {
		p := app.HasAuthWelcomeEmailTempl()
		if !*i.HasAuthWelcomeEmailTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthWelcomeEmailTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasAuthWelcomeEmailTemplWith))
		for _, w := range i.HasAuthWelcomeEmailTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthWelcomeEmailTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasAuthWelcomeEmailTemplWith(with...))
	}
	if i.HasAuthVerificationTempl != nil {
		p := app.HasAuthVerificationTempl()
		if !*i.HasAuthVerificationTempl {
			p = app.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasAuthVerificationTemplWith) > 0 {
		with := make([]predicate.Templ, 0, len(i.HasAuthVerificationTemplWith))
		for _, w := range i.HasAuthVerificationTemplWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasAuthVerificationTemplWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, app.HasAuthVerificationTemplWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAppWhereInput
	case 1:
		return predicates[0], nil
	default:
		return app.And(predicates...), nil
	}
}

// MailConnWhereInput represents a where input for filtering MailConn queries.
type MailConnWhereInput struct {
	Predicates []predicate.MailConn  `json:"-"`
	Not        *MailConnWhereInput   `json:"not,omitempty"`
	Or         []*MailConnWhereInput `json:"or,omitempty"`
	And        []*MailConnWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "host" field predicates.
	Host             *string  `json:"host,omitempty"`
	HostNEQ          *string  `json:"hostNEQ,omitempty"`
	HostIn           []string `json:"hostIn,omitempty"`
	HostNotIn        []string `json:"hostNotIn,omitempty"`
	HostGT           *string  `json:"hostGT,omitempty"`
	HostGTE          *string  `json:"hostGTE,omitempty"`
	HostLT           *string  `json:"hostLT,omitempty"`
	HostLTE          *string  `json:"hostLTE,omitempty"`
	HostContains     *string  `json:"hostContains,omitempty"`
	HostHasPrefix    *string  `json:"hostHasPrefix,omitempty"`
	HostHasSuffix    *string  `json:"hostHasSuffix,omitempty"`
	HostIsNil        bool     `json:"hostIsNil,omitempty"`
	HostNotNil       bool     `json:"hostNotNil,omitempty"`
	HostEqualFold    *string  `json:"hostEqualFold,omitempty"`
	HostContainsFold *string  `json:"hostContainsFold,omitempty"`

	// "port" field predicates.
	Port       *int  `json:"port,omitempty"`
	PortNEQ    *int  `json:"portNEQ,omitempty"`
	PortIn     []int `json:"portIn,omitempty"`
	PortNotIn  []int `json:"portNotIn,omitempty"`
	PortGT     *int  `json:"portGT,omitempty"`
	PortGTE    *int  `json:"portGTE,omitempty"`
	PortLT     *int  `json:"portLT,omitempty"`
	PortLTE    *int  `json:"portLTE,omitempty"`
	PortIsNil  bool  `json:"portIsNil,omitempty"`
	PortNotNil bool  `json:"portNotNil,omitempty"`

	// "username" field predicates.
	Username             *string  `json:"username,omitempty"`
	UsernameNEQ          *string  `json:"usernameNEQ,omitempty"`
	UsernameIn           []string `json:"usernameIn,omitempty"`
	UsernameNotIn        []string `json:"usernameNotIn,omitempty"`
	UsernameGT           *string  `json:"usernameGT,omitempty"`
	UsernameGTE          *string  `json:"usernameGTE,omitempty"`
	UsernameLT           *string  `json:"usernameLT,omitempty"`
	UsernameLTE          *string  `json:"usernameLTE,omitempty"`
	UsernameContains     *string  `json:"usernameContains,omitempty"`
	UsernameHasPrefix    *string  `json:"usernameHasPrefix,omitempty"`
	UsernameHasSuffix    *string  `json:"usernameHasSuffix,omitempty"`
	UsernameIsNil        bool     `json:"usernameIsNil,omitempty"`
	UsernameNotNil       bool     `json:"usernameNotNil,omitempty"`
	UsernameEqualFold    *string  `json:"usernameEqualFold,omitempty"`
	UsernameContainsFold *string  `json:"usernameContainsFold,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordIsNil        bool     `json:"passwordIsNil,omitempty"`
	PasswordNotNil       bool     `json:"passwordNotNil,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "encryption" field predicates.
	Encryption       *int  `json:"encryption,omitempty"`
	EncryptionNEQ    *int  `json:"encryptionNEQ,omitempty"`
	EncryptionIn     []int `json:"encryptionIn,omitempty"`
	EncryptionNotIn  []int `json:"encryptionNotIn,omitempty"`
	EncryptionGT     *int  `json:"encryptionGT,omitempty"`
	EncryptionGTE    *int  `json:"encryptionGTE,omitempty"`
	EncryptionLT     *int  `json:"encryptionLT,omitempty"`
	EncryptionLTE    *int  `json:"encryptionLTE,omitempty"`
	EncryptionIsNil  bool  `json:"encryptionIsNil,omitempty"`
	EncryptionNotNil bool  `json:"encryptionNotNil,omitempty"`

	// "from_name" field predicates.
	FromName             *string  `json:"fromName,omitempty"`
	FromNameNEQ          *string  `json:"fromNameNEQ,omitempty"`
	FromNameIn           []string `json:"fromNameIn,omitempty"`
	FromNameNotIn        []string `json:"fromNameNotIn,omitempty"`
	FromNameGT           *string  `json:"fromNameGT,omitempty"`
	FromNameGTE          *string  `json:"fromNameGTE,omitempty"`
	FromNameLT           *string  `json:"fromNameLT,omitempty"`
	FromNameLTE          *string  `json:"fromNameLTE,omitempty"`
	FromNameContains     *string  `json:"fromNameContains,omitempty"`
	FromNameHasPrefix    *string  `json:"fromNameHasPrefix,omitempty"`
	FromNameHasSuffix    *string  `json:"fromNameHasSuffix,omitempty"`
	FromNameIsNil        bool     `json:"fromNameIsNil,omitempty"`
	FromNameNotNil       bool     `json:"fromNameNotNil,omitempty"`
	FromNameEqualFold    *string  `json:"fromNameEqualFold,omitempty"`
	FromNameContainsFold *string  `json:"fromNameContainsFold,omitempty"`

	// "from_email" field predicates.
	FromEmail             *string  `json:"fromEmail,omitempty"`
	FromEmailNEQ          *string  `json:"fromEmailNEQ,omitempty"`
	FromEmailIn           []string `json:"fromEmailIn,omitempty"`
	FromEmailNotIn        []string `json:"fromEmailNotIn,omitempty"`
	FromEmailGT           *string  `json:"fromEmailGT,omitempty"`
	FromEmailGTE          *string  `json:"fromEmailGTE,omitempty"`
	FromEmailLT           *string  `json:"fromEmailLT,omitempty"`
	FromEmailLTE          *string  `json:"fromEmailLTE,omitempty"`
	FromEmailContains     *string  `json:"fromEmailContains,omitempty"`
	FromEmailHasPrefix    *string  `json:"fromEmailHasPrefix,omitempty"`
	FromEmailHasSuffix    *string  `json:"fromEmailHasSuffix,omitempty"`
	FromEmailIsNil        bool     `json:"fromEmailIsNil,omitempty"`
	FromEmailNotNil       bool     `json:"fromEmailNotNil,omitempty"`
	FromEmailEqualFold    *string  `json:"fromEmailEqualFold,omitempty"`
	FromEmailContainsFold *string  `json:"fromEmailContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MailConnWhereInput) AddPredicates(predicates ...predicate.MailConn) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MailConnWhereInput filter on the MailConnQuery builder.
func (i *MailConnWhereInput) Filter(q *MailConnQuery) (*MailConnQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMailConnWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMailConnWhereInput is returned in case the MailConnWhereInput is empty.
var ErrEmptyMailConnWhereInput = errors.New("ent: empty predicate MailConnWhereInput")

// P returns a predicate for filtering mailconns.
// An error is returned if the input is empty or invalid.
func (i *MailConnWhereInput) P() (predicate.MailConn, error) {
	var predicates []predicate.MailConn
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, mailconn.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.MailConn, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, mailconn.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.MailConn, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, mailconn.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, mailconn.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, mailconn.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, mailconn.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, mailconn.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, mailconn.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, mailconn.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, mailconn.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, mailconn.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, mailconn.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, mailconn.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, mailconn.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, mailconn.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, mailconn.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, mailconn.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, mailconn.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, mailconn.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, mailconn.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, mailconn.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, mailconn.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, mailconn.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, mailconn.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, mailconn.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, mailconn.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, mailconn.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, mailconn.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, mailconn.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, mailconn.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, mailconn.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, mailconn.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, mailconn.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, mailconn.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, mailconn.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, mailconn.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, mailconn.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, mailconn.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, mailconn.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, mailconn.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, mailconn.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, mailconn.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, mailconn.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, mailconn.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, mailconn.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, mailconn.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, mailconn.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, mailconn.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, mailconn.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, mailconn.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, mailconn.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, mailconn.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, mailconn.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, mailconn.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, mailconn.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, mailconn.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, mailconn.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, mailconn.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, mailconn.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, mailconn.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, mailconn.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, mailconn.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, mailconn.NameContainsFold(*i.NameContainsFold))
	}
	if i.Host != nil {
		predicates = append(predicates, mailconn.HostEQ(*i.Host))
	}
	if i.HostNEQ != nil {
		predicates = append(predicates, mailconn.HostNEQ(*i.HostNEQ))
	}
	if len(i.HostIn) > 0 {
		predicates = append(predicates, mailconn.HostIn(i.HostIn...))
	}
	if len(i.HostNotIn) > 0 {
		predicates = append(predicates, mailconn.HostNotIn(i.HostNotIn...))
	}
	if i.HostGT != nil {
		predicates = append(predicates, mailconn.HostGT(*i.HostGT))
	}
	if i.HostGTE != nil {
		predicates = append(predicates, mailconn.HostGTE(*i.HostGTE))
	}
	if i.HostLT != nil {
		predicates = append(predicates, mailconn.HostLT(*i.HostLT))
	}
	if i.HostLTE != nil {
		predicates = append(predicates, mailconn.HostLTE(*i.HostLTE))
	}
	if i.HostContains != nil {
		predicates = append(predicates, mailconn.HostContains(*i.HostContains))
	}
	if i.HostHasPrefix != nil {
		predicates = append(predicates, mailconn.HostHasPrefix(*i.HostHasPrefix))
	}
	if i.HostHasSuffix != nil {
		predicates = append(predicates, mailconn.HostHasSuffix(*i.HostHasSuffix))
	}
	if i.HostIsNil {
		predicates = append(predicates, mailconn.HostIsNil())
	}
	if i.HostNotNil {
		predicates = append(predicates, mailconn.HostNotNil())
	}
	if i.HostEqualFold != nil {
		predicates = append(predicates, mailconn.HostEqualFold(*i.HostEqualFold))
	}
	if i.HostContainsFold != nil {
		predicates = append(predicates, mailconn.HostContainsFold(*i.HostContainsFold))
	}
	if i.Port != nil {
		predicates = append(predicates, mailconn.PortEQ(*i.Port))
	}
	if i.PortNEQ != nil {
		predicates = append(predicates, mailconn.PortNEQ(*i.PortNEQ))
	}
	if len(i.PortIn) > 0 {
		predicates = append(predicates, mailconn.PortIn(i.PortIn...))
	}
	if len(i.PortNotIn) > 0 {
		predicates = append(predicates, mailconn.PortNotIn(i.PortNotIn...))
	}
	if i.PortGT != nil {
		predicates = append(predicates, mailconn.PortGT(*i.PortGT))
	}
	if i.PortGTE != nil {
		predicates = append(predicates, mailconn.PortGTE(*i.PortGTE))
	}
	if i.PortLT != nil {
		predicates = append(predicates, mailconn.PortLT(*i.PortLT))
	}
	if i.PortLTE != nil {
		predicates = append(predicates, mailconn.PortLTE(*i.PortLTE))
	}
	if i.PortIsNil {
		predicates = append(predicates, mailconn.PortIsNil())
	}
	if i.PortNotNil {
		predicates = append(predicates, mailconn.PortNotNil())
	}
	if i.Username != nil {
		predicates = append(predicates, mailconn.UsernameEQ(*i.Username))
	}
	if i.UsernameNEQ != nil {
		predicates = append(predicates, mailconn.UsernameNEQ(*i.UsernameNEQ))
	}
	if len(i.UsernameIn) > 0 {
		predicates = append(predicates, mailconn.UsernameIn(i.UsernameIn...))
	}
	if len(i.UsernameNotIn) > 0 {
		predicates = append(predicates, mailconn.UsernameNotIn(i.UsernameNotIn...))
	}
	if i.UsernameGT != nil {
		predicates = append(predicates, mailconn.UsernameGT(*i.UsernameGT))
	}
	if i.UsernameGTE != nil {
		predicates = append(predicates, mailconn.UsernameGTE(*i.UsernameGTE))
	}
	if i.UsernameLT != nil {
		predicates = append(predicates, mailconn.UsernameLT(*i.UsernameLT))
	}
	if i.UsernameLTE != nil {
		predicates = append(predicates, mailconn.UsernameLTE(*i.UsernameLTE))
	}
	if i.UsernameContains != nil {
		predicates = append(predicates, mailconn.UsernameContains(*i.UsernameContains))
	}
	if i.UsernameHasPrefix != nil {
		predicates = append(predicates, mailconn.UsernameHasPrefix(*i.UsernameHasPrefix))
	}
	if i.UsernameHasSuffix != nil {
		predicates = append(predicates, mailconn.UsernameHasSuffix(*i.UsernameHasSuffix))
	}
	if i.UsernameIsNil {
		predicates = append(predicates, mailconn.UsernameIsNil())
	}
	if i.UsernameNotNil {
		predicates = append(predicates, mailconn.UsernameNotNil())
	}
	if i.UsernameEqualFold != nil {
		predicates = append(predicates, mailconn.UsernameEqualFold(*i.UsernameEqualFold))
	}
	if i.UsernameContainsFold != nil {
		predicates = append(predicates, mailconn.UsernameContainsFold(*i.UsernameContainsFold))
	}
	if i.Password != nil {
		predicates = append(predicates, mailconn.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, mailconn.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, mailconn.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, mailconn.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, mailconn.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, mailconn.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, mailconn.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, mailconn.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, mailconn.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, mailconn.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, mailconn.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordIsNil {
		predicates = append(predicates, mailconn.PasswordIsNil())
	}
	if i.PasswordNotNil {
		predicates = append(predicates, mailconn.PasswordNotNil())
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, mailconn.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, mailconn.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Encryption != nil {
		predicates = append(predicates, mailconn.EncryptionEQ(*i.Encryption))
	}
	if i.EncryptionNEQ != nil {
		predicates = append(predicates, mailconn.EncryptionNEQ(*i.EncryptionNEQ))
	}
	if len(i.EncryptionIn) > 0 {
		predicates = append(predicates, mailconn.EncryptionIn(i.EncryptionIn...))
	}
	if len(i.EncryptionNotIn) > 0 {
		predicates = append(predicates, mailconn.EncryptionNotIn(i.EncryptionNotIn...))
	}
	if i.EncryptionGT != nil {
		predicates = append(predicates, mailconn.EncryptionGT(*i.EncryptionGT))
	}
	if i.EncryptionGTE != nil {
		predicates = append(predicates, mailconn.EncryptionGTE(*i.EncryptionGTE))
	}
	if i.EncryptionLT != nil {
		predicates = append(predicates, mailconn.EncryptionLT(*i.EncryptionLT))
	}
	if i.EncryptionLTE != nil {
		predicates = append(predicates, mailconn.EncryptionLTE(*i.EncryptionLTE))
	}
	if i.EncryptionIsNil {
		predicates = append(predicates, mailconn.EncryptionIsNil())
	}
	if i.EncryptionNotNil {
		predicates = append(predicates, mailconn.EncryptionNotNil())
	}
	if i.FromName != nil {
		predicates = append(predicates, mailconn.FromNameEQ(*i.FromName))
	}
	if i.FromNameNEQ != nil {
		predicates = append(predicates, mailconn.FromNameNEQ(*i.FromNameNEQ))
	}
	if len(i.FromNameIn) > 0 {
		predicates = append(predicates, mailconn.FromNameIn(i.FromNameIn...))
	}
	if len(i.FromNameNotIn) > 0 {
		predicates = append(predicates, mailconn.FromNameNotIn(i.FromNameNotIn...))
	}
	if i.FromNameGT != nil {
		predicates = append(predicates, mailconn.FromNameGT(*i.FromNameGT))
	}
	if i.FromNameGTE != nil {
		predicates = append(predicates, mailconn.FromNameGTE(*i.FromNameGTE))
	}
	if i.FromNameLT != nil {
		predicates = append(predicates, mailconn.FromNameLT(*i.FromNameLT))
	}
	if i.FromNameLTE != nil {
		predicates = append(predicates, mailconn.FromNameLTE(*i.FromNameLTE))
	}
	if i.FromNameContains != nil {
		predicates = append(predicates, mailconn.FromNameContains(*i.FromNameContains))
	}
	if i.FromNameHasPrefix != nil {
		predicates = append(predicates, mailconn.FromNameHasPrefix(*i.FromNameHasPrefix))
	}
	if i.FromNameHasSuffix != nil {
		predicates = append(predicates, mailconn.FromNameHasSuffix(*i.FromNameHasSuffix))
	}
	if i.FromNameIsNil {
		predicates = append(predicates, mailconn.FromNameIsNil())
	}
	if i.FromNameNotNil {
		predicates = append(predicates, mailconn.FromNameNotNil())
	}
	if i.FromNameEqualFold != nil {
		predicates = append(predicates, mailconn.FromNameEqualFold(*i.FromNameEqualFold))
	}
	if i.FromNameContainsFold != nil {
		predicates = append(predicates, mailconn.FromNameContainsFold(*i.FromNameContainsFold))
	}
	if i.FromEmail != nil {
		predicates = append(predicates, mailconn.FromEmailEQ(*i.FromEmail))
	}
	if i.FromEmailNEQ != nil {
		predicates = append(predicates, mailconn.FromEmailNEQ(*i.FromEmailNEQ))
	}
	if len(i.FromEmailIn) > 0 {
		predicates = append(predicates, mailconn.FromEmailIn(i.FromEmailIn...))
	}
	if len(i.FromEmailNotIn) > 0 {
		predicates = append(predicates, mailconn.FromEmailNotIn(i.FromEmailNotIn...))
	}
	if i.FromEmailGT != nil {
		predicates = append(predicates, mailconn.FromEmailGT(*i.FromEmailGT))
	}
	if i.FromEmailGTE != nil {
		predicates = append(predicates, mailconn.FromEmailGTE(*i.FromEmailGTE))
	}
	if i.FromEmailLT != nil {
		predicates = append(predicates, mailconn.FromEmailLT(*i.FromEmailLT))
	}
	if i.FromEmailLTE != nil {
		predicates = append(predicates, mailconn.FromEmailLTE(*i.FromEmailLTE))
	}
	if i.FromEmailContains != nil {
		predicates = append(predicates, mailconn.FromEmailContains(*i.FromEmailContains))
	}
	if i.FromEmailHasPrefix != nil {
		predicates = append(predicates, mailconn.FromEmailHasPrefix(*i.FromEmailHasPrefix))
	}
	if i.FromEmailHasSuffix != nil {
		predicates = append(predicates, mailconn.FromEmailHasSuffix(*i.FromEmailHasSuffix))
	}
	if i.FromEmailIsNil {
		predicates = append(predicates, mailconn.FromEmailIsNil())
	}
	if i.FromEmailNotNil {
		predicates = append(predicates, mailconn.FromEmailNotNil())
	}
	if i.FromEmailEqualFold != nil {
		predicates = append(predicates, mailconn.FromEmailEqualFold(*i.FromEmailEqualFold))
	}
	if i.FromEmailContainsFold != nil {
		predicates = append(predicates, mailconn.FromEmailContainsFold(*i.FromEmailContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, mailconn.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, mailconn.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, mailconn.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, mailconn.StatusNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMailConnWhereInput
	case 1:
		return predicates[0], nil
	default:
		return mailconn.And(predicates...), nil
	}
}

// MediaWhereInput represents a where input for filtering Media queries.
type MediaWhereInput struct {
	Predicates []predicate.Media  `json:"-"`
	Not        *MediaWhereInput   `json:"not,omitempty"`
	Or         []*MediaWhereInput `json:"or,omitempty"`
	And        []*MediaWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "disk" field predicates.
	Disk             *string  `json:"disk,omitempty"`
	DiskNEQ          *string  `json:"diskNEQ,omitempty"`
	DiskIn           []string `json:"diskIn,omitempty"`
	DiskNotIn        []string `json:"diskNotIn,omitempty"`
	DiskGT           *string  `json:"diskGT,omitempty"`
	DiskGTE          *string  `json:"diskGTE,omitempty"`
	DiskLT           *string  `json:"diskLT,omitempty"`
	DiskLTE          *string  `json:"diskLTE,omitempty"`
	DiskContains     *string  `json:"diskContains,omitempty"`
	DiskHasPrefix    *string  `json:"diskHasPrefix,omitempty"`
	DiskHasSuffix    *string  `json:"diskHasSuffix,omitempty"`
	DiskIsNil        bool     `json:"diskIsNil,omitempty"`
	DiskNotNil       bool     `json:"diskNotNil,omitempty"`
	DiskEqualFold    *string  `json:"diskEqualFold,omitempty"`
	DiskContainsFold *string  `json:"diskContainsFold,omitempty"`

	// "directory" field predicates.
	Directory             *string  `json:"directory,omitempty"`
	DirectoryNEQ          *string  `json:"directoryNEQ,omitempty"`
	DirectoryIn           []string `json:"directoryIn,omitempty"`
	DirectoryNotIn        []string `json:"directoryNotIn,omitempty"`
	DirectoryGT           *string  `json:"directoryGT,omitempty"`
	DirectoryGTE          *string  `json:"directoryGTE,omitempty"`
	DirectoryLT           *string  `json:"directoryLT,omitempty"`
	DirectoryLTE          *string  `json:"directoryLTE,omitempty"`
	DirectoryContains     *string  `json:"directoryContains,omitempty"`
	DirectoryHasPrefix    *string  `json:"directoryHasPrefix,omitempty"`
	DirectoryHasSuffix    *string  `json:"directoryHasSuffix,omitempty"`
	DirectoryIsNil        bool     `json:"directoryIsNil,omitempty"`
	DirectoryNotNil       bool     `json:"directoryNotNil,omitempty"`
	DirectoryEqualFold    *string  `json:"directoryEqualFold,omitempty"`
	DirectoryContainsFold *string  `json:"directoryContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "original_name" field predicates.
	OriginalName             *string  `json:"originalName,omitempty"`
	OriginalNameNEQ          *string  `json:"originalNameNEQ,omitempty"`
	OriginalNameIn           []string `json:"originalNameIn,omitempty"`
	OriginalNameNotIn        []string `json:"originalNameNotIn,omitempty"`
	OriginalNameGT           *string  `json:"originalNameGT,omitempty"`
	OriginalNameGTE          *string  `json:"originalNameGTE,omitempty"`
	OriginalNameLT           *string  `json:"originalNameLT,omitempty"`
	OriginalNameLTE          *string  `json:"originalNameLTE,omitempty"`
	OriginalNameContains     *string  `json:"originalNameContains,omitempty"`
	OriginalNameHasPrefix    *string  `json:"originalNameHasPrefix,omitempty"`
	OriginalNameHasSuffix    *string  `json:"originalNameHasSuffix,omitempty"`
	OriginalNameIsNil        bool     `json:"originalNameIsNil,omitempty"`
	OriginalNameNotNil       bool     `json:"originalNameNotNil,omitempty"`
	OriginalNameEqualFold    *string  `json:"originalNameEqualFold,omitempty"`
	OriginalNameContainsFold *string  `json:"originalNameContainsFold,omitempty"`

	// "extension" field predicates.
	Extension             *string  `json:"extension,omitempty"`
	ExtensionNEQ          *string  `json:"extensionNEQ,omitempty"`
	ExtensionIn           []string `json:"extensionIn,omitempty"`
	ExtensionNotIn        []string `json:"extensionNotIn,omitempty"`
	ExtensionGT           *string  `json:"extensionGT,omitempty"`
	ExtensionGTE          *string  `json:"extensionGTE,omitempty"`
	ExtensionLT           *string  `json:"extensionLT,omitempty"`
	ExtensionLTE          *string  `json:"extensionLTE,omitempty"`
	ExtensionContains     *string  `json:"extensionContains,omitempty"`
	ExtensionHasPrefix    *string  `json:"extensionHasPrefix,omitempty"`
	ExtensionHasSuffix    *string  `json:"extensionHasSuffix,omitempty"`
	ExtensionIsNil        bool     `json:"extensionIsNil,omitempty"`
	ExtensionNotNil       bool     `json:"extensionNotNil,omitempty"`
	ExtensionEqualFold    *string  `json:"extensionEqualFold,omitempty"`
	ExtensionContainsFold *string  `json:"extensionContainsFold,omitempty"`

	// "mime_type" field predicates.
	MimeType             *string  `json:"mimeType,omitempty"`
	MimeTypeNEQ          *string  `json:"mimeTypeNEQ,omitempty"`
	MimeTypeIn           []string `json:"mimeTypeIn,omitempty"`
	MimeTypeNotIn        []string `json:"mimeTypeNotIn,omitempty"`
	MimeTypeGT           *string  `json:"mimeTypeGT,omitempty"`
	MimeTypeGTE          *string  `json:"mimeTypeGTE,omitempty"`
	MimeTypeLT           *string  `json:"mimeTypeLT,omitempty"`
	MimeTypeLTE          *string  `json:"mimeTypeLTE,omitempty"`
	MimeTypeContains     *string  `json:"mimeTypeContains,omitempty"`
	MimeTypeHasPrefix    *string  `json:"mimeTypeHasPrefix,omitempty"`
	MimeTypeHasSuffix    *string  `json:"mimeTypeHasSuffix,omitempty"`
	MimeTypeIsNil        bool     `json:"mimeTypeIsNil,omitempty"`
	MimeTypeNotNil       bool     `json:"mimeTypeNotNil,omitempty"`
	MimeTypeEqualFold    *string  `json:"mimeTypeEqualFold,omitempty"`
	MimeTypeContainsFold *string  `json:"mimeTypeContainsFold,omitempty"`

	// "aggregate_type" field predicates.
	AggregateType             *string  `json:"aggregateType,omitempty"`
	AggregateTypeNEQ          *string  `json:"aggregateTypeNEQ,omitempty"`
	AggregateTypeIn           []string `json:"aggregateTypeIn,omitempty"`
	AggregateTypeNotIn        []string `json:"aggregateTypeNotIn,omitempty"`
	AggregateTypeGT           *string  `json:"aggregateTypeGT,omitempty"`
	AggregateTypeGTE          *string  `json:"aggregateTypeGTE,omitempty"`
	AggregateTypeLT           *string  `json:"aggregateTypeLT,omitempty"`
	AggregateTypeLTE          *string  `json:"aggregateTypeLTE,omitempty"`
	AggregateTypeContains     *string  `json:"aggregateTypeContains,omitempty"`
	AggregateTypeHasPrefix    *string  `json:"aggregateTypeHasPrefix,omitempty"`
	AggregateTypeHasSuffix    *string  `json:"aggregateTypeHasSuffix,omitempty"`
	AggregateTypeIsNil        bool     `json:"aggregateTypeIsNil,omitempty"`
	AggregateTypeNotNil       bool     `json:"aggregateTypeNotNil,omitempty"`
	AggregateTypeEqualFold    *string  `json:"aggregateTypeEqualFold,omitempty"`
	AggregateTypeContainsFold *string  `json:"aggregateTypeContainsFold,omitempty"`

	// "size" field predicates.
	Size       *uint  `json:"size,omitempty"`
	SizeNEQ    *uint  `json:"sizeNEQ,omitempty"`
	SizeIn     []uint `json:"sizeIn,omitempty"`
	SizeNotIn  []uint `json:"sizeNotIn,omitempty"`
	SizeGT     *uint  `json:"sizeGT,omitempty"`
	SizeGTE    *uint  `json:"sizeGTE,omitempty"`
	SizeLT     *uint  `json:"sizeLT,omitempty"`
	SizeLTE    *uint  `json:"sizeLTE,omitempty"`
	SizeIsNil  bool   `json:"sizeIsNil,omitempty"`
	SizeNotNil bool   `json:"sizeNotNil,omitempty"`

	// "description" field predicates.
	Description             *string  `json:"description,omitempty"`
	DescriptionNEQ          *string  `json:"descriptionNEQ,omitempty"`
	DescriptionIn           []string `json:"descriptionIn,omitempty"`
	DescriptionNotIn        []string `json:"descriptionNotIn,omitempty"`
	DescriptionGT           *string  `json:"descriptionGT,omitempty"`
	DescriptionGTE          *string  `json:"descriptionGTE,omitempty"`
	DescriptionLT           *string  `json:"descriptionLT,omitempty"`
	DescriptionLTE          *string  `json:"descriptionLTE,omitempty"`
	DescriptionContains     *string  `json:"descriptionContains,omitempty"`
	DescriptionHasPrefix    *string  `json:"descriptionHasPrefix,omitempty"`
	DescriptionHasSuffix    *string  `json:"descriptionHasSuffix,omitempty"`
	DescriptionIsNil        bool     `json:"descriptionIsNil,omitempty"`
	DescriptionNotNil       bool     `json:"descriptionNotNil,omitempty"`
	DescriptionEqualFold    *string  `json:"descriptionEqualFold,omitempty"`
	DescriptionContainsFold *string  `json:"descriptionContainsFold,omitempty"`

	// "is_variant" field predicates.
	IsVariant       *bool `json:"isVariant,omitempty"`
	IsVariantNEQ    *bool `json:"isVariantNEQ,omitempty"`
	IsVariantIsNil  bool  `json:"isVariantIsNil,omitempty"`
	IsVariantNotNil bool  `json:"isVariantNotNil,omitempty"`

	// "variant_name" field predicates.
	VariantName             *string  `json:"variantName,omitempty"`
	VariantNameNEQ          *string  `json:"variantNameNEQ,omitempty"`
	VariantNameIn           []string `json:"variantNameIn,omitempty"`
	VariantNameNotIn        []string `json:"variantNameNotIn,omitempty"`
	VariantNameGT           *string  `json:"variantNameGT,omitempty"`
	VariantNameGTE          *string  `json:"variantNameGTE,omitempty"`
	VariantNameLT           *string  `json:"variantNameLT,omitempty"`
	VariantNameLTE          *string  `json:"variantNameLTE,omitempty"`
	VariantNameContains     *string  `json:"variantNameContains,omitempty"`
	VariantNameHasPrefix    *string  `json:"variantNameHasPrefix,omitempty"`
	VariantNameHasSuffix    *string  `json:"variantNameHasSuffix,omitempty"`
	VariantNameIsNil        bool     `json:"variantNameIsNil,omitempty"`
	VariantNameNotNil       bool     `json:"variantNameNotNil,omitempty"`
	VariantNameEqualFold    *string  `json:"variantNameEqualFold,omitempty"`
	VariantNameContainsFold *string  `json:"variantNameContainsFold,omitempty"`

	// "original_media_id" field predicates.
	OriginalMediaID             *string  `json:"originalMediaID,omitempty"`
	OriginalMediaIDNEQ          *string  `json:"originalMediaIDNEQ,omitempty"`
	OriginalMediaIDIn           []string `json:"originalMediaIDIn,omitempty"`
	OriginalMediaIDNotIn        []string `json:"originalMediaIDNotIn,omitempty"`
	OriginalMediaIDGT           *string  `json:"originalMediaIDGT,omitempty"`
	OriginalMediaIDGTE          *string  `json:"originalMediaIDGTE,omitempty"`
	OriginalMediaIDLT           *string  `json:"originalMediaIDLT,omitempty"`
	OriginalMediaIDLTE          *string  `json:"originalMediaIDLTE,omitempty"`
	OriginalMediaIDContains     *string  `json:"originalMediaIDContains,omitempty"`
	OriginalMediaIDHasPrefix    *string  `json:"originalMediaIDHasPrefix,omitempty"`
	OriginalMediaIDHasSuffix    *string  `json:"originalMediaIDHasSuffix,omitempty"`
	OriginalMediaIDIsNil        bool     `json:"originalMediaIDIsNil,omitempty"`
	OriginalMediaIDNotNil       bool     `json:"originalMediaIDNotNil,omitempty"`
	OriginalMediaIDEqualFold    *string  `json:"originalMediaIDEqualFold,omitempty"`
	OriginalMediaIDContainsFold *string  `json:"originalMediaIDContainsFold,omitempty"`

	// "checksum" field predicates.
	Checksum             *string  `json:"checksum,omitempty"`
	ChecksumNEQ          *string  `json:"checksumNEQ,omitempty"`
	ChecksumIn           []string `json:"checksumIn,omitempty"`
	ChecksumNotIn        []string `json:"checksumNotIn,omitempty"`
	ChecksumGT           *string  `json:"checksumGT,omitempty"`
	ChecksumGTE          *string  `json:"checksumGTE,omitempty"`
	ChecksumLT           *string  `json:"checksumLT,omitempty"`
	ChecksumLTE          *string  `json:"checksumLTE,omitempty"`
	ChecksumContains     *string  `json:"checksumContains,omitempty"`
	ChecksumHasPrefix    *string  `json:"checksumHasPrefix,omitempty"`
	ChecksumHasSuffix    *string  `json:"checksumHasSuffix,omitempty"`
	ChecksumIsNil        bool     `json:"checksumIsNil,omitempty"`
	ChecksumNotNil       bool     `json:"checksumNotNil,omitempty"`
	ChecksumEqualFold    *string  `json:"checksumEqualFold,omitempty"`
	ChecksumContainsFold *string  `json:"checksumContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *string  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *string  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []string `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []string `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *string  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *string  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *string  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *string  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *string  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *string  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *string  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *string  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *string  `json:"workspaceIDContainsFold,omitempty"`

	// "alt" field predicates.
	Alt             *string  `json:"alt,omitempty"`
	AltNEQ          *string  `json:"altNEQ,omitempty"`
	AltIn           []string `json:"altIn,omitempty"`
	AltNotIn        []string `json:"altNotIn,omitempty"`
	AltGT           *string  `json:"altGT,omitempty"`
	AltGTE          *string  `json:"altGTE,omitempty"`
	AltLT           *string  `json:"altLT,omitempty"`
	AltLTE          *string  `json:"altLTE,omitempty"`
	AltContains     *string  `json:"altContains,omitempty"`
	AltHasPrefix    *string  `json:"altHasPrefix,omitempty"`
	AltHasSuffix    *string  `json:"altHasSuffix,omitempty"`
	AltIsNil        bool     `json:"altIsNil,omitempty"`
	AltNotNil       bool     `json:"altNotNil,omitempty"`
	AltEqualFold    *string  `json:"altEqualFold,omitempty"`
	AltContainsFold *string  `json:"altContainsFold,omitempty"`

	// "uid" field predicates.
	UID             *string  `json:"uid,omitempty"`
	UIDNEQ          *string  `json:"uidNEQ,omitempty"`
	UIDIn           []string `json:"uidIn,omitempty"`
	UIDNotIn        []string `json:"uidNotIn,omitempty"`
	UIDGT           *string  `json:"uidGT,omitempty"`
	UIDGTE          *string  `json:"uidGTE,omitempty"`
	UIDLT           *string  `json:"uidLT,omitempty"`
	UIDLTE          *string  `json:"uidLTE,omitempty"`
	UIDContains     *string  `json:"uidContains,omitempty"`
	UIDHasPrefix    *string  `json:"uidHasPrefix,omitempty"`
	UIDHasSuffix    *string  `json:"uidHasSuffix,omitempty"`
	UIDIsNil        bool     `json:"uidIsNil,omitempty"`
	UIDNotNil       bool     `json:"uidNotNil,omitempty"`
	UIDEqualFold    *string  `json:"uidEqualFold,omitempty"`
	UIDContainsFold *string  `json:"uidContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *MediaWhereInput) AddPredicates(predicates ...predicate.Media) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the MediaWhereInput filter on the MediaQuery builder.
func (i *MediaWhereInput) Filter(q *MediaQuery) (*MediaQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyMediaWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyMediaWhereInput is returned in case the MediaWhereInput is empty.
var ErrEmptyMediaWhereInput = errors.New("ent: empty predicate MediaWhereInput")

// P returns a predicate for filtering mediaslice.
// An error is returned if the input is empty or invalid.
func (i *MediaWhereInput) P() (predicate.Media, error) {
	var predicates []predicate.Media
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, media.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Media, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, media.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Media, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, media.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, media.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, media.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, media.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, media.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, media.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, media.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, media.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, media.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, media.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, media.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, media.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, media.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, media.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, media.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, media.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, media.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, media.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, media.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, media.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, media.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, media.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, media.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, media.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, media.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, media.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, media.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, media.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, media.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, media.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, media.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, media.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, media.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, media.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, media.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, media.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, media.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, media.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, media.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, media.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, media.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, media.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, media.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, media.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, media.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, media.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Disk != nil {
		predicates = append(predicates, media.DiskEQ(*i.Disk))
	}
	if i.DiskNEQ != nil {
		predicates = append(predicates, media.DiskNEQ(*i.DiskNEQ))
	}
	if len(i.DiskIn) > 0 {
		predicates = append(predicates, media.DiskIn(i.DiskIn...))
	}
	if len(i.DiskNotIn) > 0 {
		predicates = append(predicates, media.DiskNotIn(i.DiskNotIn...))
	}
	if i.DiskGT != nil {
		predicates = append(predicates, media.DiskGT(*i.DiskGT))
	}
	if i.DiskGTE != nil {
		predicates = append(predicates, media.DiskGTE(*i.DiskGTE))
	}
	if i.DiskLT != nil {
		predicates = append(predicates, media.DiskLT(*i.DiskLT))
	}
	if i.DiskLTE != nil {
		predicates = append(predicates, media.DiskLTE(*i.DiskLTE))
	}
	if i.DiskContains != nil {
		predicates = append(predicates, media.DiskContains(*i.DiskContains))
	}
	if i.DiskHasPrefix != nil {
		predicates = append(predicates, media.DiskHasPrefix(*i.DiskHasPrefix))
	}
	if i.DiskHasSuffix != nil {
		predicates = append(predicates, media.DiskHasSuffix(*i.DiskHasSuffix))
	}
	if i.DiskIsNil {
		predicates = append(predicates, media.DiskIsNil())
	}
	if i.DiskNotNil {
		predicates = append(predicates, media.DiskNotNil())
	}
	if i.DiskEqualFold != nil {
		predicates = append(predicates, media.DiskEqualFold(*i.DiskEqualFold))
	}
	if i.DiskContainsFold != nil {
		predicates = append(predicates, media.DiskContainsFold(*i.DiskContainsFold))
	}
	if i.Directory != nil {
		predicates = append(predicates, media.DirectoryEQ(*i.Directory))
	}
	if i.DirectoryNEQ != nil {
		predicates = append(predicates, media.DirectoryNEQ(*i.DirectoryNEQ))
	}
	if len(i.DirectoryIn) > 0 {
		predicates = append(predicates, media.DirectoryIn(i.DirectoryIn...))
	}
	if len(i.DirectoryNotIn) > 0 {
		predicates = append(predicates, media.DirectoryNotIn(i.DirectoryNotIn...))
	}
	if i.DirectoryGT != nil {
		predicates = append(predicates, media.DirectoryGT(*i.DirectoryGT))
	}
	if i.DirectoryGTE != nil {
		predicates = append(predicates, media.DirectoryGTE(*i.DirectoryGTE))
	}
	if i.DirectoryLT != nil {
		predicates = append(predicates, media.DirectoryLT(*i.DirectoryLT))
	}
	if i.DirectoryLTE != nil {
		predicates = append(predicates, media.DirectoryLTE(*i.DirectoryLTE))
	}
	if i.DirectoryContains != nil {
		predicates = append(predicates, media.DirectoryContains(*i.DirectoryContains))
	}
	if i.DirectoryHasPrefix != nil {
		predicates = append(predicates, media.DirectoryHasPrefix(*i.DirectoryHasPrefix))
	}
	if i.DirectoryHasSuffix != nil {
		predicates = append(predicates, media.DirectoryHasSuffix(*i.DirectoryHasSuffix))
	}
	if i.DirectoryIsNil {
		predicates = append(predicates, media.DirectoryIsNil())
	}
	if i.DirectoryNotNil {
		predicates = append(predicates, media.DirectoryNotNil())
	}
	if i.DirectoryEqualFold != nil {
		predicates = append(predicates, media.DirectoryEqualFold(*i.DirectoryEqualFold))
	}
	if i.DirectoryContainsFold != nil {
		predicates = append(predicates, media.DirectoryContainsFold(*i.DirectoryContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, media.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, media.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, media.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, media.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, media.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, media.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, media.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, media.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, media.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, media.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, media.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, media.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, media.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, media.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, media.NameContainsFold(*i.NameContainsFold))
	}
	if i.OriginalName != nil {
		predicates = append(predicates, media.OriginalNameEQ(*i.OriginalName))
	}
	if i.OriginalNameNEQ != nil {
		predicates = append(predicates, media.OriginalNameNEQ(*i.OriginalNameNEQ))
	}
	if len(i.OriginalNameIn) > 0 {
		predicates = append(predicates, media.OriginalNameIn(i.OriginalNameIn...))
	}
	if len(i.OriginalNameNotIn) > 0 {
		predicates = append(predicates, media.OriginalNameNotIn(i.OriginalNameNotIn...))
	}
	if i.OriginalNameGT != nil {
		predicates = append(predicates, media.OriginalNameGT(*i.OriginalNameGT))
	}
	if i.OriginalNameGTE != nil {
		predicates = append(predicates, media.OriginalNameGTE(*i.OriginalNameGTE))
	}
	if i.OriginalNameLT != nil {
		predicates = append(predicates, media.OriginalNameLT(*i.OriginalNameLT))
	}
	if i.OriginalNameLTE != nil {
		predicates = append(predicates, media.OriginalNameLTE(*i.OriginalNameLTE))
	}
	if i.OriginalNameContains != nil {
		predicates = append(predicates, media.OriginalNameContains(*i.OriginalNameContains))
	}
	if i.OriginalNameHasPrefix != nil {
		predicates = append(predicates, media.OriginalNameHasPrefix(*i.OriginalNameHasPrefix))
	}
	if i.OriginalNameHasSuffix != nil {
		predicates = append(predicates, media.OriginalNameHasSuffix(*i.OriginalNameHasSuffix))
	}
	if i.OriginalNameIsNil {
		predicates = append(predicates, media.OriginalNameIsNil())
	}
	if i.OriginalNameNotNil {
		predicates = append(predicates, media.OriginalNameNotNil())
	}
	if i.OriginalNameEqualFold != nil {
		predicates = append(predicates, media.OriginalNameEqualFold(*i.OriginalNameEqualFold))
	}
	if i.OriginalNameContainsFold != nil {
		predicates = append(predicates, media.OriginalNameContainsFold(*i.OriginalNameContainsFold))
	}
	if i.Extension != nil {
		predicates = append(predicates, media.ExtensionEQ(*i.Extension))
	}
	if i.ExtensionNEQ != nil {
		predicates = append(predicates, media.ExtensionNEQ(*i.ExtensionNEQ))
	}
	if len(i.ExtensionIn) > 0 {
		predicates = append(predicates, media.ExtensionIn(i.ExtensionIn...))
	}
	if len(i.ExtensionNotIn) > 0 {
		predicates = append(predicates, media.ExtensionNotIn(i.ExtensionNotIn...))
	}
	if i.ExtensionGT != nil {
		predicates = append(predicates, media.ExtensionGT(*i.ExtensionGT))
	}
	if i.ExtensionGTE != nil {
		predicates = append(predicates, media.ExtensionGTE(*i.ExtensionGTE))
	}
	if i.ExtensionLT != nil {
		predicates = append(predicates, media.ExtensionLT(*i.ExtensionLT))
	}
	if i.ExtensionLTE != nil {
		predicates = append(predicates, media.ExtensionLTE(*i.ExtensionLTE))
	}
	if i.ExtensionContains != nil {
		predicates = append(predicates, media.ExtensionContains(*i.ExtensionContains))
	}
	if i.ExtensionHasPrefix != nil {
		predicates = append(predicates, media.ExtensionHasPrefix(*i.ExtensionHasPrefix))
	}
	if i.ExtensionHasSuffix != nil {
		predicates = append(predicates, media.ExtensionHasSuffix(*i.ExtensionHasSuffix))
	}
	if i.ExtensionIsNil {
		predicates = append(predicates, media.ExtensionIsNil())
	}
	if i.ExtensionNotNil {
		predicates = append(predicates, media.ExtensionNotNil())
	}
	if i.ExtensionEqualFold != nil {
		predicates = append(predicates, media.ExtensionEqualFold(*i.ExtensionEqualFold))
	}
	if i.ExtensionContainsFold != nil {
		predicates = append(predicates, media.ExtensionContainsFold(*i.ExtensionContainsFold))
	}
	if i.MimeType != nil {
		predicates = append(predicates, media.MimeTypeEQ(*i.MimeType))
	}
	if i.MimeTypeNEQ != nil {
		predicates = append(predicates, media.MimeTypeNEQ(*i.MimeTypeNEQ))
	}
	if len(i.MimeTypeIn) > 0 {
		predicates = append(predicates, media.MimeTypeIn(i.MimeTypeIn...))
	}
	if len(i.MimeTypeNotIn) > 0 {
		predicates = append(predicates, media.MimeTypeNotIn(i.MimeTypeNotIn...))
	}
	if i.MimeTypeGT != nil {
		predicates = append(predicates, media.MimeTypeGT(*i.MimeTypeGT))
	}
	if i.MimeTypeGTE != nil {
		predicates = append(predicates, media.MimeTypeGTE(*i.MimeTypeGTE))
	}
	if i.MimeTypeLT != nil {
		predicates = append(predicates, media.MimeTypeLT(*i.MimeTypeLT))
	}
	if i.MimeTypeLTE != nil {
		predicates = append(predicates, media.MimeTypeLTE(*i.MimeTypeLTE))
	}
	if i.MimeTypeContains != nil {
		predicates = append(predicates, media.MimeTypeContains(*i.MimeTypeContains))
	}
	if i.MimeTypeHasPrefix != nil {
		predicates = append(predicates, media.MimeTypeHasPrefix(*i.MimeTypeHasPrefix))
	}
	if i.MimeTypeHasSuffix != nil {
		predicates = append(predicates, media.MimeTypeHasSuffix(*i.MimeTypeHasSuffix))
	}
	if i.MimeTypeIsNil {
		predicates = append(predicates, media.MimeTypeIsNil())
	}
	if i.MimeTypeNotNil {
		predicates = append(predicates, media.MimeTypeNotNil())
	}
	if i.MimeTypeEqualFold != nil {
		predicates = append(predicates, media.MimeTypeEqualFold(*i.MimeTypeEqualFold))
	}
	if i.MimeTypeContainsFold != nil {
		predicates = append(predicates, media.MimeTypeContainsFold(*i.MimeTypeContainsFold))
	}
	if i.AggregateType != nil {
		predicates = append(predicates, media.AggregateTypeEQ(*i.AggregateType))
	}
	if i.AggregateTypeNEQ != nil {
		predicates = append(predicates, media.AggregateTypeNEQ(*i.AggregateTypeNEQ))
	}
	if len(i.AggregateTypeIn) > 0 {
		predicates = append(predicates, media.AggregateTypeIn(i.AggregateTypeIn...))
	}
	if len(i.AggregateTypeNotIn) > 0 {
		predicates = append(predicates, media.AggregateTypeNotIn(i.AggregateTypeNotIn...))
	}
	if i.AggregateTypeGT != nil {
		predicates = append(predicates, media.AggregateTypeGT(*i.AggregateTypeGT))
	}
	if i.AggregateTypeGTE != nil {
		predicates = append(predicates, media.AggregateTypeGTE(*i.AggregateTypeGTE))
	}
	if i.AggregateTypeLT != nil {
		predicates = append(predicates, media.AggregateTypeLT(*i.AggregateTypeLT))
	}
	if i.AggregateTypeLTE != nil {
		predicates = append(predicates, media.AggregateTypeLTE(*i.AggregateTypeLTE))
	}
	if i.AggregateTypeContains != nil {
		predicates = append(predicates, media.AggregateTypeContains(*i.AggregateTypeContains))
	}
	if i.AggregateTypeHasPrefix != nil {
		predicates = append(predicates, media.AggregateTypeHasPrefix(*i.AggregateTypeHasPrefix))
	}
	if i.AggregateTypeHasSuffix != nil {
		predicates = append(predicates, media.AggregateTypeHasSuffix(*i.AggregateTypeHasSuffix))
	}
	if i.AggregateTypeIsNil {
		predicates = append(predicates, media.AggregateTypeIsNil())
	}
	if i.AggregateTypeNotNil {
		predicates = append(predicates, media.AggregateTypeNotNil())
	}
	if i.AggregateTypeEqualFold != nil {
		predicates = append(predicates, media.AggregateTypeEqualFold(*i.AggregateTypeEqualFold))
	}
	if i.AggregateTypeContainsFold != nil {
		predicates = append(predicates, media.AggregateTypeContainsFold(*i.AggregateTypeContainsFold))
	}
	if i.Size != nil {
		predicates = append(predicates, media.SizeEQ(*i.Size))
	}
	if i.SizeNEQ != nil {
		predicates = append(predicates, media.SizeNEQ(*i.SizeNEQ))
	}
	if len(i.SizeIn) > 0 {
		predicates = append(predicates, media.SizeIn(i.SizeIn...))
	}
	if len(i.SizeNotIn) > 0 {
		predicates = append(predicates, media.SizeNotIn(i.SizeNotIn...))
	}
	if i.SizeGT != nil {
		predicates = append(predicates, media.SizeGT(*i.SizeGT))
	}
	if i.SizeGTE != nil {
		predicates = append(predicates, media.SizeGTE(*i.SizeGTE))
	}
	if i.SizeLT != nil {
		predicates = append(predicates, media.SizeLT(*i.SizeLT))
	}
	if i.SizeLTE != nil {
		predicates = append(predicates, media.SizeLTE(*i.SizeLTE))
	}
	if i.SizeIsNil {
		predicates = append(predicates, media.SizeIsNil())
	}
	if i.SizeNotNil {
		predicates = append(predicates, media.SizeNotNil())
	}
	if i.Description != nil {
		predicates = append(predicates, media.DescriptionEQ(*i.Description))
	}
	if i.DescriptionNEQ != nil {
		predicates = append(predicates, media.DescriptionNEQ(*i.DescriptionNEQ))
	}
	if len(i.DescriptionIn) > 0 {
		predicates = append(predicates, media.DescriptionIn(i.DescriptionIn...))
	}
	if len(i.DescriptionNotIn) > 0 {
		predicates = append(predicates, media.DescriptionNotIn(i.DescriptionNotIn...))
	}
	if i.DescriptionGT != nil {
		predicates = append(predicates, media.DescriptionGT(*i.DescriptionGT))
	}
	if i.DescriptionGTE != nil {
		predicates = append(predicates, media.DescriptionGTE(*i.DescriptionGTE))
	}
	if i.DescriptionLT != nil {
		predicates = append(predicates, media.DescriptionLT(*i.DescriptionLT))
	}
	if i.DescriptionLTE != nil {
		predicates = append(predicates, media.DescriptionLTE(*i.DescriptionLTE))
	}
	if i.DescriptionContains != nil {
		predicates = append(predicates, media.DescriptionContains(*i.DescriptionContains))
	}
	if i.DescriptionHasPrefix != nil {
		predicates = append(predicates, media.DescriptionHasPrefix(*i.DescriptionHasPrefix))
	}
	if i.DescriptionHasSuffix != nil {
		predicates = append(predicates, media.DescriptionHasSuffix(*i.DescriptionHasSuffix))
	}
	if i.DescriptionIsNil {
		predicates = append(predicates, media.DescriptionIsNil())
	}
	if i.DescriptionNotNil {
		predicates = append(predicates, media.DescriptionNotNil())
	}
	if i.DescriptionEqualFold != nil {
		predicates = append(predicates, media.DescriptionEqualFold(*i.DescriptionEqualFold))
	}
	if i.DescriptionContainsFold != nil {
		predicates = append(predicates, media.DescriptionContainsFold(*i.DescriptionContainsFold))
	}
	if i.IsVariant != nil {
		predicates = append(predicates, media.IsVariantEQ(*i.IsVariant))
	}
	if i.IsVariantNEQ != nil {
		predicates = append(predicates, media.IsVariantNEQ(*i.IsVariantNEQ))
	}
	if i.IsVariantIsNil {
		predicates = append(predicates, media.IsVariantIsNil())
	}
	if i.IsVariantNotNil {
		predicates = append(predicates, media.IsVariantNotNil())
	}
	if i.VariantName != nil {
		predicates = append(predicates, media.VariantNameEQ(*i.VariantName))
	}
	if i.VariantNameNEQ != nil {
		predicates = append(predicates, media.VariantNameNEQ(*i.VariantNameNEQ))
	}
	if len(i.VariantNameIn) > 0 {
		predicates = append(predicates, media.VariantNameIn(i.VariantNameIn...))
	}
	if len(i.VariantNameNotIn) > 0 {
		predicates = append(predicates, media.VariantNameNotIn(i.VariantNameNotIn...))
	}
	if i.VariantNameGT != nil {
		predicates = append(predicates, media.VariantNameGT(*i.VariantNameGT))
	}
	if i.VariantNameGTE != nil {
		predicates = append(predicates, media.VariantNameGTE(*i.VariantNameGTE))
	}
	if i.VariantNameLT != nil {
		predicates = append(predicates, media.VariantNameLT(*i.VariantNameLT))
	}
	if i.VariantNameLTE != nil {
		predicates = append(predicates, media.VariantNameLTE(*i.VariantNameLTE))
	}
	if i.VariantNameContains != nil {
		predicates = append(predicates, media.VariantNameContains(*i.VariantNameContains))
	}
	if i.VariantNameHasPrefix != nil {
		predicates = append(predicates, media.VariantNameHasPrefix(*i.VariantNameHasPrefix))
	}
	if i.VariantNameHasSuffix != nil {
		predicates = append(predicates, media.VariantNameHasSuffix(*i.VariantNameHasSuffix))
	}
	if i.VariantNameIsNil {
		predicates = append(predicates, media.VariantNameIsNil())
	}
	if i.VariantNameNotNil {
		predicates = append(predicates, media.VariantNameNotNil())
	}
	if i.VariantNameEqualFold != nil {
		predicates = append(predicates, media.VariantNameEqualFold(*i.VariantNameEqualFold))
	}
	if i.VariantNameContainsFold != nil {
		predicates = append(predicates, media.VariantNameContainsFold(*i.VariantNameContainsFold))
	}
	if i.OriginalMediaID != nil {
		predicates = append(predicates, media.OriginalMediaIDEQ(*i.OriginalMediaID))
	}
	if i.OriginalMediaIDNEQ != nil {
		predicates = append(predicates, media.OriginalMediaIDNEQ(*i.OriginalMediaIDNEQ))
	}
	if len(i.OriginalMediaIDIn) > 0 {
		predicates = append(predicates, media.OriginalMediaIDIn(i.OriginalMediaIDIn...))
	}
	if len(i.OriginalMediaIDNotIn) > 0 {
		predicates = append(predicates, media.OriginalMediaIDNotIn(i.OriginalMediaIDNotIn...))
	}
	if i.OriginalMediaIDGT != nil {
		predicates = append(predicates, media.OriginalMediaIDGT(*i.OriginalMediaIDGT))
	}
	if i.OriginalMediaIDGTE != nil {
		predicates = append(predicates, media.OriginalMediaIDGTE(*i.OriginalMediaIDGTE))
	}
	if i.OriginalMediaIDLT != nil {
		predicates = append(predicates, media.OriginalMediaIDLT(*i.OriginalMediaIDLT))
	}
	if i.OriginalMediaIDLTE != nil {
		predicates = append(predicates, media.OriginalMediaIDLTE(*i.OriginalMediaIDLTE))
	}
	if i.OriginalMediaIDContains != nil {
		predicates = append(predicates, media.OriginalMediaIDContains(*i.OriginalMediaIDContains))
	}
	if i.OriginalMediaIDHasPrefix != nil {
		predicates = append(predicates, media.OriginalMediaIDHasPrefix(*i.OriginalMediaIDHasPrefix))
	}
	if i.OriginalMediaIDHasSuffix != nil {
		predicates = append(predicates, media.OriginalMediaIDHasSuffix(*i.OriginalMediaIDHasSuffix))
	}
	if i.OriginalMediaIDIsNil {
		predicates = append(predicates, media.OriginalMediaIDIsNil())
	}
	if i.OriginalMediaIDNotNil {
		predicates = append(predicates, media.OriginalMediaIDNotNil())
	}
	if i.OriginalMediaIDEqualFold != nil {
		predicates = append(predicates, media.OriginalMediaIDEqualFold(*i.OriginalMediaIDEqualFold))
	}
	if i.OriginalMediaIDContainsFold != nil {
		predicates = append(predicates, media.OriginalMediaIDContainsFold(*i.OriginalMediaIDContainsFold))
	}
	if i.Checksum != nil {
		predicates = append(predicates, media.ChecksumEQ(*i.Checksum))
	}
	if i.ChecksumNEQ != nil {
		predicates = append(predicates, media.ChecksumNEQ(*i.ChecksumNEQ))
	}
	if len(i.ChecksumIn) > 0 {
		predicates = append(predicates, media.ChecksumIn(i.ChecksumIn...))
	}
	if len(i.ChecksumNotIn) > 0 {
		predicates = append(predicates, media.ChecksumNotIn(i.ChecksumNotIn...))
	}
	if i.ChecksumGT != nil {
		predicates = append(predicates, media.ChecksumGT(*i.ChecksumGT))
	}
	if i.ChecksumGTE != nil {
		predicates = append(predicates, media.ChecksumGTE(*i.ChecksumGTE))
	}
	if i.ChecksumLT != nil {
		predicates = append(predicates, media.ChecksumLT(*i.ChecksumLT))
	}
	if i.ChecksumLTE != nil {
		predicates = append(predicates, media.ChecksumLTE(*i.ChecksumLTE))
	}
	if i.ChecksumContains != nil {
		predicates = append(predicates, media.ChecksumContains(*i.ChecksumContains))
	}
	if i.ChecksumHasPrefix != nil {
		predicates = append(predicates, media.ChecksumHasPrefix(*i.ChecksumHasPrefix))
	}
	if i.ChecksumHasSuffix != nil {
		predicates = append(predicates, media.ChecksumHasSuffix(*i.ChecksumHasSuffix))
	}
	if i.ChecksumIsNil {
		predicates = append(predicates, media.ChecksumIsNil())
	}
	if i.ChecksumNotNil {
		predicates = append(predicates, media.ChecksumNotNil())
	}
	if i.ChecksumEqualFold != nil {
		predicates = append(predicates, media.ChecksumEqualFold(*i.ChecksumEqualFold))
	}
	if i.ChecksumContainsFold != nil {
		predicates = append(predicates, media.ChecksumContainsFold(*i.ChecksumContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, media.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, media.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, media.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, media.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, media.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, media.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, media.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, media.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, media.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, media.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, media.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, media.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, media.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.Alt != nil {
		predicates = append(predicates, media.AltEQ(*i.Alt))
	}
	if i.AltNEQ != nil {
		predicates = append(predicates, media.AltNEQ(*i.AltNEQ))
	}
	if len(i.AltIn) > 0 {
		predicates = append(predicates, media.AltIn(i.AltIn...))
	}
	if len(i.AltNotIn) > 0 {
		predicates = append(predicates, media.AltNotIn(i.AltNotIn...))
	}
	if i.AltGT != nil {
		predicates = append(predicates, media.AltGT(*i.AltGT))
	}
	if i.AltGTE != nil {
		predicates = append(predicates, media.AltGTE(*i.AltGTE))
	}
	if i.AltLT != nil {
		predicates = append(predicates, media.AltLT(*i.AltLT))
	}
	if i.AltLTE != nil {
		predicates = append(predicates, media.AltLTE(*i.AltLTE))
	}
	if i.AltContains != nil {
		predicates = append(predicates, media.AltContains(*i.AltContains))
	}
	if i.AltHasPrefix != nil {
		predicates = append(predicates, media.AltHasPrefix(*i.AltHasPrefix))
	}
	if i.AltHasSuffix != nil {
		predicates = append(predicates, media.AltHasSuffix(*i.AltHasSuffix))
	}
	if i.AltIsNil {
		predicates = append(predicates, media.AltIsNil())
	}
	if i.AltNotNil {
		predicates = append(predicates, media.AltNotNil())
	}
	if i.AltEqualFold != nil {
		predicates = append(predicates, media.AltEqualFold(*i.AltEqualFold))
	}
	if i.AltContainsFold != nil {
		predicates = append(predicates, media.AltContainsFold(*i.AltContainsFold))
	}
	if i.UID != nil {
		predicates = append(predicates, media.UIDEQ(*i.UID))
	}
	if i.UIDNEQ != nil {
		predicates = append(predicates, media.UIDNEQ(*i.UIDNEQ))
	}
	if len(i.UIDIn) > 0 {
		predicates = append(predicates, media.UIDIn(i.UIDIn...))
	}
	if len(i.UIDNotIn) > 0 {
		predicates = append(predicates, media.UIDNotIn(i.UIDNotIn...))
	}
	if i.UIDGT != nil {
		predicates = append(predicates, media.UIDGT(*i.UIDGT))
	}
	if i.UIDGTE != nil {
		predicates = append(predicates, media.UIDGTE(*i.UIDGTE))
	}
	if i.UIDLT != nil {
		predicates = append(predicates, media.UIDLT(*i.UIDLT))
	}
	if i.UIDLTE != nil {
		predicates = append(predicates, media.UIDLTE(*i.UIDLTE))
	}
	if i.UIDContains != nil {
		predicates = append(predicates, media.UIDContains(*i.UIDContains))
	}
	if i.UIDHasPrefix != nil {
		predicates = append(predicates, media.UIDHasPrefix(*i.UIDHasPrefix))
	}
	if i.UIDHasSuffix != nil {
		predicates = append(predicates, media.UIDHasSuffix(*i.UIDHasSuffix))
	}
	if i.UIDIsNil {
		predicates = append(predicates, media.UIDIsNil())
	}
	if i.UIDNotNil {
		predicates = append(predicates, media.UIDNotNil())
	}
	if i.UIDEqualFold != nil {
		predicates = append(predicates, media.UIDEqualFold(*i.UIDEqualFold))
	}
	if i.UIDContainsFold != nil {
		predicates = append(predicates, media.UIDContainsFold(*i.UIDContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, media.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, media.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, media.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, media.StatusNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyMediaWhereInput
	case 1:
		return predicates[0], nil
	default:
		return media.And(predicates...), nil
	}
}

// OauthConnectionWhereInput represents a where input for filtering OauthConnection queries.
type OauthConnectionWhereInput struct {
	Predicates []predicate.OauthConnection  `json:"-"`
	Not        *OauthConnectionWhereInput   `json:"not,omitempty"`
	Or         []*OauthConnectionWhereInput `json:"or,omitempty"`
	And        []*OauthConnectionWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "provider" field predicates.
	Provider             *string  `json:"provider,omitempty"`
	ProviderNEQ          *string  `json:"providerNEQ,omitempty"`
	ProviderIn           []string `json:"providerIn,omitempty"`
	ProviderNotIn        []string `json:"providerNotIn,omitempty"`
	ProviderGT           *string  `json:"providerGT,omitempty"`
	ProviderGTE          *string  `json:"providerGTE,omitempty"`
	ProviderLT           *string  `json:"providerLT,omitempty"`
	ProviderLTE          *string  `json:"providerLTE,omitempty"`
	ProviderContains     *string  `json:"providerContains,omitempty"`
	ProviderHasPrefix    *string  `json:"providerHasPrefix,omitempty"`
	ProviderHasSuffix    *string  `json:"providerHasSuffix,omitempty"`
	ProviderIsNil        bool     `json:"providerIsNil,omitempty"`
	ProviderNotNil       bool     `json:"providerNotNil,omitempty"`
	ProviderEqualFold    *string  `json:"providerEqualFold,omitempty"`
	ProviderContainsFold *string  `json:"providerContainsFold,omitempty"`

	// "client_id" field predicates.
	ClientID             *string  `json:"clientID,omitempty"`
	ClientIDNEQ          *string  `json:"clientIDNEQ,omitempty"`
	ClientIDIn           []string `json:"clientIDIn,omitempty"`
	ClientIDNotIn        []string `json:"clientIDNotIn,omitempty"`
	ClientIDGT           *string  `json:"clientIDGT,omitempty"`
	ClientIDGTE          *string  `json:"clientIDGTE,omitempty"`
	ClientIDLT           *string  `json:"clientIDLT,omitempty"`
	ClientIDLTE          *string  `json:"clientIDLTE,omitempty"`
	ClientIDContains     *string  `json:"clientIDContains,omitempty"`
	ClientIDHasPrefix    *string  `json:"clientIDHasPrefix,omitempty"`
	ClientIDHasSuffix    *string  `json:"clientIDHasSuffix,omitempty"`
	ClientIDIsNil        bool     `json:"clientIDIsNil,omitempty"`
	ClientIDNotNil       bool     `json:"clientIDNotNil,omitempty"`
	ClientIDEqualFold    *string  `json:"clientIDEqualFold,omitempty"`
	ClientIDContainsFold *string  `json:"clientIDContainsFold,omitempty"`

	// "client_secret" field predicates.
	ClientSecret             *string  `json:"clientSecret,omitempty"`
	ClientSecretNEQ          *string  `json:"clientSecretNEQ,omitempty"`
	ClientSecretIn           []string `json:"clientSecretIn,omitempty"`
	ClientSecretNotIn        []string `json:"clientSecretNotIn,omitempty"`
	ClientSecretGT           *string  `json:"clientSecretGT,omitempty"`
	ClientSecretGTE          *string  `json:"clientSecretGTE,omitempty"`
	ClientSecretLT           *string  `json:"clientSecretLT,omitempty"`
	ClientSecretLTE          *string  `json:"clientSecretLTE,omitempty"`
	ClientSecretContains     *string  `json:"clientSecretContains,omitempty"`
	ClientSecretHasPrefix    *string  `json:"clientSecretHasPrefix,omitempty"`
	ClientSecretHasSuffix    *string  `json:"clientSecretHasSuffix,omitempty"`
	ClientSecretIsNil        bool     `json:"clientSecretIsNil,omitempty"`
	ClientSecretNotNil       bool     `json:"clientSecretNotNil,omitempty"`
	ClientSecretEqualFold    *string  `json:"clientSecretEqualFold,omitempty"`
	ClientSecretContainsFold *string  `json:"clientSecretContainsFold,omitempty"`

	// "scopes" field predicates.
	Scopes             *string  `json:"scopes,omitempty"`
	ScopesNEQ          *string  `json:"scopesNEQ,omitempty"`
	ScopesIn           []string `json:"scopesIn,omitempty"`
	ScopesNotIn        []string `json:"scopesNotIn,omitempty"`
	ScopesGT           *string  `json:"scopesGT,omitempty"`
	ScopesGTE          *string  `json:"scopesGTE,omitempty"`
	ScopesLT           *string  `json:"scopesLT,omitempty"`
	ScopesLTE          *string  `json:"scopesLTE,omitempty"`
	ScopesContains     *string  `json:"scopesContains,omitempty"`
	ScopesHasPrefix    *string  `json:"scopesHasPrefix,omitempty"`
	ScopesHasSuffix    *string  `json:"scopesHasSuffix,omitempty"`
	ScopesIsNil        bool     `json:"scopesIsNil,omitempty"`
	ScopesNotNil       bool     `json:"scopesNotNil,omitempty"`
	ScopesEqualFold    *string  `json:"scopesEqualFold,omitempty"`
	ScopesContainsFold *string  `json:"scopesContainsFold,omitempty"`

	// "redirect_url" field predicates.
	RedirectURL             *string  `json:"redirectURL,omitempty"`
	RedirectURLNEQ          *string  `json:"redirectURLNEQ,omitempty"`
	RedirectURLIn           []string `json:"redirectURLIn,omitempty"`
	RedirectURLNotIn        []string `json:"redirectURLNotIn,omitempty"`
	RedirectURLGT           *string  `json:"redirectURLGT,omitempty"`
	RedirectURLGTE          *string  `json:"redirectURLGTE,omitempty"`
	RedirectURLLT           *string  `json:"redirectURLLT,omitempty"`
	RedirectURLLTE          *string  `json:"redirectURLLTE,omitempty"`
	RedirectURLContains     *string  `json:"redirectURLContains,omitempty"`
	RedirectURLHasPrefix    *string  `json:"redirectURLHasPrefix,omitempty"`
	RedirectURLHasSuffix    *string  `json:"redirectURLHasSuffix,omitempty"`
	RedirectURLIsNil        bool     `json:"redirectURLIsNil,omitempty"`
	RedirectURLNotNil       bool     `json:"redirectURLNotNil,omitempty"`
	RedirectURLEqualFold    *string  `json:"redirectURLEqualFold,omitempty"`
	RedirectURLContainsFold *string  `json:"redirectURLContainsFold,omitempty"`

	// "dashboard_link" field predicates.
	DashboardLink             *string  `json:"dashboardLink,omitempty"`
	DashboardLinkNEQ          *string  `json:"dashboardLinkNEQ,omitempty"`
	DashboardLinkIn           []string `json:"dashboardLinkIn,omitempty"`
	DashboardLinkNotIn        []string `json:"dashboardLinkNotIn,omitempty"`
	DashboardLinkGT           *string  `json:"dashboardLinkGT,omitempty"`
	DashboardLinkGTE          *string  `json:"dashboardLinkGTE,omitempty"`
	DashboardLinkLT           *string  `json:"dashboardLinkLT,omitempty"`
	DashboardLinkLTE          *string  `json:"dashboardLinkLTE,omitempty"`
	DashboardLinkContains     *string  `json:"dashboardLinkContains,omitempty"`
	DashboardLinkHasPrefix    *string  `json:"dashboardLinkHasPrefix,omitempty"`
	DashboardLinkHasSuffix    *string  `json:"dashboardLinkHasSuffix,omitempty"`
	DashboardLinkIsNil        bool     `json:"dashboardLinkIsNil,omitempty"`
	DashboardLinkNotNil       bool     `json:"dashboardLinkNotNil,omitempty"`
	DashboardLinkEqualFold    *string  `json:"dashboardLinkEqualFold,omitempty"`
	DashboardLinkContainsFold *string  `json:"dashboardLinkContainsFold,omitempty"`

	// "note" field predicates.
	Note             *string  `json:"note,omitempty"`
	NoteNEQ          *string  `json:"noteNEQ,omitempty"`
	NoteIn           []string `json:"noteIn,omitempty"`
	NoteNotIn        []string `json:"noteNotIn,omitempty"`
	NoteGT           *string  `json:"noteGT,omitempty"`
	NoteGTE          *string  `json:"noteGTE,omitempty"`
	NoteLT           *string  `json:"noteLT,omitempty"`
	NoteLTE          *string  `json:"noteLTE,omitempty"`
	NoteContains     *string  `json:"noteContains,omitempty"`
	NoteHasPrefix    *string  `json:"noteHasPrefix,omitempty"`
	NoteHasSuffix    *string  `json:"noteHasSuffix,omitempty"`
	NoteIsNil        bool     `json:"noteIsNil,omitempty"`
	NoteNotNil       bool     `json:"noteNotNil,omitempty"`
	NoteEqualFold    *string  `json:"noteEqualFold,omitempty"`
	NoteContainsFold *string  `json:"noteContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *OauthConnectionWhereInput) AddPredicates(predicates ...predicate.OauthConnection) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the OauthConnectionWhereInput filter on the OauthConnectionQuery builder.
func (i *OauthConnectionWhereInput) Filter(q *OauthConnectionQuery) (*OauthConnectionQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyOauthConnectionWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyOauthConnectionWhereInput is returned in case the OauthConnectionWhereInput is empty.
var ErrEmptyOauthConnectionWhereInput = errors.New("ent: empty predicate OauthConnectionWhereInput")

// P returns a predicate for filtering oauthconnections.
// An error is returned if the input is empty or invalid.
func (i *OauthConnectionWhereInput) P() (predicate.OauthConnection, error) {
	var predicates []predicate.OauthConnection
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, oauthconnection.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.OauthConnection, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, oauthconnection.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.OauthConnection, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, oauthconnection.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, oauthconnection.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, oauthconnection.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, oauthconnection.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, oauthconnection.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, oauthconnection.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, oauthconnection.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, oauthconnection.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, oauthconnection.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, oauthconnection.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, oauthconnection.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, oauthconnection.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, oauthconnection.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, oauthconnection.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, oauthconnection.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, oauthconnection.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, oauthconnection.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, oauthconnection.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, oauthconnection.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, oauthconnection.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, oauthconnection.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, oauthconnection.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, oauthconnection.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, oauthconnection.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, oauthconnection.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, oauthconnection.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, oauthconnection.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, oauthconnection.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, oauthconnection.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, oauthconnection.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, oauthconnection.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, oauthconnection.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, oauthconnection.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, oauthconnection.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, oauthconnection.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, oauthconnection.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, oauthconnection.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, oauthconnection.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, oauthconnection.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, oauthconnection.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, oauthconnection.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, oauthconnection.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, oauthconnection.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, oauthconnection.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, oauthconnection.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, oauthconnection.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, oauthconnection.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, oauthconnection.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, oauthconnection.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, oauthconnection.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, oauthconnection.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, oauthconnection.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, oauthconnection.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, oauthconnection.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, oauthconnection.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, oauthconnection.NameContainsFold(*i.NameContainsFold))
	}
	if i.Provider != nil {
		predicates = append(predicates, oauthconnection.ProviderEQ(*i.Provider))
	}
	if i.ProviderNEQ != nil {
		predicates = append(predicates, oauthconnection.ProviderNEQ(*i.ProviderNEQ))
	}
	if len(i.ProviderIn) > 0 {
		predicates = append(predicates, oauthconnection.ProviderIn(i.ProviderIn...))
	}
	if len(i.ProviderNotIn) > 0 {
		predicates = append(predicates, oauthconnection.ProviderNotIn(i.ProviderNotIn...))
	}
	if i.ProviderGT != nil {
		predicates = append(predicates, oauthconnection.ProviderGT(*i.ProviderGT))
	}
	if i.ProviderGTE != nil {
		predicates = append(predicates, oauthconnection.ProviderGTE(*i.ProviderGTE))
	}
	if i.ProviderLT != nil {
		predicates = append(predicates, oauthconnection.ProviderLT(*i.ProviderLT))
	}
	if i.ProviderLTE != nil {
		predicates = append(predicates, oauthconnection.ProviderLTE(*i.ProviderLTE))
	}
	if i.ProviderContains != nil {
		predicates = append(predicates, oauthconnection.ProviderContains(*i.ProviderContains))
	}
	if i.ProviderHasPrefix != nil {
		predicates = append(predicates, oauthconnection.ProviderHasPrefix(*i.ProviderHasPrefix))
	}
	if i.ProviderHasSuffix != nil {
		predicates = append(predicates, oauthconnection.ProviderHasSuffix(*i.ProviderHasSuffix))
	}
	if i.ProviderIsNil {
		predicates = append(predicates, oauthconnection.ProviderIsNil())
	}
	if i.ProviderNotNil {
		predicates = append(predicates, oauthconnection.ProviderNotNil())
	}
	if i.ProviderEqualFold != nil {
		predicates = append(predicates, oauthconnection.ProviderEqualFold(*i.ProviderEqualFold))
	}
	if i.ProviderContainsFold != nil {
		predicates = append(predicates, oauthconnection.ProviderContainsFold(*i.ProviderContainsFold))
	}
	if i.ClientID != nil {
		predicates = append(predicates, oauthconnection.ClientIDEQ(*i.ClientID))
	}
	if i.ClientIDNEQ != nil {
		predicates = append(predicates, oauthconnection.ClientIDNEQ(*i.ClientIDNEQ))
	}
	if len(i.ClientIDIn) > 0 {
		predicates = append(predicates, oauthconnection.ClientIDIn(i.ClientIDIn...))
	}
	if len(i.ClientIDNotIn) > 0 {
		predicates = append(predicates, oauthconnection.ClientIDNotIn(i.ClientIDNotIn...))
	}
	if i.ClientIDGT != nil {
		predicates = append(predicates, oauthconnection.ClientIDGT(*i.ClientIDGT))
	}
	if i.ClientIDGTE != nil {
		predicates = append(predicates, oauthconnection.ClientIDGTE(*i.ClientIDGTE))
	}
	if i.ClientIDLT != nil {
		predicates = append(predicates, oauthconnection.ClientIDLT(*i.ClientIDLT))
	}
	if i.ClientIDLTE != nil {
		predicates = append(predicates, oauthconnection.ClientIDLTE(*i.ClientIDLTE))
	}
	if i.ClientIDContains != nil {
		predicates = append(predicates, oauthconnection.ClientIDContains(*i.ClientIDContains))
	}
	if i.ClientIDHasPrefix != nil {
		predicates = append(predicates, oauthconnection.ClientIDHasPrefix(*i.ClientIDHasPrefix))
	}
	if i.ClientIDHasSuffix != nil {
		predicates = append(predicates, oauthconnection.ClientIDHasSuffix(*i.ClientIDHasSuffix))
	}
	if i.ClientIDIsNil {
		predicates = append(predicates, oauthconnection.ClientIDIsNil())
	}
	if i.ClientIDNotNil {
		predicates = append(predicates, oauthconnection.ClientIDNotNil())
	}
	if i.ClientIDEqualFold != nil {
		predicates = append(predicates, oauthconnection.ClientIDEqualFold(*i.ClientIDEqualFold))
	}
	if i.ClientIDContainsFold != nil {
		predicates = append(predicates, oauthconnection.ClientIDContainsFold(*i.ClientIDContainsFold))
	}
	if i.ClientSecret != nil {
		predicates = append(predicates, oauthconnection.ClientSecretEQ(*i.ClientSecret))
	}
	if i.ClientSecretNEQ != nil {
		predicates = append(predicates, oauthconnection.ClientSecretNEQ(*i.ClientSecretNEQ))
	}
	if len(i.ClientSecretIn) > 0 {
		predicates = append(predicates, oauthconnection.ClientSecretIn(i.ClientSecretIn...))
	}
	if len(i.ClientSecretNotIn) > 0 {
		predicates = append(predicates, oauthconnection.ClientSecretNotIn(i.ClientSecretNotIn...))
	}
	if i.ClientSecretGT != nil {
		predicates = append(predicates, oauthconnection.ClientSecretGT(*i.ClientSecretGT))
	}
	if i.ClientSecretGTE != nil {
		predicates = append(predicates, oauthconnection.ClientSecretGTE(*i.ClientSecretGTE))
	}
	if i.ClientSecretLT != nil {
		predicates = append(predicates, oauthconnection.ClientSecretLT(*i.ClientSecretLT))
	}
	if i.ClientSecretLTE != nil {
		predicates = append(predicates, oauthconnection.ClientSecretLTE(*i.ClientSecretLTE))
	}
	if i.ClientSecretContains != nil {
		predicates = append(predicates, oauthconnection.ClientSecretContains(*i.ClientSecretContains))
	}
	if i.ClientSecretHasPrefix != nil {
		predicates = append(predicates, oauthconnection.ClientSecretHasPrefix(*i.ClientSecretHasPrefix))
	}
	if i.ClientSecretHasSuffix != nil {
		predicates = append(predicates, oauthconnection.ClientSecretHasSuffix(*i.ClientSecretHasSuffix))
	}
	if i.ClientSecretIsNil {
		predicates = append(predicates, oauthconnection.ClientSecretIsNil())
	}
	if i.ClientSecretNotNil {
		predicates = append(predicates, oauthconnection.ClientSecretNotNil())
	}
	if i.ClientSecretEqualFold != nil {
		predicates = append(predicates, oauthconnection.ClientSecretEqualFold(*i.ClientSecretEqualFold))
	}
	if i.ClientSecretContainsFold != nil {
		predicates = append(predicates, oauthconnection.ClientSecretContainsFold(*i.ClientSecretContainsFold))
	}
	if i.Scopes != nil {
		predicates = append(predicates, oauthconnection.ScopesEQ(*i.Scopes))
	}
	if i.ScopesNEQ != nil {
		predicates = append(predicates, oauthconnection.ScopesNEQ(*i.ScopesNEQ))
	}
	if len(i.ScopesIn) > 0 {
		predicates = append(predicates, oauthconnection.ScopesIn(i.ScopesIn...))
	}
	if len(i.ScopesNotIn) > 0 {
		predicates = append(predicates, oauthconnection.ScopesNotIn(i.ScopesNotIn...))
	}
	if i.ScopesGT != nil {
		predicates = append(predicates, oauthconnection.ScopesGT(*i.ScopesGT))
	}
	if i.ScopesGTE != nil {
		predicates = append(predicates, oauthconnection.ScopesGTE(*i.ScopesGTE))
	}
	if i.ScopesLT != nil {
		predicates = append(predicates, oauthconnection.ScopesLT(*i.ScopesLT))
	}
	if i.ScopesLTE != nil {
		predicates = append(predicates, oauthconnection.ScopesLTE(*i.ScopesLTE))
	}
	if i.ScopesContains != nil {
		predicates = append(predicates, oauthconnection.ScopesContains(*i.ScopesContains))
	}
	if i.ScopesHasPrefix != nil {
		predicates = append(predicates, oauthconnection.ScopesHasPrefix(*i.ScopesHasPrefix))
	}
	if i.ScopesHasSuffix != nil {
		predicates = append(predicates, oauthconnection.ScopesHasSuffix(*i.ScopesHasSuffix))
	}
	if i.ScopesIsNil {
		predicates = append(predicates, oauthconnection.ScopesIsNil())
	}
	if i.ScopesNotNil {
		predicates = append(predicates, oauthconnection.ScopesNotNil())
	}
	if i.ScopesEqualFold != nil {
		predicates = append(predicates, oauthconnection.ScopesEqualFold(*i.ScopesEqualFold))
	}
	if i.ScopesContainsFold != nil {
		predicates = append(predicates, oauthconnection.ScopesContainsFold(*i.ScopesContainsFold))
	}
	if i.RedirectURL != nil {
		predicates = append(predicates, oauthconnection.RedirectURLEQ(*i.RedirectURL))
	}
	if i.RedirectURLNEQ != nil {
		predicates = append(predicates, oauthconnection.RedirectURLNEQ(*i.RedirectURLNEQ))
	}
	if len(i.RedirectURLIn) > 0 {
		predicates = append(predicates, oauthconnection.RedirectURLIn(i.RedirectURLIn...))
	}
	if len(i.RedirectURLNotIn) > 0 {
		predicates = append(predicates, oauthconnection.RedirectURLNotIn(i.RedirectURLNotIn...))
	}
	if i.RedirectURLGT != nil {
		predicates = append(predicates, oauthconnection.RedirectURLGT(*i.RedirectURLGT))
	}
	if i.RedirectURLGTE != nil {
		predicates = append(predicates, oauthconnection.RedirectURLGTE(*i.RedirectURLGTE))
	}
	if i.RedirectURLLT != nil {
		predicates = append(predicates, oauthconnection.RedirectURLLT(*i.RedirectURLLT))
	}
	if i.RedirectURLLTE != nil {
		predicates = append(predicates, oauthconnection.RedirectURLLTE(*i.RedirectURLLTE))
	}
	if i.RedirectURLContains != nil {
		predicates = append(predicates, oauthconnection.RedirectURLContains(*i.RedirectURLContains))
	}
	if i.RedirectURLHasPrefix != nil {
		predicates = append(predicates, oauthconnection.RedirectURLHasPrefix(*i.RedirectURLHasPrefix))
	}
	if i.RedirectURLHasSuffix != nil {
		predicates = append(predicates, oauthconnection.RedirectURLHasSuffix(*i.RedirectURLHasSuffix))
	}
	if i.RedirectURLIsNil {
		predicates = append(predicates, oauthconnection.RedirectURLIsNil())
	}
	if i.RedirectURLNotNil {
		predicates = append(predicates, oauthconnection.RedirectURLNotNil())
	}
	if i.RedirectURLEqualFold != nil {
		predicates = append(predicates, oauthconnection.RedirectURLEqualFold(*i.RedirectURLEqualFold))
	}
	if i.RedirectURLContainsFold != nil {
		predicates = append(predicates, oauthconnection.RedirectURLContainsFold(*i.RedirectURLContainsFold))
	}
	if i.DashboardLink != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkEQ(*i.DashboardLink))
	}
	if i.DashboardLinkNEQ != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkNEQ(*i.DashboardLinkNEQ))
	}
	if len(i.DashboardLinkIn) > 0 {
		predicates = append(predicates, oauthconnection.DashboardLinkIn(i.DashboardLinkIn...))
	}
	if len(i.DashboardLinkNotIn) > 0 {
		predicates = append(predicates, oauthconnection.DashboardLinkNotIn(i.DashboardLinkNotIn...))
	}
	if i.DashboardLinkGT != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkGT(*i.DashboardLinkGT))
	}
	if i.DashboardLinkGTE != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkGTE(*i.DashboardLinkGTE))
	}
	if i.DashboardLinkLT != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkLT(*i.DashboardLinkLT))
	}
	if i.DashboardLinkLTE != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkLTE(*i.DashboardLinkLTE))
	}
	if i.DashboardLinkContains != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkContains(*i.DashboardLinkContains))
	}
	if i.DashboardLinkHasPrefix != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkHasPrefix(*i.DashboardLinkHasPrefix))
	}
	if i.DashboardLinkHasSuffix != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkHasSuffix(*i.DashboardLinkHasSuffix))
	}
	if i.DashboardLinkIsNil {
		predicates = append(predicates, oauthconnection.DashboardLinkIsNil())
	}
	if i.DashboardLinkNotNil {
		predicates = append(predicates, oauthconnection.DashboardLinkNotNil())
	}
	if i.DashboardLinkEqualFold != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkEqualFold(*i.DashboardLinkEqualFold))
	}
	if i.DashboardLinkContainsFold != nil {
		predicates = append(predicates, oauthconnection.DashboardLinkContainsFold(*i.DashboardLinkContainsFold))
	}
	if i.Note != nil {
		predicates = append(predicates, oauthconnection.NoteEQ(*i.Note))
	}
	if i.NoteNEQ != nil {
		predicates = append(predicates, oauthconnection.NoteNEQ(*i.NoteNEQ))
	}
	if len(i.NoteIn) > 0 {
		predicates = append(predicates, oauthconnection.NoteIn(i.NoteIn...))
	}
	if len(i.NoteNotIn) > 0 {
		predicates = append(predicates, oauthconnection.NoteNotIn(i.NoteNotIn...))
	}
	if i.NoteGT != nil {
		predicates = append(predicates, oauthconnection.NoteGT(*i.NoteGT))
	}
	if i.NoteGTE != nil {
		predicates = append(predicates, oauthconnection.NoteGTE(*i.NoteGTE))
	}
	if i.NoteLT != nil {
		predicates = append(predicates, oauthconnection.NoteLT(*i.NoteLT))
	}
	if i.NoteLTE != nil {
		predicates = append(predicates, oauthconnection.NoteLTE(*i.NoteLTE))
	}
	if i.NoteContains != nil {
		predicates = append(predicates, oauthconnection.NoteContains(*i.NoteContains))
	}
	if i.NoteHasPrefix != nil {
		predicates = append(predicates, oauthconnection.NoteHasPrefix(*i.NoteHasPrefix))
	}
	if i.NoteHasSuffix != nil {
		predicates = append(predicates, oauthconnection.NoteHasSuffix(*i.NoteHasSuffix))
	}
	if i.NoteIsNil {
		predicates = append(predicates, oauthconnection.NoteIsNil())
	}
	if i.NoteNotNil {
		predicates = append(predicates, oauthconnection.NoteNotNil())
	}
	if i.NoteEqualFold != nil {
		predicates = append(predicates, oauthconnection.NoteEqualFold(*i.NoteEqualFold))
	}
	if i.NoteContainsFold != nil {
		predicates = append(predicates, oauthconnection.NoteContainsFold(*i.NoteContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, oauthconnection.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, oauthconnection.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, oauthconnection.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, oauthconnection.StatusNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyOauthConnectionWhereInput
	case 1:
		return predicates[0], nil
	default:
		return oauthconnection.And(predicates...), nil
	}
}

// PostWhereInput represents a where input for filtering Post queries.
type PostWhereInput struct {
	Predicates []predicate.Post  `json:"-"`
	Not        *PostWhereInput   `json:"not,omitempty"`
	Or         []*PostWhereInput `json:"or,omitempty"`
	And        []*PostWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugIsNil        bool     `json:"slugIsNil,omitempty"`
	SlugNotNil       bool     `json:"slugNotNil,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "post_status_id" field predicates.
	PostStatusID             *string  `json:"postStatusID,omitempty"`
	PostStatusIDNEQ          *string  `json:"postStatusIDNEQ,omitempty"`
	PostStatusIDIn           []string `json:"postStatusIDIn,omitempty"`
	PostStatusIDNotIn        []string `json:"postStatusIDNotIn,omitempty"`
	PostStatusIDGT           *string  `json:"postStatusIDGT,omitempty"`
	PostStatusIDGTE          *string  `json:"postStatusIDGTE,omitempty"`
	PostStatusIDLT           *string  `json:"postStatusIDLT,omitempty"`
	PostStatusIDLTE          *string  `json:"postStatusIDLTE,omitempty"`
	PostStatusIDContains     *string  `json:"postStatusIDContains,omitempty"`
	PostStatusIDHasPrefix    *string  `json:"postStatusIDHasPrefix,omitempty"`
	PostStatusIDHasSuffix    *string  `json:"postStatusIDHasSuffix,omitempty"`
	PostStatusIDIsNil        bool     `json:"postStatusIDIsNil,omitempty"`
	PostStatusIDNotNil       bool     `json:"postStatusIDNotNil,omitempty"`
	PostStatusIDEqualFold    *string  `json:"postStatusIDEqualFold,omitempty"`
	PostStatusIDContainsFold *string  `json:"postStatusIDContainsFold,omitempty"`

	// "post_type_id" field predicates.
	PostTypeID             *string  `json:"postTypeID,omitempty"`
	PostTypeIDNEQ          *string  `json:"postTypeIDNEQ,omitempty"`
	PostTypeIDIn           []string `json:"postTypeIDIn,omitempty"`
	PostTypeIDNotIn        []string `json:"postTypeIDNotIn,omitempty"`
	PostTypeIDGT           *string  `json:"postTypeIDGT,omitempty"`
	PostTypeIDGTE          *string  `json:"postTypeIDGTE,omitempty"`
	PostTypeIDLT           *string  `json:"postTypeIDLT,omitempty"`
	PostTypeIDLTE          *string  `json:"postTypeIDLTE,omitempty"`
	PostTypeIDContains     *string  `json:"postTypeIDContains,omitempty"`
	PostTypeIDHasPrefix    *string  `json:"postTypeIDHasPrefix,omitempty"`
	PostTypeIDHasSuffix    *string  `json:"postTypeIDHasSuffix,omitempty"`
	PostTypeIDIsNil        bool     `json:"postTypeIDIsNil,omitempty"`
	PostTypeIDNotNil       bool     `json:"postTypeIDNotNil,omitempty"`
	PostTypeIDEqualFold    *string  `json:"postTypeIDEqualFold,omitempty"`
	PostTypeIDContainsFold *string  `json:"postTypeIDContainsFold,omitempty"`

	// "primary_category_id" field predicates.
	PrimaryCategoryID             *string  `json:"primaryCategoryID,omitempty"`
	PrimaryCategoryIDNEQ          *string  `json:"primaryCategoryIDNEQ,omitempty"`
	PrimaryCategoryIDIn           []string `json:"primaryCategoryIDIn,omitempty"`
	PrimaryCategoryIDNotIn        []string `json:"primaryCategoryIDNotIn,omitempty"`
	PrimaryCategoryIDGT           *string  `json:"primaryCategoryIDGT,omitempty"`
	PrimaryCategoryIDGTE          *string  `json:"primaryCategoryIDGTE,omitempty"`
	PrimaryCategoryIDLT           *string  `json:"primaryCategoryIDLT,omitempty"`
	PrimaryCategoryIDLTE          *string  `json:"primaryCategoryIDLTE,omitempty"`
	PrimaryCategoryIDContains     *string  `json:"primaryCategoryIDContains,omitempty"`
	PrimaryCategoryIDHasPrefix    *string  `json:"primaryCategoryIDHasPrefix,omitempty"`
	PrimaryCategoryIDHasSuffix    *string  `json:"primaryCategoryIDHasSuffix,omitempty"`
	PrimaryCategoryIDIsNil        bool     `json:"primaryCategoryIDIsNil,omitempty"`
	PrimaryCategoryIDNotNil       bool     `json:"primaryCategoryIDNotNil,omitempty"`
	PrimaryCategoryIDEqualFold    *string  `json:"primaryCategoryIDEqualFold,omitempty"`
	PrimaryCategoryIDContainsFold *string  `json:"primaryCategoryIDContainsFold,omitempty"`

	// "headline" field predicates.
	Headline             *string  `json:"headline,omitempty"`
	HeadlineNEQ          *string  `json:"headlineNEQ,omitempty"`
	HeadlineIn           []string `json:"headlineIn,omitempty"`
	HeadlineNotIn        []string `json:"headlineNotIn,omitempty"`
	HeadlineGT           *string  `json:"headlineGT,omitempty"`
	HeadlineGTE          *string  `json:"headlineGTE,omitempty"`
	HeadlineLT           *string  `json:"headlineLT,omitempty"`
	HeadlineLTE          *string  `json:"headlineLTE,omitempty"`
	HeadlineContains     *string  `json:"headlineContains,omitempty"`
	HeadlineHasPrefix    *string  `json:"headlineHasPrefix,omitempty"`
	HeadlineHasSuffix    *string  `json:"headlineHasSuffix,omitempty"`
	HeadlineIsNil        bool     `json:"headlineIsNil,omitempty"`
	HeadlineNotNil       bool     `json:"headlineNotNil,omitempty"`
	HeadlineEqualFold    *string  `json:"headlineEqualFold,omitempty"`
	HeadlineContainsFold *string  `json:"headlineContainsFold,omitempty"`

	// "excerpt" field predicates.
	Excerpt             *string  `json:"excerpt,omitempty"`
	ExcerptNEQ          *string  `json:"excerptNEQ,omitempty"`
	ExcerptIn           []string `json:"excerptIn,omitempty"`
	ExcerptNotIn        []string `json:"excerptNotIn,omitempty"`
	ExcerptGT           *string  `json:"excerptGT,omitempty"`
	ExcerptGTE          *string  `json:"excerptGTE,omitempty"`
	ExcerptLT           *string  `json:"excerptLT,omitempty"`
	ExcerptLTE          *string  `json:"excerptLTE,omitempty"`
	ExcerptContains     *string  `json:"excerptContains,omitempty"`
	ExcerptHasPrefix    *string  `json:"excerptHasPrefix,omitempty"`
	ExcerptHasSuffix    *string  `json:"excerptHasSuffix,omitempty"`
	ExcerptIsNil        bool     `json:"excerptIsNil,omitempty"`
	ExcerptNotNil       bool     `json:"excerptNotNil,omitempty"`
	ExcerptEqualFold    *string  `json:"excerptEqualFold,omitempty"`
	ExcerptContainsFold *string  `json:"excerptContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentIsNil        bool     `json:"contentIsNil,omitempty"`
	ContentNotNil       bool     `json:"contentNotNil,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "meta_title" field predicates.
	MetaTitle             *string  `json:"metaTitle,omitempty"`
	MetaTitleNEQ          *string  `json:"metaTitleNEQ,omitempty"`
	MetaTitleIn           []string `json:"metaTitleIn,omitempty"`
	MetaTitleNotIn        []string `json:"metaTitleNotIn,omitempty"`
	MetaTitleGT           *string  `json:"metaTitleGT,omitempty"`
	MetaTitleGTE          *string  `json:"metaTitleGTE,omitempty"`
	MetaTitleLT           *string  `json:"metaTitleLT,omitempty"`
	MetaTitleLTE          *string  `json:"metaTitleLTE,omitempty"`
	MetaTitleContains     *string  `json:"metaTitleContains,omitempty"`
	MetaTitleHasPrefix    *string  `json:"metaTitleHasPrefix,omitempty"`
	MetaTitleHasSuffix    *string  `json:"metaTitleHasSuffix,omitempty"`
	MetaTitleIsNil        bool     `json:"metaTitleIsNil,omitempty"`
	MetaTitleNotNil       bool     `json:"metaTitleNotNil,omitempty"`
	MetaTitleEqualFold    *string  `json:"metaTitleEqualFold,omitempty"`
	MetaTitleContainsFold *string  `json:"metaTitleContainsFold,omitempty"`

	// "meta_descr" field predicates.
	MetaDescr             *string  `json:"metaDescr,omitempty"`
	MetaDescrNEQ          *string  `json:"metaDescrNEQ,omitempty"`
	MetaDescrIn           []string `json:"metaDescrIn,omitempty"`
	MetaDescrNotIn        []string `json:"metaDescrNotIn,omitempty"`
	MetaDescrGT           *string  `json:"metaDescrGT,omitempty"`
	MetaDescrGTE          *string  `json:"metaDescrGTE,omitempty"`
	MetaDescrLT           *string  `json:"metaDescrLT,omitempty"`
	MetaDescrLTE          *string  `json:"metaDescrLTE,omitempty"`
	MetaDescrContains     *string  `json:"metaDescrContains,omitempty"`
	MetaDescrHasPrefix    *string  `json:"metaDescrHasPrefix,omitempty"`
	MetaDescrHasSuffix    *string  `json:"metaDescrHasSuffix,omitempty"`
	MetaDescrIsNil        bool     `json:"metaDescrIsNil,omitempty"`
	MetaDescrNotNil       bool     `json:"metaDescrNotNil,omitempty"`
	MetaDescrEqualFold    *string  `json:"metaDescrEqualFold,omitempty"`
	MetaDescrContainsFold *string  `json:"metaDescrContainsFold,omitempty"`

	// "meta_canonical_url" field predicates.
	MetaCanonicalURL             *string  `json:"metaCanonicalURL,omitempty"`
	MetaCanonicalURLNEQ          *string  `json:"metaCanonicalURLNEQ,omitempty"`
	MetaCanonicalURLIn           []string `json:"metaCanonicalURLIn,omitempty"`
	MetaCanonicalURLNotIn        []string `json:"metaCanonicalURLNotIn,omitempty"`
	MetaCanonicalURLGT           *string  `json:"metaCanonicalURLGT,omitempty"`
	MetaCanonicalURLGTE          *string  `json:"metaCanonicalURLGTE,omitempty"`
	MetaCanonicalURLLT           *string  `json:"metaCanonicalURLLT,omitempty"`
	MetaCanonicalURLLTE          *string  `json:"metaCanonicalURLLTE,omitempty"`
	MetaCanonicalURLContains     *string  `json:"metaCanonicalURLContains,omitempty"`
	MetaCanonicalURLHasPrefix    *string  `json:"metaCanonicalURLHasPrefix,omitempty"`
	MetaCanonicalURLHasSuffix    *string  `json:"metaCanonicalURLHasSuffix,omitempty"`
	MetaCanonicalURLIsNil        bool     `json:"metaCanonicalURLIsNil,omitempty"`
	MetaCanonicalURLNotNil       bool     `json:"metaCanonicalURLNotNil,omitempty"`
	MetaCanonicalURLEqualFold    *string  `json:"metaCanonicalURLEqualFold,omitempty"`
	MetaCanonicalURLContainsFold *string  `json:"metaCanonicalURLContainsFold,omitempty"`

	// "meta_robots" field predicates.
	MetaRobots             *string  `json:"metaRobots,omitempty"`
	MetaRobotsNEQ          *string  `json:"metaRobotsNEQ,omitempty"`
	MetaRobotsIn           []string `json:"metaRobotsIn,omitempty"`
	MetaRobotsNotIn        []string `json:"metaRobotsNotIn,omitempty"`
	MetaRobotsGT           *string  `json:"metaRobotsGT,omitempty"`
	MetaRobotsGTE          *string  `json:"metaRobotsGTE,omitempty"`
	MetaRobotsLT           *string  `json:"metaRobotsLT,omitempty"`
	MetaRobotsLTE          *string  `json:"metaRobotsLTE,omitempty"`
	MetaRobotsContains     *string  `json:"metaRobotsContains,omitempty"`
	MetaRobotsHasPrefix    *string  `json:"metaRobotsHasPrefix,omitempty"`
	MetaRobotsHasSuffix    *string  `json:"metaRobotsHasSuffix,omitempty"`
	MetaRobotsIsNil        bool     `json:"metaRobotsIsNil,omitempty"`
	MetaRobotsNotNil       bool     `json:"metaRobotsNotNil,omitempty"`
	MetaRobotsEqualFold    *string  `json:"metaRobotsEqualFold,omitempty"`
	MetaRobotsContainsFold *string  `json:"metaRobotsContainsFold,omitempty"`

	// "post_status" edge predicates.
	HasPostStatus     *bool                   `json:"hasPostStatus,omitempty"`
	HasPostStatusWith []*PostStatusWhereInput `json:"hasPostStatusWith,omitempty"`

	// "post_type" edge predicates.
	HasPostType     *bool                 `json:"hasPostType,omitempty"`
	HasPostTypeWith []*PostTypeWhereInput `json:"hasPostTypeWith,omitempty"`

	// "primary_category" edge predicates.
	HasPrimaryCategory     *bool                     `json:"hasPrimaryCategory,omitempty"`
	HasPrimaryCategoryWith []*PostCategoryWhereInput `json:"hasPrimaryCategoryWith,omitempty"`

	// "post_tags" edge predicates.
	HasPostTags     *bool                `json:"hasPostTags,omitempty"`
	HasPostTagsWith []*PostTagWhereInput `json:"hasPostTagsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostWhereInput) AddPredicates(predicates ...predicate.Post) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostWhereInput filter on the PostQuery builder.
func (i *PostWhereInput) Filter(q *PostQuery) (*PostQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostWhereInput is returned in case the PostWhereInput is empty.
var ErrEmptyPostWhereInput = errors.New("ent: empty predicate PostWhereInput")

// P returns a predicate for filtering posts.
// An error is returned if the input is empty or invalid.
func (i *PostWhereInput) P() (predicate.Post, error) {
	var predicates []predicate.Post
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, post.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Post, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, post.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Post, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, post.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, post.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, post.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, post.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, post.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, post.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, post.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, post.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, post.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, post.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, post.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, post.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, post.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, post.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, post.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, post.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, post.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, post.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, post.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, post.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, post.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, post.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, post.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, post.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, post.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, post.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, post.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, post.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, post.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, post.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, post.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, post.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, post.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, post.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, post.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, post.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, post.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, post.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, post.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, post.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, post.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, post.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, post.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, post.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, post.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, post.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, post.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, post.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, post.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, post.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, post.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, post.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, post.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, post.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, post.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, post.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, post.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, post.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, post.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, post.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, post.NameContainsFold(*i.NameContainsFold))
	}
	if i.Slug != nil {
		predicates = append(predicates, post.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, post.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, post.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, post.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, post.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, post.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, post.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, post.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, post.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, post.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, post.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugIsNil {
		predicates = append(predicates, post.SlugIsNil())
	}
	if i.SlugNotNil {
		predicates = append(predicates, post.SlugNotNil())
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, post.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, post.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.PostStatusID != nil {
		predicates = append(predicates, post.PostStatusIDEQ(*i.PostStatusID))
	}
	if i.PostStatusIDNEQ != nil {
		predicates = append(predicates, post.PostStatusIDNEQ(*i.PostStatusIDNEQ))
	}
	if len(i.PostStatusIDIn) > 0 {
		predicates = append(predicates, post.PostStatusIDIn(i.PostStatusIDIn...))
	}
	if len(i.PostStatusIDNotIn) > 0 {
		predicates = append(predicates, post.PostStatusIDNotIn(i.PostStatusIDNotIn...))
	}
	if i.PostStatusIDGT != nil {
		predicates = append(predicates, post.PostStatusIDGT(*i.PostStatusIDGT))
	}
	if i.PostStatusIDGTE != nil {
		predicates = append(predicates, post.PostStatusIDGTE(*i.PostStatusIDGTE))
	}
	if i.PostStatusIDLT != nil {
		predicates = append(predicates, post.PostStatusIDLT(*i.PostStatusIDLT))
	}
	if i.PostStatusIDLTE != nil {
		predicates = append(predicates, post.PostStatusIDLTE(*i.PostStatusIDLTE))
	}
	if i.PostStatusIDContains != nil {
		predicates = append(predicates, post.PostStatusIDContains(*i.PostStatusIDContains))
	}
	if i.PostStatusIDHasPrefix != nil {
		predicates = append(predicates, post.PostStatusIDHasPrefix(*i.PostStatusIDHasPrefix))
	}
	if i.PostStatusIDHasSuffix != nil {
		predicates = append(predicates, post.PostStatusIDHasSuffix(*i.PostStatusIDHasSuffix))
	}
	if i.PostStatusIDIsNil {
		predicates = append(predicates, post.PostStatusIDIsNil())
	}
	if i.PostStatusIDNotNil {
		predicates = append(predicates, post.PostStatusIDNotNil())
	}
	if i.PostStatusIDEqualFold != nil {
		predicates = append(predicates, post.PostStatusIDEqualFold(*i.PostStatusIDEqualFold))
	}
	if i.PostStatusIDContainsFold != nil {
		predicates = append(predicates, post.PostStatusIDContainsFold(*i.PostStatusIDContainsFold))
	}
	if i.PostTypeID != nil {
		predicates = append(predicates, post.PostTypeIDEQ(*i.PostTypeID))
	}
	if i.PostTypeIDNEQ != nil {
		predicates = append(predicates, post.PostTypeIDNEQ(*i.PostTypeIDNEQ))
	}
	if len(i.PostTypeIDIn) > 0 {
		predicates = append(predicates, post.PostTypeIDIn(i.PostTypeIDIn...))
	}
	if len(i.PostTypeIDNotIn) > 0 {
		predicates = append(predicates, post.PostTypeIDNotIn(i.PostTypeIDNotIn...))
	}
	if i.PostTypeIDGT != nil {
		predicates = append(predicates, post.PostTypeIDGT(*i.PostTypeIDGT))
	}
	if i.PostTypeIDGTE != nil {
		predicates = append(predicates, post.PostTypeIDGTE(*i.PostTypeIDGTE))
	}
	if i.PostTypeIDLT != nil {
		predicates = append(predicates, post.PostTypeIDLT(*i.PostTypeIDLT))
	}
	if i.PostTypeIDLTE != nil {
		predicates = append(predicates, post.PostTypeIDLTE(*i.PostTypeIDLTE))
	}
	if i.PostTypeIDContains != nil {
		predicates = append(predicates, post.PostTypeIDContains(*i.PostTypeIDContains))
	}
	if i.PostTypeIDHasPrefix != nil {
		predicates = append(predicates, post.PostTypeIDHasPrefix(*i.PostTypeIDHasPrefix))
	}
	if i.PostTypeIDHasSuffix != nil {
		predicates = append(predicates, post.PostTypeIDHasSuffix(*i.PostTypeIDHasSuffix))
	}
	if i.PostTypeIDIsNil {
		predicates = append(predicates, post.PostTypeIDIsNil())
	}
	if i.PostTypeIDNotNil {
		predicates = append(predicates, post.PostTypeIDNotNil())
	}
	if i.PostTypeIDEqualFold != nil {
		predicates = append(predicates, post.PostTypeIDEqualFold(*i.PostTypeIDEqualFold))
	}
	if i.PostTypeIDContainsFold != nil {
		predicates = append(predicates, post.PostTypeIDContainsFold(*i.PostTypeIDContainsFold))
	}
	if i.PrimaryCategoryID != nil {
		predicates = append(predicates, post.PrimaryCategoryIDEQ(*i.PrimaryCategoryID))
	}
	if i.PrimaryCategoryIDNEQ != nil {
		predicates = append(predicates, post.PrimaryCategoryIDNEQ(*i.PrimaryCategoryIDNEQ))
	}
	if len(i.PrimaryCategoryIDIn) > 0 {
		predicates = append(predicates, post.PrimaryCategoryIDIn(i.PrimaryCategoryIDIn...))
	}
	if len(i.PrimaryCategoryIDNotIn) > 0 {
		predicates = append(predicates, post.PrimaryCategoryIDNotIn(i.PrimaryCategoryIDNotIn...))
	}
	if i.PrimaryCategoryIDGT != nil {
		predicates = append(predicates, post.PrimaryCategoryIDGT(*i.PrimaryCategoryIDGT))
	}
	if i.PrimaryCategoryIDGTE != nil {
		predicates = append(predicates, post.PrimaryCategoryIDGTE(*i.PrimaryCategoryIDGTE))
	}
	if i.PrimaryCategoryIDLT != nil {
		predicates = append(predicates, post.PrimaryCategoryIDLT(*i.PrimaryCategoryIDLT))
	}
	if i.PrimaryCategoryIDLTE != nil {
		predicates = append(predicates, post.PrimaryCategoryIDLTE(*i.PrimaryCategoryIDLTE))
	}
	if i.PrimaryCategoryIDContains != nil {
		predicates = append(predicates, post.PrimaryCategoryIDContains(*i.PrimaryCategoryIDContains))
	}
	if i.PrimaryCategoryIDHasPrefix != nil {
		predicates = append(predicates, post.PrimaryCategoryIDHasPrefix(*i.PrimaryCategoryIDHasPrefix))
	}
	if i.PrimaryCategoryIDHasSuffix != nil {
		predicates = append(predicates, post.PrimaryCategoryIDHasSuffix(*i.PrimaryCategoryIDHasSuffix))
	}
	if i.PrimaryCategoryIDIsNil {
		predicates = append(predicates, post.PrimaryCategoryIDIsNil())
	}
	if i.PrimaryCategoryIDNotNil {
		predicates = append(predicates, post.PrimaryCategoryIDNotNil())
	}
	if i.PrimaryCategoryIDEqualFold != nil {
		predicates = append(predicates, post.PrimaryCategoryIDEqualFold(*i.PrimaryCategoryIDEqualFold))
	}
	if i.PrimaryCategoryIDContainsFold != nil {
		predicates = append(predicates, post.PrimaryCategoryIDContainsFold(*i.PrimaryCategoryIDContainsFold))
	}
	if i.Headline != nil {
		predicates = append(predicates, post.HeadlineEQ(*i.Headline))
	}
	if i.HeadlineNEQ != nil {
		predicates = append(predicates, post.HeadlineNEQ(*i.HeadlineNEQ))
	}
	if len(i.HeadlineIn) > 0 {
		predicates = append(predicates, post.HeadlineIn(i.HeadlineIn...))
	}
	if len(i.HeadlineNotIn) > 0 {
		predicates = append(predicates, post.HeadlineNotIn(i.HeadlineNotIn...))
	}
	if i.HeadlineGT != nil {
		predicates = append(predicates, post.HeadlineGT(*i.HeadlineGT))
	}
	if i.HeadlineGTE != nil {
		predicates = append(predicates, post.HeadlineGTE(*i.HeadlineGTE))
	}
	if i.HeadlineLT != nil {
		predicates = append(predicates, post.HeadlineLT(*i.HeadlineLT))
	}
	if i.HeadlineLTE != nil {
		predicates = append(predicates, post.HeadlineLTE(*i.HeadlineLTE))
	}
	if i.HeadlineContains != nil {
		predicates = append(predicates, post.HeadlineContains(*i.HeadlineContains))
	}
	if i.HeadlineHasPrefix != nil {
		predicates = append(predicates, post.HeadlineHasPrefix(*i.HeadlineHasPrefix))
	}
	if i.HeadlineHasSuffix != nil {
		predicates = append(predicates, post.HeadlineHasSuffix(*i.HeadlineHasSuffix))
	}
	if i.HeadlineIsNil {
		predicates = append(predicates, post.HeadlineIsNil())
	}
	if i.HeadlineNotNil {
		predicates = append(predicates, post.HeadlineNotNil())
	}
	if i.HeadlineEqualFold != nil {
		predicates = append(predicates, post.HeadlineEqualFold(*i.HeadlineEqualFold))
	}
	if i.HeadlineContainsFold != nil {
		predicates = append(predicates, post.HeadlineContainsFold(*i.HeadlineContainsFold))
	}
	if i.Excerpt != nil {
		predicates = append(predicates, post.ExcerptEQ(*i.Excerpt))
	}
	if i.ExcerptNEQ != nil {
		predicates = append(predicates, post.ExcerptNEQ(*i.ExcerptNEQ))
	}
	if len(i.ExcerptIn) > 0 {
		predicates = append(predicates, post.ExcerptIn(i.ExcerptIn...))
	}
	if len(i.ExcerptNotIn) > 0 {
		predicates = append(predicates, post.ExcerptNotIn(i.ExcerptNotIn...))
	}
	if i.ExcerptGT != nil {
		predicates = append(predicates, post.ExcerptGT(*i.ExcerptGT))
	}
	if i.ExcerptGTE != nil {
		predicates = append(predicates, post.ExcerptGTE(*i.ExcerptGTE))
	}
	if i.ExcerptLT != nil {
		predicates = append(predicates, post.ExcerptLT(*i.ExcerptLT))
	}
	if i.ExcerptLTE != nil {
		predicates = append(predicates, post.ExcerptLTE(*i.ExcerptLTE))
	}
	if i.ExcerptContains != nil {
		predicates = append(predicates, post.ExcerptContains(*i.ExcerptContains))
	}
	if i.ExcerptHasPrefix != nil {
		predicates = append(predicates, post.ExcerptHasPrefix(*i.ExcerptHasPrefix))
	}
	if i.ExcerptHasSuffix != nil {
		predicates = append(predicates, post.ExcerptHasSuffix(*i.ExcerptHasSuffix))
	}
	if i.ExcerptIsNil {
		predicates = append(predicates, post.ExcerptIsNil())
	}
	if i.ExcerptNotNil {
		predicates = append(predicates, post.ExcerptNotNil())
	}
	if i.ExcerptEqualFold != nil {
		predicates = append(predicates, post.ExcerptEqualFold(*i.ExcerptEqualFold))
	}
	if i.ExcerptContainsFold != nil {
		predicates = append(predicates, post.ExcerptContainsFold(*i.ExcerptContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, post.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, post.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, post.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, post.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, post.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, post.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, post.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, post.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, post.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, post.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, post.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentIsNil {
		predicates = append(predicates, post.ContentIsNil())
	}
	if i.ContentNotNil {
		predicates = append(predicates, post.ContentNotNil())
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, post.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, post.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.MetaTitle != nil {
		predicates = append(predicates, post.MetaTitleEQ(*i.MetaTitle))
	}
	if i.MetaTitleNEQ != nil {
		predicates = append(predicates, post.MetaTitleNEQ(*i.MetaTitleNEQ))
	}
	if len(i.MetaTitleIn) > 0 {
		predicates = append(predicates, post.MetaTitleIn(i.MetaTitleIn...))
	}
	if len(i.MetaTitleNotIn) > 0 {
		predicates = append(predicates, post.MetaTitleNotIn(i.MetaTitleNotIn...))
	}
	if i.MetaTitleGT != nil {
		predicates = append(predicates, post.MetaTitleGT(*i.MetaTitleGT))
	}
	if i.MetaTitleGTE != nil {
		predicates = append(predicates, post.MetaTitleGTE(*i.MetaTitleGTE))
	}
	if i.MetaTitleLT != nil {
		predicates = append(predicates, post.MetaTitleLT(*i.MetaTitleLT))
	}
	if i.MetaTitleLTE != nil {
		predicates = append(predicates, post.MetaTitleLTE(*i.MetaTitleLTE))
	}
	if i.MetaTitleContains != nil {
		predicates = append(predicates, post.MetaTitleContains(*i.MetaTitleContains))
	}
	if i.MetaTitleHasPrefix != nil {
		predicates = append(predicates, post.MetaTitleHasPrefix(*i.MetaTitleHasPrefix))
	}
	if i.MetaTitleHasSuffix != nil {
		predicates = append(predicates, post.MetaTitleHasSuffix(*i.MetaTitleHasSuffix))
	}
	if i.MetaTitleIsNil {
		predicates = append(predicates, post.MetaTitleIsNil())
	}
	if i.MetaTitleNotNil {
		predicates = append(predicates, post.MetaTitleNotNil())
	}
	if i.MetaTitleEqualFold != nil {
		predicates = append(predicates, post.MetaTitleEqualFold(*i.MetaTitleEqualFold))
	}
	if i.MetaTitleContainsFold != nil {
		predicates = append(predicates, post.MetaTitleContainsFold(*i.MetaTitleContainsFold))
	}
	if i.MetaDescr != nil {
		predicates = append(predicates, post.MetaDescrEQ(*i.MetaDescr))
	}
	if i.MetaDescrNEQ != nil {
		predicates = append(predicates, post.MetaDescrNEQ(*i.MetaDescrNEQ))
	}
	if len(i.MetaDescrIn) > 0 {
		predicates = append(predicates, post.MetaDescrIn(i.MetaDescrIn...))
	}
	if len(i.MetaDescrNotIn) > 0 {
		predicates = append(predicates, post.MetaDescrNotIn(i.MetaDescrNotIn...))
	}
	if i.MetaDescrGT != nil {
		predicates = append(predicates, post.MetaDescrGT(*i.MetaDescrGT))
	}
	if i.MetaDescrGTE != nil {
		predicates = append(predicates, post.MetaDescrGTE(*i.MetaDescrGTE))
	}
	if i.MetaDescrLT != nil {
		predicates = append(predicates, post.MetaDescrLT(*i.MetaDescrLT))
	}
	if i.MetaDescrLTE != nil {
		predicates = append(predicates, post.MetaDescrLTE(*i.MetaDescrLTE))
	}
	if i.MetaDescrContains != nil {
		predicates = append(predicates, post.MetaDescrContains(*i.MetaDescrContains))
	}
	if i.MetaDescrHasPrefix != nil {
		predicates = append(predicates, post.MetaDescrHasPrefix(*i.MetaDescrHasPrefix))
	}
	if i.MetaDescrHasSuffix != nil {
		predicates = append(predicates, post.MetaDescrHasSuffix(*i.MetaDescrHasSuffix))
	}
	if i.MetaDescrIsNil {
		predicates = append(predicates, post.MetaDescrIsNil())
	}
	if i.MetaDescrNotNil {
		predicates = append(predicates, post.MetaDescrNotNil())
	}
	if i.MetaDescrEqualFold != nil {
		predicates = append(predicates, post.MetaDescrEqualFold(*i.MetaDescrEqualFold))
	}
	if i.MetaDescrContainsFold != nil {
		predicates = append(predicates, post.MetaDescrContainsFold(*i.MetaDescrContainsFold))
	}
	if i.MetaCanonicalURL != nil {
		predicates = append(predicates, post.MetaCanonicalURLEQ(*i.MetaCanonicalURL))
	}
	if i.MetaCanonicalURLNEQ != nil {
		predicates = append(predicates, post.MetaCanonicalURLNEQ(*i.MetaCanonicalURLNEQ))
	}
	if len(i.MetaCanonicalURLIn) > 0 {
		predicates = append(predicates, post.MetaCanonicalURLIn(i.MetaCanonicalURLIn...))
	}
	if len(i.MetaCanonicalURLNotIn) > 0 {
		predicates = append(predicates, post.MetaCanonicalURLNotIn(i.MetaCanonicalURLNotIn...))
	}
	if i.MetaCanonicalURLGT != nil {
		predicates = append(predicates, post.MetaCanonicalURLGT(*i.MetaCanonicalURLGT))
	}
	if i.MetaCanonicalURLGTE != nil {
		predicates = append(predicates, post.MetaCanonicalURLGTE(*i.MetaCanonicalURLGTE))
	}
	if i.MetaCanonicalURLLT != nil {
		predicates = append(predicates, post.MetaCanonicalURLLT(*i.MetaCanonicalURLLT))
	}
	if i.MetaCanonicalURLLTE != nil {
		predicates = append(predicates, post.MetaCanonicalURLLTE(*i.MetaCanonicalURLLTE))
	}
	if i.MetaCanonicalURLContains != nil {
		predicates = append(predicates, post.MetaCanonicalURLContains(*i.MetaCanonicalURLContains))
	}
	if i.MetaCanonicalURLHasPrefix != nil {
		predicates = append(predicates, post.MetaCanonicalURLHasPrefix(*i.MetaCanonicalURLHasPrefix))
	}
	if i.MetaCanonicalURLHasSuffix != nil {
		predicates = append(predicates, post.MetaCanonicalURLHasSuffix(*i.MetaCanonicalURLHasSuffix))
	}
	if i.MetaCanonicalURLIsNil {
		predicates = append(predicates, post.MetaCanonicalURLIsNil())
	}
	if i.MetaCanonicalURLNotNil {
		predicates = append(predicates, post.MetaCanonicalURLNotNil())
	}
	if i.MetaCanonicalURLEqualFold != nil {
		predicates = append(predicates, post.MetaCanonicalURLEqualFold(*i.MetaCanonicalURLEqualFold))
	}
	if i.MetaCanonicalURLContainsFold != nil {
		predicates = append(predicates, post.MetaCanonicalURLContainsFold(*i.MetaCanonicalURLContainsFold))
	}
	if i.MetaRobots != nil {
		predicates = append(predicates, post.MetaRobotsEQ(*i.MetaRobots))
	}
	if i.MetaRobotsNEQ != nil {
		predicates = append(predicates, post.MetaRobotsNEQ(*i.MetaRobotsNEQ))
	}
	if len(i.MetaRobotsIn) > 0 {
		predicates = append(predicates, post.MetaRobotsIn(i.MetaRobotsIn...))
	}
	if len(i.MetaRobotsNotIn) > 0 {
		predicates = append(predicates, post.MetaRobotsNotIn(i.MetaRobotsNotIn...))
	}
	if i.MetaRobotsGT != nil {
		predicates = append(predicates, post.MetaRobotsGT(*i.MetaRobotsGT))
	}
	if i.MetaRobotsGTE != nil {
		predicates = append(predicates, post.MetaRobotsGTE(*i.MetaRobotsGTE))
	}
	if i.MetaRobotsLT != nil {
		predicates = append(predicates, post.MetaRobotsLT(*i.MetaRobotsLT))
	}
	if i.MetaRobotsLTE != nil {
		predicates = append(predicates, post.MetaRobotsLTE(*i.MetaRobotsLTE))
	}
	if i.MetaRobotsContains != nil {
		predicates = append(predicates, post.MetaRobotsContains(*i.MetaRobotsContains))
	}
	if i.MetaRobotsHasPrefix != nil {
		predicates = append(predicates, post.MetaRobotsHasPrefix(*i.MetaRobotsHasPrefix))
	}
	if i.MetaRobotsHasSuffix != nil {
		predicates = append(predicates, post.MetaRobotsHasSuffix(*i.MetaRobotsHasSuffix))
	}
	if i.MetaRobotsIsNil {
		predicates = append(predicates, post.MetaRobotsIsNil())
	}
	if i.MetaRobotsNotNil {
		predicates = append(predicates, post.MetaRobotsNotNil())
	}
	if i.MetaRobotsEqualFold != nil {
		predicates = append(predicates, post.MetaRobotsEqualFold(*i.MetaRobotsEqualFold))
	}
	if i.MetaRobotsContainsFold != nil {
		predicates = append(predicates, post.MetaRobotsContainsFold(*i.MetaRobotsContainsFold))
	}

	if i.HasPostStatus != nil {
		p := post.HasPostStatus()
		if !*i.HasPostStatus {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostStatusWith) > 0 {
		with := make([]predicate.PostStatus, 0, len(i.HasPostStatusWith))
		for _, w := range i.HasPostStatusWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostStatusWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasPostStatusWith(with...))
	}
	if i.HasPostType != nil {
		p := post.HasPostType()
		if !*i.HasPostType {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostTypeWith) > 0 {
		with := make([]predicate.PostType, 0, len(i.HasPostTypeWith))
		for _, w := range i.HasPostTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostTypeWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasPostTypeWith(with...))
	}
	if i.HasPrimaryCategory != nil {
		p := post.HasPrimaryCategory()
		if !*i.HasPrimaryCategory {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPrimaryCategoryWith) > 0 {
		with := make([]predicate.PostCategory, 0, len(i.HasPrimaryCategoryWith))
		for _, w := range i.HasPrimaryCategoryWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPrimaryCategoryWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasPrimaryCategoryWith(with...))
	}
	if i.HasPostTags != nil {
		p := post.HasPostTags()
		if !*i.HasPostTags {
			p = post.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostTagsWith) > 0 {
		with := make([]predicate.PostTag, 0, len(i.HasPostTagsWith))
		for _, w := range i.HasPostTagsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostTagsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, post.HasPostTagsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostWhereInput
	case 1:
		return predicates[0], nil
	default:
		return post.And(predicates...), nil
	}
}

// PostCategoryWhereInput represents a where input for filtering PostCategory queries.
type PostCategoryWhereInput struct {
	Predicates []predicate.PostCategory  `json:"-"`
	Not        *PostCategoryWhereInput   `json:"not,omitempty"`
	Or         []*PostCategoryWhereInput `json:"or,omitempty"`
	And        []*PostCategoryWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "parent_id" field predicates.
	ParentID             *string  `json:"parentID,omitempty"`
	ParentIDNEQ          *string  `json:"parentIDNEQ,omitempty"`
	ParentIDIn           []string `json:"parentIDIn,omitempty"`
	ParentIDNotIn        []string `json:"parentIDNotIn,omitempty"`
	ParentIDGT           *string  `json:"parentIDGT,omitempty"`
	ParentIDGTE          *string  `json:"parentIDGTE,omitempty"`
	ParentIDLT           *string  `json:"parentIDLT,omitempty"`
	ParentIDLTE          *string  `json:"parentIDLTE,omitempty"`
	ParentIDContains     *string  `json:"parentIDContains,omitempty"`
	ParentIDHasPrefix    *string  `json:"parentIDHasPrefix,omitempty"`
	ParentIDHasSuffix    *string  `json:"parentIDHasSuffix,omitempty"`
	ParentIDIsNil        bool     `json:"parentIDIsNil,omitempty"`
	ParentIDNotNil       bool     `json:"parentIDNotNil,omitempty"`
	ParentIDEqualFold    *string  `json:"parentIDEqualFold,omitempty"`
	ParentIDContainsFold *string  `json:"parentIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugIsNil        bool     `json:"slugIsNil,omitempty"`
	SlugNotNil       bool     `json:"slugNotNil,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`

	// "excerpt" field predicates.
	Excerpt             *string  `json:"excerpt,omitempty"`
	ExcerptNEQ          *string  `json:"excerptNEQ,omitempty"`
	ExcerptIn           []string `json:"excerptIn,omitempty"`
	ExcerptNotIn        []string `json:"excerptNotIn,omitempty"`
	ExcerptGT           *string  `json:"excerptGT,omitempty"`
	ExcerptGTE          *string  `json:"excerptGTE,omitempty"`
	ExcerptLT           *string  `json:"excerptLT,omitempty"`
	ExcerptLTE          *string  `json:"excerptLTE,omitempty"`
	ExcerptContains     *string  `json:"excerptContains,omitempty"`
	ExcerptHasPrefix    *string  `json:"excerptHasPrefix,omitempty"`
	ExcerptHasSuffix    *string  `json:"excerptHasSuffix,omitempty"`
	ExcerptIsNil        bool     `json:"excerptIsNil,omitempty"`
	ExcerptNotNil       bool     `json:"excerptNotNil,omitempty"`
	ExcerptEqualFold    *string  `json:"excerptEqualFold,omitempty"`
	ExcerptContainsFold *string  `json:"excerptContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentIsNil        bool     `json:"contentIsNil,omitempty"`
	ContentNotNil       bool     `json:"contentNotNil,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "meta_title" field predicates.
	MetaTitle             *string  `json:"metaTitle,omitempty"`
	MetaTitleNEQ          *string  `json:"metaTitleNEQ,omitempty"`
	MetaTitleIn           []string `json:"metaTitleIn,omitempty"`
	MetaTitleNotIn        []string `json:"metaTitleNotIn,omitempty"`
	MetaTitleGT           *string  `json:"metaTitleGT,omitempty"`
	MetaTitleGTE          *string  `json:"metaTitleGTE,omitempty"`
	MetaTitleLT           *string  `json:"metaTitleLT,omitempty"`
	MetaTitleLTE          *string  `json:"metaTitleLTE,omitempty"`
	MetaTitleContains     *string  `json:"metaTitleContains,omitempty"`
	MetaTitleHasPrefix    *string  `json:"metaTitleHasPrefix,omitempty"`
	MetaTitleHasSuffix    *string  `json:"metaTitleHasSuffix,omitempty"`
	MetaTitleIsNil        bool     `json:"metaTitleIsNil,omitempty"`
	MetaTitleNotNil       bool     `json:"metaTitleNotNil,omitempty"`
	MetaTitleEqualFold    *string  `json:"metaTitleEqualFold,omitempty"`
	MetaTitleContainsFold *string  `json:"metaTitleContainsFold,omitempty"`

	// "meta_descr" field predicates.
	MetaDescr             *string  `json:"metaDescr,omitempty"`
	MetaDescrNEQ          *string  `json:"metaDescrNEQ,omitempty"`
	MetaDescrIn           []string `json:"metaDescrIn,omitempty"`
	MetaDescrNotIn        []string `json:"metaDescrNotIn,omitempty"`
	MetaDescrGT           *string  `json:"metaDescrGT,omitempty"`
	MetaDescrGTE          *string  `json:"metaDescrGTE,omitempty"`
	MetaDescrLT           *string  `json:"metaDescrLT,omitempty"`
	MetaDescrLTE          *string  `json:"metaDescrLTE,omitempty"`
	MetaDescrContains     *string  `json:"metaDescrContains,omitempty"`
	MetaDescrHasPrefix    *string  `json:"metaDescrHasPrefix,omitempty"`
	MetaDescrHasSuffix    *string  `json:"metaDescrHasSuffix,omitempty"`
	MetaDescrIsNil        bool     `json:"metaDescrIsNil,omitempty"`
	MetaDescrNotNil       bool     `json:"metaDescrNotNil,omitempty"`
	MetaDescrEqualFold    *string  `json:"metaDescrEqualFold,omitempty"`
	MetaDescrContainsFold *string  `json:"metaDescrContainsFold,omitempty"`

	// "meta_canonical_url" field predicates.
	MetaCanonicalURL             *string  `json:"metaCanonicalURL,omitempty"`
	MetaCanonicalURLNEQ          *string  `json:"metaCanonicalURLNEQ,omitempty"`
	MetaCanonicalURLIn           []string `json:"metaCanonicalURLIn,omitempty"`
	MetaCanonicalURLNotIn        []string `json:"metaCanonicalURLNotIn,omitempty"`
	MetaCanonicalURLGT           *string  `json:"metaCanonicalURLGT,omitempty"`
	MetaCanonicalURLGTE          *string  `json:"metaCanonicalURLGTE,omitempty"`
	MetaCanonicalURLLT           *string  `json:"metaCanonicalURLLT,omitempty"`
	MetaCanonicalURLLTE          *string  `json:"metaCanonicalURLLTE,omitempty"`
	MetaCanonicalURLContains     *string  `json:"metaCanonicalURLContains,omitempty"`
	MetaCanonicalURLHasPrefix    *string  `json:"metaCanonicalURLHasPrefix,omitempty"`
	MetaCanonicalURLHasSuffix    *string  `json:"metaCanonicalURLHasSuffix,omitempty"`
	MetaCanonicalURLIsNil        bool     `json:"metaCanonicalURLIsNil,omitempty"`
	MetaCanonicalURLNotNil       bool     `json:"metaCanonicalURLNotNil,omitempty"`
	MetaCanonicalURLEqualFold    *string  `json:"metaCanonicalURLEqualFold,omitempty"`
	MetaCanonicalURLContainsFold *string  `json:"metaCanonicalURLContainsFold,omitempty"`

	// "meta_robots" field predicates.
	MetaRobots             *string  `json:"metaRobots,omitempty"`
	MetaRobotsNEQ          *string  `json:"metaRobotsNEQ,omitempty"`
	MetaRobotsIn           []string `json:"metaRobotsIn,omitempty"`
	MetaRobotsNotIn        []string `json:"metaRobotsNotIn,omitempty"`
	MetaRobotsGT           *string  `json:"metaRobotsGT,omitempty"`
	MetaRobotsGTE          *string  `json:"metaRobotsGTE,omitempty"`
	MetaRobotsLT           *string  `json:"metaRobotsLT,omitempty"`
	MetaRobotsLTE          *string  `json:"metaRobotsLTE,omitempty"`
	MetaRobotsContains     *string  `json:"metaRobotsContains,omitempty"`
	MetaRobotsHasPrefix    *string  `json:"metaRobotsHasPrefix,omitempty"`
	MetaRobotsHasSuffix    *string  `json:"metaRobotsHasSuffix,omitempty"`
	MetaRobotsIsNil        bool     `json:"metaRobotsIsNil,omitempty"`
	MetaRobotsNotNil       bool     `json:"metaRobotsNotNil,omitempty"`
	MetaRobotsEqualFold    *string  `json:"metaRobotsEqualFold,omitempty"`
	MetaRobotsContainsFold *string  `json:"metaRobotsContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool                     `json:"hasParent,omitempty"`
	HasParentWith []*PostCategoryWhereInput `json:"hasParentWith,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool                     `json:"hasChildren,omitempty"`
	HasChildrenWith []*PostCategoryWhereInput `json:"hasChildrenWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostCategoryWhereInput) AddPredicates(predicates ...predicate.PostCategory) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostCategoryWhereInput filter on the PostCategoryQuery builder.
func (i *PostCategoryWhereInput) Filter(q *PostCategoryQuery) (*PostCategoryQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostCategoryWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostCategoryWhereInput is returned in case the PostCategoryWhereInput is empty.
var ErrEmptyPostCategoryWhereInput = errors.New("ent: empty predicate PostCategoryWhereInput")

// P returns a predicate for filtering postcategories.
// An error is returned if the input is empty or invalid.
func (i *PostCategoryWhereInput) P() (predicate.PostCategory, error) {
	var predicates []predicate.PostCategory
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, postcategory.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostCategory, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, postcategory.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostCategory, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, postcategory.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, postcategory.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, postcategory.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, postcategory.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, postcategory.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, postcategory.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, postcategory.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, postcategory.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, postcategory.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, postcategory.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, postcategory.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, postcategory.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, postcategory.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, postcategory.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, postcategory.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, postcategory.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, postcategory.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, postcategory.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, postcategory.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, postcategory.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, postcategory.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, postcategory.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, postcategory.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, postcategory.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, postcategory.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, postcategory.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, postcategory.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, postcategory.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, postcategory.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, postcategory.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, postcategory.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, postcategory.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, postcategory.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, postcategory.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, postcategory.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, postcategory.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, postcategory.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, postcategory.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, postcategory.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, postcategory.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, postcategory.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, postcategory.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, postcategory.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, postcategory.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, postcategory.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, postcategory.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.ParentID != nil {
		predicates = append(predicates, postcategory.ParentIDEQ(*i.ParentID))
	}
	if i.ParentIDNEQ != nil {
		predicates = append(predicates, postcategory.ParentIDNEQ(*i.ParentIDNEQ))
	}
	if len(i.ParentIDIn) > 0 {
		predicates = append(predicates, postcategory.ParentIDIn(i.ParentIDIn...))
	}
	if len(i.ParentIDNotIn) > 0 {
		predicates = append(predicates, postcategory.ParentIDNotIn(i.ParentIDNotIn...))
	}
	if i.ParentIDGT != nil {
		predicates = append(predicates, postcategory.ParentIDGT(*i.ParentIDGT))
	}
	if i.ParentIDGTE != nil {
		predicates = append(predicates, postcategory.ParentIDGTE(*i.ParentIDGTE))
	}
	if i.ParentIDLT != nil {
		predicates = append(predicates, postcategory.ParentIDLT(*i.ParentIDLT))
	}
	if i.ParentIDLTE != nil {
		predicates = append(predicates, postcategory.ParentIDLTE(*i.ParentIDLTE))
	}
	if i.ParentIDContains != nil {
		predicates = append(predicates, postcategory.ParentIDContains(*i.ParentIDContains))
	}
	if i.ParentIDHasPrefix != nil {
		predicates = append(predicates, postcategory.ParentIDHasPrefix(*i.ParentIDHasPrefix))
	}
	if i.ParentIDHasSuffix != nil {
		predicates = append(predicates, postcategory.ParentIDHasSuffix(*i.ParentIDHasSuffix))
	}
	if i.ParentIDIsNil {
		predicates = append(predicates, postcategory.ParentIDIsNil())
	}
	if i.ParentIDNotNil {
		predicates = append(predicates, postcategory.ParentIDNotNil())
	}
	if i.ParentIDEqualFold != nil {
		predicates = append(predicates, postcategory.ParentIDEqualFold(*i.ParentIDEqualFold))
	}
	if i.ParentIDContainsFold != nil {
		predicates = append(predicates, postcategory.ParentIDContainsFold(*i.ParentIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, postcategory.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, postcategory.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, postcategory.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, postcategory.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, postcategory.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, postcategory.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, postcategory.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, postcategory.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, postcategory.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, postcategory.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, postcategory.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, postcategory.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, postcategory.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, postcategory.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, postcategory.NameContainsFold(*i.NameContainsFold))
	}
	if i.Slug != nil {
		predicates = append(predicates, postcategory.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, postcategory.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, postcategory.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, postcategory.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, postcategory.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, postcategory.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, postcategory.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, postcategory.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, postcategory.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, postcategory.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, postcategory.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugIsNil {
		predicates = append(predicates, postcategory.SlugIsNil())
	}
	if i.SlugNotNil {
		predicates = append(predicates, postcategory.SlugNotNil())
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, postcategory.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, postcategory.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, postcategory.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, postcategory.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, postcategory.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, postcategory.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, postcategory.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, postcategory.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, postcategory.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, postcategory.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, postcategory.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, postcategory.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, postcategory.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, postcategory.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, postcategory.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, postcategory.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, postcategory.StatusContainsFold(*i.StatusContainsFold))
	}
	if i.Excerpt != nil {
		predicates = append(predicates, postcategory.ExcerptEQ(*i.Excerpt))
	}
	if i.ExcerptNEQ != nil {
		predicates = append(predicates, postcategory.ExcerptNEQ(*i.ExcerptNEQ))
	}
	if len(i.ExcerptIn) > 0 {
		predicates = append(predicates, postcategory.ExcerptIn(i.ExcerptIn...))
	}
	if len(i.ExcerptNotIn) > 0 {
		predicates = append(predicates, postcategory.ExcerptNotIn(i.ExcerptNotIn...))
	}
	if i.ExcerptGT != nil {
		predicates = append(predicates, postcategory.ExcerptGT(*i.ExcerptGT))
	}
	if i.ExcerptGTE != nil {
		predicates = append(predicates, postcategory.ExcerptGTE(*i.ExcerptGTE))
	}
	if i.ExcerptLT != nil {
		predicates = append(predicates, postcategory.ExcerptLT(*i.ExcerptLT))
	}
	if i.ExcerptLTE != nil {
		predicates = append(predicates, postcategory.ExcerptLTE(*i.ExcerptLTE))
	}
	if i.ExcerptContains != nil {
		predicates = append(predicates, postcategory.ExcerptContains(*i.ExcerptContains))
	}
	if i.ExcerptHasPrefix != nil {
		predicates = append(predicates, postcategory.ExcerptHasPrefix(*i.ExcerptHasPrefix))
	}
	if i.ExcerptHasSuffix != nil {
		predicates = append(predicates, postcategory.ExcerptHasSuffix(*i.ExcerptHasSuffix))
	}
	if i.ExcerptIsNil {
		predicates = append(predicates, postcategory.ExcerptIsNil())
	}
	if i.ExcerptNotNil {
		predicates = append(predicates, postcategory.ExcerptNotNil())
	}
	if i.ExcerptEqualFold != nil {
		predicates = append(predicates, postcategory.ExcerptEqualFold(*i.ExcerptEqualFold))
	}
	if i.ExcerptContainsFold != nil {
		predicates = append(predicates, postcategory.ExcerptContainsFold(*i.ExcerptContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, postcategory.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, postcategory.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, postcategory.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, postcategory.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, postcategory.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, postcategory.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, postcategory.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, postcategory.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, postcategory.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, postcategory.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, postcategory.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentIsNil {
		predicates = append(predicates, postcategory.ContentIsNil())
	}
	if i.ContentNotNil {
		predicates = append(predicates, postcategory.ContentNotNil())
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, postcategory.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, postcategory.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.MetaTitle != nil {
		predicates = append(predicates, postcategory.MetaTitleEQ(*i.MetaTitle))
	}
	if i.MetaTitleNEQ != nil {
		predicates = append(predicates, postcategory.MetaTitleNEQ(*i.MetaTitleNEQ))
	}
	if len(i.MetaTitleIn) > 0 {
		predicates = append(predicates, postcategory.MetaTitleIn(i.MetaTitleIn...))
	}
	if len(i.MetaTitleNotIn) > 0 {
		predicates = append(predicates, postcategory.MetaTitleNotIn(i.MetaTitleNotIn...))
	}
	if i.MetaTitleGT != nil {
		predicates = append(predicates, postcategory.MetaTitleGT(*i.MetaTitleGT))
	}
	if i.MetaTitleGTE != nil {
		predicates = append(predicates, postcategory.MetaTitleGTE(*i.MetaTitleGTE))
	}
	if i.MetaTitleLT != nil {
		predicates = append(predicates, postcategory.MetaTitleLT(*i.MetaTitleLT))
	}
	if i.MetaTitleLTE != nil {
		predicates = append(predicates, postcategory.MetaTitleLTE(*i.MetaTitleLTE))
	}
	if i.MetaTitleContains != nil {
		predicates = append(predicates, postcategory.MetaTitleContains(*i.MetaTitleContains))
	}
	if i.MetaTitleHasPrefix != nil {
		predicates = append(predicates, postcategory.MetaTitleHasPrefix(*i.MetaTitleHasPrefix))
	}
	if i.MetaTitleHasSuffix != nil {
		predicates = append(predicates, postcategory.MetaTitleHasSuffix(*i.MetaTitleHasSuffix))
	}
	if i.MetaTitleIsNil {
		predicates = append(predicates, postcategory.MetaTitleIsNil())
	}
	if i.MetaTitleNotNil {
		predicates = append(predicates, postcategory.MetaTitleNotNil())
	}
	if i.MetaTitleEqualFold != nil {
		predicates = append(predicates, postcategory.MetaTitleEqualFold(*i.MetaTitleEqualFold))
	}
	if i.MetaTitleContainsFold != nil {
		predicates = append(predicates, postcategory.MetaTitleContainsFold(*i.MetaTitleContainsFold))
	}
	if i.MetaDescr != nil {
		predicates = append(predicates, postcategory.MetaDescrEQ(*i.MetaDescr))
	}
	if i.MetaDescrNEQ != nil {
		predicates = append(predicates, postcategory.MetaDescrNEQ(*i.MetaDescrNEQ))
	}
	if len(i.MetaDescrIn) > 0 {
		predicates = append(predicates, postcategory.MetaDescrIn(i.MetaDescrIn...))
	}
	if len(i.MetaDescrNotIn) > 0 {
		predicates = append(predicates, postcategory.MetaDescrNotIn(i.MetaDescrNotIn...))
	}
	if i.MetaDescrGT != nil {
		predicates = append(predicates, postcategory.MetaDescrGT(*i.MetaDescrGT))
	}
	if i.MetaDescrGTE != nil {
		predicates = append(predicates, postcategory.MetaDescrGTE(*i.MetaDescrGTE))
	}
	if i.MetaDescrLT != nil {
		predicates = append(predicates, postcategory.MetaDescrLT(*i.MetaDescrLT))
	}
	if i.MetaDescrLTE != nil {
		predicates = append(predicates, postcategory.MetaDescrLTE(*i.MetaDescrLTE))
	}
	if i.MetaDescrContains != nil {
		predicates = append(predicates, postcategory.MetaDescrContains(*i.MetaDescrContains))
	}
	if i.MetaDescrHasPrefix != nil {
		predicates = append(predicates, postcategory.MetaDescrHasPrefix(*i.MetaDescrHasPrefix))
	}
	if i.MetaDescrHasSuffix != nil {
		predicates = append(predicates, postcategory.MetaDescrHasSuffix(*i.MetaDescrHasSuffix))
	}
	if i.MetaDescrIsNil {
		predicates = append(predicates, postcategory.MetaDescrIsNil())
	}
	if i.MetaDescrNotNil {
		predicates = append(predicates, postcategory.MetaDescrNotNil())
	}
	if i.MetaDescrEqualFold != nil {
		predicates = append(predicates, postcategory.MetaDescrEqualFold(*i.MetaDescrEqualFold))
	}
	if i.MetaDescrContainsFold != nil {
		predicates = append(predicates, postcategory.MetaDescrContainsFold(*i.MetaDescrContainsFold))
	}
	if i.MetaCanonicalURL != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLEQ(*i.MetaCanonicalURL))
	}
	if i.MetaCanonicalURLNEQ != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLNEQ(*i.MetaCanonicalURLNEQ))
	}
	if len(i.MetaCanonicalURLIn) > 0 {
		predicates = append(predicates, postcategory.MetaCanonicalURLIn(i.MetaCanonicalURLIn...))
	}
	if len(i.MetaCanonicalURLNotIn) > 0 {
		predicates = append(predicates, postcategory.MetaCanonicalURLNotIn(i.MetaCanonicalURLNotIn...))
	}
	if i.MetaCanonicalURLGT != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLGT(*i.MetaCanonicalURLGT))
	}
	if i.MetaCanonicalURLGTE != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLGTE(*i.MetaCanonicalURLGTE))
	}
	if i.MetaCanonicalURLLT != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLLT(*i.MetaCanonicalURLLT))
	}
	if i.MetaCanonicalURLLTE != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLLTE(*i.MetaCanonicalURLLTE))
	}
	if i.MetaCanonicalURLContains != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLContains(*i.MetaCanonicalURLContains))
	}
	if i.MetaCanonicalURLHasPrefix != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLHasPrefix(*i.MetaCanonicalURLHasPrefix))
	}
	if i.MetaCanonicalURLHasSuffix != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLHasSuffix(*i.MetaCanonicalURLHasSuffix))
	}
	if i.MetaCanonicalURLIsNil {
		predicates = append(predicates, postcategory.MetaCanonicalURLIsNil())
	}
	if i.MetaCanonicalURLNotNil {
		predicates = append(predicates, postcategory.MetaCanonicalURLNotNil())
	}
	if i.MetaCanonicalURLEqualFold != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLEqualFold(*i.MetaCanonicalURLEqualFold))
	}
	if i.MetaCanonicalURLContainsFold != nil {
		predicates = append(predicates, postcategory.MetaCanonicalURLContainsFold(*i.MetaCanonicalURLContainsFold))
	}
	if i.MetaRobots != nil {
		predicates = append(predicates, postcategory.MetaRobotsEQ(*i.MetaRobots))
	}
	if i.MetaRobotsNEQ != nil {
		predicates = append(predicates, postcategory.MetaRobotsNEQ(*i.MetaRobotsNEQ))
	}
	if len(i.MetaRobotsIn) > 0 {
		predicates = append(predicates, postcategory.MetaRobotsIn(i.MetaRobotsIn...))
	}
	if len(i.MetaRobotsNotIn) > 0 {
		predicates = append(predicates, postcategory.MetaRobotsNotIn(i.MetaRobotsNotIn...))
	}
	if i.MetaRobotsGT != nil {
		predicates = append(predicates, postcategory.MetaRobotsGT(*i.MetaRobotsGT))
	}
	if i.MetaRobotsGTE != nil {
		predicates = append(predicates, postcategory.MetaRobotsGTE(*i.MetaRobotsGTE))
	}
	if i.MetaRobotsLT != nil {
		predicates = append(predicates, postcategory.MetaRobotsLT(*i.MetaRobotsLT))
	}
	if i.MetaRobotsLTE != nil {
		predicates = append(predicates, postcategory.MetaRobotsLTE(*i.MetaRobotsLTE))
	}
	if i.MetaRobotsContains != nil {
		predicates = append(predicates, postcategory.MetaRobotsContains(*i.MetaRobotsContains))
	}
	if i.MetaRobotsHasPrefix != nil {
		predicates = append(predicates, postcategory.MetaRobotsHasPrefix(*i.MetaRobotsHasPrefix))
	}
	if i.MetaRobotsHasSuffix != nil {
		predicates = append(predicates, postcategory.MetaRobotsHasSuffix(*i.MetaRobotsHasSuffix))
	}
	if i.MetaRobotsIsNil {
		predicates = append(predicates, postcategory.MetaRobotsIsNil())
	}
	if i.MetaRobotsNotNil {
		predicates = append(predicates, postcategory.MetaRobotsNotNil())
	}
	if i.MetaRobotsEqualFold != nil {
		predicates = append(predicates, postcategory.MetaRobotsEqualFold(*i.MetaRobotsEqualFold))
	}
	if i.MetaRobotsContainsFold != nil {
		predicates = append(predicates, postcategory.MetaRobotsContainsFold(*i.MetaRobotsContainsFold))
	}

	if i.HasPosts != nil {
		p := postcategory.HasPosts()
		if !*i.HasPosts {
			p = postcategory.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, postcategory.HasPostsWith(with...))
	}
	if i.HasParent != nil {
		p := postcategory.HasParent()
		if !*i.HasParent {
			p = postcategory.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.PostCategory, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, postcategory.HasParentWith(with...))
	}
	if i.HasChildren != nil {
		p := postcategory.HasChildren()
		if !*i.HasChildren {
			p = postcategory.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.PostCategory, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, postcategory.HasChildrenWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostCategoryWhereInput
	case 1:
		return predicates[0], nil
	default:
		return postcategory.And(predicates...), nil
	}
}

// PostStatusWhereInput represents a where input for filtering PostStatus queries.
type PostStatusWhereInput struct {
	Predicates []predicate.PostStatus  `json:"-"`
	Not        *PostStatusWhereInput   `json:"not,omitempty"`
	Or         []*PostStatusWhereInput `json:"or,omitempty"`
	And        []*PostStatusWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugIsNil        bool     `json:"slugIsNil,omitempty"`
	SlugNotNil       bool     `json:"slugNotNil,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`

	// "post_type_id" field predicates.
	PostTypeID             *string  `json:"postTypeID,omitempty"`
	PostTypeIDNEQ          *string  `json:"postTypeIDNEQ,omitempty"`
	PostTypeIDIn           []string `json:"postTypeIDIn,omitempty"`
	PostTypeIDNotIn        []string `json:"postTypeIDNotIn,omitempty"`
	PostTypeIDGT           *string  `json:"postTypeIDGT,omitempty"`
	PostTypeIDGTE          *string  `json:"postTypeIDGTE,omitempty"`
	PostTypeIDLT           *string  `json:"postTypeIDLT,omitempty"`
	PostTypeIDLTE          *string  `json:"postTypeIDLTE,omitempty"`
	PostTypeIDContains     *string  `json:"postTypeIDContains,omitempty"`
	PostTypeIDHasPrefix    *string  `json:"postTypeIDHasPrefix,omitempty"`
	PostTypeIDHasSuffix    *string  `json:"postTypeIDHasSuffix,omitempty"`
	PostTypeIDIsNil        bool     `json:"postTypeIDIsNil,omitempty"`
	PostTypeIDNotNil       bool     `json:"postTypeIDNotNil,omitempty"`
	PostTypeIDEqualFold    *string  `json:"postTypeIDEqualFold,omitempty"`
	PostTypeIDContainsFold *string  `json:"postTypeIDContainsFold,omitempty"`

	// "post_type" edge predicates.
	HasPostType     *bool                 `json:"hasPostType,omitempty"`
	HasPostTypeWith []*PostTypeWhereInput `json:"hasPostTypeWith,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostStatusWhereInput) AddPredicates(predicates ...predicate.PostStatus) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostStatusWhereInput filter on the PostStatusQuery builder.
func (i *PostStatusWhereInput) Filter(q *PostStatusQuery) (*PostStatusQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostStatusWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostStatusWhereInput is returned in case the PostStatusWhereInput is empty.
var ErrEmptyPostStatusWhereInput = errors.New("ent: empty predicate PostStatusWhereInput")

// P returns a predicate for filtering poststatusslice.
// An error is returned if the input is empty or invalid.
func (i *PostStatusWhereInput) P() (predicate.PostStatus, error) {
	var predicates []predicate.PostStatus
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, poststatus.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostStatus, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, poststatus.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostStatus, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, poststatus.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, poststatus.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, poststatus.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, poststatus.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, poststatus.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, poststatus.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, poststatus.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, poststatus.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, poststatus.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, poststatus.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, poststatus.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, poststatus.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, poststatus.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, poststatus.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, poststatus.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, poststatus.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, poststatus.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, poststatus.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, poststatus.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, poststatus.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, poststatus.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, poststatus.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, poststatus.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, poststatus.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, poststatus.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, poststatus.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, poststatus.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, poststatus.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, poststatus.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, poststatus.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, poststatus.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, poststatus.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, poststatus.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, poststatus.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, poststatus.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, poststatus.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, poststatus.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, poststatus.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, poststatus.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, poststatus.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, poststatus.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, poststatus.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, poststatus.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, poststatus.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, poststatus.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, poststatus.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, poststatus.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, poststatus.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, poststatus.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, poststatus.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, poststatus.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, poststatus.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, poststatus.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, poststatus.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, poststatus.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, poststatus.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, poststatus.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, poststatus.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, poststatus.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, poststatus.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, poststatus.NameContainsFold(*i.NameContainsFold))
	}
	if i.Slug != nil {
		predicates = append(predicates, poststatus.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, poststatus.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, poststatus.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, poststatus.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, poststatus.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, poststatus.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, poststatus.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, poststatus.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, poststatus.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, poststatus.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, poststatus.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugIsNil {
		predicates = append(predicates, poststatus.SlugIsNil())
	}
	if i.SlugNotNil {
		predicates = append(predicates, poststatus.SlugNotNil())
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, poststatus.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, poststatus.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, poststatus.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, poststatus.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, poststatus.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, poststatus.StatusNotNil())
	}
	if i.PostTypeID != nil {
		predicates = append(predicates, poststatus.PostTypeIDEQ(*i.PostTypeID))
	}
	if i.PostTypeIDNEQ != nil {
		predicates = append(predicates, poststatus.PostTypeIDNEQ(*i.PostTypeIDNEQ))
	}
	if len(i.PostTypeIDIn) > 0 {
		predicates = append(predicates, poststatus.PostTypeIDIn(i.PostTypeIDIn...))
	}
	if len(i.PostTypeIDNotIn) > 0 {
		predicates = append(predicates, poststatus.PostTypeIDNotIn(i.PostTypeIDNotIn...))
	}
	if i.PostTypeIDGT != nil {
		predicates = append(predicates, poststatus.PostTypeIDGT(*i.PostTypeIDGT))
	}
	if i.PostTypeIDGTE != nil {
		predicates = append(predicates, poststatus.PostTypeIDGTE(*i.PostTypeIDGTE))
	}
	if i.PostTypeIDLT != nil {
		predicates = append(predicates, poststatus.PostTypeIDLT(*i.PostTypeIDLT))
	}
	if i.PostTypeIDLTE != nil {
		predicates = append(predicates, poststatus.PostTypeIDLTE(*i.PostTypeIDLTE))
	}
	if i.PostTypeIDContains != nil {
		predicates = append(predicates, poststatus.PostTypeIDContains(*i.PostTypeIDContains))
	}
	if i.PostTypeIDHasPrefix != nil {
		predicates = append(predicates, poststatus.PostTypeIDHasPrefix(*i.PostTypeIDHasPrefix))
	}
	if i.PostTypeIDHasSuffix != nil {
		predicates = append(predicates, poststatus.PostTypeIDHasSuffix(*i.PostTypeIDHasSuffix))
	}
	if i.PostTypeIDIsNil {
		predicates = append(predicates, poststatus.PostTypeIDIsNil())
	}
	if i.PostTypeIDNotNil {
		predicates = append(predicates, poststatus.PostTypeIDNotNil())
	}
	if i.PostTypeIDEqualFold != nil {
		predicates = append(predicates, poststatus.PostTypeIDEqualFold(*i.PostTypeIDEqualFold))
	}
	if i.PostTypeIDContainsFold != nil {
		predicates = append(predicates, poststatus.PostTypeIDContainsFold(*i.PostTypeIDContainsFold))
	}

	if i.HasPostType != nil {
		p := poststatus.HasPostType()
		if !*i.HasPostType {
			p = poststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostTypeWith) > 0 {
		with := make([]predicate.PostType, 0, len(i.HasPostTypeWith))
		for _, w := range i.HasPostTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostTypeWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, poststatus.HasPostTypeWith(with...))
	}
	if i.HasPosts != nil {
		p := poststatus.HasPosts()
		if !*i.HasPosts {
			p = poststatus.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, poststatus.HasPostsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostStatusWhereInput
	case 1:
		return predicates[0], nil
	default:
		return poststatus.And(predicates...), nil
	}
}

// PostTagWhereInput represents a where input for filtering PostTag queries.
type PostTagWhereInput struct {
	Predicates []predicate.PostTag  `json:"-"`
	Not        *PostTagWhereInput   `json:"not,omitempty"`
	Or         []*PostTagWhereInput `json:"or,omitempty"`
	And        []*PostTagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugIsNil        bool     `json:"slugIsNil,omitempty"`
	SlugNotNil       bool     `json:"slugNotNil,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`

	// "excerpt" field predicates.
	Excerpt             *string  `json:"excerpt,omitempty"`
	ExcerptNEQ          *string  `json:"excerptNEQ,omitempty"`
	ExcerptIn           []string `json:"excerptIn,omitempty"`
	ExcerptNotIn        []string `json:"excerptNotIn,omitempty"`
	ExcerptGT           *string  `json:"excerptGT,omitempty"`
	ExcerptGTE          *string  `json:"excerptGTE,omitempty"`
	ExcerptLT           *string  `json:"excerptLT,omitempty"`
	ExcerptLTE          *string  `json:"excerptLTE,omitempty"`
	ExcerptContains     *string  `json:"excerptContains,omitempty"`
	ExcerptHasPrefix    *string  `json:"excerptHasPrefix,omitempty"`
	ExcerptHasSuffix    *string  `json:"excerptHasSuffix,omitempty"`
	ExcerptIsNil        bool     `json:"excerptIsNil,omitempty"`
	ExcerptNotNil       bool     `json:"excerptNotNil,omitempty"`
	ExcerptEqualFold    *string  `json:"excerptEqualFold,omitempty"`
	ExcerptContainsFold *string  `json:"excerptContainsFold,omitempty"`

	// "meta_title" field predicates.
	MetaTitle             *string  `json:"metaTitle,omitempty"`
	MetaTitleNEQ          *string  `json:"metaTitleNEQ,omitempty"`
	MetaTitleIn           []string `json:"metaTitleIn,omitempty"`
	MetaTitleNotIn        []string `json:"metaTitleNotIn,omitempty"`
	MetaTitleGT           *string  `json:"metaTitleGT,omitempty"`
	MetaTitleGTE          *string  `json:"metaTitleGTE,omitempty"`
	MetaTitleLT           *string  `json:"metaTitleLT,omitempty"`
	MetaTitleLTE          *string  `json:"metaTitleLTE,omitempty"`
	MetaTitleContains     *string  `json:"metaTitleContains,omitempty"`
	MetaTitleHasPrefix    *string  `json:"metaTitleHasPrefix,omitempty"`
	MetaTitleHasSuffix    *string  `json:"metaTitleHasSuffix,omitempty"`
	MetaTitleIsNil        bool     `json:"metaTitleIsNil,omitempty"`
	MetaTitleNotNil       bool     `json:"metaTitleNotNil,omitempty"`
	MetaTitleEqualFold    *string  `json:"metaTitleEqualFold,omitempty"`
	MetaTitleContainsFold *string  `json:"metaTitleContainsFold,omitempty"`

	// "meta_descr" field predicates.
	MetaDescr             *string  `json:"metaDescr,omitempty"`
	MetaDescrNEQ          *string  `json:"metaDescrNEQ,omitempty"`
	MetaDescrIn           []string `json:"metaDescrIn,omitempty"`
	MetaDescrNotIn        []string `json:"metaDescrNotIn,omitempty"`
	MetaDescrGT           *string  `json:"metaDescrGT,omitempty"`
	MetaDescrGTE          *string  `json:"metaDescrGTE,omitempty"`
	MetaDescrLT           *string  `json:"metaDescrLT,omitempty"`
	MetaDescrLTE          *string  `json:"metaDescrLTE,omitempty"`
	MetaDescrContains     *string  `json:"metaDescrContains,omitempty"`
	MetaDescrHasPrefix    *string  `json:"metaDescrHasPrefix,omitempty"`
	MetaDescrHasSuffix    *string  `json:"metaDescrHasSuffix,omitempty"`
	MetaDescrIsNil        bool     `json:"metaDescrIsNil,omitempty"`
	MetaDescrNotNil       bool     `json:"metaDescrNotNil,omitempty"`
	MetaDescrEqualFold    *string  `json:"metaDescrEqualFold,omitempty"`
	MetaDescrContainsFold *string  `json:"metaDescrContainsFold,omitempty"`

	// "meta_canonical_url" field predicates.
	MetaCanonicalURL             *string  `json:"metaCanonicalURL,omitempty"`
	MetaCanonicalURLNEQ          *string  `json:"metaCanonicalURLNEQ,omitempty"`
	MetaCanonicalURLIn           []string `json:"metaCanonicalURLIn,omitempty"`
	MetaCanonicalURLNotIn        []string `json:"metaCanonicalURLNotIn,omitempty"`
	MetaCanonicalURLGT           *string  `json:"metaCanonicalURLGT,omitempty"`
	MetaCanonicalURLGTE          *string  `json:"metaCanonicalURLGTE,omitempty"`
	MetaCanonicalURLLT           *string  `json:"metaCanonicalURLLT,omitempty"`
	MetaCanonicalURLLTE          *string  `json:"metaCanonicalURLLTE,omitempty"`
	MetaCanonicalURLContains     *string  `json:"metaCanonicalURLContains,omitempty"`
	MetaCanonicalURLHasPrefix    *string  `json:"metaCanonicalURLHasPrefix,omitempty"`
	MetaCanonicalURLHasSuffix    *string  `json:"metaCanonicalURLHasSuffix,omitempty"`
	MetaCanonicalURLIsNil        bool     `json:"metaCanonicalURLIsNil,omitempty"`
	MetaCanonicalURLNotNil       bool     `json:"metaCanonicalURLNotNil,omitempty"`
	MetaCanonicalURLEqualFold    *string  `json:"metaCanonicalURLEqualFold,omitempty"`
	MetaCanonicalURLContainsFold *string  `json:"metaCanonicalURLContainsFold,omitempty"`

	// "meta_robots" field predicates.
	MetaRobots             *string  `json:"metaRobots,omitempty"`
	MetaRobotsNEQ          *string  `json:"metaRobotsNEQ,omitempty"`
	MetaRobotsIn           []string `json:"metaRobotsIn,omitempty"`
	MetaRobotsNotIn        []string `json:"metaRobotsNotIn,omitempty"`
	MetaRobotsGT           *string  `json:"metaRobotsGT,omitempty"`
	MetaRobotsGTE          *string  `json:"metaRobotsGTE,omitempty"`
	MetaRobotsLT           *string  `json:"metaRobotsLT,omitempty"`
	MetaRobotsLTE          *string  `json:"metaRobotsLTE,omitempty"`
	MetaRobotsContains     *string  `json:"metaRobotsContains,omitempty"`
	MetaRobotsHasPrefix    *string  `json:"metaRobotsHasPrefix,omitempty"`
	MetaRobotsHasSuffix    *string  `json:"metaRobotsHasSuffix,omitempty"`
	MetaRobotsIsNil        bool     `json:"metaRobotsIsNil,omitempty"`
	MetaRobotsNotNil       bool     `json:"metaRobotsNotNil,omitempty"`
	MetaRobotsEqualFold    *string  `json:"metaRobotsEqualFold,omitempty"`
	MetaRobotsContainsFold *string  `json:"metaRobotsContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostTagWhereInput) AddPredicates(predicates ...predicate.PostTag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostTagWhereInput filter on the PostTagQuery builder.
func (i *PostTagWhereInput) Filter(q *PostTagQuery) (*PostTagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostTagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostTagWhereInput is returned in case the PostTagWhereInput is empty.
var ErrEmptyPostTagWhereInput = errors.New("ent: empty predicate PostTagWhereInput")

// P returns a predicate for filtering posttags.
// An error is returned if the input is empty or invalid.
func (i *PostTagWhereInput) P() (predicate.PostTag, error) {
	var predicates []predicate.PostTag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, posttag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostTag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, posttag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostTag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, posttag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, posttag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, posttag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, posttag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, posttag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, posttag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, posttag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, posttag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, posttag.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, posttag.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, posttag.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, posttag.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, posttag.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, posttag.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, posttag.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, posttag.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, posttag.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, posttag.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, posttag.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, posttag.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, posttag.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, posttag.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, posttag.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, posttag.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, posttag.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, posttag.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, posttag.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, posttag.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, posttag.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, posttag.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, posttag.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, posttag.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, posttag.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, posttag.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, posttag.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, posttag.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, posttag.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, posttag.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, posttag.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, posttag.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, posttag.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, posttag.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, posttag.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, posttag.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, posttag.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, posttag.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, posttag.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, posttag.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, posttag.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, posttag.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, posttag.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, posttag.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, posttag.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, posttag.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, posttag.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, posttag.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, posttag.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, posttag.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, posttag.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, posttag.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, posttag.NameContainsFold(*i.NameContainsFold))
	}
	if i.Slug != nil {
		predicates = append(predicates, posttag.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, posttag.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, posttag.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, posttag.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, posttag.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, posttag.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, posttag.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, posttag.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, posttag.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, posttag.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, posttag.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugIsNil {
		predicates = append(predicates, posttag.SlugIsNil())
	}
	if i.SlugNotNil {
		predicates = append(predicates, posttag.SlugNotNil())
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, posttag.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, posttag.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, posttag.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, posttag.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, posttag.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, posttag.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, posttag.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, posttag.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, posttag.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, posttag.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, posttag.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, posttag.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, posttag.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, posttag.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, posttag.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, posttag.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, posttag.StatusContainsFold(*i.StatusContainsFold))
	}
	if i.Excerpt != nil {
		predicates = append(predicates, posttag.ExcerptEQ(*i.Excerpt))
	}
	if i.ExcerptNEQ != nil {
		predicates = append(predicates, posttag.ExcerptNEQ(*i.ExcerptNEQ))
	}
	if len(i.ExcerptIn) > 0 {
		predicates = append(predicates, posttag.ExcerptIn(i.ExcerptIn...))
	}
	if len(i.ExcerptNotIn) > 0 {
		predicates = append(predicates, posttag.ExcerptNotIn(i.ExcerptNotIn...))
	}
	if i.ExcerptGT != nil {
		predicates = append(predicates, posttag.ExcerptGT(*i.ExcerptGT))
	}
	if i.ExcerptGTE != nil {
		predicates = append(predicates, posttag.ExcerptGTE(*i.ExcerptGTE))
	}
	if i.ExcerptLT != nil {
		predicates = append(predicates, posttag.ExcerptLT(*i.ExcerptLT))
	}
	if i.ExcerptLTE != nil {
		predicates = append(predicates, posttag.ExcerptLTE(*i.ExcerptLTE))
	}
	if i.ExcerptContains != nil {
		predicates = append(predicates, posttag.ExcerptContains(*i.ExcerptContains))
	}
	if i.ExcerptHasPrefix != nil {
		predicates = append(predicates, posttag.ExcerptHasPrefix(*i.ExcerptHasPrefix))
	}
	if i.ExcerptHasSuffix != nil {
		predicates = append(predicates, posttag.ExcerptHasSuffix(*i.ExcerptHasSuffix))
	}
	if i.ExcerptIsNil {
		predicates = append(predicates, posttag.ExcerptIsNil())
	}
	if i.ExcerptNotNil {
		predicates = append(predicates, posttag.ExcerptNotNil())
	}
	if i.ExcerptEqualFold != nil {
		predicates = append(predicates, posttag.ExcerptEqualFold(*i.ExcerptEqualFold))
	}
	if i.ExcerptContainsFold != nil {
		predicates = append(predicates, posttag.ExcerptContainsFold(*i.ExcerptContainsFold))
	}
	if i.MetaTitle != nil {
		predicates = append(predicates, posttag.MetaTitleEQ(*i.MetaTitle))
	}
	if i.MetaTitleNEQ != nil {
		predicates = append(predicates, posttag.MetaTitleNEQ(*i.MetaTitleNEQ))
	}
	if len(i.MetaTitleIn) > 0 {
		predicates = append(predicates, posttag.MetaTitleIn(i.MetaTitleIn...))
	}
	if len(i.MetaTitleNotIn) > 0 {
		predicates = append(predicates, posttag.MetaTitleNotIn(i.MetaTitleNotIn...))
	}
	if i.MetaTitleGT != nil {
		predicates = append(predicates, posttag.MetaTitleGT(*i.MetaTitleGT))
	}
	if i.MetaTitleGTE != nil {
		predicates = append(predicates, posttag.MetaTitleGTE(*i.MetaTitleGTE))
	}
	if i.MetaTitleLT != nil {
		predicates = append(predicates, posttag.MetaTitleLT(*i.MetaTitleLT))
	}
	if i.MetaTitleLTE != nil {
		predicates = append(predicates, posttag.MetaTitleLTE(*i.MetaTitleLTE))
	}
	if i.MetaTitleContains != nil {
		predicates = append(predicates, posttag.MetaTitleContains(*i.MetaTitleContains))
	}
	if i.MetaTitleHasPrefix != nil {
		predicates = append(predicates, posttag.MetaTitleHasPrefix(*i.MetaTitleHasPrefix))
	}
	if i.MetaTitleHasSuffix != nil {
		predicates = append(predicates, posttag.MetaTitleHasSuffix(*i.MetaTitleHasSuffix))
	}
	if i.MetaTitleIsNil {
		predicates = append(predicates, posttag.MetaTitleIsNil())
	}
	if i.MetaTitleNotNil {
		predicates = append(predicates, posttag.MetaTitleNotNil())
	}
	if i.MetaTitleEqualFold != nil {
		predicates = append(predicates, posttag.MetaTitleEqualFold(*i.MetaTitleEqualFold))
	}
	if i.MetaTitleContainsFold != nil {
		predicates = append(predicates, posttag.MetaTitleContainsFold(*i.MetaTitleContainsFold))
	}
	if i.MetaDescr != nil {
		predicates = append(predicates, posttag.MetaDescrEQ(*i.MetaDescr))
	}
	if i.MetaDescrNEQ != nil {
		predicates = append(predicates, posttag.MetaDescrNEQ(*i.MetaDescrNEQ))
	}
	if len(i.MetaDescrIn) > 0 {
		predicates = append(predicates, posttag.MetaDescrIn(i.MetaDescrIn...))
	}
	if len(i.MetaDescrNotIn) > 0 {
		predicates = append(predicates, posttag.MetaDescrNotIn(i.MetaDescrNotIn...))
	}
	if i.MetaDescrGT != nil {
		predicates = append(predicates, posttag.MetaDescrGT(*i.MetaDescrGT))
	}
	if i.MetaDescrGTE != nil {
		predicates = append(predicates, posttag.MetaDescrGTE(*i.MetaDescrGTE))
	}
	if i.MetaDescrLT != nil {
		predicates = append(predicates, posttag.MetaDescrLT(*i.MetaDescrLT))
	}
	if i.MetaDescrLTE != nil {
		predicates = append(predicates, posttag.MetaDescrLTE(*i.MetaDescrLTE))
	}
	if i.MetaDescrContains != nil {
		predicates = append(predicates, posttag.MetaDescrContains(*i.MetaDescrContains))
	}
	if i.MetaDescrHasPrefix != nil {
		predicates = append(predicates, posttag.MetaDescrHasPrefix(*i.MetaDescrHasPrefix))
	}
	if i.MetaDescrHasSuffix != nil {
		predicates = append(predicates, posttag.MetaDescrHasSuffix(*i.MetaDescrHasSuffix))
	}
	if i.MetaDescrIsNil {
		predicates = append(predicates, posttag.MetaDescrIsNil())
	}
	if i.MetaDescrNotNil {
		predicates = append(predicates, posttag.MetaDescrNotNil())
	}
	if i.MetaDescrEqualFold != nil {
		predicates = append(predicates, posttag.MetaDescrEqualFold(*i.MetaDescrEqualFold))
	}
	if i.MetaDescrContainsFold != nil {
		predicates = append(predicates, posttag.MetaDescrContainsFold(*i.MetaDescrContainsFold))
	}
	if i.MetaCanonicalURL != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLEQ(*i.MetaCanonicalURL))
	}
	if i.MetaCanonicalURLNEQ != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLNEQ(*i.MetaCanonicalURLNEQ))
	}
	if len(i.MetaCanonicalURLIn) > 0 {
		predicates = append(predicates, posttag.MetaCanonicalURLIn(i.MetaCanonicalURLIn...))
	}
	if len(i.MetaCanonicalURLNotIn) > 0 {
		predicates = append(predicates, posttag.MetaCanonicalURLNotIn(i.MetaCanonicalURLNotIn...))
	}
	if i.MetaCanonicalURLGT != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLGT(*i.MetaCanonicalURLGT))
	}
	if i.MetaCanonicalURLGTE != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLGTE(*i.MetaCanonicalURLGTE))
	}
	if i.MetaCanonicalURLLT != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLLT(*i.MetaCanonicalURLLT))
	}
	if i.MetaCanonicalURLLTE != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLLTE(*i.MetaCanonicalURLLTE))
	}
	if i.MetaCanonicalURLContains != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLContains(*i.MetaCanonicalURLContains))
	}
	if i.MetaCanonicalURLHasPrefix != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLHasPrefix(*i.MetaCanonicalURLHasPrefix))
	}
	if i.MetaCanonicalURLHasSuffix != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLHasSuffix(*i.MetaCanonicalURLHasSuffix))
	}
	if i.MetaCanonicalURLIsNil {
		predicates = append(predicates, posttag.MetaCanonicalURLIsNil())
	}
	if i.MetaCanonicalURLNotNil {
		predicates = append(predicates, posttag.MetaCanonicalURLNotNil())
	}
	if i.MetaCanonicalURLEqualFold != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLEqualFold(*i.MetaCanonicalURLEqualFold))
	}
	if i.MetaCanonicalURLContainsFold != nil {
		predicates = append(predicates, posttag.MetaCanonicalURLContainsFold(*i.MetaCanonicalURLContainsFold))
	}
	if i.MetaRobots != nil {
		predicates = append(predicates, posttag.MetaRobotsEQ(*i.MetaRobots))
	}
	if i.MetaRobotsNEQ != nil {
		predicates = append(predicates, posttag.MetaRobotsNEQ(*i.MetaRobotsNEQ))
	}
	if len(i.MetaRobotsIn) > 0 {
		predicates = append(predicates, posttag.MetaRobotsIn(i.MetaRobotsIn...))
	}
	if len(i.MetaRobotsNotIn) > 0 {
		predicates = append(predicates, posttag.MetaRobotsNotIn(i.MetaRobotsNotIn...))
	}
	if i.MetaRobotsGT != nil {
		predicates = append(predicates, posttag.MetaRobotsGT(*i.MetaRobotsGT))
	}
	if i.MetaRobotsGTE != nil {
		predicates = append(predicates, posttag.MetaRobotsGTE(*i.MetaRobotsGTE))
	}
	if i.MetaRobotsLT != nil {
		predicates = append(predicates, posttag.MetaRobotsLT(*i.MetaRobotsLT))
	}
	if i.MetaRobotsLTE != nil {
		predicates = append(predicates, posttag.MetaRobotsLTE(*i.MetaRobotsLTE))
	}
	if i.MetaRobotsContains != nil {
		predicates = append(predicates, posttag.MetaRobotsContains(*i.MetaRobotsContains))
	}
	if i.MetaRobotsHasPrefix != nil {
		predicates = append(predicates, posttag.MetaRobotsHasPrefix(*i.MetaRobotsHasPrefix))
	}
	if i.MetaRobotsHasSuffix != nil {
		predicates = append(predicates, posttag.MetaRobotsHasSuffix(*i.MetaRobotsHasSuffix))
	}
	if i.MetaRobotsIsNil {
		predicates = append(predicates, posttag.MetaRobotsIsNil())
	}
	if i.MetaRobotsNotNil {
		predicates = append(predicates, posttag.MetaRobotsNotNil())
	}
	if i.MetaRobotsEqualFold != nil {
		predicates = append(predicates, posttag.MetaRobotsEqualFold(*i.MetaRobotsEqualFold))
	}
	if i.MetaRobotsContainsFold != nil {
		predicates = append(predicates, posttag.MetaRobotsContainsFold(*i.MetaRobotsContainsFold))
	}

	if i.HasPosts != nil {
		p := posttag.HasPosts()
		if !*i.HasPosts {
			p = posttag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, posttag.HasPostsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostTagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return posttag.And(predicates...), nil
	}
}

// PostTypeWhereInput represents a where input for filtering PostType queries.
type PostTypeWhereInput struct {
	Predicates []predicate.PostType  `json:"-"`
	Not        *PostTypeWhereInput   `json:"not,omitempty"`
	Or         []*PostTypeWhereInput `json:"or,omitempty"`
	And        []*PostTypeWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "slug" field predicates.
	Slug             *string  `json:"slug,omitempty"`
	SlugNEQ          *string  `json:"slugNEQ,omitempty"`
	SlugIn           []string `json:"slugIn,omitempty"`
	SlugNotIn        []string `json:"slugNotIn,omitempty"`
	SlugGT           *string  `json:"slugGT,omitempty"`
	SlugGTE          *string  `json:"slugGTE,omitempty"`
	SlugLT           *string  `json:"slugLT,omitempty"`
	SlugLTE          *string  `json:"slugLTE,omitempty"`
	SlugContains     *string  `json:"slugContains,omitempty"`
	SlugHasPrefix    *string  `json:"slugHasPrefix,omitempty"`
	SlugHasSuffix    *string  `json:"slugHasSuffix,omitempty"`
	SlugIsNil        bool     `json:"slugIsNil,omitempty"`
	SlugNotNil       bool     `json:"slugNotNil,omitempty"`
	SlugEqualFold    *string  `json:"slugEqualFold,omitempty"`
	SlugContainsFold *string  `json:"slugContainsFold,omitempty"`

	// "status" field predicates.
	Status             *string  `json:"status,omitempty"`
	StatusNEQ          *string  `json:"statusNEQ,omitempty"`
	StatusIn           []string `json:"statusIn,omitempty"`
	StatusNotIn        []string `json:"statusNotIn,omitempty"`
	StatusGT           *string  `json:"statusGT,omitempty"`
	StatusGTE          *string  `json:"statusGTE,omitempty"`
	StatusLT           *string  `json:"statusLT,omitempty"`
	StatusLTE          *string  `json:"statusLTE,omitempty"`
	StatusContains     *string  `json:"statusContains,omitempty"`
	StatusHasPrefix    *string  `json:"statusHasPrefix,omitempty"`
	StatusHasSuffix    *string  `json:"statusHasSuffix,omitempty"`
	StatusIsNil        bool     `json:"statusIsNil,omitempty"`
	StatusNotNil       bool     `json:"statusNotNil,omitempty"`
	StatusEqualFold    *string  `json:"statusEqualFold,omitempty"`
	StatusContainsFold *string  `json:"statusContainsFold,omitempty"`

	// "excerpt" field predicates.
	Excerpt             *string  `json:"excerpt,omitempty"`
	ExcerptNEQ          *string  `json:"excerptNEQ,omitempty"`
	ExcerptIn           []string `json:"excerptIn,omitempty"`
	ExcerptNotIn        []string `json:"excerptNotIn,omitempty"`
	ExcerptGT           *string  `json:"excerptGT,omitempty"`
	ExcerptGTE          *string  `json:"excerptGTE,omitempty"`
	ExcerptLT           *string  `json:"excerptLT,omitempty"`
	ExcerptLTE          *string  `json:"excerptLTE,omitempty"`
	ExcerptContains     *string  `json:"excerptContains,omitempty"`
	ExcerptHasPrefix    *string  `json:"excerptHasPrefix,omitempty"`
	ExcerptHasSuffix    *string  `json:"excerptHasSuffix,omitempty"`
	ExcerptIsNil        bool     `json:"excerptIsNil,omitempty"`
	ExcerptNotNil       bool     `json:"excerptNotNil,omitempty"`
	ExcerptEqualFold    *string  `json:"excerptEqualFold,omitempty"`
	ExcerptContainsFold *string  `json:"excerptContainsFold,omitempty"`

	// "content" field predicates.
	Content             *string  `json:"content,omitempty"`
	ContentNEQ          *string  `json:"contentNEQ,omitempty"`
	ContentIn           []string `json:"contentIn,omitempty"`
	ContentNotIn        []string `json:"contentNotIn,omitempty"`
	ContentGT           *string  `json:"contentGT,omitempty"`
	ContentGTE          *string  `json:"contentGTE,omitempty"`
	ContentLT           *string  `json:"contentLT,omitempty"`
	ContentLTE          *string  `json:"contentLTE,omitempty"`
	ContentContains     *string  `json:"contentContains,omitempty"`
	ContentHasPrefix    *string  `json:"contentHasPrefix,omitempty"`
	ContentHasSuffix    *string  `json:"contentHasSuffix,omitempty"`
	ContentIsNil        bool     `json:"contentIsNil,omitempty"`
	ContentNotNil       bool     `json:"contentNotNil,omitempty"`
	ContentEqualFold    *string  `json:"contentEqualFold,omitempty"`
	ContentContainsFold *string  `json:"contentContainsFold,omitempty"`

	// "meta_title" field predicates.
	MetaTitle             *string  `json:"metaTitle,omitempty"`
	MetaTitleNEQ          *string  `json:"metaTitleNEQ,omitempty"`
	MetaTitleIn           []string `json:"metaTitleIn,omitempty"`
	MetaTitleNotIn        []string `json:"metaTitleNotIn,omitempty"`
	MetaTitleGT           *string  `json:"metaTitleGT,omitempty"`
	MetaTitleGTE          *string  `json:"metaTitleGTE,omitempty"`
	MetaTitleLT           *string  `json:"metaTitleLT,omitempty"`
	MetaTitleLTE          *string  `json:"metaTitleLTE,omitempty"`
	MetaTitleContains     *string  `json:"metaTitleContains,omitempty"`
	MetaTitleHasPrefix    *string  `json:"metaTitleHasPrefix,omitempty"`
	MetaTitleHasSuffix    *string  `json:"metaTitleHasSuffix,omitempty"`
	MetaTitleIsNil        bool     `json:"metaTitleIsNil,omitempty"`
	MetaTitleNotNil       bool     `json:"metaTitleNotNil,omitempty"`
	MetaTitleEqualFold    *string  `json:"metaTitleEqualFold,omitempty"`
	MetaTitleContainsFold *string  `json:"metaTitleContainsFold,omitempty"`

	// "meta_descr" field predicates.
	MetaDescr             *string  `json:"metaDescr,omitempty"`
	MetaDescrNEQ          *string  `json:"metaDescrNEQ,omitempty"`
	MetaDescrIn           []string `json:"metaDescrIn,omitempty"`
	MetaDescrNotIn        []string `json:"metaDescrNotIn,omitempty"`
	MetaDescrGT           *string  `json:"metaDescrGT,omitempty"`
	MetaDescrGTE          *string  `json:"metaDescrGTE,omitempty"`
	MetaDescrLT           *string  `json:"metaDescrLT,omitempty"`
	MetaDescrLTE          *string  `json:"metaDescrLTE,omitempty"`
	MetaDescrContains     *string  `json:"metaDescrContains,omitempty"`
	MetaDescrHasPrefix    *string  `json:"metaDescrHasPrefix,omitempty"`
	MetaDescrHasSuffix    *string  `json:"metaDescrHasSuffix,omitempty"`
	MetaDescrIsNil        bool     `json:"metaDescrIsNil,omitempty"`
	MetaDescrNotNil       bool     `json:"metaDescrNotNil,omitempty"`
	MetaDescrEqualFold    *string  `json:"metaDescrEqualFold,omitempty"`
	MetaDescrContainsFold *string  `json:"metaDescrContainsFold,omitempty"`

	// "meta_canonical_url" field predicates.
	MetaCanonicalURL             *string  `json:"metaCanonicalURL,omitempty"`
	MetaCanonicalURLNEQ          *string  `json:"metaCanonicalURLNEQ,omitempty"`
	MetaCanonicalURLIn           []string `json:"metaCanonicalURLIn,omitempty"`
	MetaCanonicalURLNotIn        []string `json:"metaCanonicalURLNotIn,omitempty"`
	MetaCanonicalURLGT           *string  `json:"metaCanonicalURLGT,omitempty"`
	MetaCanonicalURLGTE          *string  `json:"metaCanonicalURLGTE,omitempty"`
	MetaCanonicalURLLT           *string  `json:"metaCanonicalURLLT,omitempty"`
	MetaCanonicalURLLTE          *string  `json:"metaCanonicalURLLTE,omitempty"`
	MetaCanonicalURLContains     *string  `json:"metaCanonicalURLContains,omitempty"`
	MetaCanonicalURLHasPrefix    *string  `json:"metaCanonicalURLHasPrefix,omitempty"`
	MetaCanonicalURLHasSuffix    *string  `json:"metaCanonicalURLHasSuffix,omitempty"`
	MetaCanonicalURLIsNil        bool     `json:"metaCanonicalURLIsNil,omitempty"`
	MetaCanonicalURLNotNil       bool     `json:"metaCanonicalURLNotNil,omitempty"`
	MetaCanonicalURLEqualFold    *string  `json:"metaCanonicalURLEqualFold,omitempty"`
	MetaCanonicalURLContainsFold *string  `json:"metaCanonicalURLContainsFold,omitempty"`

	// "meta_robots" field predicates.
	MetaRobots             *string  `json:"metaRobots,omitempty"`
	MetaRobotsNEQ          *string  `json:"metaRobotsNEQ,omitempty"`
	MetaRobotsIn           []string `json:"metaRobotsIn,omitempty"`
	MetaRobotsNotIn        []string `json:"metaRobotsNotIn,omitempty"`
	MetaRobotsGT           *string  `json:"metaRobotsGT,omitempty"`
	MetaRobotsGTE          *string  `json:"metaRobotsGTE,omitempty"`
	MetaRobotsLT           *string  `json:"metaRobotsLT,omitempty"`
	MetaRobotsLTE          *string  `json:"metaRobotsLTE,omitempty"`
	MetaRobotsContains     *string  `json:"metaRobotsContains,omitempty"`
	MetaRobotsHasPrefix    *string  `json:"metaRobotsHasPrefix,omitempty"`
	MetaRobotsHasSuffix    *string  `json:"metaRobotsHasSuffix,omitempty"`
	MetaRobotsIsNil        bool     `json:"metaRobotsIsNil,omitempty"`
	MetaRobotsNotNil       bool     `json:"metaRobotsNotNil,omitempty"`
	MetaRobotsEqualFold    *string  `json:"metaRobotsEqualFold,omitempty"`
	MetaRobotsContainsFold *string  `json:"metaRobotsContainsFold,omitempty"`

	// "posts" edge predicates.
	HasPosts     *bool             `json:"hasPosts,omitempty"`
	HasPostsWith []*PostWhereInput `json:"hasPostsWith,omitempty"`

	// "post_statuses" edge predicates.
	HasPostStatuses     *bool                   `json:"hasPostStatuses,omitempty"`
	HasPostStatusesWith []*PostStatusWhereInput `json:"hasPostStatusesWith,omitempty"`

	// "post_type_forms" edge predicates.
	HasPostTypeForms     *bool                     `json:"hasPostTypeForms,omitempty"`
	HasPostTypeFormsWith []*PostTypeFormWhereInput `json:"hasPostTypeFormsWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostTypeWhereInput) AddPredicates(predicates ...predicate.PostType) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostTypeWhereInput filter on the PostTypeQuery builder.
func (i *PostTypeWhereInput) Filter(q *PostTypeQuery) (*PostTypeQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostTypeWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostTypeWhereInput is returned in case the PostTypeWhereInput is empty.
var ErrEmptyPostTypeWhereInput = errors.New("ent: empty predicate PostTypeWhereInput")

// P returns a predicate for filtering posttypes.
// An error is returned if the input is empty or invalid.
func (i *PostTypeWhereInput) P() (predicate.PostType, error) {
	var predicates []predicate.PostType
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, posttype.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostType, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, posttype.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostType, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, posttype.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, posttype.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, posttype.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, posttype.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, posttype.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, posttype.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, posttype.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, posttype.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, posttype.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, posttype.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, posttype.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, posttype.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, posttype.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, posttype.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, posttype.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, posttype.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, posttype.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, posttype.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, posttype.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, posttype.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, posttype.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, posttype.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, posttype.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, posttype.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, posttype.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, posttype.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, posttype.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, posttype.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, posttype.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, posttype.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, posttype.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, posttype.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, posttype.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, posttype.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, posttype.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, posttype.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, posttype.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, posttype.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, posttype.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, posttype.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, posttype.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, posttype.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, posttype.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, posttype.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, posttype.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, posttype.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, posttype.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, posttype.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, posttype.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, posttype.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, posttype.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, posttype.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, posttype.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, posttype.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, posttype.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, posttype.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, posttype.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, posttype.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, posttype.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, posttype.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, posttype.NameContainsFold(*i.NameContainsFold))
	}
	if i.Slug != nil {
		predicates = append(predicates, posttype.SlugEQ(*i.Slug))
	}
	if i.SlugNEQ != nil {
		predicates = append(predicates, posttype.SlugNEQ(*i.SlugNEQ))
	}
	if len(i.SlugIn) > 0 {
		predicates = append(predicates, posttype.SlugIn(i.SlugIn...))
	}
	if len(i.SlugNotIn) > 0 {
		predicates = append(predicates, posttype.SlugNotIn(i.SlugNotIn...))
	}
	if i.SlugGT != nil {
		predicates = append(predicates, posttype.SlugGT(*i.SlugGT))
	}
	if i.SlugGTE != nil {
		predicates = append(predicates, posttype.SlugGTE(*i.SlugGTE))
	}
	if i.SlugLT != nil {
		predicates = append(predicates, posttype.SlugLT(*i.SlugLT))
	}
	if i.SlugLTE != nil {
		predicates = append(predicates, posttype.SlugLTE(*i.SlugLTE))
	}
	if i.SlugContains != nil {
		predicates = append(predicates, posttype.SlugContains(*i.SlugContains))
	}
	if i.SlugHasPrefix != nil {
		predicates = append(predicates, posttype.SlugHasPrefix(*i.SlugHasPrefix))
	}
	if i.SlugHasSuffix != nil {
		predicates = append(predicates, posttype.SlugHasSuffix(*i.SlugHasSuffix))
	}
	if i.SlugIsNil {
		predicates = append(predicates, posttype.SlugIsNil())
	}
	if i.SlugNotNil {
		predicates = append(predicates, posttype.SlugNotNil())
	}
	if i.SlugEqualFold != nil {
		predicates = append(predicates, posttype.SlugEqualFold(*i.SlugEqualFold))
	}
	if i.SlugContainsFold != nil {
		predicates = append(predicates, posttype.SlugContainsFold(*i.SlugContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, posttype.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, posttype.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, posttype.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, posttype.StatusNotIn(i.StatusNotIn...))
	}
	if i.StatusGT != nil {
		predicates = append(predicates, posttype.StatusGT(*i.StatusGT))
	}
	if i.StatusGTE != nil {
		predicates = append(predicates, posttype.StatusGTE(*i.StatusGTE))
	}
	if i.StatusLT != nil {
		predicates = append(predicates, posttype.StatusLT(*i.StatusLT))
	}
	if i.StatusLTE != nil {
		predicates = append(predicates, posttype.StatusLTE(*i.StatusLTE))
	}
	if i.StatusContains != nil {
		predicates = append(predicates, posttype.StatusContains(*i.StatusContains))
	}
	if i.StatusHasPrefix != nil {
		predicates = append(predicates, posttype.StatusHasPrefix(*i.StatusHasPrefix))
	}
	if i.StatusHasSuffix != nil {
		predicates = append(predicates, posttype.StatusHasSuffix(*i.StatusHasSuffix))
	}
	if i.StatusIsNil {
		predicates = append(predicates, posttype.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, posttype.StatusNotNil())
	}
	if i.StatusEqualFold != nil {
		predicates = append(predicates, posttype.StatusEqualFold(*i.StatusEqualFold))
	}
	if i.StatusContainsFold != nil {
		predicates = append(predicates, posttype.StatusContainsFold(*i.StatusContainsFold))
	}
	if i.Excerpt != nil {
		predicates = append(predicates, posttype.ExcerptEQ(*i.Excerpt))
	}
	if i.ExcerptNEQ != nil {
		predicates = append(predicates, posttype.ExcerptNEQ(*i.ExcerptNEQ))
	}
	if len(i.ExcerptIn) > 0 {
		predicates = append(predicates, posttype.ExcerptIn(i.ExcerptIn...))
	}
	if len(i.ExcerptNotIn) > 0 {
		predicates = append(predicates, posttype.ExcerptNotIn(i.ExcerptNotIn...))
	}
	if i.ExcerptGT != nil {
		predicates = append(predicates, posttype.ExcerptGT(*i.ExcerptGT))
	}
	if i.ExcerptGTE != nil {
		predicates = append(predicates, posttype.ExcerptGTE(*i.ExcerptGTE))
	}
	if i.ExcerptLT != nil {
		predicates = append(predicates, posttype.ExcerptLT(*i.ExcerptLT))
	}
	if i.ExcerptLTE != nil {
		predicates = append(predicates, posttype.ExcerptLTE(*i.ExcerptLTE))
	}
	if i.ExcerptContains != nil {
		predicates = append(predicates, posttype.ExcerptContains(*i.ExcerptContains))
	}
	if i.ExcerptHasPrefix != nil {
		predicates = append(predicates, posttype.ExcerptHasPrefix(*i.ExcerptHasPrefix))
	}
	if i.ExcerptHasSuffix != nil {
		predicates = append(predicates, posttype.ExcerptHasSuffix(*i.ExcerptHasSuffix))
	}
	if i.ExcerptIsNil {
		predicates = append(predicates, posttype.ExcerptIsNil())
	}
	if i.ExcerptNotNil {
		predicates = append(predicates, posttype.ExcerptNotNil())
	}
	if i.ExcerptEqualFold != nil {
		predicates = append(predicates, posttype.ExcerptEqualFold(*i.ExcerptEqualFold))
	}
	if i.ExcerptContainsFold != nil {
		predicates = append(predicates, posttype.ExcerptContainsFold(*i.ExcerptContainsFold))
	}
	if i.Content != nil {
		predicates = append(predicates, posttype.ContentEQ(*i.Content))
	}
	if i.ContentNEQ != nil {
		predicates = append(predicates, posttype.ContentNEQ(*i.ContentNEQ))
	}
	if len(i.ContentIn) > 0 {
		predicates = append(predicates, posttype.ContentIn(i.ContentIn...))
	}
	if len(i.ContentNotIn) > 0 {
		predicates = append(predicates, posttype.ContentNotIn(i.ContentNotIn...))
	}
	if i.ContentGT != nil {
		predicates = append(predicates, posttype.ContentGT(*i.ContentGT))
	}
	if i.ContentGTE != nil {
		predicates = append(predicates, posttype.ContentGTE(*i.ContentGTE))
	}
	if i.ContentLT != nil {
		predicates = append(predicates, posttype.ContentLT(*i.ContentLT))
	}
	if i.ContentLTE != nil {
		predicates = append(predicates, posttype.ContentLTE(*i.ContentLTE))
	}
	if i.ContentContains != nil {
		predicates = append(predicates, posttype.ContentContains(*i.ContentContains))
	}
	if i.ContentHasPrefix != nil {
		predicates = append(predicates, posttype.ContentHasPrefix(*i.ContentHasPrefix))
	}
	if i.ContentHasSuffix != nil {
		predicates = append(predicates, posttype.ContentHasSuffix(*i.ContentHasSuffix))
	}
	if i.ContentIsNil {
		predicates = append(predicates, posttype.ContentIsNil())
	}
	if i.ContentNotNil {
		predicates = append(predicates, posttype.ContentNotNil())
	}
	if i.ContentEqualFold != nil {
		predicates = append(predicates, posttype.ContentEqualFold(*i.ContentEqualFold))
	}
	if i.ContentContainsFold != nil {
		predicates = append(predicates, posttype.ContentContainsFold(*i.ContentContainsFold))
	}
	if i.MetaTitle != nil {
		predicates = append(predicates, posttype.MetaTitleEQ(*i.MetaTitle))
	}
	if i.MetaTitleNEQ != nil {
		predicates = append(predicates, posttype.MetaTitleNEQ(*i.MetaTitleNEQ))
	}
	if len(i.MetaTitleIn) > 0 {
		predicates = append(predicates, posttype.MetaTitleIn(i.MetaTitleIn...))
	}
	if len(i.MetaTitleNotIn) > 0 {
		predicates = append(predicates, posttype.MetaTitleNotIn(i.MetaTitleNotIn...))
	}
	if i.MetaTitleGT != nil {
		predicates = append(predicates, posttype.MetaTitleGT(*i.MetaTitleGT))
	}
	if i.MetaTitleGTE != nil {
		predicates = append(predicates, posttype.MetaTitleGTE(*i.MetaTitleGTE))
	}
	if i.MetaTitleLT != nil {
		predicates = append(predicates, posttype.MetaTitleLT(*i.MetaTitleLT))
	}
	if i.MetaTitleLTE != nil {
		predicates = append(predicates, posttype.MetaTitleLTE(*i.MetaTitleLTE))
	}
	if i.MetaTitleContains != nil {
		predicates = append(predicates, posttype.MetaTitleContains(*i.MetaTitleContains))
	}
	if i.MetaTitleHasPrefix != nil {
		predicates = append(predicates, posttype.MetaTitleHasPrefix(*i.MetaTitleHasPrefix))
	}
	if i.MetaTitleHasSuffix != nil {
		predicates = append(predicates, posttype.MetaTitleHasSuffix(*i.MetaTitleHasSuffix))
	}
	if i.MetaTitleIsNil {
		predicates = append(predicates, posttype.MetaTitleIsNil())
	}
	if i.MetaTitleNotNil {
		predicates = append(predicates, posttype.MetaTitleNotNil())
	}
	if i.MetaTitleEqualFold != nil {
		predicates = append(predicates, posttype.MetaTitleEqualFold(*i.MetaTitleEqualFold))
	}
	if i.MetaTitleContainsFold != nil {
		predicates = append(predicates, posttype.MetaTitleContainsFold(*i.MetaTitleContainsFold))
	}
	if i.MetaDescr != nil {
		predicates = append(predicates, posttype.MetaDescrEQ(*i.MetaDescr))
	}
	if i.MetaDescrNEQ != nil {
		predicates = append(predicates, posttype.MetaDescrNEQ(*i.MetaDescrNEQ))
	}
	if len(i.MetaDescrIn) > 0 {
		predicates = append(predicates, posttype.MetaDescrIn(i.MetaDescrIn...))
	}
	if len(i.MetaDescrNotIn) > 0 {
		predicates = append(predicates, posttype.MetaDescrNotIn(i.MetaDescrNotIn...))
	}
	if i.MetaDescrGT != nil {
		predicates = append(predicates, posttype.MetaDescrGT(*i.MetaDescrGT))
	}
	if i.MetaDescrGTE != nil {
		predicates = append(predicates, posttype.MetaDescrGTE(*i.MetaDescrGTE))
	}
	if i.MetaDescrLT != nil {
		predicates = append(predicates, posttype.MetaDescrLT(*i.MetaDescrLT))
	}
	if i.MetaDescrLTE != nil {
		predicates = append(predicates, posttype.MetaDescrLTE(*i.MetaDescrLTE))
	}
	if i.MetaDescrContains != nil {
		predicates = append(predicates, posttype.MetaDescrContains(*i.MetaDescrContains))
	}
	if i.MetaDescrHasPrefix != nil {
		predicates = append(predicates, posttype.MetaDescrHasPrefix(*i.MetaDescrHasPrefix))
	}
	if i.MetaDescrHasSuffix != nil {
		predicates = append(predicates, posttype.MetaDescrHasSuffix(*i.MetaDescrHasSuffix))
	}
	if i.MetaDescrIsNil {
		predicates = append(predicates, posttype.MetaDescrIsNil())
	}
	if i.MetaDescrNotNil {
		predicates = append(predicates, posttype.MetaDescrNotNil())
	}
	if i.MetaDescrEqualFold != nil {
		predicates = append(predicates, posttype.MetaDescrEqualFold(*i.MetaDescrEqualFold))
	}
	if i.MetaDescrContainsFold != nil {
		predicates = append(predicates, posttype.MetaDescrContainsFold(*i.MetaDescrContainsFold))
	}
	if i.MetaCanonicalURL != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLEQ(*i.MetaCanonicalURL))
	}
	if i.MetaCanonicalURLNEQ != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLNEQ(*i.MetaCanonicalURLNEQ))
	}
	if len(i.MetaCanonicalURLIn) > 0 {
		predicates = append(predicates, posttype.MetaCanonicalURLIn(i.MetaCanonicalURLIn...))
	}
	if len(i.MetaCanonicalURLNotIn) > 0 {
		predicates = append(predicates, posttype.MetaCanonicalURLNotIn(i.MetaCanonicalURLNotIn...))
	}
	if i.MetaCanonicalURLGT != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLGT(*i.MetaCanonicalURLGT))
	}
	if i.MetaCanonicalURLGTE != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLGTE(*i.MetaCanonicalURLGTE))
	}
	if i.MetaCanonicalURLLT != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLLT(*i.MetaCanonicalURLLT))
	}
	if i.MetaCanonicalURLLTE != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLLTE(*i.MetaCanonicalURLLTE))
	}
	if i.MetaCanonicalURLContains != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLContains(*i.MetaCanonicalURLContains))
	}
	if i.MetaCanonicalURLHasPrefix != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLHasPrefix(*i.MetaCanonicalURLHasPrefix))
	}
	if i.MetaCanonicalURLHasSuffix != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLHasSuffix(*i.MetaCanonicalURLHasSuffix))
	}
	if i.MetaCanonicalURLIsNil {
		predicates = append(predicates, posttype.MetaCanonicalURLIsNil())
	}
	if i.MetaCanonicalURLNotNil {
		predicates = append(predicates, posttype.MetaCanonicalURLNotNil())
	}
	if i.MetaCanonicalURLEqualFold != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLEqualFold(*i.MetaCanonicalURLEqualFold))
	}
	if i.MetaCanonicalURLContainsFold != nil {
		predicates = append(predicates, posttype.MetaCanonicalURLContainsFold(*i.MetaCanonicalURLContainsFold))
	}
	if i.MetaRobots != nil {
		predicates = append(predicates, posttype.MetaRobotsEQ(*i.MetaRobots))
	}
	if i.MetaRobotsNEQ != nil {
		predicates = append(predicates, posttype.MetaRobotsNEQ(*i.MetaRobotsNEQ))
	}
	if len(i.MetaRobotsIn) > 0 {
		predicates = append(predicates, posttype.MetaRobotsIn(i.MetaRobotsIn...))
	}
	if len(i.MetaRobotsNotIn) > 0 {
		predicates = append(predicates, posttype.MetaRobotsNotIn(i.MetaRobotsNotIn...))
	}
	if i.MetaRobotsGT != nil {
		predicates = append(predicates, posttype.MetaRobotsGT(*i.MetaRobotsGT))
	}
	if i.MetaRobotsGTE != nil {
		predicates = append(predicates, posttype.MetaRobotsGTE(*i.MetaRobotsGTE))
	}
	if i.MetaRobotsLT != nil {
		predicates = append(predicates, posttype.MetaRobotsLT(*i.MetaRobotsLT))
	}
	if i.MetaRobotsLTE != nil {
		predicates = append(predicates, posttype.MetaRobotsLTE(*i.MetaRobotsLTE))
	}
	if i.MetaRobotsContains != nil {
		predicates = append(predicates, posttype.MetaRobotsContains(*i.MetaRobotsContains))
	}
	if i.MetaRobotsHasPrefix != nil {
		predicates = append(predicates, posttype.MetaRobotsHasPrefix(*i.MetaRobotsHasPrefix))
	}
	if i.MetaRobotsHasSuffix != nil {
		predicates = append(predicates, posttype.MetaRobotsHasSuffix(*i.MetaRobotsHasSuffix))
	}
	if i.MetaRobotsIsNil {
		predicates = append(predicates, posttype.MetaRobotsIsNil())
	}
	if i.MetaRobotsNotNil {
		predicates = append(predicates, posttype.MetaRobotsNotNil())
	}
	if i.MetaRobotsEqualFold != nil {
		predicates = append(predicates, posttype.MetaRobotsEqualFold(*i.MetaRobotsEqualFold))
	}
	if i.MetaRobotsContainsFold != nil {
		predicates = append(predicates, posttype.MetaRobotsContainsFold(*i.MetaRobotsContainsFold))
	}

	if i.HasPosts != nil {
		p := posttype.HasPosts()
		if !*i.HasPosts {
			p = posttype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostsWith) > 0 {
		with := make([]predicate.Post, 0, len(i.HasPostsWith))
		for _, w := range i.HasPostsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, posttype.HasPostsWith(with...))
	}
	if i.HasPostStatuses != nil {
		p := posttype.HasPostStatuses()
		if !*i.HasPostStatuses {
			p = posttype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostStatusesWith) > 0 {
		with := make([]predicate.PostStatus, 0, len(i.HasPostStatusesWith))
		for _, w := range i.HasPostStatusesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostStatusesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, posttype.HasPostStatusesWith(with...))
	}
	if i.HasPostTypeForms != nil {
		p := posttype.HasPostTypeForms()
		if !*i.HasPostTypeForms {
			p = posttype.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostTypeFormsWith) > 0 {
		with := make([]predicate.PostTypeForm, 0, len(i.HasPostTypeFormsWith))
		for _, w := range i.HasPostTypeFormsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostTypeFormsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, posttype.HasPostTypeFormsWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostTypeWhereInput
	case 1:
		return predicates[0], nil
	default:
		return posttype.And(predicates...), nil
	}
}

// PostTypeFormWhereInput represents a where input for filtering PostTypeForm queries.
type PostTypeFormWhereInput struct {
	Predicates []predicate.PostTypeForm  `json:"-"`
	Not        *PostTypeFormWhereInput   `json:"not,omitempty"`
	Or         []*PostTypeFormWhereInput `json:"or,omitempty"`
	And        []*PostTypeFormWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`

	// "post_type_id" field predicates.
	PostTypeID             *string  `json:"postTypeID,omitempty"`
	PostTypeIDNEQ          *string  `json:"postTypeIDNEQ,omitempty"`
	PostTypeIDIn           []string `json:"postTypeIDIn,omitempty"`
	PostTypeIDNotIn        []string `json:"postTypeIDNotIn,omitempty"`
	PostTypeIDGT           *string  `json:"postTypeIDGT,omitempty"`
	PostTypeIDGTE          *string  `json:"postTypeIDGTE,omitempty"`
	PostTypeIDLT           *string  `json:"postTypeIDLT,omitempty"`
	PostTypeIDLTE          *string  `json:"postTypeIDLTE,omitempty"`
	PostTypeIDContains     *string  `json:"postTypeIDContains,omitempty"`
	PostTypeIDHasPrefix    *string  `json:"postTypeIDHasPrefix,omitempty"`
	PostTypeIDHasSuffix    *string  `json:"postTypeIDHasSuffix,omitempty"`
	PostTypeIDIsNil        bool     `json:"postTypeIDIsNil,omitempty"`
	PostTypeIDNotNil       bool     `json:"postTypeIDNotNil,omitempty"`
	PostTypeIDEqualFold    *string  `json:"postTypeIDEqualFold,omitempty"`
	PostTypeIDContainsFold *string  `json:"postTypeIDContainsFold,omitempty"`

	// "post_type" edge predicates.
	HasPostType     *bool                 `json:"hasPostType,omitempty"`
	HasPostTypeWith []*PostTypeWhereInput `json:"hasPostTypeWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *PostTypeFormWhereInput) AddPredicates(predicates ...predicate.PostTypeForm) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the PostTypeFormWhereInput filter on the PostTypeFormQuery builder.
func (i *PostTypeFormWhereInput) Filter(q *PostTypeFormQuery) (*PostTypeFormQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyPostTypeFormWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyPostTypeFormWhereInput is returned in case the PostTypeFormWhereInput is empty.
var ErrEmptyPostTypeFormWhereInput = errors.New("ent: empty predicate PostTypeFormWhereInput")

// P returns a predicate for filtering posttypeforms.
// An error is returned if the input is empty or invalid.
func (i *PostTypeFormWhereInput) P() (predicate.PostTypeForm, error) {
	var predicates []predicate.PostTypeForm
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, posttypeform.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.PostTypeForm, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, posttypeform.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.PostTypeForm, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, posttypeform.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, posttypeform.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, posttypeform.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, posttypeform.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, posttypeform.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, posttypeform.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, posttypeform.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, posttypeform.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, posttypeform.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, posttypeform.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, posttypeform.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, posttypeform.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, posttypeform.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, posttypeform.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, posttypeform.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, posttypeform.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, posttypeform.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, posttypeform.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, posttypeform.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, posttypeform.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, posttypeform.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, posttypeform.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, posttypeform.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, posttypeform.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, posttypeform.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, posttypeform.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, posttypeform.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, posttypeform.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, posttypeform.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, posttypeform.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, posttypeform.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, posttypeform.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, posttypeform.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, posttypeform.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, posttypeform.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, posttypeform.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, posttypeform.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, posttypeform.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, posttypeform.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, posttypeform.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, posttypeform.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, posttypeform.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, posttypeform.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, posttypeform.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, posttypeform.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, posttypeform.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, posttypeform.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, posttypeform.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, posttypeform.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, posttypeform.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, posttypeform.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, posttypeform.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, posttypeform.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, posttypeform.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, posttypeform.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, posttypeform.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, posttypeform.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, posttypeform.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, posttypeform.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, posttypeform.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, posttypeform.NameContainsFold(*i.NameContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, posttypeform.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, posttypeform.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, posttypeform.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, posttypeform.StatusNotNil())
	}
	if i.PostTypeID != nil {
		predicates = append(predicates, posttypeform.PostTypeIDEQ(*i.PostTypeID))
	}
	if i.PostTypeIDNEQ != nil {
		predicates = append(predicates, posttypeform.PostTypeIDNEQ(*i.PostTypeIDNEQ))
	}
	if len(i.PostTypeIDIn) > 0 {
		predicates = append(predicates, posttypeform.PostTypeIDIn(i.PostTypeIDIn...))
	}
	if len(i.PostTypeIDNotIn) > 0 {
		predicates = append(predicates, posttypeform.PostTypeIDNotIn(i.PostTypeIDNotIn...))
	}
	if i.PostTypeIDGT != nil {
		predicates = append(predicates, posttypeform.PostTypeIDGT(*i.PostTypeIDGT))
	}
	if i.PostTypeIDGTE != nil {
		predicates = append(predicates, posttypeform.PostTypeIDGTE(*i.PostTypeIDGTE))
	}
	if i.PostTypeIDLT != nil {
		predicates = append(predicates, posttypeform.PostTypeIDLT(*i.PostTypeIDLT))
	}
	if i.PostTypeIDLTE != nil {
		predicates = append(predicates, posttypeform.PostTypeIDLTE(*i.PostTypeIDLTE))
	}
	if i.PostTypeIDContains != nil {
		predicates = append(predicates, posttypeform.PostTypeIDContains(*i.PostTypeIDContains))
	}
	if i.PostTypeIDHasPrefix != nil {
		predicates = append(predicates, posttypeform.PostTypeIDHasPrefix(*i.PostTypeIDHasPrefix))
	}
	if i.PostTypeIDHasSuffix != nil {
		predicates = append(predicates, posttypeform.PostTypeIDHasSuffix(*i.PostTypeIDHasSuffix))
	}
	if i.PostTypeIDIsNil {
		predicates = append(predicates, posttypeform.PostTypeIDIsNil())
	}
	if i.PostTypeIDNotNil {
		predicates = append(predicates, posttypeform.PostTypeIDNotNil())
	}
	if i.PostTypeIDEqualFold != nil {
		predicates = append(predicates, posttypeform.PostTypeIDEqualFold(*i.PostTypeIDEqualFold))
	}
	if i.PostTypeIDContainsFold != nil {
		predicates = append(predicates, posttypeform.PostTypeIDContainsFold(*i.PostTypeIDContainsFold))
	}

	if i.HasPostType != nil {
		p := posttypeform.HasPostType()
		if !*i.HasPostType {
			p = posttypeform.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasPostTypeWith) > 0 {
		with := make([]predicate.PostType, 0, len(i.HasPostTypeWith))
		for _, w := range i.HasPostTypeWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasPostTypeWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, posttypeform.HasPostTypeWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyPostTypeFormWhereInput
	case 1:
		return predicates[0], nil
	default:
		return posttypeform.And(predicates...), nil
	}
}

// TemplWhereInput represents a where input for filtering Templ queries.
type TemplWhereInput struct {
	Predicates []predicate.Templ  `json:"-"`
	Not        *TemplWhereInput   `json:"not,omitempty"`
	Or         []*TemplWhereInput `json:"or,omitempty"`
	And        []*TemplWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "body" field predicates.
	Body             *string  `json:"body,omitempty"`
	BodyNEQ          *string  `json:"bodyNEQ,omitempty"`
	BodyIn           []string `json:"bodyIn,omitempty"`
	BodyNotIn        []string `json:"bodyNotIn,omitempty"`
	BodyGT           *string  `json:"bodyGT,omitempty"`
	BodyGTE          *string  `json:"bodyGTE,omitempty"`
	BodyLT           *string  `json:"bodyLT,omitempty"`
	BodyLTE          *string  `json:"bodyLTE,omitempty"`
	BodyContains     *string  `json:"bodyContains,omitempty"`
	BodyHasPrefix    *string  `json:"bodyHasPrefix,omitempty"`
	BodyHasSuffix    *string  `json:"bodyHasSuffix,omitempty"`
	BodyIsNil        bool     `json:"bodyIsNil,omitempty"`
	BodyNotNil       bool     `json:"bodyNotNil,omitempty"`
	BodyEqualFold    *string  `json:"bodyEqualFold,omitempty"`
	BodyContainsFold *string  `json:"bodyContainsFold,omitempty"`

	// "compiled" field predicates.
	Compiled             *string  `json:"compiled,omitempty"`
	CompiledNEQ          *string  `json:"compiledNEQ,omitempty"`
	CompiledIn           []string `json:"compiledIn,omitempty"`
	CompiledNotIn        []string `json:"compiledNotIn,omitempty"`
	CompiledGT           *string  `json:"compiledGT,omitempty"`
	CompiledGTE          *string  `json:"compiledGTE,omitempty"`
	CompiledLT           *string  `json:"compiledLT,omitempty"`
	CompiledLTE          *string  `json:"compiledLTE,omitempty"`
	CompiledContains     *string  `json:"compiledContains,omitempty"`
	CompiledHasPrefix    *string  `json:"compiledHasPrefix,omitempty"`
	CompiledHasSuffix    *string  `json:"compiledHasSuffix,omitempty"`
	CompiledIsNil        bool     `json:"compiledIsNil,omitempty"`
	CompiledNotNil       bool     `json:"compiledNotNil,omitempty"`
	CompiledEqualFold    *string  `json:"compiledEqualFold,omitempty"`
	CompiledContainsFold *string  `json:"compiledContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TemplWhereInput) AddPredicates(predicates ...predicate.Templ) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TemplWhereInput filter on the TemplQuery builder.
func (i *TemplWhereInput) Filter(q *TemplQuery) (*TemplQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTemplWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTemplWhereInput is returned in case the TemplWhereInput is empty.
var ErrEmptyTemplWhereInput = errors.New("ent: empty predicate TemplWhereInput")

// P returns a predicate for filtering templs.
// An error is returned if the input is empty or invalid.
func (i *TemplWhereInput) P() (predicate.Templ, error) {
	var predicates []predicate.Templ
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, templ.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Templ, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, templ.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Templ, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, templ.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, templ.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, templ.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, templ.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, templ.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, templ.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, templ.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, templ.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, templ.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, templ.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, templ.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, templ.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, templ.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, templ.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, templ.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, templ.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, templ.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, templ.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, templ.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, templ.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, templ.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, templ.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, templ.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, templ.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, templ.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, templ.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, templ.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, templ.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, templ.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, templ.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, templ.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, templ.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, templ.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, templ.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, templ.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, templ.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, templ.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, templ.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, templ.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, templ.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, templ.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, templ.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, templ.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, templ.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, templ.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, templ.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, templ.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, templ.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, templ.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, templ.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, templ.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, templ.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, templ.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, templ.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, templ.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, templ.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, templ.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, templ.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, templ.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, templ.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, templ.NameContainsFold(*i.NameContainsFold))
	}
	if i.Body != nil {
		predicates = append(predicates, templ.BodyEQ(*i.Body))
	}
	if i.BodyNEQ != nil {
		predicates = append(predicates, templ.BodyNEQ(*i.BodyNEQ))
	}
	if len(i.BodyIn) > 0 {
		predicates = append(predicates, templ.BodyIn(i.BodyIn...))
	}
	if len(i.BodyNotIn) > 0 {
		predicates = append(predicates, templ.BodyNotIn(i.BodyNotIn...))
	}
	if i.BodyGT != nil {
		predicates = append(predicates, templ.BodyGT(*i.BodyGT))
	}
	if i.BodyGTE != nil {
		predicates = append(predicates, templ.BodyGTE(*i.BodyGTE))
	}
	if i.BodyLT != nil {
		predicates = append(predicates, templ.BodyLT(*i.BodyLT))
	}
	if i.BodyLTE != nil {
		predicates = append(predicates, templ.BodyLTE(*i.BodyLTE))
	}
	if i.BodyContains != nil {
		predicates = append(predicates, templ.BodyContains(*i.BodyContains))
	}
	if i.BodyHasPrefix != nil {
		predicates = append(predicates, templ.BodyHasPrefix(*i.BodyHasPrefix))
	}
	if i.BodyHasSuffix != nil {
		predicates = append(predicates, templ.BodyHasSuffix(*i.BodyHasSuffix))
	}
	if i.BodyIsNil {
		predicates = append(predicates, templ.BodyIsNil())
	}
	if i.BodyNotNil {
		predicates = append(predicates, templ.BodyNotNil())
	}
	if i.BodyEqualFold != nil {
		predicates = append(predicates, templ.BodyEqualFold(*i.BodyEqualFold))
	}
	if i.BodyContainsFold != nil {
		predicates = append(predicates, templ.BodyContainsFold(*i.BodyContainsFold))
	}
	if i.Compiled != nil {
		predicates = append(predicates, templ.CompiledEQ(*i.Compiled))
	}
	if i.CompiledNEQ != nil {
		predicates = append(predicates, templ.CompiledNEQ(*i.CompiledNEQ))
	}
	if len(i.CompiledIn) > 0 {
		predicates = append(predicates, templ.CompiledIn(i.CompiledIn...))
	}
	if len(i.CompiledNotIn) > 0 {
		predicates = append(predicates, templ.CompiledNotIn(i.CompiledNotIn...))
	}
	if i.CompiledGT != nil {
		predicates = append(predicates, templ.CompiledGT(*i.CompiledGT))
	}
	if i.CompiledGTE != nil {
		predicates = append(predicates, templ.CompiledGTE(*i.CompiledGTE))
	}
	if i.CompiledLT != nil {
		predicates = append(predicates, templ.CompiledLT(*i.CompiledLT))
	}
	if i.CompiledLTE != nil {
		predicates = append(predicates, templ.CompiledLTE(*i.CompiledLTE))
	}
	if i.CompiledContains != nil {
		predicates = append(predicates, templ.CompiledContains(*i.CompiledContains))
	}
	if i.CompiledHasPrefix != nil {
		predicates = append(predicates, templ.CompiledHasPrefix(*i.CompiledHasPrefix))
	}
	if i.CompiledHasSuffix != nil {
		predicates = append(predicates, templ.CompiledHasSuffix(*i.CompiledHasSuffix))
	}
	if i.CompiledIsNil {
		predicates = append(predicates, templ.CompiledIsNil())
	}
	if i.CompiledNotNil {
		predicates = append(predicates, templ.CompiledNotNil())
	}
	if i.CompiledEqualFold != nil {
		predicates = append(predicates, templ.CompiledEqualFold(*i.CompiledEqualFold))
	}
	if i.CompiledContainsFold != nil {
		predicates = append(predicates, templ.CompiledContainsFold(*i.CompiledContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, templ.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, templ.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, templ.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, templ.StatusNotNil())
	}

	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTemplWhereInput
	case 1:
		return predicates[0], nil
	default:
		return templ.And(predicates...), nil
	}
}

// TodoWhereInput represents a where input for filtering Todo queries.
type TodoWhereInput struct {
	Predicates []predicate.Todo  `json:"-"`
	Not        *TodoWhereInput   `json:"not,omitempty"`
	Or         []*TodoWhereInput `json:"or,omitempty"`
	And        []*TodoWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "text" field predicates.
	Text             *string  `json:"text,omitempty"`
	TextNEQ          *string  `json:"textNEQ,omitempty"`
	TextIn           []string `json:"textIn,omitempty"`
	TextNotIn        []string `json:"textNotIn,omitempty"`
	TextGT           *string  `json:"textGT,omitempty"`
	TextGTE          *string  `json:"textGTE,omitempty"`
	TextLT           *string  `json:"textLT,omitempty"`
	TextLTE          *string  `json:"textLTE,omitempty"`
	TextContains     *string  `json:"textContains,omitempty"`
	TextHasPrefix    *string  `json:"textHasPrefix,omitempty"`
	TextHasSuffix    *string  `json:"textHasSuffix,omitempty"`
	TextEqualFold    *string  `json:"textEqualFold,omitempty"`
	TextContainsFold *string  `json:"textContainsFold,omitempty"`

	// "status" field predicates.
	Status      *todo.Status  `json:"status,omitempty"`
	StatusNEQ   *todo.Status  `json:"statusNEQ,omitempty"`
	StatusIn    []todo.Status `json:"statusIn,omitempty"`
	StatusNotIn []todo.Status `json:"statusNotIn,omitempty"`

	// "priority" field predicates.
	Priority      *int  `json:"priority,omitempty"`
	PriorityNEQ   *int  `json:"priorityNEQ,omitempty"`
	PriorityIn    []int `json:"priorityIn,omitempty"`
	PriorityNotIn []int `json:"priorityNotIn,omitempty"`
	PriorityGT    *int  `json:"priorityGT,omitempty"`
	PriorityGTE   *int  `json:"priorityGTE,omitempty"`
	PriorityLT    *int  `json:"priorityLT,omitempty"`
	PriorityLTE   *int  `json:"priorityLTE,omitempty"`

	// "children" edge predicates.
	HasChildren     *bool             `json:"hasChildren,omitempty"`
	HasChildrenWith []*TodoWhereInput `json:"hasChildrenWith,omitempty"`

	// "parent" edge predicates.
	HasParent     *bool             `json:"hasParent,omitempty"`
	HasParentWith []*TodoWhereInput `json:"hasParentWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TodoWhereInput) AddPredicates(predicates ...predicate.Todo) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TodoWhereInput filter on the TodoQuery builder.
func (i *TodoWhereInput) Filter(q *TodoQuery) (*TodoQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTodoWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTodoWhereInput is returned in case the TodoWhereInput is empty.
var ErrEmptyTodoWhereInput = errors.New("ent: empty predicate TodoWhereInput")

// P returns a predicate for filtering todos.
// An error is returned if the input is empty or invalid.
func (i *TodoWhereInput) P() (predicate.Todo, error) {
	var predicates []predicate.Todo
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, todo.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Todo, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, todo.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Todo, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, todo.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, todo.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, todo.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, todo.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, todo.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, todo.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, todo.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, todo.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, todo.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, todo.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, todo.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, todo.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, todo.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, todo.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, todo.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, todo.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, todo.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, todo.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, todo.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, todo.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, todo.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, todo.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, todo.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, todo.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, todo.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, todo.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, todo.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, todo.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, todo.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, todo.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, todo.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, todo.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, todo.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, todo.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, todo.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, todo.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, todo.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, todo.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, todo.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, todo.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, todo.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, todo.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, todo.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, todo.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, todo.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, todo.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Text != nil {
		predicates = append(predicates, todo.TextEQ(*i.Text))
	}
	if i.TextNEQ != nil {
		predicates = append(predicates, todo.TextNEQ(*i.TextNEQ))
	}
	if len(i.TextIn) > 0 {
		predicates = append(predicates, todo.TextIn(i.TextIn...))
	}
	if len(i.TextNotIn) > 0 {
		predicates = append(predicates, todo.TextNotIn(i.TextNotIn...))
	}
	if i.TextGT != nil {
		predicates = append(predicates, todo.TextGT(*i.TextGT))
	}
	if i.TextGTE != nil {
		predicates = append(predicates, todo.TextGTE(*i.TextGTE))
	}
	if i.TextLT != nil {
		predicates = append(predicates, todo.TextLT(*i.TextLT))
	}
	if i.TextLTE != nil {
		predicates = append(predicates, todo.TextLTE(*i.TextLTE))
	}
	if i.TextContains != nil {
		predicates = append(predicates, todo.TextContains(*i.TextContains))
	}
	if i.TextHasPrefix != nil {
		predicates = append(predicates, todo.TextHasPrefix(*i.TextHasPrefix))
	}
	if i.TextHasSuffix != nil {
		predicates = append(predicates, todo.TextHasSuffix(*i.TextHasSuffix))
	}
	if i.TextEqualFold != nil {
		predicates = append(predicates, todo.TextEqualFold(*i.TextEqualFold))
	}
	if i.TextContainsFold != nil {
		predicates = append(predicates, todo.TextContainsFold(*i.TextContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, todo.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, todo.StatusNEQ(*i.StatusNEQ))
	}
	if len(i.StatusIn) > 0 {
		predicates = append(predicates, todo.StatusIn(i.StatusIn...))
	}
	if len(i.StatusNotIn) > 0 {
		predicates = append(predicates, todo.StatusNotIn(i.StatusNotIn...))
	}
	if i.Priority != nil {
		predicates = append(predicates, todo.PriorityEQ(*i.Priority))
	}
	if i.PriorityNEQ != nil {
		predicates = append(predicates, todo.PriorityNEQ(*i.PriorityNEQ))
	}
	if len(i.PriorityIn) > 0 {
		predicates = append(predicates, todo.PriorityIn(i.PriorityIn...))
	}
	if len(i.PriorityNotIn) > 0 {
		predicates = append(predicates, todo.PriorityNotIn(i.PriorityNotIn...))
	}
	if i.PriorityGT != nil {
		predicates = append(predicates, todo.PriorityGT(*i.PriorityGT))
	}
	if i.PriorityGTE != nil {
		predicates = append(predicates, todo.PriorityGTE(*i.PriorityGTE))
	}
	if i.PriorityLT != nil {
		predicates = append(predicates, todo.PriorityLT(*i.PriorityLT))
	}
	if i.PriorityLTE != nil {
		predicates = append(predicates, todo.PriorityLTE(*i.PriorityLTE))
	}

	if i.HasChildren != nil {
		p := todo.HasChildren()
		if !*i.HasChildren {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasChildrenWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasChildrenWith))
		for _, w := range i.HasChildrenWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasChildrenWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasChildrenWith(with...))
	}
	if i.HasParent != nil {
		p := todo.HasParent()
		if !*i.HasParent {
			p = todo.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasParentWith) > 0 {
		with := make([]predicate.Todo, 0, len(i.HasParentWith))
		for _, w := range i.HasParentWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasParentWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, todo.HasParentWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTodoWhereInput
	case 1:
		return predicates[0], nil
	default:
		return todo.And(predicates...), nil
	}
}

// UserWhereInput represents a where input for filtering User queries.
type UserWhereInput struct {
	Predicates []predicate.User  `json:"-"`
	Not        *UserWhereInput   `json:"not,omitempty"`
	Or         []*UserWhereInput `json:"or,omitempty"`
	And        []*UserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "phone" field predicates.
	Phone             *string  `json:"phone,omitempty"`
	PhoneNEQ          *string  `json:"phoneNEQ,omitempty"`
	PhoneIn           []string `json:"phoneIn,omitempty"`
	PhoneNotIn        []string `json:"phoneNotIn,omitempty"`
	PhoneGT           *string  `json:"phoneGT,omitempty"`
	PhoneGTE          *string  `json:"phoneGTE,omitempty"`
	PhoneLT           *string  `json:"phoneLT,omitempty"`
	PhoneLTE          *string  `json:"phoneLTE,omitempty"`
	PhoneContains     *string  `json:"phoneContains,omitempty"`
	PhoneHasPrefix    *string  `json:"phoneHasPrefix,omitempty"`
	PhoneHasSuffix    *string  `json:"phoneHasSuffix,omitempty"`
	PhoneIsNil        bool     `json:"phoneIsNil,omitempty"`
	PhoneNotNil       bool     `json:"phoneNotNil,omitempty"`
	PhoneEqualFold    *string  `json:"phoneEqualFold,omitempty"`
	PhoneContainsFold *string  `json:"phoneContainsFold,omitempty"`

	// "first_name" field predicates.
	FirstName             *string  `json:"firstName,omitempty"`
	FirstNameNEQ          *string  `json:"firstNameNEQ,omitempty"`
	FirstNameIn           []string `json:"firstNameIn,omitempty"`
	FirstNameNotIn        []string `json:"firstNameNotIn,omitempty"`
	FirstNameGT           *string  `json:"firstNameGT,omitempty"`
	FirstNameGTE          *string  `json:"firstNameGTE,omitempty"`
	FirstNameLT           *string  `json:"firstNameLT,omitempty"`
	FirstNameLTE          *string  `json:"firstNameLTE,omitempty"`
	FirstNameContains     *string  `json:"firstNameContains,omitempty"`
	FirstNameHasPrefix    *string  `json:"firstNameHasPrefix,omitempty"`
	FirstNameHasSuffix    *string  `json:"firstNameHasSuffix,omitempty"`
	FirstNameIsNil        bool     `json:"firstNameIsNil,omitempty"`
	FirstNameNotNil       bool     `json:"firstNameNotNil,omitempty"`
	FirstNameEqualFold    *string  `json:"firstNameEqualFold,omitempty"`
	FirstNameContainsFold *string  `json:"firstNameContainsFold,omitempty"`

	// "last_name" field predicates.
	LastName             *string  `json:"lastName,omitempty"`
	LastNameNEQ          *string  `json:"lastNameNEQ,omitempty"`
	LastNameIn           []string `json:"lastNameIn,omitempty"`
	LastNameNotIn        []string `json:"lastNameNotIn,omitempty"`
	LastNameGT           *string  `json:"lastNameGT,omitempty"`
	LastNameGTE          *string  `json:"lastNameGTE,omitempty"`
	LastNameLT           *string  `json:"lastNameLT,omitempty"`
	LastNameLTE          *string  `json:"lastNameLTE,omitempty"`
	LastNameContains     *string  `json:"lastNameContains,omitempty"`
	LastNameHasPrefix    *string  `json:"lastNameHasPrefix,omitempty"`
	LastNameHasSuffix    *string  `json:"lastNameHasSuffix,omitempty"`
	LastNameIsNil        bool     `json:"lastNameIsNil,omitempty"`
	LastNameNotNil       bool     `json:"lastNameNotNil,omitempty"`
	LastNameEqualFold    *string  `json:"lastNameEqualFold,omitempty"`
	LastNameContainsFold *string  `json:"lastNameContainsFold,omitempty"`

	// "company" field predicates.
	Company             *string  `json:"company,omitempty"`
	CompanyNEQ          *string  `json:"companyNEQ,omitempty"`
	CompanyIn           []string `json:"companyIn,omitempty"`
	CompanyNotIn        []string `json:"companyNotIn,omitempty"`
	CompanyGT           *string  `json:"companyGT,omitempty"`
	CompanyGTE          *string  `json:"companyGTE,omitempty"`
	CompanyLT           *string  `json:"companyLT,omitempty"`
	CompanyLTE          *string  `json:"companyLTE,omitempty"`
	CompanyContains     *string  `json:"companyContains,omitempty"`
	CompanyHasPrefix    *string  `json:"companyHasPrefix,omitempty"`
	CompanyHasSuffix    *string  `json:"companyHasSuffix,omitempty"`
	CompanyIsNil        bool     `json:"companyIsNil,omitempty"`
	CompanyNotNil       bool     `json:"companyNotNil,omitempty"`
	CompanyEqualFold    *string  `json:"companyEqualFold,omitempty"`
	CompanyContainsFold *string  `json:"companyContainsFold,omitempty"`

	// "locale" field predicates.
	Locale             *string  `json:"locale,omitempty"`
	LocaleNEQ          *string  `json:"localeNEQ,omitempty"`
	LocaleIn           []string `json:"localeIn,omitempty"`
	LocaleNotIn        []string `json:"localeNotIn,omitempty"`
	LocaleGT           *string  `json:"localeGT,omitempty"`
	LocaleGTE          *string  `json:"localeGTE,omitempty"`
	LocaleLT           *string  `json:"localeLT,omitempty"`
	LocaleLTE          *string  `json:"localeLTE,omitempty"`
	LocaleContains     *string  `json:"localeContains,omitempty"`
	LocaleHasPrefix    *string  `json:"localeHasPrefix,omitempty"`
	LocaleHasSuffix    *string  `json:"localeHasSuffix,omitempty"`
	LocaleIsNil        bool     `json:"localeIsNil,omitempty"`
	LocaleNotNil       bool     `json:"localeNotNil,omitempty"`
	LocaleEqualFold    *string  `json:"localeEqualFold,omitempty"`
	LocaleContainsFold *string  `json:"localeContainsFold,omitempty"`

	// "role_id" field predicates.
	RoleID             *string  `json:"roleID,omitempty"`
	RoleIDNEQ          *string  `json:"roleIDNEQ,omitempty"`
	RoleIDIn           []string `json:"roleIDIn,omitempty"`
	RoleIDNotIn        []string `json:"roleIDNotIn,omitempty"`
	RoleIDGT           *string  `json:"roleIDGT,omitempty"`
	RoleIDGTE          *string  `json:"roleIDGTE,omitempty"`
	RoleIDLT           *string  `json:"roleIDLT,omitempty"`
	RoleIDLTE          *string  `json:"roleIDLTE,omitempty"`
	RoleIDContains     *string  `json:"roleIDContains,omitempty"`
	RoleIDHasPrefix    *string  `json:"roleIDHasPrefix,omitempty"`
	RoleIDHasSuffix    *string  `json:"roleIDHasSuffix,omitempty"`
	RoleIDIsNil        bool     `json:"roleIDIsNil,omitempty"`
	RoleIDNotNil       bool     `json:"roleIDNotNil,omitempty"`
	RoleIDEqualFold    *string  `json:"roleIDEqualFold,omitempty"`
	RoleIDContainsFold *string  `json:"roleIDContainsFold,omitempty"`

	// "status" field predicates.
	Status       *bool `json:"status,omitempty"`
	StatusNEQ    *bool `json:"statusNEQ,omitempty"`
	StatusIsNil  bool  `json:"statusIsNil,omitempty"`
	StatusNotNil bool  `json:"statusNotNil,omitempty"`

	// "password" field predicates.
	Password             *string  `json:"password,omitempty"`
	PasswordNEQ          *string  `json:"passwordNEQ,omitempty"`
	PasswordIn           []string `json:"passwordIn,omitempty"`
	PasswordNotIn        []string `json:"passwordNotIn,omitempty"`
	PasswordGT           *string  `json:"passwordGT,omitempty"`
	PasswordGTE          *string  `json:"passwordGTE,omitempty"`
	PasswordLT           *string  `json:"passwordLT,omitempty"`
	PasswordLTE          *string  `json:"passwordLTE,omitempty"`
	PasswordContains     *string  `json:"passwordContains,omitempty"`
	PasswordHasPrefix    *string  `json:"passwordHasPrefix,omitempty"`
	PasswordHasSuffix    *string  `json:"passwordHasSuffix,omitempty"`
	PasswordIsNil        bool     `json:"passwordIsNil,omitempty"`
	PasswordNotNil       bool     `json:"passwordNotNil,omitempty"`
	PasswordEqualFold    *string  `json:"passwordEqualFold,omitempty"`
	PasswordContainsFold *string  `json:"passwordContainsFold,omitempty"`

	// "secret" field predicates.
	Secret             *string  `json:"secret,omitempty"`
	SecretNEQ          *string  `json:"secretNEQ,omitempty"`
	SecretIn           []string `json:"secretIn,omitempty"`
	SecretNotIn        []string `json:"secretNotIn,omitempty"`
	SecretGT           *string  `json:"secretGT,omitempty"`
	SecretGTE          *string  `json:"secretGTE,omitempty"`
	SecretLT           *string  `json:"secretLT,omitempty"`
	SecretLTE          *string  `json:"secretLTE,omitempty"`
	SecretContains     *string  `json:"secretContains,omitempty"`
	SecretHasPrefix    *string  `json:"secretHasPrefix,omitempty"`
	SecretHasSuffix    *string  `json:"secretHasSuffix,omitempty"`
	SecretIsNil        bool     `json:"secretIsNil,omitempty"`
	SecretNotNil       bool     `json:"secretNotNil,omitempty"`
	SecretEqualFold    *string  `json:"secretEqualFold,omitempty"`
	SecretContainsFold *string  `json:"secretContainsFold,omitempty"`

	// "api_key" field predicates.
	APIKey             *string  `json:"apiKey,omitempty"`
	APIKeyNEQ          *string  `json:"apiKeyNEQ,omitempty"`
	APIKeyIn           []string `json:"apiKeyIn,omitempty"`
	APIKeyNotIn        []string `json:"apiKeyNotIn,omitempty"`
	APIKeyGT           *string  `json:"apiKeyGT,omitempty"`
	APIKeyGTE          *string  `json:"apiKeyGTE,omitempty"`
	APIKeyLT           *string  `json:"apiKeyLT,omitempty"`
	APIKeyLTE          *string  `json:"apiKeyLTE,omitempty"`
	APIKeyContains     *string  `json:"apiKeyContains,omitempty"`
	APIKeyHasPrefix    *string  `json:"apiKeyHasPrefix,omitempty"`
	APIKeyHasSuffix    *string  `json:"apiKeyHasSuffix,omitempty"`
	APIKeyIsNil        bool     `json:"apiKeyIsNil,omitempty"`
	APIKeyNotNil       bool     `json:"apiKeyNotNil,omitempty"`
	APIKeyEqualFold    *string  `json:"apiKeyEqualFold,omitempty"`
	APIKeyContainsFold *string  `json:"apiKeyContainsFold,omitempty"`

	// "welcome_email_sent" field predicates.
	WelcomeEmailSent       *bool `json:"welcomeEmailSent,omitempty"`
	WelcomeEmailSentNEQ    *bool `json:"welcomeEmailSentNEQ,omitempty"`
	WelcomeEmailSentIsNil  bool  `json:"welcomeEmailSentIsNil,omitempty"`
	WelcomeEmailSentNotNil bool  `json:"welcomeEmailSentNotNil,omitempty"`

	// "can_admin" field predicates.
	CanAdmin       *bool `json:"canAdmin,omitempty"`
	CanAdminNEQ    *bool `json:"canAdminNEQ,omitempty"`
	CanAdminIsNil  bool  `json:"canAdminIsNil,omitempty"`
	CanAdminNotNil bool  `json:"canAdminNotNil,omitempty"`

	// "workspaces" edge predicates.
	HasWorkspaces     *bool                  `json:"hasWorkspaces,omitempty"`
	HasWorkspacesWith []*WorkspaceWhereInput `json:"hasWorkspacesWith,omitempty"`

	// "workspace_users" edge predicates.
	HasWorkspaceUsers     *bool                      `json:"hasWorkspaceUsers,omitempty"`
	HasWorkspaceUsersWith []*WorkspaceUserWhereInput `json:"hasWorkspaceUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *UserWhereInput) AddPredicates(predicates ...predicate.User) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the UserWhereInput filter on the UserQuery builder.
func (i *UserWhereInput) Filter(q *UserQuery) (*UserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyUserWhereInput is returned in case the UserWhereInput is empty.
var ErrEmptyUserWhereInput = errors.New("ent: empty predicate UserWhereInput")

// P returns a predicate for filtering users.
// An error is returned if the input is empty or invalid.
func (i *UserWhereInput) P() (predicate.User, error) {
	var predicates []predicate.User
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, user.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.User, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, user.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.User, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, user.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, user.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, user.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, user.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, user.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, user.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, user.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, user.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, user.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, user.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, user.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, user.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, user.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, user.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, user.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, user.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, user.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, user.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, user.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, user.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, user.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, user.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, user.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, user.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, user.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, user.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, user.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, user.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, user.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, user.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, user.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, user.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, user.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, user.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, user.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, user.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, user.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, user.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, user.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, user.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, user.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, user.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, user.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, user.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, user.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, user.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, user.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, user.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, user.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, user.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, user.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, user.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, user.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, user.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, user.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, user.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, user.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, user.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, user.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Phone != nil {
		predicates = append(predicates, user.PhoneEQ(*i.Phone))
	}
	if i.PhoneNEQ != nil {
		predicates = append(predicates, user.PhoneNEQ(*i.PhoneNEQ))
	}
	if len(i.PhoneIn) > 0 {
		predicates = append(predicates, user.PhoneIn(i.PhoneIn...))
	}
	if len(i.PhoneNotIn) > 0 {
		predicates = append(predicates, user.PhoneNotIn(i.PhoneNotIn...))
	}
	if i.PhoneGT != nil {
		predicates = append(predicates, user.PhoneGT(*i.PhoneGT))
	}
	if i.PhoneGTE != nil {
		predicates = append(predicates, user.PhoneGTE(*i.PhoneGTE))
	}
	if i.PhoneLT != nil {
		predicates = append(predicates, user.PhoneLT(*i.PhoneLT))
	}
	if i.PhoneLTE != nil {
		predicates = append(predicates, user.PhoneLTE(*i.PhoneLTE))
	}
	if i.PhoneContains != nil {
		predicates = append(predicates, user.PhoneContains(*i.PhoneContains))
	}
	if i.PhoneHasPrefix != nil {
		predicates = append(predicates, user.PhoneHasPrefix(*i.PhoneHasPrefix))
	}
	if i.PhoneHasSuffix != nil {
		predicates = append(predicates, user.PhoneHasSuffix(*i.PhoneHasSuffix))
	}
	if i.PhoneIsNil {
		predicates = append(predicates, user.PhoneIsNil())
	}
	if i.PhoneNotNil {
		predicates = append(predicates, user.PhoneNotNil())
	}
	if i.PhoneEqualFold != nil {
		predicates = append(predicates, user.PhoneEqualFold(*i.PhoneEqualFold))
	}
	if i.PhoneContainsFold != nil {
		predicates = append(predicates, user.PhoneContainsFold(*i.PhoneContainsFold))
	}
	if i.FirstName != nil {
		predicates = append(predicates, user.FirstNameEQ(*i.FirstName))
	}
	if i.FirstNameNEQ != nil {
		predicates = append(predicates, user.FirstNameNEQ(*i.FirstNameNEQ))
	}
	if len(i.FirstNameIn) > 0 {
		predicates = append(predicates, user.FirstNameIn(i.FirstNameIn...))
	}
	if len(i.FirstNameNotIn) > 0 {
		predicates = append(predicates, user.FirstNameNotIn(i.FirstNameNotIn...))
	}
	if i.FirstNameGT != nil {
		predicates = append(predicates, user.FirstNameGT(*i.FirstNameGT))
	}
	if i.FirstNameGTE != nil {
		predicates = append(predicates, user.FirstNameGTE(*i.FirstNameGTE))
	}
	if i.FirstNameLT != nil {
		predicates = append(predicates, user.FirstNameLT(*i.FirstNameLT))
	}
	if i.FirstNameLTE != nil {
		predicates = append(predicates, user.FirstNameLTE(*i.FirstNameLTE))
	}
	if i.FirstNameContains != nil {
		predicates = append(predicates, user.FirstNameContains(*i.FirstNameContains))
	}
	if i.FirstNameHasPrefix != nil {
		predicates = append(predicates, user.FirstNameHasPrefix(*i.FirstNameHasPrefix))
	}
	if i.FirstNameHasSuffix != nil {
		predicates = append(predicates, user.FirstNameHasSuffix(*i.FirstNameHasSuffix))
	}
	if i.FirstNameIsNil {
		predicates = append(predicates, user.FirstNameIsNil())
	}
	if i.FirstNameNotNil {
		predicates = append(predicates, user.FirstNameNotNil())
	}
	if i.FirstNameEqualFold != nil {
		predicates = append(predicates, user.FirstNameEqualFold(*i.FirstNameEqualFold))
	}
	if i.FirstNameContainsFold != nil {
		predicates = append(predicates, user.FirstNameContainsFold(*i.FirstNameContainsFold))
	}
	if i.LastName != nil {
		predicates = append(predicates, user.LastNameEQ(*i.LastName))
	}
	if i.LastNameNEQ != nil {
		predicates = append(predicates, user.LastNameNEQ(*i.LastNameNEQ))
	}
	if len(i.LastNameIn) > 0 {
		predicates = append(predicates, user.LastNameIn(i.LastNameIn...))
	}
	if len(i.LastNameNotIn) > 0 {
		predicates = append(predicates, user.LastNameNotIn(i.LastNameNotIn...))
	}
	if i.LastNameGT != nil {
		predicates = append(predicates, user.LastNameGT(*i.LastNameGT))
	}
	if i.LastNameGTE != nil {
		predicates = append(predicates, user.LastNameGTE(*i.LastNameGTE))
	}
	if i.LastNameLT != nil {
		predicates = append(predicates, user.LastNameLT(*i.LastNameLT))
	}
	if i.LastNameLTE != nil {
		predicates = append(predicates, user.LastNameLTE(*i.LastNameLTE))
	}
	if i.LastNameContains != nil {
		predicates = append(predicates, user.LastNameContains(*i.LastNameContains))
	}
	if i.LastNameHasPrefix != nil {
		predicates = append(predicates, user.LastNameHasPrefix(*i.LastNameHasPrefix))
	}
	if i.LastNameHasSuffix != nil {
		predicates = append(predicates, user.LastNameHasSuffix(*i.LastNameHasSuffix))
	}
	if i.LastNameIsNil {
		predicates = append(predicates, user.LastNameIsNil())
	}
	if i.LastNameNotNil {
		predicates = append(predicates, user.LastNameNotNil())
	}
	if i.LastNameEqualFold != nil {
		predicates = append(predicates, user.LastNameEqualFold(*i.LastNameEqualFold))
	}
	if i.LastNameContainsFold != nil {
		predicates = append(predicates, user.LastNameContainsFold(*i.LastNameContainsFold))
	}
	if i.Company != nil {
		predicates = append(predicates, user.CompanyEQ(*i.Company))
	}
	if i.CompanyNEQ != nil {
		predicates = append(predicates, user.CompanyNEQ(*i.CompanyNEQ))
	}
	if len(i.CompanyIn) > 0 {
		predicates = append(predicates, user.CompanyIn(i.CompanyIn...))
	}
	if len(i.CompanyNotIn) > 0 {
		predicates = append(predicates, user.CompanyNotIn(i.CompanyNotIn...))
	}
	if i.CompanyGT != nil {
		predicates = append(predicates, user.CompanyGT(*i.CompanyGT))
	}
	if i.CompanyGTE != nil {
		predicates = append(predicates, user.CompanyGTE(*i.CompanyGTE))
	}
	if i.CompanyLT != nil {
		predicates = append(predicates, user.CompanyLT(*i.CompanyLT))
	}
	if i.CompanyLTE != nil {
		predicates = append(predicates, user.CompanyLTE(*i.CompanyLTE))
	}
	if i.CompanyContains != nil {
		predicates = append(predicates, user.CompanyContains(*i.CompanyContains))
	}
	if i.CompanyHasPrefix != nil {
		predicates = append(predicates, user.CompanyHasPrefix(*i.CompanyHasPrefix))
	}
	if i.CompanyHasSuffix != nil {
		predicates = append(predicates, user.CompanyHasSuffix(*i.CompanyHasSuffix))
	}
	if i.CompanyIsNil {
		predicates = append(predicates, user.CompanyIsNil())
	}
	if i.CompanyNotNil {
		predicates = append(predicates, user.CompanyNotNil())
	}
	if i.CompanyEqualFold != nil {
		predicates = append(predicates, user.CompanyEqualFold(*i.CompanyEqualFold))
	}
	if i.CompanyContainsFold != nil {
		predicates = append(predicates, user.CompanyContainsFold(*i.CompanyContainsFold))
	}
	if i.Locale != nil {
		predicates = append(predicates, user.LocaleEQ(*i.Locale))
	}
	if i.LocaleNEQ != nil {
		predicates = append(predicates, user.LocaleNEQ(*i.LocaleNEQ))
	}
	if len(i.LocaleIn) > 0 {
		predicates = append(predicates, user.LocaleIn(i.LocaleIn...))
	}
	if len(i.LocaleNotIn) > 0 {
		predicates = append(predicates, user.LocaleNotIn(i.LocaleNotIn...))
	}
	if i.LocaleGT != nil {
		predicates = append(predicates, user.LocaleGT(*i.LocaleGT))
	}
	if i.LocaleGTE != nil {
		predicates = append(predicates, user.LocaleGTE(*i.LocaleGTE))
	}
	if i.LocaleLT != nil {
		predicates = append(predicates, user.LocaleLT(*i.LocaleLT))
	}
	if i.LocaleLTE != nil {
		predicates = append(predicates, user.LocaleLTE(*i.LocaleLTE))
	}
	if i.LocaleContains != nil {
		predicates = append(predicates, user.LocaleContains(*i.LocaleContains))
	}
	if i.LocaleHasPrefix != nil {
		predicates = append(predicates, user.LocaleHasPrefix(*i.LocaleHasPrefix))
	}
	if i.LocaleHasSuffix != nil {
		predicates = append(predicates, user.LocaleHasSuffix(*i.LocaleHasSuffix))
	}
	if i.LocaleIsNil {
		predicates = append(predicates, user.LocaleIsNil())
	}
	if i.LocaleNotNil {
		predicates = append(predicates, user.LocaleNotNil())
	}
	if i.LocaleEqualFold != nil {
		predicates = append(predicates, user.LocaleEqualFold(*i.LocaleEqualFold))
	}
	if i.LocaleContainsFold != nil {
		predicates = append(predicates, user.LocaleContainsFold(*i.LocaleContainsFold))
	}
	if i.RoleID != nil {
		predicates = append(predicates, user.RoleIDEQ(*i.RoleID))
	}
	if i.RoleIDNEQ != nil {
		predicates = append(predicates, user.RoleIDNEQ(*i.RoleIDNEQ))
	}
	if len(i.RoleIDIn) > 0 {
		predicates = append(predicates, user.RoleIDIn(i.RoleIDIn...))
	}
	if len(i.RoleIDNotIn) > 0 {
		predicates = append(predicates, user.RoleIDNotIn(i.RoleIDNotIn...))
	}
	if i.RoleIDGT != nil {
		predicates = append(predicates, user.RoleIDGT(*i.RoleIDGT))
	}
	if i.RoleIDGTE != nil {
		predicates = append(predicates, user.RoleIDGTE(*i.RoleIDGTE))
	}
	if i.RoleIDLT != nil {
		predicates = append(predicates, user.RoleIDLT(*i.RoleIDLT))
	}
	if i.RoleIDLTE != nil {
		predicates = append(predicates, user.RoleIDLTE(*i.RoleIDLTE))
	}
	if i.RoleIDContains != nil {
		predicates = append(predicates, user.RoleIDContains(*i.RoleIDContains))
	}
	if i.RoleIDHasPrefix != nil {
		predicates = append(predicates, user.RoleIDHasPrefix(*i.RoleIDHasPrefix))
	}
	if i.RoleIDHasSuffix != nil {
		predicates = append(predicates, user.RoleIDHasSuffix(*i.RoleIDHasSuffix))
	}
	if i.RoleIDIsNil {
		predicates = append(predicates, user.RoleIDIsNil())
	}
	if i.RoleIDNotNil {
		predicates = append(predicates, user.RoleIDNotNil())
	}
	if i.RoleIDEqualFold != nil {
		predicates = append(predicates, user.RoleIDEqualFold(*i.RoleIDEqualFold))
	}
	if i.RoleIDContainsFold != nil {
		predicates = append(predicates, user.RoleIDContainsFold(*i.RoleIDContainsFold))
	}
	if i.Status != nil {
		predicates = append(predicates, user.StatusEQ(*i.Status))
	}
	if i.StatusNEQ != nil {
		predicates = append(predicates, user.StatusNEQ(*i.StatusNEQ))
	}
	if i.StatusIsNil {
		predicates = append(predicates, user.StatusIsNil())
	}
	if i.StatusNotNil {
		predicates = append(predicates, user.StatusNotNil())
	}
	if i.Password != nil {
		predicates = append(predicates, user.PasswordEQ(*i.Password))
	}
	if i.PasswordNEQ != nil {
		predicates = append(predicates, user.PasswordNEQ(*i.PasswordNEQ))
	}
	if len(i.PasswordIn) > 0 {
		predicates = append(predicates, user.PasswordIn(i.PasswordIn...))
	}
	if len(i.PasswordNotIn) > 0 {
		predicates = append(predicates, user.PasswordNotIn(i.PasswordNotIn...))
	}
	if i.PasswordGT != nil {
		predicates = append(predicates, user.PasswordGT(*i.PasswordGT))
	}
	if i.PasswordGTE != nil {
		predicates = append(predicates, user.PasswordGTE(*i.PasswordGTE))
	}
	if i.PasswordLT != nil {
		predicates = append(predicates, user.PasswordLT(*i.PasswordLT))
	}
	if i.PasswordLTE != nil {
		predicates = append(predicates, user.PasswordLTE(*i.PasswordLTE))
	}
	if i.PasswordContains != nil {
		predicates = append(predicates, user.PasswordContains(*i.PasswordContains))
	}
	if i.PasswordHasPrefix != nil {
		predicates = append(predicates, user.PasswordHasPrefix(*i.PasswordHasPrefix))
	}
	if i.PasswordHasSuffix != nil {
		predicates = append(predicates, user.PasswordHasSuffix(*i.PasswordHasSuffix))
	}
	if i.PasswordIsNil {
		predicates = append(predicates, user.PasswordIsNil())
	}
	if i.PasswordNotNil {
		predicates = append(predicates, user.PasswordNotNil())
	}
	if i.PasswordEqualFold != nil {
		predicates = append(predicates, user.PasswordEqualFold(*i.PasswordEqualFold))
	}
	if i.PasswordContainsFold != nil {
		predicates = append(predicates, user.PasswordContainsFold(*i.PasswordContainsFold))
	}
	if i.Secret != nil {
		predicates = append(predicates, user.SecretEQ(*i.Secret))
	}
	if i.SecretNEQ != nil {
		predicates = append(predicates, user.SecretNEQ(*i.SecretNEQ))
	}
	if len(i.SecretIn) > 0 {
		predicates = append(predicates, user.SecretIn(i.SecretIn...))
	}
	if len(i.SecretNotIn) > 0 {
		predicates = append(predicates, user.SecretNotIn(i.SecretNotIn...))
	}
	if i.SecretGT != nil {
		predicates = append(predicates, user.SecretGT(*i.SecretGT))
	}
	if i.SecretGTE != nil {
		predicates = append(predicates, user.SecretGTE(*i.SecretGTE))
	}
	if i.SecretLT != nil {
		predicates = append(predicates, user.SecretLT(*i.SecretLT))
	}
	if i.SecretLTE != nil {
		predicates = append(predicates, user.SecretLTE(*i.SecretLTE))
	}
	if i.SecretContains != nil {
		predicates = append(predicates, user.SecretContains(*i.SecretContains))
	}
	if i.SecretHasPrefix != nil {
		predicates = append(predicates, user.SecretHasPrefix(*i.SecretHasPrefix))
	}
	if i.SecretHasSuffix != nil {
		predicates = append(predicates, user.SecretHasSuffix(*i.SecretHasSuffix))
	}
	if i.SecretIsNil {
		predicates = append(predicates, user.SecretIsNil())
	}
	if i.SecretNotNil {
		predicates = append(predicates, user.SecretNotNil())
	}
	if i.SecretEqualFold != nil {
		predicates = append(predicates, user.SecretEqualFold(*i.SecretEqualFold))
	}
	if i.SecretContainsFold != nil {
		predicates = append(predicates, user.SecretContainsFold(*i.SecretContainsFold))
	}
	if i.APIKey != nil {
		predicates = append(predicates, user.APIKeyEQ(*i.APIKey))
	}
	if i.APIKeyNEQ != nil {
		predicates = append(predicates, user.APIKeyNEQ(*i.APIKeyNEQ))
	}
	if len(i.APIKeyIn) > 0 {
		predicates = append(predicates, user.APIKeyIn(i.APIKeyIn...))
	}
	if len(i.APIKeyNotIn) > 0 {
		predicates = append(predicates, user.APIKeyNotIn(i.APIKeyNotIn...))
	}
	if i.APIKeyGT != nil {
		predicates = append(predicates, user.APIKeyGT(*i.APIKeyGT))
	}
	if i.APIKeyGTE != nil {
		predicates = append(predicates, user.APIKeyGTE(*i.APIKeyGTE))
	}
	if i.APIKeyLT != nil {
		predicates = append(predicates, user.APIKeyLT(*i.APIKeyLT))
	}
	if i.APIKeyLTE != nil {
		predicates = append(predicates, user.APIKeyLTE(*i.APIKeyLTE))
	}
	if i.APIKeyContains != nil {
		predicates = append(predicates, user.APIKeyContains(*i.APIKeyContains))
	}
	if i.APIKeyHasPrefix != nil {
		predicates = append(predicates, user.APIKeyHasPrefix(*i.APIKeyHasPrefix))
	}
	if i.APIKeyHasSuffix != nil {
		predicates = append(predicates, user.APIKeyHasSuffix(*i.APIKeyHasSuffix))
	}
	if i.APIKeyIsNil {
		predicates = append(predicates, user.APIKeyIsNil())
	}
	if i.APIKeyNotNil {
		predicates = append(predicates, user.APIKeyNotNil())
	}
	if i.APIKeyEqualFold != nil {
		predicates = append(predicates, user.APIKeyEqualFold(*i.APIKeyEqualFold))
	}
	if i.APIKeyContainsFold != nil {
		predicates = append(predicates, user.APIKeyContainsFold(*i.APIKeyContainsFold))
	}
	if i.WelcomeEmailSent != nil {
		predicates = append(predicates, user.WelcomeEmailSentEQ(*i.WelcomeEmailSent))
	}
	if i.WelcomeEmailSentNEQ != nil {
		predicates = append(predicates, user.WelcomeEmailSentNEQ(*i.WelcomeEmailSentNEQ))
	}
	if i.WelcomeEmailSentIsNil {
		predicates = append(predicates, user.WelcomeEmailSentIsNil())
	}
	if i.WelcomeEmailSentNotNil {
		predicates = append(predicates, user.WelcomeEmailSentNotNil())
	}
	if i.CanAdmin != nil {
		predicates = append(predicates, user.CanAdminEQ(*i.CanAdmin))
	}
	if i.CanAdminNEQ != nil {
		predicates = append(predicates, user.CanAdminNEQ(*i.CanAdminNEQ))
	}
	if i.CanAdminIsNil {
		predicates = append(predicates, user.CanAdminIsNil())
	}
	if i.CanAdminNotNil {
		predicates = append(predicates, user.CanAdminNotNil())
	}

	if i.HasWorkspaces != nil {
		p := user.HasWorkspaces()
		if !*i.HasWorkspaces {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspacesWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspacesWith))
		for _, w := range i.HasWorkspacesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspacesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasWorkspacesWith(with...))
	}
	if i.HasWorkspaceUsers != nil {
		p := user.HasWorkspaceUsers()
		if !*i.HasWorkspaceUsers {
			p = user.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceUsersWith) > 0 {
		with := make([]predicate.WorkspaceUser, 0, len(i.HasWorkspaceUsersWith))
		for _, w := range i.HasWorkspaceUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspaceUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, user.HasWorkspaceUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return user.And(predicates...), nil
	}
}

// WorkspaceWhereInput represents a where input for filtering Workspace queries.
type WorkspaceWhereInput struct {
	Predicates []predicate.Workspace  `json:"-"`
	Not        *WorkspaceWhereInput   `json:"not,omitempty"`
	Or         []*WorkspaceWhereInput `json:"or,omitempty"`
	And        []*WorkspaceWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameIsNil        bool     `json:"nameIsNil,omitempty"`
	NameNotNil       bool     `json:"nameNotNil,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "is_personal" field predicates.
	IsPersonal       *bool `json:"isPersonal,omitempty"`
	IsPersonalNEQ    *bool `json:"isPersonalNEQ,omitempty"`
	IsPersonalIsNil  bool  `json:"isPersonalIsNil,omitempty"`
	IsPersonalNotNil bool  `json:"isPersonalNotNil,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDIsNil        bool     `json:"userIDIsNil,omitempty"`
	UserIDNotNil       bool     `json:"userIDNotNil,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "users" edge predicates.
	HasUsers     *bool             `json:"hasUsers,omitempty"`
	HasUsersWith []*UserWhereInput `json:"hasUsersWith,omitempty"`

	// "workspace_invites" edge predicates.
	HasWorkspaceInvites     *bool                        `json:"hasWorkspaceInvites,omitempty"`
	HasWorkspaceInvitesWith []*WorkspaceInviteWhereInput `json:"hasWorkspaceInvitesWith,omitempty"`

	// "workspace_users" edge predicates.
	HasWorkspaceUsers     *bool                      `json:"hasWorkspaceUsers,omitempty"`
	HasWorkspaceUsersWith []*WorkspaceUserWhereInput `json:"hasWorkspaceUsersWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WorkspaceWhereInput) AddPredicates(predicates ...predicate.Workspace) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WorkspaceWhereInput filter on the WorkspaceQuery builder.
func (i *WorkspaceWhereInput) Filter(q *WorkspaceQuery) (*WorkspaceQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWorkspaceWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWorkspaceWhereInput is returned in case the WorkspaceWhereInput is empty.
var ErrEmptyWorkspaceWhereInput = errors.New("ent: empty predicate WorkspaceWhereInput")

// P returns a predicate for filtering workspaces.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceWhereInput) P() (predicate.Workspace, error) {
	var predicates []predicate.Workspace
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, workspace.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Workspace, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspace.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Workspace, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspace.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, workspace.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspace.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspace.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspace.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspace.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspace.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspace.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspace.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, workspace.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, workspace.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspace.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspace.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspace.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspace.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspace.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspace.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, workspace.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, workspace.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspace.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspace.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspace.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspace.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspace.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspace.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspace.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, workspace.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, workspace.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, workspace.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, workspace.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, workspace.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, workspace.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, workspace.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, workspace.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, workspace.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, workspace.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, workspace.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, workspace.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, workspace.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, workspace.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, workspace.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, workspace.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, workspace.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, workspace.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, workspace.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, workspace.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, workspace.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, workspace.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, workspace.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, workspace.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, workspace.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, workspace.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, workspace.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, workspace.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameIsNil {
		predicates = append(predicates, workspace.NameIsNil())
	}
	if i.NameNotNil {
		predicates = append(predicates, workspace.NameNotNil())
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, workspace.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, workspace.NameContainsFold(*i.NameContainsFold))
	}
	if i.IsPersonal != nil {
		predicates = append(predicates, workspace.IsPersonalEQ(*i.IsPersonal))
	}
	if i.IsPersonalNEQ != nil {
		predicates = append(predicates, workspace.IsPersonalNEQ(*i.IsPersonalNEQ))
	}
	if i.IsPersonalIsNil {
		predicates = append(predicates, workspace.IsPersonalIsNil())
	}
	if i.IsPersonalNotNil {
		predicates = append(predicates, workspace.IsPersonalNotNil())
	}
	if i.UserID != nil {
		predicates = append(predicates, workspace.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, workspace.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, workspace.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, workspace.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, workspace.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, workspace.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, workspace.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, workspace.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, workspace.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, workspace.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, workspace.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDIsNil {
		predicates = append(predicates, workspace.UserIDIsNil())
	}
	if i.UserIDNotNil {
		predicates = append(predicates, workspace.UserIDNotNil())
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, workspace.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, workspace.UserIDContainsFold(*i.UserIDContainsFold))
	}

	if i.HasUsers != nil {
		p := workspace.HasUsers()
		if !*i.HasUsers {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUsersWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUsersWith))
		for _, w := range i.HasUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasUsersWith(with...))
	}
	if i.HasWorkspaceInvites != nil {
		p := workspace.HasWorkspaceInvites()
		if !*i.HasWorkspaceInvites {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceInvitesWith) > 0 {
		with := make([]predicate.WorkspaceInvite, 0, len(i.HasWorkspaceInvitesWith))
		for _, w := range i.HasWorkspaceInvitesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspaceInvitesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasWorkspaceInvitesWith(with...))
	}
	if i.HasWorkspaceUsers != nil {
		p := workspace.HasWorkspaceUsers()
		if !*i.HasWorkspaceUsers {
			p = workspace.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceUsersWith) > 0 {
		with := make([]predicate.WorkspaceUser, 0, len(i.HasWorkspaceUsersWith))
		for _, w := range i.HasWorkspaceUsersWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspaceUsersWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspace.HasWorkspaceUsersWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWorkspaceWhereInput
	case 1:
		return predicates[0], nil
	default:
		return workspace.And(predicates...), nil
	}
}

// WorkspaceInviteWhereInput represents a where input for filtering WorkspaceInvite queries.
type WorkspaceInviteWhereInput struct {
	Predicates []predicate.WorkspaceInvite  `json:"-"`
	Not        *WorkspaceInviteWhereInput   `json:"not,omitempty"`
	Or         []*WorkspaceInviteWhereInput `json:"or,omitempty"`
	And        []*WorkspaceInviteWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *string  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *string  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []string `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []string `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *string  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *string  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *string  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *string  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *string  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *string  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *string  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDIsNil        bool     `json:"workspaceIDIsNil,omitempty"`
	WorkspaceIDNotNil       bool     `json:"workspaceIDNotNil,omitempty"`
	WorkspaceIDEqualFold    *string  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *string  `json:"workspaceIDContainsFold,omitempty"`

	// "email" field predicates.
	Email             *string  `json:"email,omitempty"`
	EmailNEQ          *string  `json:"emailNEQ,omitempty"`
	EmailIn           []string `json:"emailIn,omitempty"`
	EmailNotIn        []string `json:"emailNotIn,omitempty"`
	EmailGT           *string  `json:"emailGT,omitempty"`
	EmailGTE          *string  `json:"emailGTE,omitempty"`
	EmailLT           *string  `json:"emailLT,omitempty"`
	EmailLTE          *string  `json:"emailLTE,omitempty"`
	EmailContains     *string  `json:"emailContains,omitempty"`
	EmailHasPrefix    *string  `json:"emailHasPrefix,omitempty"`
	EmailHasSuffix    *string  `json:"emailHasSuffix,omitempty"`
	EmailIsNil        bool     `json:"emailIsNil,omitempty"`
	EmailNotNil       bool     `json:"emailNotNil,omitempty"`
	EmailEqualFold    *string  `json:"emailEqualFold,omitempty"`
	EmailContainsFold *string  `json:"emailContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleIsNil        bool     `json:"roleIsNil,omitempty"`
	RoleNotNil       bool     `json:"roleNotNil,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WorkspaceInviteWhereInput) AddPredicates(predicates ...predicate.WorkspaceInvite) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WorkspaceInviteWhereInput filter on the WorkspaceInviteQuery builder.
func (i *WorkspaceInviteWhereInput) Filter(q *WorkspaceInviteQuery) (*WorkspaceInviteQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWorkspaceInviteWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWorkspaceInviteWhereInput is returned in case the WorkspaceInviteWhereInput is empty.
var ErrEmptyWorkspaceInviteWhereInput = errors.New("ent: empty predicate WorkspaceInviteWhereInput")

// P returns a predicate for filtering workspaceinvites.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceInviteWhereInput) P() (predicate.WorkspaceInvite, error) {
	var predicates []predicate.WorkspaceInvite
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, workspaceinvite.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceInvite, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceinvite.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceInvite, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceinvite.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, workspaceinvite.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceinvite.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceinvite.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceinvite.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceinvite.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceinvite.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceinvite.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, workspaceinvite.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, workspaceinvite.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceinvite.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceinvite.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, workspaceinvite.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, workspaceinvite.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceinvite.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceinvite.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, workspaceinvite.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, workspaceinvite.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, workspaceinvite.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, workspaceinvite.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, workspaceinvite.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, workspaceinvite.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, workspaceinvite.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, workspaceinvite.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, workspaceinvite.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, workspaceinvite.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, workspaceinvite.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, workspaceinvite.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, workspaceinvite.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, workspaceinvite.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, workspaceinvite.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, workspaceinvite.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, workspaceinvite.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDIsNil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDIsNil())
	}
	if i.WorkspaceIDNotNil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDNotNil())
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, workspaceinvite.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.Email != nil {
		predicates = append(predicates, workspaceinvite.EmailEQ(*i.Email))
	}
	if i.EmailNEQ != nil {
		predicates = append(predicates, workspaceinvite.EmailNEQ(*i.EmailNEQ))
	}
	if len(i.EmailIn) > 0 {
		predicates = append(predicates, workspaceinvite.EmailIn(i.EmailIn...))
	}
	if len(i.EmailNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.EmailNotIn(i.EmailNotIn...))
	}
	if i.EmailGT != nil {
		predicates = append(predicates, workspaceinvite.EmailGT(*i.EmailGT))
	}
	if i.EmailGTE != nil {
		predicates = append(predicates, workspaceinvite.EmailGTE(*i.EmailGTE))
	}
	if i.EmailLT != nil {
		predicates = append(predicates, workspaceinvite.EmailLT(*i.EmailLT))
	}
	if i.EmailLTE != nil {
		predicates = append(predicates, workspaceinvite.EmailLTE(*i.EmailLTE))
	}
	if i.EmailContains != nil {
		predicates = append(predicates, workspaceinvite.EmailContains(*i.EmailContains))
	}
	if i.EmailHasPrefix != nil {
		predicates = append(predicates, workspaceinvite.EmailHasPrefix(*i.EmailHasPrefix))
	}
	if i.EmailHasSuffix != nil {
		predicates = append(predicates, workspaceinvite.EmailHasSuffix(*i.EmailHasSuffix))
	}
	if i.EmailIsNil {
		predicates = append(predicates, workspaceinvite.EmailIsNil())
	}
	if i.EmailNotNil {
		predicates = append(predicates, workspaceinvite.EmailNotNil())
	}
	if i.EmailEqualFold != nil {
		predicates = append(predicates, workspaceinvite.EmailEqualFold(*i.EmailEqualFold))
	}
	if i.EmailContainsFold != nil {
		predicates = append(predicates, workspaceinvite.EmailContainsFold(*i.EmailContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, workspaceinvite.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, workspaceinvite.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, workspaceinvite.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, workspaceinvite.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, workspaceinvite.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, workspaceinvite.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, workspaceinvite.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, workspaceinvite.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, workspaceinvite.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, workspaceinvite.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, workspaceinvite.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleIsNil {
		predicates = append(predicates, workspaceinvite.RoleIsNil())
	}
	if i.RoleNotNil {
		predicates = append(predicates, workspaceinvite.RoleNotNil())
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, workspaceinvite.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, workspaceinvite.RoleContainsFold(*i.RoleContainsFold))
	}

	if i.HasWorkspace != nil {
		p := workspaceinvite.HasWorkspace()
		if !*i.HasWorkspace {
			p = workspaceinvite.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspaceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceinvite.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWorkspaceInviteWhereInput
	case 1:
		return predicates[0], nil
	default:
		return workspaceinvite.And(predicates...), nil
	}
}

// WorkspaceUserWhereInput represents a where input for filtering WorkspaceUser queries.
type WorkspaceUserWhereInput struct {
	Predicates []predicate.WorkspaceUser  `json:"-"`
	Not        *WorkspaceUserWhereInput   `json:"not,omitempty"`
	Or         []*WorkspaceUserWhereInput `json:"or,omitempty"`
	And        []*WorkspaceUserWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID             *string  `json:"id,omitempty"`
	IDNEQ          *string  `json:"idNEQ,omitempty"`
	IDIn           []string `json:"idIn,omitempty"`
	IDNotIn        []string `json:"idNotIn,omitempty"`
	IDGT           *string  `json:"idGT,omitempty"`
	IDGTE          *string  `json:"idGTE,omitempty"`
	IDLT           *string  `json:"idLT,omitempty"`
	IDLTE          *string  `json:"idLTE,omitempty"`
	IDEqualFold    *string  `json:"idEqualFold,omitempty"`
	IDContainsFold *string  `json:"idContainsFold,omitempty"`

	// "created_at" field predicates.
	CreatedAt       *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ    *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn     []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn  []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT     *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE    *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT     *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE    *time.Time  `json:"createdAtLTE,omitempty"`
	CreatedAtIsNil  bool        `json:"createdAtIsNil,omitempty"`
	CreatedAtNotNil bool        `json:"createdAtNotNil,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt       *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ    *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn     []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn  []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT     *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE    *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT     *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE    *time.Time  `json:"updatedAtLTE,omitempty"`
	UpdatedAtIsNil  bool        `json:"updatedAtIsNil,omitempty"`
	UpdatedAtNotNil bool        `json:"updatedAtNotNil,omitempty"`

	// "app_id" field predicates.
	AppID             *string  `json:"appID,omitempty"`
	AppIDNEQ          *string  `json:"appIDNEQ,omitempty"`
	AppIDIn           []string `json:"appIDIn,omitempty"`
	AppIDNotIn        []string `json:"appIDNotIn,omitempty"`
	AppIDGT           *string  `json:"appIDGT,omitempty"`
	AppIDGTE          *string  `json:"appIDGTE,omitempty"`
	AppIDLT           *string  `json:"appIDLT,omitempty"`
	AppIDLTE          *string  `json:"appIDLTE,omitempty"`
	AppIDContains     *string  `json:"appIDContains,omitempty"`
	AppIDHasPrefix    *string  `json:"appIDHasPrefix,omitempty"`
	AppIDHasSuffix    *string  `json:"appIDHasSuffix,omitempty"`
	AppIDIsNil        bool     `json:"appIDIsNil,omitempty"`
	AppIDNotNil       bool     `json:"appIDNotNil,omitempty"`
	AppIDEqualFold    *string  `json:"appIDEqualFold,omitempty"`
	AppIDContainsFold *string  `json:"appIDContainsFold,omitempty"`

	// "workspace_id" field predicates.
	WorkspaceID             *string  `json:"workspaceID,omitempty"`
	WorkspaceIDNEQ          *string  `json:"workspaceIDNEQ,omitempty"`
	WorkspaceIDIn           []string `json:"workspaceIDIn,omitempty"`
	WorkspaceIDNotIn        []string `json:"workspaceIDNotIn,omitempty"`
	WorkspaceIDGT           *string  `json:"workspaceIDGT,omitempty"`
	WorkspaceIDGTE          *string  `json:"workspaceIDGTE,omitempty"`
	WorkspaceIDLT           *string  `json:"workspaceIDLT,omitempty"`
	WorkspaceIDLTE          *string  `json:"workspaceIDLTE,omitempty"`
	WorkspaceIDContains     *string  `json:"workspaceIDContains,omitempty"`
	WorkspaceIDHasPrefix    *string  `json:"workspaceIDHasPrefix,omitempty"`
	WorkspaceIDHasSuffix    *string  `json:"workspaceIDHasSuffix,omitempty"`
	WorkspaceIDEqualFold    *string  `json:"workspaceIDEqualFold,omitempty"`
	WorkspaceIDContainsFold *string  `json:"workspaceIDContainsFold,omitempty"`

	// "user_id" field predicates.
	UserID             *string  `json:"userID,omitempty"`
	UserIDNEQ          *string  `json:"userIDNEQ,omitempty"`
	UserIDIn           []string `json:"userIDIn,omitempty"`
	UserIDNotIn        []string `json:"userIDNotIn,omitempty"`
	UserIDGT           *string  `json:"userIDGT,omitempty"`
	UserIDGTE          *string  `json:"userIDGTE,omitempty"`
	UserIDLT           *string  `json:"userIDLT,omitempty"`
	UserIDLTE          *string  `json:"userIDLTE,omitempty"`
	UserIDContains     *string  `json:"userIDContains,omitempty"`
	UserIDHasPrefix    *string  `json:"userIDHasPrefix,omitempty"`
	UserIDHasSuffix    *string  `json:"userIDHasSuffix,omitempty"`
	UserIDEqualFold    *string  `json:"userIDEqualFold,omitempty"`
	UserIDContainsFold *string  `json:"userIDContainsFold,omitempty"`

	// "role" field predicates.
	Role             *string  `json:"role,omitempty"`
	RoleNEQ          *string  `json:"roleNEQ,omitempty"`
	RoleIn           []string `json:"roleIn,omitempty"`
	RoleNotIn        []string `json:"roleNotIn,omitempty"`
	RoleGT           *string  `json:"roleGT,omitempty"`
	RoleGTE          *string  `json:"roleGTE,omitempty"`
	RoleLT           *string  `json:"roleLT,omitempty"`
	RoleLTE          *string  `json:"roleLTE,omitempty"`
	RoleContains     *string  `json:"roleContains,omitempty"`
	RoleHasPrefix    *string  `json:"roleHasPrefix,omitempty"`
	RoleHasSuffix    *string  `json:"roleHasSuffix,omitempty"`
	RoleIsNil        bool     `json:"roleIsNil,omitempty"`
	RoleNotNil       bool     `json:"roleNotNil,omitempty"`
	RoleEqualFold    *string  `json:"roleEqualFold,omitempty"`
	RoleContainsFold *string  `json:"roleContainsFold,omitempty"`

	// "user" edge predicates.
	HasUser     *bool             `json:"hasUser,omitempty"`
	HasUserWith []*UserWhereInput `json:"hasUserWith,omitempty"`

	// "workspace" edge predicates.
	HasWorkspace     *bool                  `json:"hasWorkspace,omitempty"`
	HasWorkspaceWith []*WorkspaceWhereInput `json:"hasWorkspaceWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *WorkspaceUserWhereInput) AddPredicates(predicates ...predicate.WorkspaceUser) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the WorkspaceUserWhereInput filter on the WorkspaceUserQuery builder.
func (i *WorkspaceUserWhereInput) Filter(q *WorkspaceUserQuery) (*WorkspaceUserQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyWorkspaceUserWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyWorkspaceUserWhereInput is returned in case the WorkspaceUserWhereInput is empty.
var ErrEmptyWorkspaceUserWhereInput = errors.New("ent: empty predicate WorkspaceUserWhereInput")

// P returns a predicate for filtering workspaceusers.
// An error is returned if the input is empty or invalid.
func (i *WorkspaceUserWhereInput) P() (predicate.WorkspaceUser, error) {
	var predicates []predicate.WorkspaceUser
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, workspaceuser.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.WorkspaceUser, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, workspaceuser.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.WorkspaceUser, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, workspaceuser.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, workspaceuser.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, workspaceuser.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, workspaceuser.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, workspaceuser.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, workspaceuser.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, workspaceuser.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, workspaceuser.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, workspaceuser.IDLTE(*i.IDLTE))
	}
	if i.IDEqualFold != nil {
		predicates = append(predicates, workspaceuser.IDEqualFold(*i.IDEqualFold))
	}
	if i.IDContainsFold != nil {
		predicates = append(predicates, workspaceuser.IDContainsFold(*i.IDContainsFold))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, workspaceuser.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, workspaceuser.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, workspaceuser.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceuser.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, workspaceuser.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, workspaceuser.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, workspaceuser.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, workspaceuser.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.CreatedAtIsNil {
		predicates = append(predicates, workspaceuser.CreatedAtIsNil())
	}
	if i.CreatedAtNotNil {
		predicates = append(predicates, workspaceuser.CreatedAtNotNil())
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, workspaceuser.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, workspaceuser.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, workspaceuser.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.UpdatedAtIsNil {
		predicates = append(predicates, workspaceuser.UpdatedAtIsNil())
	}
	if i.UpdatedAtNotNil {
		predicates = append(predicates, workspaceuser.UpdatedAtNotNil())
	}
	if i.AppID != nil {
		predicates = append(predicates, workspaceuser.AppIDEQ(*i.AppID))
	}
	if i.AppIDNEQ != nil {
		predicates = append(predicates, workspaceuser.AppIDNEQ(*i.AppIDNEQ))
	}
	if len(i.AppIDIn) > 0 {
		predicates = append(predicates, workspaceuser.AppIDIn(i.AppIDIn...))
	}
	if len(i.AppIDNotIn) > 0 {
		predicates = append(predicates, workspaceuser.AppIDNotIn(i.AppIDNotIn...))
	}
	if i.AppIDGT != nil {
		predicates = append(predicates, workspaceuser.AppIDGT(*i.AppIDGT))
	}
	if i.AppIDGTE != nil {
		predicates = append(predicates, workspaceuser.AppIDGTE(*i.AppIDGTE))
	}
	if i.AppIDLT != nil {
		predicates = append(predicates, workspaceuser.AppIDLT(*i.AppIDLT))
	}
	if i.AppIDLTE != nil {
		predicates = append(predicates, workspaceuser.AppIDLTE(*i.AppIDLTE))
	}
	if i.AppIDContains != nil {
		predicates = append(predicates, workspaceuser.AppIDContains(*i.AppIDContains))
	}
	if i.AppIDHasPrefix != nil {
		predicates = append(predicates, workspaceuser.AppIDHasPrefix(*i.AppIDHasPrefix))
	}
	if i.AppIDHasSuffix != nil {
		predicates = append(predicates, workspaceuser.AppIDHasSuffix(*i.AppIDHasSuffix))
	}
	if i.AppIDIsNil {
		predicates = append(predicates, workspaceuser.AppIDIsNil())
	}
	if i.AppIDNotNil {
		predicates = append(predicates, workspaceuser.AppIDNotNil())
	}
	if i.AppIDEqualFold != nil {
		predicates = append(predicates, workspaceuser.AppIDEqualFold(*i.AppIDEqualFold))
	}
	if i.AppIDContainsFold != nil {
		predicates = append(predicates, workspaceuser.AppIDContainsFold(*i.AppIDContainsFold))
	}
	if i.WorkspaceID != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDEQ(*i.WorkspaceID))
	}
	if i.WorkspaceIDNEQ != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDNEQ(*i.WorkspaceIDNEQ))
	}
	if len(i.WorkspaceIDIn) > 0 {
		predicates = append(predicates, workspaceuser.WorkspaceIDIn(i.WorkspaceIDIn...))
	}
	if len(i.WorkspaceIDNotIn) > 0 {
		predicates = append(predicates, workspaceuser.WorkspaceIDNotIn(i.WorkspaceIDNotIn...))
	}
	if i.WorkspaceIDGT != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDGT(*i.WorkspaceIDGT))
	}
	if i.WorkspaceIDGTE != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDGTE(*i.WorkspaceIDGTE))
	}
	if i.WorkspaceIDLT != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDLT(*i.WorkspaceIDLT))
	}
	if i.WorkspaceIDLTE != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDLTE(*i.WorkspaceIDLTE))
	}
	if i.WorkspaceIDContains != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDContains(*i.WorkspaceIDContains))
	}
	if i.WorkspaceIDHasPrefix != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDHasPrefix(*i.WorkspaceIDHasPrefix))
	}
	if i.WorkspaceIDHasSuffix != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDHasSuffix(*i.WorkspaceIDHasSuffix))
	}
	if i.WorkspaceIDEqualFold != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDEqualFold(*i.WorkspaceIDEqualFold))
	}
	if i.WorkspaceIDContainsFold != nil {
		predicates = append(predicates, workspaceuser.WorkspaceIDContainsFold(*i.WorkspaceIDContainsFold))
	}
	if i.UserID != nil {
		predicates = append(predicates, workspaceuser.UserIDEQ(*i.UserID))
	}
	if i.UserIDNEQ != nil {
		predicates = append(predicates, workspaceuser.UserIDNEQ(*i.UserIDNEQ))
	}
	if len(i.UserIDIn) > 0 {
		predicates = append(predicates, workspaceuser.UserIDIn(i.UserIDIn...))
	}
	if len(i.UserIDNotIn) > 0 {
		predicates = append(predicates, workspaceuser.UserIDNotIn(i.UserIDNotIn...))
	}
	if i.UserIDGT != nil {
		predicates = append(predicates, workspaceuser.UserIDGT(*i.UserIDGT))
	}
	if i.UserIDGTE != nil {
		predicates = append(predicates, workspaceuser.UserIDGTE(*i.UserIDGTE))
	}
	if i.UserIDLT != nil {
		predicates = append(predicates, workspaceuser.UserIDLT(*i.UserIDLT))
	}
	if i.UserIDLTE != nil {
		predicates = append(predicates, workspaceuser.UserIDLTE(*i.UserIDLTE))
	}
	if i.UserIDContains != nil {
		predicates = append(predicates, workspaceuser.UserIDContains(*i.UserIDContains))
	}
	if i.UserIDHasPrefix != nil {
		predicates = append(predicates, workspaceuser.UserIDHasPrefix(*i.UserIDHasPrefix))
	}
	if i.UserIDHasSuffix != nil {
		predicates = append(predicates, workspaceuser.UserIDHasSuffix(*i.UserIDHasSuffix))
	}
	if i.UserIDEqualFold != nil {
		predicates = append(predicates, workspaceuser.UserIDEqualFold(*i.UserIDEqualFold))
	}
	if i.UserIDContainsFold != nil {
		predicates = append(predicates, workspaceuser.UserIDContainsFold(*i.UserIDContainsFold))
	}
	if i.Role != nil {
		predicates = append(predicates, workspaceuser.RoleEQ(*i.Role))
	}
	if i.RoleNEQ != nil {
		predicates = append(predicates, workspaceuser.RoleNEQ(*i.RoleNEQ))
	}
	if len(i.RoleIn) > 0 {
		predicates = append(predicates, workspaceuser.RoleIn(i.RoleIn...))
	}
	if len(i.RoleNotIn) > 0 {
		predicates = append(predicates, workspaceuser.RoleNotIn(i.RoleNotIn...))
	}
	if i.RoleGT != nil {
		predicates = append(predicates, workspaceuser.RoleGT(*i.RoleGT))
	}
	if i.RoleGTE != nil {
		predicates = append(predicates, workspaceuser.RoleGTE(*i.RoleGTE))
	}
	if i.RoleLT != nil {
		predicates = append(predicates, workspaceuser.RoleLT(*i.RoleLT))
	}
	if i.RoleLTE != nil {
		predicates = append(predicates, workspaceuser.RoleLTE(*i.RoleLTE))
	}
	if i.RoleContains != nil {
		predicates = append(predicates, workspaceuser.RoleContains(*i.RoleContains))
	}
	if i.RoleHasPrefix != nil {
		predicates = append(predicates, workspaceuser.RoleHasPrefix(*i.RoleHasPrefix))
	}
	if i.RoleHasSuffix != nil {
		predicates = append(predicates, workspaceuser.RoleHasSuffix(*i.RoleHasSuffix))
	}
	if i.RoleIsNil {
		predicates = append(predicates, workspaceuser.RoleIsNil())
	}
	if i.RoleNotNil {
		predicates = append(predicates, workspaceuser.RoleNotNil())
	}
	if i.RoleEqualFold != nil {
		predicates = append(predicates, workspaceuser.RoleEqualFold(*i.RoleEqualFold))
	}
	if i.RoleContainsFold != nil {
		predicates = append(predicates, workspaceuser.RoleContainsFold(*i.RoleContainsFold))
	}

	if i.HasUser != nil {
		p := workspaceuser.HasUser()
		if !*i.HasUser {
			p = workspaceuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasUserWith) > 0 {
		with := make([]predicate.User, 0, len(i.HasUserWith))
		for _, w := range i.HasUserWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasUserWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceuser.HasUserWith(with...))
	}
	if i.HasWorkspace != nil {
		p := workspaceuser.HasWorkspace()
		if !*i.HasWorkspace {
			p = workspaceuser.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWorkspaceWith) > 0 {
		with := make([]predicate.Workspace, 0, len(i.HasWorkspaceWith))
		for _, w := range i.HasWorkspaceWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWorkspaceWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, workspaceuser.HasWorkspaceWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyWorkspaceUserWhereInput
	case 1:
		return predicates[0], nil
	default:
		return workspaceuser.And(predicates...), nil
	}
}
