// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/plan"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PlanCreate is the builder for creating a Plan entity.
type PlanCreate struct {
	config
	mutation *PlanMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlanCreate) SetCreatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableCreatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlanCreate) SetUpdatedAt(t time.Time) *PlanCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlanCreate) SetNillableUpdatedAt(t *time.Time) *PlanCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetAppID sets the "app_id" field.
func (pc *PlanCreate) SetAppID(s string) *PlanCreate {
	pc.mutation.SetAppID(s)
	return pc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableAppID(s *string) *PlanCreate {
	if s != nil {
		pc.SetAppID(*s)
	}
	return pc
}

// SetName sets the "name" field.
func (pc *PlanCreate) SetName(s string) *PlanCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *PlanCreate) SetNillableName(s *string) *PlanCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetExcerpt sets the "excerpt" field.
func (pc *PlanCreate) SetExcerpt(s string) *PlanCreate {
	pc.mutation.SetExcerpt(s)
	return pc
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (pc *PlanCreate) SetNillableExcerpt(s *string) *PlanCreate {
	if s != nil {
		pc.SetExcerpt(*s)
	}
	return pc
}

// SetDescription sets the "description" field.
func (pc *PlanCreate) SetDescription(s string) *PlanCreate {
	pc.mutation.SetDescription(s)
	return pc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pc *PlanCreate) SetNillableDescription(s *string) *PlanCreate {
	if s != nil {
		pc.SetDescription(*s)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PlanCreate) SetStatus(b bool) *PlanCreate {
	pc.mutation.SetStatus(b)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PlanCreate) SetNillableStatus(b *bool) *PlanCreate {
	if b != nil {
		pc.SetStatus(*b)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlanCreate) SetID(s string) *PlanCreate {
	pc.mutation.SetID(s)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlanCreate) SetNillableID(s *string) *PlanCreate {
	if s != nil {
		pc.SetID(*s)
	}
	return pc
}

// Mutation returns the PlanMutation object of the builder.
func (pc *PlanCreate) Mutation() *PlanMutation {
	return pc.mutation
}

// Save creates the Plan in the database.
func (pc *PlanCreate) Save(ctx context.Context) (*Plan, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlanCreate) SaveX(ctx context.Context) *Plan {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlanCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlanCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlanCreate) defaults() {
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := plan.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := plan.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := plan.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := plan.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlanCreate) check() error {
	return nil
}

func (pc *PlanCreate) sqlSave(ctx context.Context) (*Plan, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Plan.ID type: %T", _spec.ID.Value)
		}
	}
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *PlanCreate) createSpec() (*Plan, *sqlgraph.CreateSpec) {
	var (
		_node = &Plan{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(plan.Table, sqlgraph.NewFieldSpec(plan.FieldID, field.TypeString))
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.SetField(plan.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.SetField(plan.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.AppID(); ok {
		_spec.SetField(plan.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(plan.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.Excerpt(); ok {
		_spec.SetField(plan.FieldExcerpt, field.TypeString, value)
		_node.Excerpt = value
	}
	if value, ok := pc.mutation.Description(); ok {
		_spec.SetField(plan.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.SetField(plan.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pc *PlanCreate) OnConflict(opts ...sql.ConflictOption) *PlanUpsertOne {
	pc.conflict = opts
	return &PlanUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *PlanCreate) OnConflictColumns(columns ...string) *PlanUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertOne{
		create: pc,
	}
}

type (
	// PlanUpsertOne is the builder for "upsert"-ing
	//  one Plan node.
	PlanUpsertOne struct {
		create *PlanCreate
	}

	// PlanUpsert is the "OnConflict" setter.
	PlanUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsert) SetUpdatedAt(v time.Time) *PlanUpsert {
	u.Set(plan.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsert) UpdateUpdatedAt() *PlanUpsert {
	u.SetExcluded(plan.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PlanUpsert) ClearUpdatedAt() *PlanUpsert {
	u.SetNull(plan.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *PlanUpsert) SetAppID(v string) *PlanUpsert {
	u.Set(plan.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PlanUpsert) UpdateAppID() *PlanUpsert {
	u.SetExcluded(plan.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *PlanUpsert) ClearAppID() *PlanUpsert {
	u.SetNull(plan.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *PlanUpsert) SetName(v string) *PlanUpsert {
	u.Set(plan.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsert) UpdateName() *PlanUpsert {
	u.SetExcluded(plan.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PlanUpsert) ClearName() *PlanUpsert {
	u.SetNull(plan.FieldName)
	return u
}

// SetExcerpt sets the "excerpt" field.
func (u *PlanUpsert) SetExcerpt(v string) *PlanUpsert {
	u.Set(plan.FieldExcerpt, v)
	return u
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PlanUpsert) UpdateExcerpt() *PlanUpsert {
	u.SetExcluded(plan.FieldExcerpt)
	return u
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PlanUpsert) ClearExcerpt() *PlanUpsert {
	u.SetNull(plan.FieldExcerpt)
	return u
}

// SetDescription sets the "description" field.
func (u *PlanUpsert) SetDescription(v string) *PlanUpsert {
	u.Set(plan.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsert) UpdateDescription() *PlanUpsert {
	u.SetExcluded(plan.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsert) ClearDescription() *PlanUpsert {
	u.SetNull(plan.FieldDescription)
	return u
}

// SetStatus sets the "status" field.
func (u *PlanUpsert) SetStatus(v bool) *PlanUpsert {
	u.Set(plan.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsert) UpdateStatus() *PlanUpsert {
	u.SetExcluded(plan.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PlanUpsert) ClearStatus() *PlanUpsert {
	u.SetNull(plan.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanUpsertOne) UpdateNewValues() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(plan.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(plan.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PlanUpsertOne) Ignore() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertOne) DoNothing() *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreate.OnConflict
// documentation for more info.
func (u *PlanUpsertOne) Update(set func(*PlanUpsert)) *PlanUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertOne) SetUpdatedAt(v time.Time) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateUpdatedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PlanUpsertOne) ClearUpdatedAt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PlanUpsertOne) SetAppID(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateAppID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PlanUpsertOne) ClearAppID() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertOne) SetName(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateName() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PlanUpsertOne) ClearName() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearName()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *PlanUpsertOne) SetExcerpt(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateExcerpt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PlanUpsertOne) ClearExcerpt() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearExcerpt()
	})
}

// SetDescription sets the "description" field.
func (u *PlanUpsertOne) SetDescription(v string) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateDescription() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsertOne) ClearDescription() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *PlanUpsertOne) SetStatus(v bool) *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsertOne) UpdateStatus() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PlanUpsertOne) ClearStatus() *PlanUpsertOne {
	return u.Update(func(s *PlanUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *PlanUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlanUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlanUpsertOne.ID is not supported by MySQL driver. Use PlanUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlanUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlanCreateBulk is the builder for creating many Plan entities in bulk.
type PlanCreateBulk struct {
	config
	err      error
	builders []*PlanCreate
	conflict []sql.ConflictOption
}

// Save creates the Plan entities in the database.
func (pcb *PlanCreateBulk) Save(ctx context.Context) ([]*Plan, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Plan, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlanMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlanCreateBulk) SaveX(ctx context.Context) []*Plan {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlanCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlanCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Plan.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlanUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlanUpsertBulk {
	pcb.conflict = opts
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *PlanCreateBulk) OnConflictColumns(columns ...string) *PlanUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlanUpsertBulk{
		create: pcb,
	}
}

// PlanUpsertBulk is the builder for "upsert"-ing
// a bulk of Plan nodes.
type PlanUpsertBulk struct {
	create *PlanCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(plan.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PlanUpsertBulk) UpdateNewValues() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(plan.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(plan.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Plan.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PlanUpsertBulk) Ignore() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlanUpsertBulk) DoNothing() *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlanCreateBulk.OnConflict
// documentation for more info.
func (u *PlanUpsertBulk) Update(set func(*PlanUpsert)) *PlanUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlanUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlanUpsertBulk) SetUpdatedAt(v time.Time) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateUpdatedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PlanUpsertBulk) ClearUpdatedAt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PlanUpsertBulk) SetAppID(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateAppID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PlanUpsertBulk) ClearAppID() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PlanUpsertBulk) SetName(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateName() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PlanUpsertBulk) ClearName() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearName()
	})
}

// SetExcerpt sets the "excerpt" field.
func (u *PlanUpsertBulk) SetExcerpt(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetExcerpt(v)
	})
}

// UpdateExcerpt sets the "excerpt" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateExcerpt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateExcerpt()
	})
}

// ClearExcerpt clears the value of the "excerpt" field.
func (u *PlanUpsertBulk) ClearExcerpt() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearExcerpt()
	})
}

// SetDescription sets the "description" field.
func (u *PlanUpsertBulk) SetDescription(v string) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateDescription() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *PlanUpsertBulk) ClearDescription() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearDescription()
	})
}

// SetStatus sets the "status" field.
func (u *PlanUpsertBulk) SetStatus(v bool) *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlanUpsertBulk) UpdateStatus() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PlanUpsertBulk) ClearStatus() *PlanUpsertBulk {
	return u.Update(func(s *PlanUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *PlanUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlanCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlanCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlanUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
