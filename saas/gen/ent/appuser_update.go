// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/adminuser"
	"saas/gen/ent/app"
	"saas/gen/ent/approle"
	"saas/gen/ent/appuser"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppUserUpdate is the builder for updating AppUser entities.
type AppUserUpdate struct {
	config
	hooks     []Hook
	mutation  *AppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auu *AppUserUpdate) Where(ps ...predicate.AppUser) *AppUserUpdate {
	auu.mutation.Where(ps...)
	return auu
}

// SetUpdatedAt sets the "updated_at" field.
func (auu *AppUserUpdate) SetUpdatedAt(t time.Time) *AppUserUpdate {
	auu.mutation.SetUpdatedAt(t)
	return auu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auu *AppUserUpdate) ClearUpdatedAt() *AppUserUpdate {
	auu.mutation.ClearUpdatedAt()
	return auu
}

// SetAppID sets the "app_id" field.
func (auu *AppUserUpdate) SetAppID(s string) *AppUserUpdate {
	auu.mutation.SetAppID(s)
	return auu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAppID(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetAppID(*s)
	}
	return auu
}

// SetAdminUserID sets the "admin_user_id" field.
func (auu *AppUserUpdate) SetAdminUserID(s string) *AppUserUpdate {
	auu.mutation.SetAdminUserID(s)
	return auu
}

// SetNillableAdminUserID sets the "admin_user_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAdminUserID(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetAdminUserID(*s)
	}
	return auu
}

// SetAppRoleID sets the "app_role_id" field.
func (auu *AppUserUpdate) SetAppRoleID(s string) *AppUserUpdate {
	auu.mutation.SetAppRoleID(s)
	return auu
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (auu *AppUserUpdate) SetNillableAppRoleID(s *string) *AppUserUpdate {
	if s != nil {
		auu.SetAppRoleID(*s)
	}
	return auu
}

// SetApp sets the "app" edge to the App entity.
func (auu *AppUserUpdate) SetApp(a *App) *AppUserUpdate {
	return auu.SetAppID(a.ID)
}

// SetAdminuserID sets the "adminuser" edge to the AdminUser entity by ID.
func (auu *AppUserUpdate) SetAdminuserID(id string) *AppUserUpdate {
	auu.mutation.SetAdminuserID(id)
	return auu
}

// SetAdminuser sets the "adminuser" edge to the AdminUser entity.
func (auu *AppUserUpdate) SetAdminuser(a *AdminUser) *AppUserUpdate {
	return auu.SetAdminuserID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (auu *AppUserUpdate) SetAppRole(a *AppRole) *AppUserUpdate {
	return auu.SetAppRoleID(a.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auu *AppUserUpdate) Mutation() *AppUserMutation {
	return auu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (auu *AppUserUpdate) ClearApp() *AppUserUpdate {
	auu.mutation.ClearApp()
	return auu
}

// ClearAdminuser clears the "adminuser" edge to the AdminUser entity.
func (auu *AppUserUpdate) ClearAdminuser() *AppUserUpdate {
	auu.mutation.ClearAdminuser()
	return auu
}

// ClearAppRole clears the "app_role" edge to the AppRole entity.
func (auu *AppUserUpdate) ClearAppRole() *AppUserUpdate {
	auu.mutation.ClearAppRole()
	return auu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (auu *AppUserUpdate) Save(ctx context.Context) (int, error) {
	auu.defaults()
	return withHooks(ctx, auu.sqlSave, auu.mutation, auu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auu *AppUserUpdate) SaveX(ctx context.Context) int {
	affected, err := auu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (auu *AppUserUpdate) Exec(ctx context.Context) error {
	_, err := auu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auu *AppUserUpdate) ExecX(ctx context.Context) {
	if err := auu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auu *AppUserUpdate) defaults() {
	if _, ok := auu.mutation.UpdatedAt(); !ok && !auu.mutation.UpdatedAtCleared() {
		v := appuser.UpdateDefaultUpdatedAt()
		auu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auu *AppUserUpdate) check() error {
	if auu.mutation.AppCleared() && len(auu.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.app"`)
	}
	if auu.mutation.AdminuserCleared() && len(auu.mutation.AdminuserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.adminuser"`)
	}
	if auu.mutation.AppRoleCleared() && len(auu.mutation.AppRoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.app_role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auu *AppUserUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserUpdate {
	auu.modifiers = append(auu.modifiers, modifiers...)
	return auu
}

func (auu *AppUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := auu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeString))
	if ps := auu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auu.mutation.CreatedAtCleared() {
		_spec.ClearField(appuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auu.mutation.UpdatedAt(); ok {
		_spec.SetField(appuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if auu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appuser.FieldUpdatedAt, field.TypeTime)
	}
	if auu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AdminuserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AdminuserTable,
			Columns: []string{appuser.AdminuserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AdminuserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AdminuserTable,
			Columns: []string{appuser.AdminuserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auu.mutation.AppRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppRoleTable,
			Columns: []string{appuser.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auu.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppRoleTable,
			Columns: []string{appuser.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, auu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	auu.mutation.done = true
	return n, nil
}

// AppUserUpdateOne is the builder for updating a single AppUser entity.
type AppUserUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppUserMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auuo *AppUserUpdateOne) SetUpdatedAt(t time.Time) *AppUserUpdateOne {
	auuo.mutation.SetUpdatedAt(t)
	return auuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auuo *AppUserUpdateOne) ClearUpdatedAt() *AppUserUpdateOne {
	auuo.mutation.ClearUpdatedAt()
	return auuo
}

// SetAppID sets the "app_id" field.
func (auuo *AppUserUpdateOne) SetAppID(s string) *AppUserUpdateOne {
	auuo.mutation.SetAppID(s)
	return auuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAppID(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetAppID(*s)
	}
	return auuo
}

// SetAdminUserID sets the "admin_user_id" field.
func (auuo *AppUserUpdateOne) SetAdminUserID(s string) *AppUserUpdateOne {
	auuo.mutation.SetAdminUserID(s)
	return auuo
}

// SetNillableAdminUserID sets the "admin_user_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAdminUserID(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetAdminUserID(*s)
	}
	return auuo
}

// SetAppRoleID sets the "app_role_id" field.
func (auuo *AppUserUpdateOne) SetAppRoleID(s string) *AppUserUpdateOne {
	auuo.mutation.SetAppRoleID(s)
	return auuo
}

// SetNillableAppRoleID sets the "app_role_id" field if the given value is not nil.
func (auuo *AppUserUpdateOne) SetNillableAppRoleID(s *string) *AppUserUpdateOne {
	if s != nil {
		auuo.SetAppRoleID(*s)
	}
	return auuo
}

// SetApp sets the "app" edge to the App entity.
func (auuo *AppUserUpdateOne) SetApp(a *App) *AppUserUpdateOne {
	return auuo.SetAppID(a.ID)
}

// SetAdminuserID sets the "adminuser" edge to the AdminUser entity by ID.
func (auuo *AppUserUpdateOne) SetAdminuserID(id string) *AppUserUpdateOne {
	auuo.mutation.SetAdminuserID(id)
	return auuo
}

// SetAdminuser sets the "adminuser" edge to the AdminUser entity.
func (auuo *AppUserUpdateOne) SetAdminuser(a *AdminUser) *AppUserUpdateOne {
	return auuo.SetAdminuserID(a.ID)
}

// SetAppRole sets the "app_role" edge to the AppRole entity.
func (auuo *AppUserUpdateOne) SetAppRole(a *AppRole) *AppUserUpdateOne {
	return auuo.SetAppRoleID(a.ID)
}

// Mutation returns the AppUserMutation object of the builder.
func (auuo *AppUserUpdateOne) Mutation() *AppUserMutation {
	return auuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (auuo *AppUserUpdateOne) ClearApp() *AppUserUpdateOne {
	auuo.mutation.ClearApp()
	return auuo
}

// ClearAdminuser clears the "adminuser" edge to the AdminUser entity.
func (auuo *AppUserUpdateOne) ClearAdminuser() *AppUserUpdateOne {
	auuo.mutation.ClearAdminuser()
	return auuo
}

// ClearAppRole clears the "app_role" edge to the AppRole entity.
func (auuo *AppUserUpdateOne) ClearAppRole() *AppUserUpdateOne {
	auuo.mutation.ClearAppRole()
	return auuo
}

// Where appends a list predicates to the AppUserUpdate builder.
func (auuo *AppUserUpdateOne) Where(ps ...predicate.AppUser) *AppUserUpdateOne {
	auuo.mutation.Where(ps...)
	return auuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auuo *AppUserUpdateOne) Select(field string, fields ...string) *AppUserUpdateOne {
	auuo.fields = append([]string{field}, fields...)
	return auuo
}

// Save executes the query and returns the updated AppUser entity.
func (auuo *AppUserUpdateOne) Save(ctx context.Context) (*AppUser, error) {
	auuo.defaults()
	return withHooks(ctx, auuo.sqlSave, auuo.mutation, auuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auuo *AppUserUpdateOne) SaveX(ctx context.Context) *AppUser {
	node, err := auuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auuo *AppUserUpdateOne) Exec(ctx context.Context) error {
	_, err := auuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auuo *AppUserUpdateOne) ExecX(ctx context.Context) {
	if err := auuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auuo *AppUserUpdateOne) defaults() {
	if _, ok := auuo.mutation.UpdatedAt(); !ok && !auuo.mutation.UpdatedAtCleared() {
		v := appuser.UpdateDefaultUpdatedAt()
		auuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auuo *AppUserUpdateOne) check() error {
	if auuo.mutation.AppCleared() && len(auuo.mutation.AppIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.app"`)
	}
	if auuo.mutation.AdminuserCleared() && len(auuo.mutation.AdminuserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.adminuser"`)
	}
	if auuo.mutation.AppRoleCleared() && len(auuo.mutation.AppRoleIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "AppUser.app_role"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auuo *AppUserUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppUserUpdateOne {
	auuo.modifiers = append(auuo.modifiers, modifiers...)
	return auuo
}

func (auuo *AppUserUpdateOne) sqlSave(ctx context.Context) (_node *AppUser, err error) {
	if err := auuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(appuser.Table, appuser.Columns, sqlgraph.NewFieldSpec(appuser.FieldID, field.TypeString))
	id, ok := auuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appuser.FieldID)
		for _, f := range fields {
			if !appuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auuo.mutation.CreatedAtCleared() {
		_spec.ClearField(appuser.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appuser.FieldUpdatedAt, field.TypeTime, value)
	}
	if auuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appuser.FieldUpdatedAt, field.TypeTime)
	}
	if auuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppTable,
			Columns: []string{appuser.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AdminuserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AdminuserTable,
			Columns: []string{appuser.AdminuserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AdminuserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AdminuserTable,
			Columns: []string{appuser.AdminuserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(adminuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auuo.mutation.AppRoleCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppRoleTable,
			Columns: []string{appuser.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auuo.mutation.AppRoleIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appuser.AppRoleTable,
			Columns: []string{appuser.AppRoleColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auuo.modifiers...)
	_node = &AppUser{config: auuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auuo.mutation.done = true
	return _node, nil
}
