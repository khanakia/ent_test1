// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/media"
	"saas/gen/ent/mediable"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Mediable is the model entity for the Mediable schema.
type Mediable struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// MediaID holds the value of the "media_id" field.
	MediaID string `json:"media_id,omitempty"`
	// MediableID holds the value of the "mediable_id" field.
	MediableID string `json:"mediable_id,omitempty"`
	// MediableType holds the value of the "mediable_type" field.
	MediableType string `json:"mediable_type,omitempty"`
	// Tag holds the value of the "tag" field.
	Tag string `json:"tag,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MediableQuery when eager-loading is set.
	Edges        MediableEdges `json:"edges"`
	selectValues sql.SelectValues
}

// MediableEdges holds the relations/edges for other nodes in the graph.
type MediableEdges struct {
	// Media holds the value of the media edge.
	Media *Media `json:"media,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// MediaOrErr returns the Media value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MediableEdges) MediaOrErr() (*Media, error) {
	if e.Media != nil {
		return e.Media, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: media.Label}
	}
	return nil, &NotLoadedError{edge: "media"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Mediable) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case mediable.FieldOrder:
			values[i] = new(sql.NullInt64)
		case mediable.FieldID, mediable.FieldAppID, mediable.FieldMediaID, mediable.FieldMediableID, mediable.FieldMediableType, mediable.FieldTag:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Mediable fields.
func (m *Mediable) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case mediable.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				m.ID = value.String
			}
		case mediable.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				m.AppID = value.String
			}
		case mediable.FieldMediaID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field media_id", values[i])
			} else if value.Valid {
				m.MediaID = value.String
			}
		case mediable.FieldMediableID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mediable_id", values[i])
			} else if value.Valid {
				m.MediableID = value.String
			}
		case mediable.FieldMediableType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mediable_type", values[i])
			} else if value.Valid {
				m.MediableType = value.String
			}
		case mediable.FieldTag:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tag", values[i])
			} else if value.Valid {
				m.Tag = value.String
			}
		case mediable.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				m.Order = int(value.Int64)
			}
		default:
			m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Mediable.
// This includes values selected through modifiers, order, etc.
func (m *Mediable) Value(name string) (ent.Value, error) {
	return m.selectValues.Get(name)
}

// QueryMedia queries the "media" edge of the Mediable entity.
func (m *Mediable) QueryMedia() *MediaQuery {
	return NewMediableClient(m.config).QueryMedia(m)
}

// Update returns a builder for updating this Mediable.
// Note that you need to call Mediable.Unwrap() before calling this method if this Mediable
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Mediable) Update() *MediableUpdateOne {
	return NewMediableClient(m.config).UpdateOne(m)
}

// Unwrap unwraps the Mediable entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (m *Mediable) Unwrap() *Mediable {
	_tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Mediable is not a transactional entity")
	}
	m.config.driver = _tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Mediable) String() string {
	var builder strings.Builder
	builder.WriteString("Mediable(")
	builder.WriteString(fmt.Sprintf("id=%v, ", m.ID))
	builder.WriteString("app_id=")
	builder.WriteString(m.AppID)
	builder.WriteString(", ")
	builder.WriteString("media_id=")
	builder.WriteString(m.MediaID)
	builder.WriteString(", ")
	builder.WriteString("mediable_id=")
	builder.WriteString(m.MediableID)
	builder.WriteString(", ")
	builder.WriteString("mediable_type=")
	builder.WriteString(m.MediableType)
	builder.WriteString(", ")
	builder.WriteString("tag=")
	builder.WriteString(m.Tag)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", m.Order))
	builder.WriteByte(')')
	return builder.String()
}

// Mediables is a parsable slice of Mediable.
type Mediables []*Mediable
