// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lace/jsonslice"
	"saas/gen/ent/posttype"
	"saas/gen/ent/posttypeform"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostTypeFormCreate is the builder for creating a PostTypeForm entity.
type PostTypeFormCreate struct {
	config
	mutation *PostTypeFormMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (ptfc *PostTypeFormCreate) SetCreatedAt(t time.Time) *PostTypeFormCreate {
	ptfc.mutation.SetCreatedAt(t)
	return ptfc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableCreatedAt(t *time.Time) *PostTypeFormCreate {
	if t != nil {
		ptfc.SetCreatedAt(*t)
	}
	return ptfc
}

// SetUpdatedAt sets the "updated_at" field.
func (ptfc *PostTypeFormCreate) SetUpdatedAt(t time.Time) *PostTypeFormCreate {
	ptfc.mutation.SetUpdatedAt(t)
	return ptfc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableUpdatedAt(t *time.Time) *PostTypeFormCreate {
	if t != nil {
		ptfc.SetUpdatedAt(*t)
	}
	return ptfc
}

// SetAppID sets the "app_id" field.
func (ptfc *PostTypeFormCreate) SetAppID(s string) *PostTypeFormCreate {
	ptfc.mutation.SetAppID(s)
	return ptfc
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableAppID(s *string) *PostTypeFormCreate {
	if s != nil {
		ptfc.SetAppID(*s)
	}
	return ptfc
}

// SetName sets the "name" field.
func (ptfc *PostTypeFormCreate) SetName(s string) *PostTypeFormCreate {
	ptfc.mutation.SetName(s)
	return ptfc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableName(s *string) *PostTypeFormCreate {
	if s != nil {
		ptfc.SetName(*s)
	}
	return ptfc
}

// SetStatus sets the "status" field.
func (ptfc *PostTypeFormCreate) SetStatus(b bool) *PostTypeFormCreate {
	ptfc.mutation.SetStatus(b)
	return ptfc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableStatus(b *bool) *PostTypeFormCreate {
	if b != nil {
		ptfc.SetStatus(*b)
	}
	return ptfc
}

// SetPostTypeID sets the "post_type_id" field.
func (ptfc *PostTypeFormCreate) SetPostTypeID(s string) *PostTypeFormCreate {
	ptfc.mutation.SetPostTypeID(s)
	return ptfc
}

// SetNillablePostTypeID sets the "post_type_id" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillablePostTypeID(s *string) *PostTypeFormCreate {
	if s != nil {
		ptfc.SetPostTypeID(*s)
	}
	return ptfc
}

// SetBody sets the "body" field.
func (ptfc *PostTypeFormCreate) SetBody(js jsonslice.JsonSlice) *PostTypeFormCreate {
	ptfc.mutation.SetBody(js)
	return ptfc
}

// SetID sets the "id" field.
func (ptfc *PostTypeFormCreate) SetID(s string) *PostTypeFormCreate {
	ptfc.mutation.SetID(s)
	return ptfc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ptfc *PostTypeFormCreate) SetNillableID(s *string) *PostTypeFormCreate {
	if s != nil {
		ptfc.SetID(*s)
	}
	return ptfc
}

// SetPostType sets the "post_type" edge to the PostType entity.
func (ptfc *PostTypeFormCreate) SetPostType(p *PostType) *PostTypeFormCreate {
	return ptfc.SetPostTypeID(p.ID)
}

// Mutation returns the PostTypeFormMutation object of the builder.
func (ptfc *PostTypeFormCreate) Mutation() *PostTypeFormMutation {
	return ptfc.mutation
}

// Save creates the PostTypeForm in the database.
func (ptfc *PostTypeFormCreate) Save(ctx context.Context) (*PostTypeForm, error) {
	ptfc.defaults()
	return withHooks(ctx, ptfc.sqlSave, ptfc.mutation, ptfc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ptfc *PostTypeFormCreate) SaveX(ctx context.Context) *PostTypeForm {
	v, err := ptfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptfc *PostTypeFormCreate) Exec(ctx context.Context) error {
	_, err := ptfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfc *PostTypeFormCreate) ExecX(ctx context.Context) {
	if err := ptfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptfc *PostTypeFormCreate) defaults() {
	if _, ok := ptfc.mutation.CreatedAt(); !ok {
		v := posttypeform.DefaultCreatedAt()
		ptfc.mutation.SetCreatedAt(v)
	}
	if _, ok := ptfc.mutation.UpdatedAt(); !ok {
		v := posttypeform.DefaultUpdatedAt()
		ptfc.mutation.SetUpdatedAt(v)
	}
	if _, ok := ptfc.mutation.ID(); !ok {
		v := posttypeform.DefaultID()
		ptfc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptfc *PostTypeFormCreate) check() error {
	return nil
}

func (ptfc *PostTypeFormCreate) sqlSave(ctx context.Context) (*PostTypeForm, error) {
	if err := ptfc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ptfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ptfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected PostTypeForm.ID type: %T", _spec.ID.Value)
		}
	}
	ptfc.mutation.id = &_node.ID
	ptfc.mutation.done = true
	return _node, nil
}

func (ptfc *PostTypeFormCreate) createSpec() (*PostTypeForm, *sqlgraph.CreateSpec) {
	var (
		_node = &PostTypeForm{config: ptfc.config}
		_spec = sqlgraph.NewCreateSpec(posttypeform.Table, sqlgraph.NewFieldSpec(posttypeform.FieldID, field.TypeString))
	)
	_spec.OnConflict = ptfc.conflict
	if id, ok := ptfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ptfc.mutation.CreatedAt(); ok {
		_spec.SetField(posttypeform.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ptfc.mutation.UpdatedAt(); ok {
		_spec.SetField(posttypeform.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ptfc.mutation.AppID(); ok {
		_spec.SetField(posttypeform.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := ptfc.mutation.Name(); ok {
		_spec.SetField(posttypeform.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ptfc.mutation.Status(); ok {
		_spec.SetField(posttypeform.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	if value, ok := ptfc.mutation.Body(); ok {
		_spec.SetField(posttypeform.FieldBody, field.TypeJSON, value)
		_node.Body = value
	}
	if nodes := ptfc.mutation.PostTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posttypeform.PostTypeTable,
			Columns: []string{posttypeform.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.PostTypeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostTypeForm.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostTypeFormUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptfc *PostTypeFormCreate) OnConflict(opts ...sql.ConflictOption) *PostTypeFormUpsertOne {
	ptfc.conflict = opts
	return &PostTypeFormUpsertOne{
		create: ptfc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptfc *PostTypeFormCreate) OnConflictColumns(columns ...string) *PostTypeFormUpsertOne {
	ptfc.conflict = append(ptfc.conflict, sql.ConflictColumns(columns...))
	return &PostTypeFormUpsertOne{
		create: ptfc,
	}
}

type (
	// PostTypeFormUpsertOne is the builder for "upsert"-ing
	//  one PostTypeForm node.
	PostTypeFormUpsertOne struct {
		create *PostTypeFormCreate
	}

	// PostTypeFormUpsert is the "OnConflict" setter.
	PostTypeFormUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTypeFormUpsert) SetUpdatedAt(v time.Time) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdateUpdatedAt() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostTypeFormUpsert) ClearUpdatedAt() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *PostTypeFormUpsert) SetAppID(v string) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdateAppID() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostTypeFormUpsert) ClearAppID() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *PostTypeFormUpsert) SetName(v string) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdateName() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *PostTypeFormUpsert) ClearName() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldName)
	return u
}

// SetStatus sets the "status" field.
func (u *PostTypeFormUpsert) SetStatus(v bool) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdateStatus() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PostTypeFormUpsert) ClearStatus() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldStatus)
	return u
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostTypeFormUpsert) SetPostTypeID(v string) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldPostTypeID, v)
	return u
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdatePostTypeID() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldPostTypeID)
	return u
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostTypeFormUpsert) ClearPostTypeID() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldPostTypeID)
	return u
}

// SetBody sets the "body" field.
func (u *PostTypeFormUpsert) SetBody(v jsonslice.JsonSlice) *PostTypeFormUpsert {
	u.Set(posttypeform.FieldBody, v)
	return u
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostTypeFormUpsert) UpdateBody() *PostTypeFormUpsert {
	u.SetExcluded(posttypeform.FieldBody)
	return u
}

// ClearBody clears the value of the "body" field.
func (u *PostTypeFormUpsert) ClearBody() *PostTypeFormUpsert {
	u.SetNull(posttypeform.FieldBody)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(posttypeform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostTypeFormUpsertOne) UpdateNewValues() *PostTypeFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(posttypeform.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(posttypeform.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PostTypeFormUpsertOne) Ignore() *PostTypeFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostTypeFormUpsertOne) DoNothing() *PostTypeFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostTypeFormCreate.OnConflict
// documentation for more info.
func (u *PostTypeFormUpsertOne) Update(set func(*PostTypeFormUpsert)) *PostTypeFormUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostTypeFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTypeFormUpsertOne) SetUpdatedAt(v time.Time) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdateUpdatedAt() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostTypeFormUpsertOne) ClearUpdatedAt() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PostTypeFormUpsertOne) SetAppID(v string) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdateAppID() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostTypeFormUpsertOne) ClearAppID() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PostTypeFormUpsertOne) SetName(v string) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdateName() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostTypeFormUpsertOne) ClearName() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *PostTypeFormUpsertOne) SetStatus(v bool) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdateStatus() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostTypeFormUpsertOne) ClearStatus() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearStatus()
	})
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostTypeFormUpsertOne) SetPostTypeID(v string) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetPostTypeID(v)
	})
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdatePostTypeID() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdatePostTypeID()
	})
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostTypeFormUpsertOne) ClearPostTypeID() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearPostTypeID()
	})
}

// SetBody sets the "body" field.
func (u *PostTypeFormUpsertOne) SetBody(v jsonslice.JsonSlice) *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostTypeFormUpsertOne) UpdateBody() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *PostTypeFormUpsertOne) ClearBody() *PostTypeFormUpsertOne {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearBody()
	})
}

// Exec executes the query.
func (u *PostTypeFormUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostTypeFormCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostTypeFormUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PostTypeFormUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PostTypeFormUpsertOne.ID is not supported by MySQL driver. Use PostTypeFormUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PostTypeFormUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PostTypeFormCreateBulk is the builder for creating many PostTypeForm entities in bulk.
type PostTypeFormCreateBulk struct {
	config
	err      error
	builders []*PostTypeFormCreate
	conflict []sql.ConflictOption
}

// Save creates the PostTypeForm entities in the database.
func (ptfcb *PostTypeFormCreateBulk) Save(ctx context.Context) ([]*PostTypeForm, error) {
	if ptfcb.err != nil {
		return nil, ptfcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ptfcb.builders))
	nodes := make([]*PostTypeForm, len(ptfcb.builders))
	mutators := make([]Mutator, len(ptfcb.builders))
	for i := range ptfcb.builders {
		func(i int, root context.Context) {
			builder := ptfcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PostTypeFormMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ptfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ptfcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ptfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ptfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ptfcb *PostTypeFormCreateBulk) SaveX(ctx context.Context) []*PostTypeForm {
	v, err := ptfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ptfcb *PostTypeFormCreateBulk) Exec(ctx context.Context) error {
	_, err := ptfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfcb *PostTypeFormCreateBulk) ExecX(ctx context.Context) {
	if err := ptfcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PostTypeForm.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PostTypeFormUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (ptfcb *PostTypeFormCreateBulk) OnConflict(opts ...sql.ConflictOption) *PostTypeFormUpsertBulk {
	ptfcb.conflict = opts
	return &PostTypeFormUpsertBulk{
		create: ptfcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ptfcb *PostTypeFormCreateBulk) OnConflictColumns(columns ...string) *PostTypeFormUpsertBulk {
	ptfcb.conflict = append(ptfcb.conflict, sql.ConflictColumns(columns...))
	return &PostTypeFormUpsertBulk{
		create: ptfcb,
	}
}

// PostTypeFormUpsertBulk is the builder for "upsert"-ing
// a bulk of PostTypeForm nodes.
type PostTypeFormUpsertBulk struct {
	create *PostTypeFormCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(posttypeform.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *PostTypeFormUpsertBulk) UpdateNewValues() *PostTypeFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(posttypeform.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(posttypeform.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PostTypeForm.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PostTypeFormUpsertBulk) Ignore() *PostTypeFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PostTypeFormUpsertBulk) DoNothing() *PostTypeFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PostTypeFormCreateBulk.OnConflict
// documentation for more info.
func (u *PostTypeFormUpsertBulk) Update(set func(*PostTypeFormUpsert)) *PostTypeFormUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PostTypeFormUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PostTypeFormUpsertBulk) SetUpdatedAt(v time.Time) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdateUpdatedAt() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *PostTypeFormUpsertBulk) ClearUpdatedAt() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *PostTypeFormUpsertBulk) SetAppID(v string) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdateAppID() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *PostTypeFormUpsertBulk) ClearAppID() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *PostTypeFormUpsertBulk) SetName(v string) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdateName() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *PostTypeFormUpsertBulk) ClearName() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearName()
	})
}

// SetStatus sets the "status" field.
func (u *PostTypeFormUpsertBulk) SetStatus(v bool) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdateStatus() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PostTypeFormUpsertBulk) ClearStatus() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearStatus()
	})
}

// SetPostTypeID sets the "post_type_id" field.
func (u *PostTypeFormUpsertBulk) SetPostTypeID(v string) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetPostTypeID(v)
	})
}

// UpdatePostTypeID sets the "post_type_id" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdatePostTypeID() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdatePostTypeID()
	})
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (u *PostTypeFormUpsertBulk) ClearPostTypeID() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearPostTypeID()
	})
}

// SetBody sets the "body" field.
func (u *PostTypeFormUpsertBulk) SetBody(v jsonslice.JsonSlice) *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.SetBody(v)
	})
}

// UpdateBody sets the "body" field to the value that was provided on create.
func (u *PostTypeFormUpsertBulk) UpdateBody() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.UpdateBody()
	})
}

// ClearBody clears the value of the "body" field.
func (u *PostTypeFormUpsertBulk) ClearBody() *PostTypeFormUpsertBulk {
	return u.Update(func(s *PostTypeFormUpsert) {
		s.ClearBody()
	})
}

// Exec executes the query.
func (u *PostTypeFormUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PostTypeFormCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PostTypeFormCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PostTypeFormUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
