// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceinvite"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// WorkspaceInvite is the model entity for the WorkspaceInvite schema.
type WorkspaceInvite struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// WorkspaceID holds the value of the "workspace_id" field.
	WorkspaceID string `json:"workspace_id,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WorkspaceInviteQuery when eager-loading is set.
	Edges        WorkspaceInviteEdges `json:"edges"`
	selectValues sql.SelectValues
}

// WorkspaceInviteEdges holds the relations/edges for other nodes in the graph.
type WorkspaceInviteEdges struct {
	// Workspace holds the value of the workspace edge.
	Workspace *Workspace `json:"workspace,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
	// totalCount holds the count of the edges above.
	totalCount [1]map[string]int
}

// WorkspaceOrErr returns the Workspace value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WorkspaceInviteEdges) WorkspaceOrErr() (*Workspace, error) {
	if e.Workspace != nil {
		return e.Workspace, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: workspace.Label}
	}
	return nil, &NotLoadedError{edge: "workspace"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WorkspaceInvite) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case workspaceinvite.FieldID, workspaceinvite.FieldAppID, workspaceinvite.FieldWorkspaceID, workspaceinvite.FieldEmail, workspaceinvite.FieldRole:
			values[i] = new(sql.NullString)
		case workspaceinvite.FieldCreatedAt, workspaceinvite.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WorkspaceInvite fields.
func (wi *WorkspaceInvite) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case workspaceinvite.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				wi.ID = value.String
			}
		case workspaceinvite.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				wi.CreatedAt = value.Time
			}
		case workspaceinvite.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				wi.UpdatedAt = value.Time
			}
		case workspaceinvite.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				wi.AppID = value.String
			}
		case workspaceinvite.FieldWorkspaceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field workspace_id", values[i])
			} else if value.Valid {
				wi.WorkspaceID = value.String
			}
		case workspaceinvite.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				wi.Email = value.String
			}
		case workspaceinvite.FieldRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field role", values[i])
			} else if value.Valid {
				wi.Role = value.String
			}
		default:
			wi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WorkspaceInvite.
// This includes values selected through modifiers, order, etc.
func (wi *WorkspaceInvite) Value(name string) (ent.Value, error) {
	return wi.selectValues.Get(name)
}

// QueryWorkspace queries the "workspace" edge of the WorkspaceInvite entity.
func (wi *WorkspaceInvite) QueryWorkspace() *WorkspaceQuery {
	return NewWorkspaceInviteClient(wi.config).QueryWorkspace(wi)
}

// Update returns a builder for updating this WorkspaceInvite.
// Note that you need to call WorkspaceInvite.Unwrap() before calling this method if this WorkspaceInvite
// was returned from a transaction, and the transaction was committed or rolled back.
func (wi *WorkspaceInvite) Update() *WorkspaceInviteUpdateOne {
	return NewWorkspaceInviteClient(wi.config).UpdateOne(wi)
}

// Unwrap unwraps the WorkspaceInvite entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wi *WorkspaceInvite) Unwrap() *WorkspaceInvite {
	_tx, ok := wi.config.driver.(*txDriver)
	if !ok {
		panic("ent: WorkspaceInvite is not a transactional entity")
	}
	wi.config.driver = _tx.drv
	return wi
}

// String implements the fmt.Stringer.
func (wi *WorkspaceInvite) String() string {
	var builder strings.Builder
	builder.WriteString("WorkspaceInvite(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wi.ID))
	builder.WriteString("created_at=")
	builder.WriteString(wi.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(wi.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(wi.AppID)
	builder.WriteString(", ")
	builder.WriteString("workspace_id=")
	builder.WriteString(wi.WorkspaceID)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(wi.Email)
	builder.WriteString(", ")
	builder.WriteString("role=")
	builder.WriteString(wi.Role)
	builder.WriteByte(')')
	return builder.String()
}

// WorkspaceInvites is a parsable slice of WorkspaceInvite.
type WorkspaceInvites []*WorkspaceInvite
