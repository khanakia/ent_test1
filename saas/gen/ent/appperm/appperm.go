// Code generated by ent, DO NOT EDIT.

package appperm

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the appperm type in the database.
	Label = "app_perm"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldAppID holds the string denoting the app_id field in the database.
	FieldAppID = "app_id"
	// EdgeApp holds the string denoting the app edge name in mutations.
	EdgeApp = "app"
	// EdgeAppRoles holds the string denoting the app_roles edge name in mutations.
	EdgeAppRoles = "app_roles"
	// EdgeAppRolePerms holds the string denoting the app_role_perms edge name in mutations.
	EdgeAppRolePerms = "app_role_perms"
	// Table holds the table name of the appperm in the database.
	Table = "app_perms"
	// AppTable is the table that holds the app relation/edge.
	AppTable = "app_perms"
	// AppInverseTable is the table name for the App entity.
	// It exists in this package in order to avoid circular dependency with the "app" package.
	AppInverseTable = "apps"
	// AppColumn is the table column denoting the app relation/edge.
	AppColumn = "app_id"
	// AppRolesTable is the table that holds the app_roles relation/edge. The primary key declared below.
	AppRolesTable = "app_role_perms"
	// AppRolesInverseTable is the table name for the AppRole entity.
	// It exists in this package in order to avoid circular dependency with the "approle" package.
	AppRolesInverseTable = "app_roles"
	// AppRolePermsTable is the table that holds the app_role_perms relation/edge.
	AppRolePermsTable = "app_role_perms"
	// AppRolePermsInverseTable is the table name for the AppRolePerm entity.
	// It exists in this package in order to avoid circular dependency with the "approleperm" package.
	AppRolePermsInverseTable = "app_role_perms"
	// AppRolePermsColumn is the table column denoting the app_role_perms relation/edge.
	AppRolePermsColumn = "app_perm_id"
)

// Columns holds all SQL columns for appperm fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldName,
	FieldAppID,
}

var (
	// AppRolesPrimaryKey and AppRolesColumn2 are the table columns denoting the
	// primary key for the app_roles relation (M2M).
	AppRolesPrimaryKey = []string{"app_role_id", "app_perm_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the AppPerm queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByAppID orders the results by the app_id field.
func ByAppID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAppID, opts...).ToFunc()
}

// ByAppField orders the results by app field.
func ByAppField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppStep(), sql.OrderByField(field, opts...))
	}
}

// ByAppRolesCount orders the results by app_roles count.
func ByAppRolesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppRolesStep(), opts...)
	}
}

// ByAppRoles orders the results by app_roles terms.
func ByAppRoles(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppRolesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByAppRolePermsCount orders the results by app_role_perms count.
func ByAppRolePermsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newAppRolePermsStep(), opts...)
	}
}

// ByAppRolePerms orders the results by app_role_perms terms.
func ByAppRolePerms(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAppRolePermsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newAppStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, AppTable, AppColumn),
	)
}
func newAppRolesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppRolesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, AppRolesTable, AppRolesPrimaryKey...),
	)
}
func newAppRolePermsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AppRolePermsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, AppRolePermsTable, AppRolePermsColumn),
	)
}
