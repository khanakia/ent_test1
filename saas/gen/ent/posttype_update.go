// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/post"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttype"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PostTypeUpdate is the builder for updating PostType entities.
type PostTypeUpdate struct {
	config
	hooks     []Hook
	mutation  *PostTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostTypeUpdate builder.
func (ptu *PostTypeUpdate) Where(ps ...predicate.PostType) *PostTypeUpdate {
	ptu.mutation.Where(ps...)
	return ptu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptu *PostTypeUpdate) SetUpdatedAt(t time.Time) *PostTypeUpdate {
	ptu.mutation.SetUpdatedAt(t)
	return ptu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptu *PostTypeUpdate) ClearUpdatedAt() *PostTypeUpdate {
	ptu.mutation.ClearUpdatedAt()
	return ptu
}

// SetName sets the "name" field.
func (ptu *PostTypeUpdate) SetName(s string) *PostTypeUpdate {
	ptu.mutation.SetName(s)
	return ptu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableName(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetName(*s)
	}
	return ptu
}

// ClearName clears the value of the "name" field.
func (ptu *PostTypeUpdate) ClearName() *PostTypeUpdate {
	ptu.mutation.ClearName()
	return ptu
}

// SetSlug sets the "slug" field.
func (ptu *PostTypeUpdate) SetSlug(s string) *PostTypeUpdate {
	ptu.mutation.SetSlug(s)
	return ptu
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableSlug(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetSlug(*s)
	}
	return ptu
}

// ClearSlug clears the value of the "slug" field.
func (ptu *PostTypeUpdate) ClearSlug() *PostTypeUpdate {
	ptu.mutation.ClearSlug()
	return ptu
}

// SetStatus sets the "status" field.
func (ptu *PostTypeUpdate) SetStatus(po posttype.Status) *PostTypeUpdate {
	ptu.mutation.SetStatus(po)
	return ptu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableStatus(po *posttype.Status) *PostTypeUpdate {
	if po != nil {
		ptu.SetStatus(*po)
	}
	return ptu
}

// SetExcerpt sets the "excerpt" field.
func (ptu *PostTypeUpdate) SetExcerpt(s string) *PostTypeUpdate {
	ptu.mutation.SetExcerpt(s)
	return ptu
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableExcerpt(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetExcerpt(*s)
	}
	return ptu
}

// ClearExcerpt clears the value of the "excerpt" field.
func (ptu *PostTypeUpdate) ClearExcerpt() *PostTypeUpdate {
	ptu.mutation.ClearExcerpt()
	return ptu
}

// SetContent sets the "content" field.
func (ptu *PostTypeUpdate) SetContent(s string) *PostTypeUpdate {
	ptu.mutation.SetContent(s)
	return ptu
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableContent(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetContent(*s)
	}
	return ptu
}

// ClearContent clears the value of the "content" field.
func (ptu *PostTypeUpdate) ClearContent() *PostTypeUpdate {
	ptu.mutation.ClearContent()
	return ptu
}

// SetMetaTitle sets the "meta_title" field.
func (ptu *PostTypeUpdate) SetMetaTitle(s string) *PostTypeUpdate {
	ptu.mutation.SetMetaTitle(s)
	return ptu
}

// SetNillableMetaTitle sets the "meta_title" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableMetaTitle(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetMetaTitle(*s)
	}
	return ptu
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (ptu *PostTypeUpdate) ClearMetaTitle() *PostTypeUpdate {
	ptu.mutation.ClearMetaTitle()
	return ptu
}

// SetMetaDescr sets the "meta_descr" field.
func (ptu *PostTypeUpdate) SetMetaDescr(s string) *PostTypeUpdate {
	ptu.mutation.SetMetaDescr(s)
	return ptu
}

// SetNillableMetaDescr sets the "meta_descr" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableMetaDescr(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetMetaDescr(*s)
	}
	return ptu
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (ptu *PostTypeUpdate) ClearMetaDescr() *PostTypeUpdate {
	ptu.mutation.ClearMetaDescr()
	return ptu
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (ptu *PostTypeUpdate) SetMetaCanonicalURL(s string) *PostTypeUpdate {
	ptu.mutation.SetMetaCanonicalURL(s)
	return ptu
}

// SetNillableMetaCanonicalURL sets the "meta_canonical_url" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableMetaCanonicalURL(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetMetaCanonicalURL(*s)
	}
	return ptu
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (ptu *PostTypeUpdate) ClearMetaCanonicalURL() *PostTypeUpdate {
	ptu.mutation.ClearMetaCanonicalURL()
	return ptu
}

// SetMetaRobots sets the "meta_robots" field.
func (ptu *PostTypeUpdate) SetMetaRobots(s string) *PostTypeUpdate {
	ptu.mutation.SetMetaRobots(s)
	return ptu
}

// SetNillableMetaRobots sets the "meta_robots" field if the given value is not nil.
func (ptu *PostTypeUpdate) SetNillableMetaRobots(s *string) *PostTypeUpdate {
	if s != nil {
		ptu.SetMetaRobots(*s)
	}
	return ptu
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (ptu *PostTypeUpdate) ClearMetaRobots() *PostTypeUpdate {
	ptu.mutation.ClearMetaRobots()
	return ptu
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (ptu *PostTypeUpdate) AddPostIDs(ids ...string) *PostTypeUpdate {
	ptu.mutation.AddPostIDs(ids...)
	return ptu
}

// AddPosts adds the "posts" edges to the Post entity.
func (ptu *PostTypeUpdate) AddPosts(p ...*Post) *PostTypeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddPostIDs(ids...)
}

// AddPostStatusIDs adds the "post_statuses" edge to the PostStatus entity by IDs.
func (ptu *PostTypeUpdate) AddPostStatusIDs(ids ...string) *PostTypeUpdate {
	ptu.mutation.AddPostStatusIDs(ids...)
	return ptu
}

// AddPostStatuses adds the "post_statuses" edges to the PostStatus entity.
func (ptu *PostTypeUpdate) AddPostStatuses(p ...*PostStatus) *PostTypeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.AddPostStatusIDs(ids...)
}

// Mutation returns the PostTypeMutation object of the builder.
func (ptu *PostTypeUpdate) Mutation() *PostTypeMutation {
	return ptu.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (ptu *PostTypeUpdate) ClearPosts() *PostTypeUpdate {
	ptu.mutation.ClearPosts()
	return ptu
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (ptu *PostTypeUpdate) RemovePostIDs(ids ...string) *PostTypeUpdate {
	ptu.mutation.RemovePostIDs(ids...)
	return ptu
}

// RemovePosts removes "posts" edges to Post entities.
func (ptu *PostTypeUpdate) RemovePosts(p ...*Post) *PostTypeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemovePostIDs(ids...)
}

// ClearPostStatuses clears all "post_statuses" edges to the PostStatus entity.
func (ptu *PostTypeUpdate) ClearPostStatuses() *PostTypeUpdate {
	ptu.mutation.ClearPostStatuses()
	return ptu
}

// RemovePostStatusIDs removes the "post_statuses" edge to PostStatus entities by IDs.
func (ptu *PostTypeUpdate) RemovePostStatusIDs(ids ...string) *PostTypeUpdate {
	ptu.mutation.RemovePostStatusIDs(ids...)
	return ptu
}

// RemovePostStatuses removes "post_statuses" edges to PostStatus entities.
func (ptu *PostTypeUpdate) RemovePostStatuses(p ...*PostStatus) *PostTypeUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptu.RemovePostStatusIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptu *PostTypeUpdate) Save(ctx context.Context) (int, error) {
	ptu.defaults()
	return withHooks(ctx, ptu.sqlSave, ptu.mutation, ptu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptu *PostTypeUpdate) SaveX(ctx context.Context) int {
	affected, err := ptu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptu *PostTypeUpdate) Exec(ctx context.Context) error {
	_, err := ptu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptu *PostTypeUpdate) ExecX(ctx context.Context) {
	if err := ptu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptu *PostTypeUpdate) defaults() {
	if _, ok := ptu.mutation.UpdatedAt(); !ok && !ptu.mutation.UpdatedAtCleared() {
		v := posttype.UpdateDefaultUpdatedAt()
		ptu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptu *PostTypeUpdate) check() error {
	if v, ok := ptu.mutation.Status(); ok {
		if err := posttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PostType.status": %w`, err)}
		}
	}
	if v, ok := ptu.mutation.Content(); ok {
		if err := posttype.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PostType.content": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptu *PostTypeUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTypeUpdate {
	ptu.modifiers = append(ptu.modifiers, modifiers...)
	return ptu
}

func (ptu *PostTypeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ptu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(posttype.Table, posttype.Columns, sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString))
	if ps := ptu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptu.mutation.CreatedAtCleared() {
		_spec.ClearField(posttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.UpdatedAt(); ok {
		_spec.SetField(posttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptu.mutation.UpdatedAtCleared() {
		_spec.ClearField(posttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ptu.mutation.Name(); ok {
		_spec.SetField(posttype.FieldName, field.TypeString, value)
	}
	if ptu.mutation.NameCleared() {
		_spec.ClearField(posttype.FieldName, field.TypeString)
	}
	if value, ok := ptu.mutation.Slug(); ok {
		_spec.SetField(posttype.FieldSlug, field.TypeString, value)
	}
	if ptu.mutation.SlugCleared() {
		_spec.ClearField(posttype.FieldSlug, field.TypeString)
	}
	if value, ok := ptu.mutation.Status(); ok {
		_spec.SetField(posttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ptu.mutation.Excerpt(); ok {
		_spec.SetField(posttype.FieldExcerpt, field.TypeString, value)
	}
	if ptu.mutation.ExcerptCleared() {
		_spec.ClearField(posttype.FieldExcerpt, field.TypeString)
	}
	if value, ok := ptu.mutation.Content(); ok {
		_spec.SetField(posttype.FieldContent, field.TypeString, value)
	}
	if ptu.mutation.ContentCleared() {
		_spec.ClearField(posttype.FieldContent, field.TypeString)
	}
	if value, ok := ptu.mutation.MetaTitle(); ok {
		_spec.SetField(posttype.FieldMetaTitle, field.TypeString, value)
	}
	if ptu.mutation.MetaTitleCleared() {
		_spec.ClearField(posttype.FieldMetaTitle, field.TypeString)
	}
	if value, ok := ptu.mutation.MetaDescr(); ok {
		_spec.SetField(posttype.FieldMetaDescr, field.TypeString, value)
	}
	if ptu.mutation.MetaDescrCleared() {
		_spec.ClearField(posttype.FieldMetaDescr, field.TypeString)
	}
	if value, ok := ptu.mutation.MetaCanonicalURL(); ok {
		_spec.SetField(posttype.FieldMetaCanonicalURL, field.TypeString, value)
	}
	if ptu.mutation.MetaCanonicalURLCleared() {
		_spec.ClearField(posttype.FieldMetaCanonicalURL, field.TypeString)
	}
	if value, ok := ptu.mutation.MetaRobots(); ok {
		_spec.SetField(posttype.FieldMetaRobots, field.TypeString, value)
	}
	if ptu.mutation.MetaRobotsCleared() {
		_spec.ClearField(posttype.FieldMetaRobots, field.TypeString)
	}
	if ptu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedPostsIDs(); len(nodes) > 0 && !ptu.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptu.mutation.PostStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.RemovedPostStatusesIDs(); len(nodes) > 0 && !ptu.mutation.PostStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptu.mutation.PostStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptu.mutation.done = true
	return n, nil
}

// PostTypeUpdateOne is the builder for updating a single PostType entity.
type PostTypeUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostTypeMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ptuo *PostTypeUpdateOne) SetUpdatedAt(t time.Time) *PostTypeUpdateOne {
	ptuo.mutation.SetUpdatedAt(t)
	return ptuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptuo *PostTypeUpdateOne) ClearUpdatedAt() *PostTypeUpdateOne {
	ptuo.mutation.ClearUpdatedAt()
	return ptuo
}

// SetName sets the "name" field.
func (ptuo *PostTypeUpdateOne) SetName(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetName(s)
	return ptuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableName(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetName(*s)
	}
	return ptuo
}

// ClearName clears the value of the "name" field.
func (ptuo *PostTypeUpdateOne) ClearName() *PostTypeUpdateOne {
	ptuo.mutation.ClearName()
	return ptuo
}

// SetSlug sets the "slug" field.
func (ptuo *PostTypeUpdateOne) SetSlug(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetSlug(s)
	return ptuo
}

// SetNillableSlug sets the "slug" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableSlug(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetSlug(*s)
	}
	return ptuo
}

// ClearSlug clears the value of the "slug" field.
func (ptuo *PostTypeUpdateOne) ClearSlug() *PostTypeUpdateOne {
	ptuo.mutation.ClearSlug()
	return ptuo
}

// SetStatus sets the "status" field.
func (ptuo *PostTypeUpdateOne) SetStatus(po posttype.Status) *PostTypeUpdateOne {
	ptuo.mutation.SetStatus(po)
	return ptuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableStatus(po *posttype.Status) *PostTypeUpdateOne {
	if po != nil {
		ptuo.SetStatus(*po)
	}
	return ptuo
}

// SetExcerpt sets the "excerpt" field.
func (ptuo *PostTypeUpdateOne) SetExcerpt(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetExcerpt(s)
	return ptuo
}

// SetNillableExcerpt sets the "excerpt" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableExcerpt(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetExcerpt(*s)
	}
	return ptuo
}

// ClearExcerpt clears the value of the "excerpt" field.
func (ptuo *PostTypeUpdateOne) ClearExcerpt() *PostTypeUpdateOne {
	ptuo.mutation.ClearExcerpt()
	return ptuo
}

// SetContent sets the "content" field.
func (ptuo *PostTypeUpdateOne) SetContent(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetContent(s)
	return ptuo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableContent(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetContent(*s)
	}
	return ptuo
}

// ClearContent clears the value of the "content" field.
func (ptuo *PostTypeUpdateOne) ClearContent() *PostTypeUpdateOne {
	ptuo.mutation.ClearContent()
	return ptuo
}

// SetMetaTitle sets the "meta_title" field.
func (ptuo *PostTypeUpdateOne) SetMetaTitle(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetMetaTitle(s)
	return ptuo
}

// SetNillableMetaTitle sets the "meta_title" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableMetaTitle(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetMetaTitle(*s)
	}
	return ptuo
}

// ClearMetaTitle clears the value of the "meta_title" field.
func (ptuo *PostTypeUpdateOne) ClearMetaTitle() *PostTypeUpdateOne {
	ptuo.mutation.ClearMetaTitle()
	return ptuo
}

// SetMetaDescr sets the "meta_descr" field.
func (ptuo *PostTypeUpdateOne) SetMetaDescr(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetMetaDescr(s)
	return ptuo
}

// SetNillableMetaDescr sets the "meta_descr" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableMetaDescr(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetMetaDescr(*s)
	}
	return ptuo
}

// ClearMetaDescr clears the value of the "meta_descr" field.
func (ptuo *PostTypeUpdateOne) ClearMetaDescr() *PostTypeUpdateOne {
	ptuo.mutation.ClearMetaDescr()
	return ptuo
}

// SetMetaCanonicalURL sets the "meta_canonical_url" field.
func (ptuo *PostTypeUpdateOne) SetMetaCanonicalURL(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetMetaCanonicalURL(s)
	return ptuo
}

// SetNillableMetaCanonicalURL sets the "meta_canonical_url" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableMetaCanonicalURL(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetMetaCanonicalURL(*s)
	}
	return ptuo
}

// ClearMetaCanonicalURL clears the value of the "meta_canonical_url" field.
func (ptuo *PostTypeUpdateOne) ClearMetaCanonicalURL() *PostTypeUpdateOne {
	ptuo.mutation.ClearMetaCanonicalURL()
	return ptuo
}

// SetMetaRobots sets the "meta_robots" field.
func (ptuo *PostTypeUpdateOne) SetMetaRobots(s string) *PostTypeUpdateOne {
	ptuo.mutation.SetMetaRobots(s)
	return ptuo
}

// SetNillableMetaRobots sets the "meta_robots" field if the given value is not nil.
func (ptuo *PostTypeUpdateOne) SetNillableMetaRobots(s *string) *PostTypeUpdateOne {
	if s != nil {
		ptuo.SetMetaRobots(*s)
	}
	return ptuo
}

// ClearMetaRobots clears the value of the "meta_robots" field.
func (ptuo *PostTypeUpdateOne) ClearMetaRobots() *PostTypeUpdateOne {
	ptuo.mutation.ClearMetaRobots()
	return ptuo
}

// AddPostIDs adds the "posts" edge to the Post entity by IDs.
func (ptuo *PostTypeUpdateOne) AddPostIDs(ids ...string) *PostTypeUpdateOne {
	ptuo.mutation.AddPostIDs(ids...)
	return ptuo
}

// AddPosts adds the "posts" edges to the Post entity.
func (ptuo *PostTypeUpdateOne) AddPosts(p ...*Post) *PostTypeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddPostIDs(ids...)
}

// AddPostStatusIDs adds the "post_statuses" edge to the PostStatus entity by IDs.
func (ptuo *PostTypeUpdateOne) AddPostStatusIDs(ids ...string) *PostTypeUpdateOne {
	ptuo.mutation.AddPostStatusIDs(ids...)
	return ptuo
}

// AddPostStatuses adds the "post_statuses" edges to the PostStatus entity.
func (ptuo *PostTypeUpdateOne) AddPostStatuses(p ...*PostStatus) *PostTypeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.AddPostStatusIDs(ids...)
}

// Mutation returns the PostTypeMutation object of the builder.
func (ptuo *PostTypeUpdateOne) Mutation() *PostTypeMutation {
	return ptuo.mutation
}

// ClearPosts clears all "posts" edges to the Post entity.
func (ptuo *PostTypeUpdateOne) ClearPosts() *PostTypeUpdateOne {
	ptuo.mutation.ClearPosts()
	return ptuo
}

// RemovePostIDs removes the "posts" edge to Post entities by IDs.
func (ptuo *PostTypeUpdateOne) RemovePostIDs(ids ...string) *PostTypeUpdateOne {
	ptuo.mutation.RemovePostIDs(ids...)
	return ptuo
}

// RemovePosts removes "posts" edges to Post entities.
func (ptuo *PostTypeUpdateOne) RemovePosts(p ...*Post) *PostTypeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemovePostIDs(ids...)
}

// ClearPostStatuses clears all "post_statuses" edges to the PostStatus entity.
func (ptuo *PostTypeUpdateOne) ClearPostStatuses() *PostTypeUpdateOne {
	ptuo.mutation.ClearPostStatuses()
	return ptuo
}

// RemovePostStatusIDs removes the "post_statuses" edge to PostStatus entities by IDs.
func (ptuo *PostTypeUpdateOne) RemovePostStatusIDs(ids ...string) *PostTypeUpdateOne {
	ptuo.mutation.RemovePostStatusIDs(ids...)
	return ptuo
}

// RemovePostStatuses removes "post_statuses" edges to PostStatus entities.
func (ptuo *PostTypeUpdateOne) RemovePostStatuses(p ...*PostStatus) *PostTypeUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return ptuo.RemovePostStatusIDs(ids...)
}

// Where appends a list predicates to the PostTypeUpdate builder.
func (ptuo *PostTypeUpdateOne) Where(ps ...predicate.PostType) *PostTypeUpdateOne {
	ptuo.mutation.Where(ps...)
	return ptuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptuo *PostTypeUpdateOne) Select(field string, fields ...string) *PostTypeUpdateOne {
	ptuo.fields = append([]string{field}, fields...)
	return ptuo
}

// Save executes the query and returns the updated PostType entity.
func (ptuo *PostTypeUpdateOne) Save(ctx context.Context) (*PostType, error) {
	ptuo.defaults()
	return withHooks(ctx, ptuo.sqlSave, ptuo.mutation, ptuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptuo *PostTypeUpdateOne) SaveX(ctx context.Context) *PostType {
	node, err := ptuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptuo *PostTypeUpdateOne) Exec(ctx context.Context) error {
	_, err := ptuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptuo *PostTypeUpdateOne) ExecX(ctx context.Context) {
	if err := ptuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptuo *PostTypeUpdateOne) defaults() {
	if _, ok := ptuo.mutation.UpdatedAt(); !ok && !ptuo.mutation.UpdatedAtCleared() {
		v := posttype.UpdateDefaultUpdatedAt()
		ptuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ptuo *PostTypeUpdateOne) check() error {
	if v, ok := ptuo.mutation.Status(); ok {
		if err := posttype.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "PostType.status": %w`, err)}
		}
	}
	if v, ok := ptuo.mutation.Content(); ok {
		if err := posttype.ContentValidator(v); err != nil {
			return &ValidationError{Name: "content", err: fmt.Errorf(`ent: validator failed for field "PostType.content": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptuo *PostTypeUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTypeUpdateOne {
	ptuo.modifiers = append(ptuo.modifiers, modifiers...)
	return ptuo
}

func (ptuo *PostTypeUpdateOne) sqlSave(ctx context.Context) (_node *PostType, err error) {
	if err := ptuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(posttype.Table, posttype.Columns, sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString))
	id, ok := ptuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostType.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posttype.FieldID)
		for _, f := range fields {
			if !posttype.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posttype.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptuo.mutation.CreatedAtCleared() {
		_spec.ClearField(posttype.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.UpdatedAt(); ok {
		_spec.SetField(posttype.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(posttype.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ptuo.mutation.Name(); ok {
		_spec.SetField(posttype.FieldName, field.TypeString, value)
	}
	if ptuo.mutation.NameCleared() {
		_spec.ClearField(posttype.FieldName, field.TypeString)
	}
	if value, ok := ptuo.mutation.Slug(); ok {
		_spec.SetField(posttype.FieldSlug, field.TypeString, value)
	}
	if ptuo.mutation.SlugCleared() {
		_spec.ClearField(posttype.FieldSlug, field.TypeString)
	}
	if value, ok := ptuo.mutation.Status(); ok {
		_spec.SetField(posttype.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := ptuo.mutation.Excerpt(); ok {
		_spec.SetField(posttype.FieldExcerpt, field.TypeString, value)
	}
	if ptuo.mutation.ExcerptCleared() {
		_spec.ClearField(posttype.FieldExcerpt, field.TypeString)
	}
	if value, ok := ptuo.mutation.Content(); ok {
		_spec.SetField(posttype.FieldContent, field.TypeString, value)
	}
	if ptuo.mutation.ContentCleared() {
		_spec.ClearField(posttype.FieldContent, field.TypeString)
	}
	if value, ok := ptuo.mutation.MetaTitle(); ok {
		_spec.SetField(posttype.FieldMetaTitle, field.TypeString, value)
	}
	if ptuo.mutation.MetaTitleCleared() {
		_spec.ClearField(posttype.FieldMetaTitle, field.TypeString)
	}
	if value, ok := ptuo.mutation.MetaDescr(); ok {
		_spec.SetField(posttype.FieldMetaDescr, field.TypeString, value)
	}
	if ptuo.mutation.MetaDescrCleared() {
		_spec.ClearField(posttype.FieldMetaDescr, field.TypeString)
	}
	if value, ok := ptuo.mutation.MetaCanonicalURL(); ok {
		_spec.SetField(posttype.FieldMetaCanonicalURL, field.TypeString, value)
	}
	if ptuo.mutation.MetaCanonicalURLCleared() {
		_spec.ClearField(posttype.FieldMetaCanonicalURL, field.TypeString)
	}
	if value, ok := ptuo.mutation.MetaRobots(); ok {
		_spec.SetField(posttype.FieldMetaRobots, field.TypeString, value)
	}
	if ptuo.mutation.MetaRobotsCleared() {
		_spec.ClearField(posttype.FieldMetaRobots, field.TypeString)
	}
	if ptuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedPostsIDs(); len(nodes) > 0 && !ptuo.mutation.PostsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PostsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostsTable,
			Columns: []string{posttype.PostsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(post.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ptuo.mutation.PostStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.RemovedPostStatusesIDs(); len(nodes) > 0 && !ptuo.mutation.PostStatusesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptuo.mutation.PostStatusesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   posttype.PostStatusesTable,
			Columns: []string{posttype.PostStatusesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(poststatus.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptuo.modifiers...)
	_node = &PostType{config: ptuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttype.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptuo.mutation.done = true
	return _node, nil
}
