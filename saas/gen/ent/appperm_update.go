// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/app"
	"saas/gen/ent/appperm"
	"saas/gen/ent/approle"
	"saas/gen/ent/approleperm"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AppPermUpdate is the builder for updating AppPerm entities.
type AppPermUpdate struct {
	config
	hooks     []Hook
	mutation  *AppPermMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AppPermUpdate builder.
func (apu *AppPermUpdate) Where(ps ...predicate.AppPerm) *AppPermUpdate {
	apu.mutation.Where(ps...)
	return apu
}

// SetUpdatedAt sets the "updated_at" field.
func (apu *AppPermUpdate) SetUpdatedAt(t time.Time) *AppPermUpdate {
	apu.mutation.SetUpdatedAt(t)
	return apu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apu *AppPermUpdate) ClearUpdatedAt() *AppPermUpdate {
	apu.mutation.ClearUpdatedAt()
	return apu
}

// SetName sets the "name" field.
func (apu *AppPermUpdate) SetName(s string) *AppPermUpdate {
	apu.mutation.SetName(s)
	return apu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apu *AppPermUpdate) SetNillableName(s *string) *AppPermUpdate {
	if s != nil {
		apu.SetName(*s)
	}
	return apu
}

// ClearName clears the value of the "name" field.
func (apu *AppPermUpdate) ClearName() *AppPermUpdate {
	apu.mutation.ClearName()
	return apu
}

// SetAppID sets the "app_id" field.
func (apu *AppPermUpdate) SetAppID(s string) *AppPermUpdate {
	apu.mutation.SetAppID(s)
	return apu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (apu *AppPermUpdate) SetNillableAppID(s *string) *AppPermUpdate {
	if s != nil {
		apu.SetAppID(*s)
	}
	return apu
}

// ClearAppID clears the value of the "app_id" field.
func (apu *AppPermUpdate) ClearAppID() *AppPermUpdate {
	apu.mutation.ClearAppID()
	return apu
}

// SetApp sets the "app" edge to the App entity.
func (apu *AppPermUpdate) SetApp(a *App) *AppPermUpdate {
	return apu.SetAppID(a.ID)
}

// AddAppRoleIDs adds the "app_roles" edge to the AppRole entity by IDs.
func (apu *AppPermUpdate) AddAppRoleIDs(ids ...string) *AppPermUpdate {
	apu.mutation.AddAppRoleIDs(ids...)
	return apu
}

// AddAppRoles adds the "app_roles" edges to the AppRole entity.
func (apu *AppPermUpdate) AddAppRoles(a ...*AppRole) *AppPermUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAppRoleIDs(ids...)
}

// AddAppRolePermIDs adds the "app_role_perms" edge to the AppRolePerm entity by IDs.
func (apu *AppPermUpdate) AddAppRolePermIDs(ids ...string) *AppPermUpdate {
	apu.mutation.AddAppRolePermIDs(ids...)
	return apu
}

// AddAppRolePerms adds the "app_role_perms" edges to the AppRolePerm entity.
func (apu *AppPermUpdate) AddAppRolePerms(a ...*AppRolePerm) *AppPermUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.AddAppRolePermIDs(ids...)
}

// Mutation returns the AppPermMutation object of the builder.
func (apu *AppPermUpdate) Mutation() *AppPermMutation {
	return apu.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (apu *AppPermUpdate) ClearApp() *AppPermUpdate {
	apu.mutation.ClearApp()
	return apu
}

// ClearAppRoles clears all "app_roles" edges to the AppRole entity.
func (apu *AppPermUpdate) ClearAppRoles() *AppPermUpdate {
	apu.mutation.ClearAppRoles()
	return apu
}

// RemoveAppRoleIDs removes the "app_roles" edge to AppRole entities by IDs.
func (apu *AppPermUpdate) RemoveAppRoleIDs(ids ...string) *AppPermUpdate {
	apu.mutation.RemoveAppRoleIDs(ids...)
	return apu
}

// RemoveAppRoles removes "app_roles" edges to AppRole entities.
func (apu *AppPermUpdate) RemoveAppRoles(a ...*AppRole) *AppPermUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAppRoleIDs(ids...)
}

// ClearAppRolePerms clears all "app_role_perms" edges to the AppRolePerm entity.
func (apu *AppPermUpdate) ClearAppRolePerms() *AppPermUpdate {
	apu.mutation.ClearAppRolePerms()
	return apu
}

// RemoveAppRolePermIDs removes the "app_role_perms" edge to AppRolePerm entities by IDs.
func (apu *AppPermUpdate) RemoveAppRolePermIDs(ids ...string) *AppPermUpdate {
	apu.mutation.RemoveAppRolePermIDs(ids...)
	return apu
}

// RemoveAppRolePerms removes "app_role_perms" edges to AppRolePerm entities.
func (apu *AppPermUpdate) RemoveAppRolePerms(a ...*AppRolePerm) *AppPermUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apu.RemoveAppRolePermIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (apu *AppPermUpdate) Save(ctx context.Context) (int, error) {
	apu.defaults()
	return withHooks(ctx, apu.sqlSave, apu.mutation, apu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apu *AppPermUpdate) SaveX(ctx context.Context) int {
	affected, err := apu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (apu *AppPermUpdate) Exec(ctx context.Context) error {
	_, err := apu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apu *AppPermUpdate) ExecX(ctx context.Context) {
	if err := apu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apu *AppPermUpdate) defaults() {
	if _, ok := apu.mutation.UpdatedAt(); !ok && !apu.mutation.UpdatedAtCleared() {
		v := appperm.UpdateDefaultUpdatedAt()
		apu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apu *AppPermUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPermUpdate {
	apu.modifiers = append(apu.modifiers, modifiers...)
	return apu
}

func (apu *AppPermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(appperm.Table, appperm.Columns, sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString))
	if ps := apu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apu.mutation.CreatedAtCleared() {
		_spec.ClearField(appperm.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.UpdatedAt(); ok {
		_spec.SetField(appperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if apu.mutation.UpdatedAtCleared() {
		_spec.ClearField(appperm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apu.mutation.Name(); ok {
		_spec.SetField(appperm.FieldName, field.TypeString, value)
	}
	if apu.mutation.NameCleared() {
		_spec.ClearField(appperm.FieldName, field.TypeString)
	}
	if apu.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appperm.AppTable,
			Columns: []string{appperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appperm.AppTable,
			Columns: []string{appperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		createE := &AppRolePermCreate{config: apu.config, mutation: newAppRolePermMutation(apu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAppRolesIDs(); len(nodes) > 0 && !apu.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: apu.config, mutation: newAppRolePermMutation(apu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: apu.config, mutation: newAppRolePermMutation(apu.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apu.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.RemovedAppRolePermsIDs(); len(nodes) > 0 && !apu.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apu.mutation.AppRolePermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(apu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, apu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	apu.mutation.done = true
	return n, nil
}

// AppPermUpdateOne is the builder for updating a single AppPerm entity.
type AppPermUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AppPermMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (apuo *AppPermUpdateOne) SetUpdatedAt(t time.Time) *AppPermUpdateOne {
	apuo.mutation.SetUpdatedAt(t)
	return apuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (apuo *AppPermUpdateOne) ClearUpdatedAt() *AppPermUpdateOne {
	apuo.mutation.ClearUpdatedAt()
	return apuo
}

// SetName sets the "name" field.
func (apuo *AppPermUpdateOne) SetName(s string) *AppPermUpdateOne {
	apuo.mutation.SetName(s)
	return apuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (apuo *AppPermUpdateOne) SetNillableName(s *string) *AppPermUpdateOne {
	if s != nil {
		apuo.SetName(*s)
	}
	return apuo
}

// ClearName clears the value of the "name" field.
func (apuo *AppPermUpdateOne) ClearName() *AppPermUpdateOne {
	apuo.mutation.ClearName()
	return apuo
}

// SetAppID sets the "app_id" field.
func (apuo *AppPermUpdateOne) SetAppID(s string) *AppPermUpdateOne {
	apuo.mutation.SetAppID(s)
	return apuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (apuo *AppPermUpdateOne) SetNillableAppID(s *string) *AppPermUpdateOne {
	if s != nil {
		apuo.SetAppID(*s)
	}
	return apuo
}

// ClearAppID clears the value of the "app_id" field.
func (apuo *AppPermUpdateOne) ClearAppID() *AppPermUpdateOne {
	apuo.mutation.ClearAppID()
	return apuo
}

// SetApp sets the "app" edge to the App entity.
func (apuo *AppPermUpdateOne) SetApp(a *App) *AppPermUpdateOne {
	return apuo.SetAppID(a.ID)
}

// AddAppRoleIDs adds the "app_roles" edge to the AppRole entity by IDs.
func (apuo *AppPermUpdateOne) AddAppRoleIDs(ids ...string) *AppPermUpdateOne {
	apuo.mutation.AddAppRoleIDs(ids...)
	return apuo
}

// AddAppRoles adds the "app_roles" edges to the AppRole entity.
func (apuo *AppPermUpdateOne) AddAppRoles(a ...*AppRole) *AppPermUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAppRoleIDs(ids...)
}

// AddAppRolePermIDs adds the "app_role_perms" edge to the AppRolePerm entity by IDs.
func (apuo *AppPermUpdateOne) AddAppRolePermIDs(ids ...string) *AppPermUpdateOne {
	apuo.mutation.AddAppRolePermIDs(ids...)
	return apuo
}

// AddAppRolePerms adds the "app_role_perms" edges to the AppRolePerm entity.
func (apuo *AppPermUpdateOne) AddAppRolePerms(a ...*AppRolePerm) *AppPermUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.AddAppRolePermIDs(ids...)
}

// Mutation returns the AppPermMutation object of the builder.
func (apuo *AppPermUpdateOne) Mutation() *AppPermMutation {
	return apuo.mutation
}

// ClearApp clears the "app" edge to the App entity.
func (apuo *AppPermUpdateOne) ClearApp() *AppPermUpdateOne {
	apuo.mutation.ClearApp()
	return apuo
}

// ClearAppRoles clears all "app_roles" edges to the AppRole entity.
func (apuo *AppPermUpdateOne) ClearAppRoles() *AppPermUpdateOne {
	apuo.mutation.ClearAppRoles()
	return apuo
}

// RemoveAppRoleIDs removes the "app_roles" edge to AppRole entities by IDs.
func (apuo *AppPermUpdateOne) RemoveAppRoleIDs(ids ...string) *AppPermUpdateOne {
	apuo.mutation.RemoveAppRoleIDs(ids...)
	return apuo
}

// RemoveAppRoles removes "app_roles" edges to AppRole entities.
func (apuo *AppPermUpdateOne) RemoveAppRoles(a ...*AppRole) *AppPermUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAppRoleIDs(ids...)
}

// ClearAppRolePerms clears all "app_role_perms" edges to the AppRolePerm entity.
func (apuo *AppPermUpdateOne) ClearAppRolePerms() *AppPermUpdateOne {
	apuo.mutation.ClearAppRolePerms()
	return apuo
}

// RemoveAppRolePermIDs removes the "app_role_perms" edge to AppRolePerm entities by IDs.
func (apuo *AppPermUpdateOne) RemoveAppRolePermIDs(ids ...string) *AppPermUpdateOne {
	apuo.mutation.RemoveAppRolePermIDs(ids...)
	return apuo
}

// RemoveAppRolePerms removes "app_role_perms" edges to AppRolePerm entities.
func (apuo *AppPermUpdateOne) RemoveAppRolePerms(a ...*AppRolePerm) *AppPermUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return apuo.RemoveAppRolePermIDs(ids...)
}

// Where appends a list predicates to the AppPermUpdate builder.
func (apuo *AppPermUpdateOne) Where(ps ...predicate.AppPerm) *AppPermUpdateOne {
	apuo.mutation.Where(ps...)
	return apuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (apuo *AppPermUpdateOne) Select(field string, fields ...string) *AppPermUpdateOne {
	apuo.fields = append([]string{field}, fields...)
	return apuo
}

// Save executes the query and returns the updated AppPerm entity.
func (apuo *AppPermUpdateOne) Save(ctx context.Context) (*AppPerm, error) {
	apuo.defaults()
	return withHooks(ctx, apuo.sqlSave, apuo.mutation, apuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (apuo *AppPermUpdateOne) SaveX(ctx context.Context) *AppPerm {
	node, err := apuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (apuo *AppPermUpdateOne) Exec(ctx context.Context) error {
	_, err := apuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (apuo *AppPermUpdateOne) ExecX(ctx context.Context) {
	if err := apuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (apuo *AppPermUpdateOne) defaults() {
	if _, ok := apuo.mutation.UpdatedAt(); !ok && !apuo.mutation.UpdatedAtCleared() {
		v := appperm.UpdateDefaultUpdatedAt()
		apuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (apuo *AppPermUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AppPermUpdateOne {
	apuo.modifiers = append(apuo.modifiers, modifiers...)
	return apuo
}

func (apuo *AppPermUpdateOne) sqlSave(ctx context.Context) (_node *AppPerm, err error) {
	_spec := sqlgraph.NewUpdateSpec(appperm.Table, appperm.Columns, sqlgraph.NewFieldSpec(appperm.FieldID, field.TypeString))
	id, ok := apuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AppPerm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := apuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, appperm.FieldID)
		for _, f := range fields {
			if !appperm.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != appperm.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := apuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if apuo.mutation.CreatedAtCleared() {
		_spec.ClearField(appperm.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.UpdatedAt(); ok {
		_spec.SetField(appperm.FieldUpdatedAt, field.TypeTime, value)
	}
	if apuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(appperm.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := apuo.mutation.Name(); ok {
		_spec.SetField(appperm.FieldName, field.TypeString, value)
	}
	if apuo.mutation.NameCleared() {
		_spec.ClearField(appperm.FieldName, field.TypeString)
	}
	if apuo.mutation.AppCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appperm.AppTable,
			Columns: []string{appperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   appperm.AppTable,
			Columns: []string{appperm.AppColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		createE := &AppRolePermCreate{config: apuo.config, mutation: newAppRolePermMutation(apuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAppRolesIDs(); len(nodes) > 0 && !apuo.mutation.AppRolesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: apuo.config, mutation: newAppRolePermMutation(apuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppRolesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   appperm.AppRolesTable,
			Columns: appperm.AppRolesPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approle.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &AppRolePermCreate{config: apuo.config, mutation: newAppRolePermMutation(apuo.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if apuo.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.RemovedAppRolePermsIDs(); len(nodes) > 0 && !apuo.mutation.AppRolePermsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := apuo.mutation.AppRolePermsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   appperm.AppRolePermsTable,
			Columns: []string{appperm.AppRolePermsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(approleperm.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(apuo.modifiers...)
	_node = &AppPerm{config: apuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, apuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{appperm.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	apuo.mutation.done = true
	return _node, nil
}
