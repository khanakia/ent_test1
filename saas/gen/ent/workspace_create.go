// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/user"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceinvite"
	"saas/gen/ent/workspaceuser"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WorkspaceCreate is the builder for creating a Workspace entity.
type WorkspaceCreate struct {
	config
	mutation *WorkspaceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (wc *WorkspaceCreate) SetCreatedAt(t time.Time) *WorkspaceCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableCreatedAt(t *time.Time) *WorkspaceCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the "updated_at" field.
func (wc *WorkspaceCreate) SetUpdatedAt(t time.Time) *WorkspaceCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableUpdatedAt(t *time.Time) *WorkspaceCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetName sets the "name" field.
func (wc *WorkspaceCreate) SetName(s string) *WorkspaceCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableName(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetName(*s)
	}
	return wc
}

// SetIsPersonal sets the "is_personal" field.
func (wc *WorkspaceCreate) SetIsPersonal(b bool) *WorkspaceCreate {
	wc.mutation.SetIsPersonal(b)
	return wc
}

// SetNillableIsPersonal sets the "is_personal" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableIsPersonal(b *bool) *WorkspaceCreate {
	if b != nil {
		wc.SetIsPersonal(*b)
	}
	return wc
}

// SetUserID sets the "user_id" field.
func (wc *WorkspaceCreate) SetUserID(s string) *WorkspaceCreate {
	wc.mutation.SetUserID(s)
	return wc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableUserID(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetUserID(*s)
	}
	return wc
}

// SetID sets the "id" field.
func (wc *WorkspaceCreate) SetID(s string) *WorkspaceCreate {
	wc.mutation.SetID(s)
	return wc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (wc *WorkspaceCreate) SetNillableID(s *string) *WorkspaceCreate {
	if s != nil {
		wc.SetID(*s)
	}
	return wc
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (wc *WorkspaceCreate) AddUserIDs(ids ...string) *WorkspaceCreate {
	wc.mutation.AddUserIDs(ids...)
	return wc
}

// AddUsers adds the "users" edges to the User entity.
func (wc *WorkspaceCreate) AddUsers(u ...*User) *WorkspaceCreate {
	ids := make([]string, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return wc.AddUserIDs(ids...)
}

// AddWorkspaceInviteIDs adds the "workspace_invites" edge to the WorkspaceInvite entity by IDs.
func (wc *WorkspaceCreate) AddWorkspaceInviteIDs(ids ...string) *WorkspaceCreate {
	wc.mutation.AddWorkspaceInviteIDs(ids...)
	return wc
}

// AddWorkspaceInvites adds the "workspace_invites" edges to the WorkspaceInvite entity.
func (wc *WorkspaceCreate) AddWorkspaceInvites(w ...*WorkspaceInvite) *WorkspaceCreate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkspaceInviteIDs(ids...)
}

// AddWorkspaceUserIDs adds the "workspace_users" edge to the WorkspaceUser entity by IDs.
func (wc *WorkspaceCreate) AddWorkspaceUserIDs(ids ...string) *WorkspaceCreate {
	wc.mutation.AddWorkspaceUserIDs(ids...)
	return wc
}

// AddWorkspaceUsers adds the "workspace_users" edges to the WorkspaceUser entity.
func (wc *WorkspaceCreate) AddWorkspaceUsers(w ...*WorkspaceUser) *WorkspaceCreate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return wc.AddWorkspaceUserIDs(ids...)
}

// Mutation returns the WorkspaceMutation object of the builder.
func (wc *WorkspaceCreate) Mutation() *WorkspaceMutation {
	return wc.mutation
}

// Save creates the Workspace in the database.
func (wc *WorkspaceCreate) Save(ctx context.Context) (*Workspace, error) {
	wc.defaults()
	return withHooks(ctx, wc.sqlSave, wc.mutation, wc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WorkspaceCreate) SaveX(ctx context.Context) *Workspace {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wc *WorkspaceCreate) Exec(ctx context.Context) error {
	_, err := wc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wc *WorkspaceCreate) ExecX(ctx context.Context) {
	if err := wc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (wc *WorkspaceCreate) defaults() {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := workspace.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := workspace.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.ID(); !ok {
		v := workspace.DefaultID()
		wc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wc *WorkspaceCreate) check() error {
	return nil
}

func (wc *WorkspaceCreate) sqlSave(ctx context.Context) (*Workspace, error) {
	if err := wc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Workspace.ID type: %T", _spec.ID.Value)
		}
	}
	wc.mutation.id = &_node.ID
	wc.mutation.done = true
	return _node, nil
}

func (wc *WorkspaceCreate) createSpec() (*Workspace, *sqlgraph.CreateSpec) {
	var (
		_node = &Workspace{config: wc.config}
		_spec = sqlgraph.NewCreateSpec(workspace.Table, sqlgraph.NewFieldSpec(workspace.FieldID, field.TypeString))
	)
	_spec.OnConflict = wc.conflict
	if id, ok := wc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.SetField(workspace.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.SetField(workspace.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.SetField(workspace.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := wc.mutation.IsPersonal(); ok {
		_spec.SetField(workspace.FieldIsPersonal, field.TypeBool, value)
		_node.IsPersonal = value
	}
	if value, ok := wc.mutation.UserID(); ok {
		_spec.SetField(workspace.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if nodes := wc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   workspace.UsersTable,
			Columns: workspace.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &WorkspaceUserCreate{config: wc.config, mutation: newWorkspaceUserMutation(wc.config, OpCreate)}
		createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkspaceInvitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   workspace.WorkspaceInvitesTable,
			Columns: []string{workspace.WorkspaceInvitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceinvite.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := wc.mutation.WorkspaceUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   workspace.WorkspaceUsersTable,
			Columns: []string{workspace.WorkspaceUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(workspaceuser.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workspace.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wc *WorkspaceCreate) OnConflict(opts ...sql.ConflictOption) *WorkspaceUpsertOne {
	wc.conflict = opts
	return &WorkspaceUpsertOne{
		create: wc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wc *WorkspaceCreate) OnConflictColumns(columns ...string) *WorkspaceUpsertOne {
	wc.conflict = append(wc.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUpsertOne{
		create: wc,
	}
}

type (
	// WorkspaceUpsertOne is the builder for "upsert"-ing
	//  one Workspace node.
	WorkspaceUpsertOne struct {
		create *WorkspaceCreate
	}

	// WorkspaceUpsert is the "OnConflict" setter.
	WorkspaceUpsert struct {
		*sql.UpdateSet
	}
)

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsert) SetCreatedAt(v time.Time) *WorkspaceUpsert {
	u.Set(workspace.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateCreatedAt() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldCreatedAt)
	return u
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *WorkspaceUpsert) ClearCreatedAt() *WorkspaceUpsert {
	u.SetNull(workspace.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsert) SetUpdatedAt(v time.Time) *WorkspaceUpsert {
	u.Set(workspace.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateUpdatedAt() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUpsert) ClearUpdatedAt() *WorkspaceUpsert {
	u.SetNull(workspace.FieldUpdatedAt)
	return u
}

// SetName sets the "name" field.
func (u *WorkspaceUpsert) SetName(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateName() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *WorkspaceUpsert) ClearName() *WorkspaceUpsert {
	u.SetNull(workspace.FieldName)
	return u
}

// SetIsPersonal sets the "is_personal" field.
func (u *WorkspaceUpsert) SetIsPersonal(v bool) *WorkspaceUpsert {
	u.Set(workspace.FieldIsPersonal, v)
	return u
}

// UpdateIsPersonal sets the "is_personal" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateIsPersonal() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldIsPersonal)
	return u
}

// ClearIsPersonal clears the value of the "is_personal" field.
func (u *WorkspaceUpsert) ClearIsPersonal() *WorkspaceUpsert {
	u.SetNull(workspace.FieldIsPersonal)
	return u
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUpsert) SetUserID(v string) *WorkspaceUpsert {
	u.Set(workspace.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUpsert) UpdateUserID() *WorkspaceUpsert {
	u.SetExcluded(workspace.FieldUserID)
	return u
}

// ClearUserID clears the value of the "user_id" field.
func (u *WorkspaceUpsert) ClearUserID() *WorkspaceUpsert {
	u.SetNull(workspace.FieldUserID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspace.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceUpsertOne) UpdateNewValues() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(workspace.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workspace.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *WorkspaceUpsertOne) Ignore() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUpsertOne) DoNothing() *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceCreate.OnConflict
// documentation for more info.
func (u *WorkspaceUpsertOne) Update(set func(*WorkspaceUpsert)) *WorkspaceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsertOne) SetCreatedAt(v time.Time) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateCreatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *WorkspaceUpsertOne) ClearCreatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsertOne) SetUpdatedAt(v time.Time) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateUpdatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUpsertOne) ClearUpdatedAt() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkspaceUpsertOne) SetName(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateName() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *WorkspaceUpsertOne) ClearName() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearName()
	})
}

// SetIsPersonal sets the "is_personal" field.
func (u *WorkspaceUpsertOne) SetIsPersonal(v bool) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetIsPersonal(v)
	})
}

// UpdateIsPersonal sets the "is_personal" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateIsPersonal() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateIsPersonal()
	})
}

// ClearIsPersonal clears the value of the "is_personal" field.
func (u *WorkspaceUpsertOne) ClearIsPersonal() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearIsPersonal()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUpsertOne) SetUserID(v string) *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUpsertOne) UpdateUserID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *WorkspaceUpsertOne) ClearUserID() *WorkspaceUpsertOne {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *WorkspaceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *WorkspaceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: WorkspaceUpsertOne.ID is not supported by MySQL driver. Use WorkspaceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *WorkspaceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// WorkspaceCreateBulk is the builder for creating many Workspace entities in bulk.
type WorkspaceCreateBulk struct {
	config
	err      error
	builders []*WorkspaceCreate
	conflict []sql.ConflictOption
}

// Save creates the Workspace entities in the database.
func (wcb *WorkspaceCreateBulk) Save(ctx context.Context) ([]*Workspace, error) {
	if wcb.err != nil {
		return nil, wcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wcb.builders))
	nodes := make([]*Workspace, len(wcb.builders))
	mutators := make([]Mutator, len(wcb.builders))
	for i := range wcb.builders {
		func(i int, root context.Context) {
			builder := wcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WorkspaceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = wcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wcb *WorkspaceCreateBulk) SaveX(ctx context.Context) []*Workspace {
	v, err := wcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wcb *WorkspaceCreateBulk) Exec(ctx context.Context) error {
	_, err := wcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wcb *WorkspaceCreateBulk) ExecX(ctx context.Context) {
	if err := wcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Workspace.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.WorkspaceUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (wcb *WorkspaceCreateBulk) OnConflict(opts ...sql.ConflictOption) *WorkspaceUpsertBulk {
	wcb.conflict = opts
	return &WorkspaceUpsertBulk{
		create: wcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (wcb *WorkspaceCreateBulk) OnConflictColumns(columns ...string) *WorkspaceUpsertBulk {
	wcb.conflict = append(wcb.conflict, sql.ConflictColumns(columns...))
	return &WorkspaceUpsertBulk{
		create: wcb,
	}
}

// WorkspaceUpsertBulk is the builder for "upsert"-ing
// a bulk of Workspace nodes.
type WorkspaceUpsertBulk struct {
	create *WorkspaceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(workspace.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *WorkspaceUpsertBulk) UpdateNewValues() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(workspace.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Workspace.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *WorkspaceUpsertBulk) Ignore() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *WorkspaceUpsertBulk) DoNothing() *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the WorkspaceCreateBulk.OnConflict
// documentation for more info.
func (u *WorkspaceUpsertBulk) Update(set func(*WorkspaceUpsert)) *WorkspaceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&WorkspaceUpsert{UpdateSet: update})
	}))
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *WorkspaceUpsertBulk) SetCreatedAt(v time.Time) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateCreatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateCreatedAt()
	})
}

// ClearCreatedAt clears the value of the "created_at" field.
func (u *WorkspaceUpsertBulk) ClearCreatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *WorkspaceUpsertBulk) SetUpdatedAt(v time.Time) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateUpdatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *WorkspaceUpsertBulk) ClearUpdatedAt() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetName sets the "name" field.
func (u *WorkspaceUpsertBulk) SetName(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateName() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *WorkspaceUpsertBulk) ClearName() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearName()
	})
}

// SetIsPersonal sets the "is_personal" field.
func (u *WorkspaceUpsertBulk) SetIsPersonal(v bool) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetIsPersonal(v)
	})
}

// UpdateIsPersonal sets the "is_personal" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateIsPersonal() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateIsPersonal()
	})
}

// ClearIsPersonal clears the value of the "is_personal" field.
func (u *WorkspaceUpsertBulk) ClearIsPersonal() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearIsPersonal()
	})
}

// SetUserID sets the "user_id" field.
func (u *WorkspaceUpsertBulk) SetUserID(v string) *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *WorkspaceUpsertBulk) UpdateUserID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.UpdateUserID()
	})
}

// ClearUserID clears the value of the "user_id" field.
func (u *WorkspaceUpsertBulk) ClearUserID() *WorkspaceUpsertBulk {
	return u.Update(func(s *WorkspaceUpsert) {
		s.ClearUserID()
	})
}

// Exec executes the query.
func (u *WorkspaceUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the WorkspaceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for WorkspaceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *WorkspaceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
