// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"saas/gen/ent/oauthconnection"
	"saas/gen/ent/predicate"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthConnectionQuery is the builder for querying OauthConnection entities.
type OauthConnectionQuery struct {
	config
	ctx        *QueryContext
	order      []oauthconnection.OrderOption
	inters     []Interceptor
	predicates []predicate.OauthConnection
	loadTotal  []func(context.Context, []*OauthConnection) error
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OauthConnectionQuery builder.
func (ocq *OauthConnectionQuery) Where(ps ...predicate.OauthConnection) *OauthConnectionQuery {
	ocq.predicates = append(ocq.predicates, ps...)
	return ocq
}

// Limit the number of records to be returned by this query.
func (ocq *OauthConnectionQuery) Limit(limit int) *OauthConnectionQuery {
	ocq.ctx.Limit = &limit
	return ocq
}

// Offset to start from.
func (ocq *OauthConnectionQuery) Offset(offset int) *OauthConnectionQuery {
	ocq.ctx.Offset = &offset
	return ocq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ocq *OauthConnectionQuery) Unique(unique bool) *OauthConnectionQuery {
	ocq.ctx.Unique = &unique
	return ocq
}

// Order specifies how the records should be ordered.
func (ocq *OauthConnectionQuery) Order(o ...oauthconnection.OrderOption) *OauthConnectionQuery {
	ocq.order = append(ocq.order, o...)
	return ocq
}

// First returns the first OauthConnection entity from the query.
// Returns a *NotFoundError when no OauthConnection was found.
func (ocq *OauthConnectionQuery) First(ctx context.Context) (*OauthConnection, error) {
	nodes, err := ocq.Limit(1).All(setContextOp(ctx, ocq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{oauthconnection.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ocq *OauthConnectionQuery) FirstX(ctx context.Context) *OauthConnection {
	node, err := ocq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first OauthConnection ID from the query.
// Returns a *NotFoundError when no OauthConnection ID was found.
func (ocq *OauthConnectionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ocq.Limit(1).IDs(setContextOp(ctx, ocq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{oauthconnection.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (ocq *OauthConnectionQuery) FirstIDX(ctx context.Context) string {
	id, err := ocq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single OauthConnection entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one OauthConnection entity is found.
// Returns a *NotFoundError when no OauthConnection entities are found.
func (ocq *OauthConnectionQuery) Only(ctx context.Context) (*OauthConnection, error) {
	nodes, err := ocq.Limit(2).All(setContextOp(ctx, ocq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{oauthconnection.Label}
	default:
		return nil, &NotSingularError{oauthconnection.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ocq *OauthConnectionQuery) OnlyX(ctx context.Context) *OauthConnection {
	node, err := ocq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only OauthConnection ID in the query.
// Returns a *NotSingularError when more than one OauthConnection ID is found.
// Returns a *NotFoundError when no entities are found.
func (ocq *OauthConnectionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = ocq.Limit(2).IDs(setContextOp(ctx, ocq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{oauthconnection.Label}
	default:
		err = &NotSingularError{oauthconnection.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (ocq *OauthConnectionQuery) OnlyIDX(ctx context.Context) string {
	id, err := ocq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of OauthConnections.
func (ocq *OauthConnectionQuery) All(ctx context.Context) ([]*OauthConnection, error) {
	ctx = setContextOp(ctx, ocq.ctx, ent.OpQueryAll)
	if err := ocq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*OauthConnection, *OauthConnectionQuery]()
	return withInterceptors[[]*OauthConnection](ctx, ocq, qr, ocq.inters)
}

// AllX is like All, but panics if an error occurs.
func (ocq *OauthConnectionQuery) AllX(ctx context.Context) []*OauthConnection {
	nodes, err := ocq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of OauthConnection IDs.
func (ocq *OauthConnectionQuery) IDs(ctx context.Context) (ids []string, err error) {
	if ocq.ctx.Unique == nil && ocq.path != nil {
		ocq.Unique(true)
	}
	ctx = setContextOp(ctx, ocq.ctx, ent.OpQueryIDs)
	if err = ocq.Select(oauthconnection.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (ocq *OauthConnectionQuery) IDsX(ctx context.Context) []string {
	ids, err := ocq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (ocq *OauthConnectionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, ocq.ctx, ent.OpQueryCount)
	if err := ocq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, ocq, querierCount[*OauthConnectionQuery](), ocq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (ocq *OauthConnectionQuery) CountX(ctx context.Context) int {
	count, err := ocq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ocq *OauthConnectionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, ocq.ctx, ent.OpQueryExist)
	switch _, err := ocq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (ocq *OauthConnectionQuery) ExistX(ctx context.Context) bool {
	exist, err := ocq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OauthConnectionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ocq *OauthConnectionQuery) Clone() *OauthConnectionQuery {
	if ocq == nil {
		return nil
	}
	return &OauthConnectionQuery{
		config:     ocq.config,
		ctx:        ocq.ctx.Clone(),
		order:      append([]oauthconnection.OrderOption{}, ocq.order...),
		inters:     append([]Interceptor{}, ocq.inters...),
		predicates: append([]predicate.OauthConnection{}, ocq.predicates...),
		// clone intermediate query.
		sql:       ocq.sql.Clone(),
		path:      ocq.path,
		modifiers: append([]func(*sql.Selector){}, ocq.modifiers...),
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.OauthConnection.Query().
//		GroupBy(oauthconnection.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ocq *OauthConnectionQuery) GroupBy(field string, fields ...string) *OauthConnectionGroupBy {
	ocq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OauthConnectionGroupBy{build: ocq}
	grbuild.flds = &ocq.ctx.Fields
	grbuild.label = oauthconnection.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.OauthConnection.Query().
//		Select(oauthconnection.FieldCreatedAt).
//		Scan(ctx, &v)
func (ocq *OauthConnectionQuery) Select(fields ...string) *OauthConnectionSelect {
	ocq.ctx.Fields = append(ocq.ctx.Fields, fields...)
	sbuild := &OauthConnectionSelect{OauthConnectionQuery: ocq}
	sbuild.label = oauthconnection.Label
	sbuild.flds, sbuild.scan = &ocq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OauthConnectionSelect configured with the given aggregations.
func (ocq *OauthConnectionQuery) Aggregate(fns ...AggregateFunc) *OauthConnectionSelect {
	return ocq.Select().Aggregate(fns...)
}

func (ocq *OauthConnectionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range ocq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, ocq); err != nil {
				return err
			}
		}
	}
	for _, f := range ocq.ctx.Fields {
		if !oauthconnection.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ocq.path != nil {
		prev, err := ocq.path(ctx)
		if err != nil {
			return err
		}
		ocq.sql = prev
	}
	return nil
}

func (ocq *OauthConnectionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*OauthConnection, error) {
	var (
		nodes = []*OauthConnection{}
		_spec = ocq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*OauthConnection).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &OauthConnection{config: ocq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	if len(ocq.modifiers) > 0 {
		_spec.Modifiers = ocq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ocq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range ocq.loadTotal {
		if err := ocq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ocq *OauthConnectionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ocq.querySpec()
	if len(ocq.modifiers) > 0 {
		_spec.Modifiers = ocq.modifiers
	}
	_spec.Node.Columns = ocq.ctx.Fields
	if len(ocq.ctx.Fields) > 0 {
		_spec.Unique = ocq.ctx.Unique != nil && *ocq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, ocq.driver, _spec)
}

func (ocq *OauthConnectionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(oauthconnection.Table, oauthconnection.Columns, sqlgraph.NewFieldSpec(oauthconnection.FieldID, field.TypeString))
	_spec.From = ocq.sql
	if unique := ocq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if ocq.path != nil {
		_spec.Unique = true
	}
	if fields := ocq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, oauthconnection.FieldID)
		for i := range fields {
			if fields[i] != oauthconnection.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := ocq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ocq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ocq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ocq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ocq *OauthConnectionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ocq.driver.Dialect())
	t1 := builder.Table(oauthconnection.Table)
	columns := ocq.ctx.Fields
	if len(columns) == 0 {
		columns = oauthconnection.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ocq.sql != nil {
		selector = ocq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ocq.ctx.Unique != nil && *ocq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range ocq.modifiers {
		m(selector)
	}
	for _, p := range ocq.predicates {
		p(selector)
	}
	for _, p := range ocq.order {
		p(selector)
	}
	if offset := ocq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ocq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ocq *OauthConnectionQuery) Modify(modifiers ...func(s *sql.Selector)) *OauthConnectionSelect {
	ocq.modifiers = append(ocq.modifiers, modifiers...)
	return ocq.Select()
}

// OauthConnectionGroupBy is the group-by builder for OauthConnection entities.
type OauthConnectionGroupBy struct {
	selector
	build *OauthConnectionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ocgb *OauthConnectionGroupBy) Aggregate(fns ...AggregateFunc) *OauthConnectionGroupBy {
	ocgb.fns = append(ocgb.fns, fns...)
	return ocgb
}

// Scan applies the selector query and scans the result into the given value.
func (ocgb *OauthConnectionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ocgb.build.ctx, ent.OpQueryGroupBy)
	if err := ocgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OauthConnectionQuery, *OauthConnectionGroupBy](ctx, ocgb.build, ocgb, ocgb.build.inters, v)
}

func (ocgb *OauthConnectionGroupBy) sqlScan(ctx context.Context, root *OauthConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ocgb.fns))
	for _, fn := range ocgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ocgb.flds)+len(ocgb.fns))
		for _, f := range *ocgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ocgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ocgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OauthConnectionSelect is the builder for selecting fields of OauthConnection entities.
type OauthConnectionSelect struct {
	*OauthConnectionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (ocs *OauthConnectionSelect) Aggregate(fns ...AggregateFunc) *OauthConnectionSelect {
	ocs.fns = append(ocs.fns, fns...)
	return ocs
}

// Scan applies the selector query and scans the result into the given value.
func (ocs *OauthConnectionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ocs.ctx, ent.OpQuerySelect)
	if err := ocs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OauthConnectionQuery, *OauthConnectionSelect](ctx, ocs.OauthConnectionQuery, ocs, ocs.inters, v)
}

func (ocs *OauthConnectionSelect) sqlScan(ctx context.Context, root *OauthConnectionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(ocs.fns))
	for _, fn := range ocs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*ocs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ocs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (ocs *OauthConnectionSelect) Modify(modifiers ...func(s *sql.Selector)) *OauthConnectionSelect {
	ocs.modifiers = append(ocs.modifiers, modifiers...)
	return ocs
}
