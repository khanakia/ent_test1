// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"lace/jsonslice"
	"saas/gen/ent/posttype"
	"saas/gen/ent/posttypeform"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// PostTypeFormUpdate is the builder for updating PostTypeForm entities.
type PostTypeFormUpdate struct {
	config
	hooks     []Hook
	mutation  *PostTypeFormMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PostTypeFormUpdate builder.
func (ptfu *PostTypeFormUpdate) Where(ps ...predicate.PostTypeForm) *PostTypeFormUpdate {
	ptfu.mutation.Where(ps...)
	return ptfu
}

// SetUpdatedAt sets the "updated_at" field.
func (ptfu *PostTypeFormUpdate) SetUpdatedAt(t time.Time) *PostTypeFormUpdate {
	ptfu.mutation.SetUpdatedAt(t)
	return ptfu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptfu *PostTypeFormUpdate) ClearUpdatedAt() *PostTypeFormUpdate {
	ptfu.mutation.ClearUpdatedAt()
	return ptfu
}

// SetAppID sets the "app_id" field.
func (ptfu *PostTypeFormUpdate) SetAppID(s string) *PostTypeFormUpdate {
	ptfu.mutation.SetAppID(s)
	return ptfu
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ptfu *PostTypeFormUpdate) SetNillableAppID(s *string) *PostTypeFormUpdate {
	if s != nil {
		ptfu.SetAppID(*s)
	}
	return ptfu
}

// ClearAppID clears the value of the "app_id" field.
func (ptfu *PostTypeFormUpdate) ClearAppID() *PostTypeFormUpdate {
	ptfu.mutation.ClearAppID()
	return ptfu
}

// SetName sets the "name" field.
func (ptfu *PostTypeFormUpdate) SetName(s string) *PostTypeFormUpdate {
	ptfu.mutation.SetName(s)
	return ptfu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptfu *PostTypeFormUpdate) SetNillableName(s *string) *PostTypeFormUpdate {
	if s != nil {
		ptfu.SetName(*s)
	}
	return ptfu
}

// ClearName clears the value of the "name" field.
func (ptfu *PostTypeFormUpdate) ClearName() *PostTypeFormUpdate {
	ptfu.mutation.ClearName()
	return ptfu
}

// SetStatus sets the "status" field.
func (ptfu *PostTypeFormUpdate) SetStatus(b bool) *PostTypeFormUpdate {
	ptfu.mutation.SetStatus(b)
	return ptfu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptfu *PostTypeFormUpdate) SetNillableStatus(b *bool) *PostTypeFormUpdate {
	if b != nil {
		ptfu.SetStatus(*b)
	}
	return ptfu
}

// ClearStatus clears the value of the "status" field.
func (ptfu *PostTypeFormUpdate) ClearStatus() *PostTypeFormUpdate {
	ptfu.mutation.ClearStatus()
	return ptfu
}

// SetPostTypeID sets the "post_type_id" field.
func (ptfu *PostTypeFormUpdate) SetPostTypeID(s string) *PostTypeFormUpdate {
	ptfu.mutation.SetPostTypeID(s)
	return ptfu
}

// SetNillablePostTypeID sets the "post_type_id" field if the given value is not nil.
func (ptfu *PostTypeFormUpdate) SetNillablePostTypeID(s *string) *PostTypeFormUpdate {
	if s != nil {
		ptfu.SetPostTypeID(*s)
	}
	return ptfu
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (ptfu *PostTypeFormUpdate) ClearPostTypeID() *PostTypeFormUpdate {
	ptfu.mutation.ClearPostTypeID()
	return ptfu
}

// SetBody sets the "body" field.
func (ptfu *PostTypeFormUpdate) SetBody(js jsonslice.JsonSlice) *PostTypeFormUpdate {
	ptfu.mutation.SetBody(js)
	return ptfu
}

// AppendBody appends js to the "body" field.
func (ptfu *PostTypeFormUpdate) AppendBody(js jsonslice.JsonSlice) *PostTypeFormUpdate {
	ptfu.mutation.AppendBody(js)
	return ptfu
}

// ClearBody clears the value of the "body" field.
func (ptfu *PostTypeFormUpdate) ClearBody() *PostTypeFormUpdate {
	ptfu.mutation.ClearBody()
	return ptfu
}

// SetPostType sets the "post_type" edge to the PostType entity.
func (ptfu *PostTypeFormUpdate) SetPostType(p *PostType) *PostTypeFormUpdate {
	return ptfu.SetPostTypeID(p.ID)
}

// Mutation returns the PostTypeFormMutation object of the builder.
func (ptfu *PostTypeFormUpdate) Mutation() *PostTypeFormMutation {
	return ptfu.mutation
}

// ClearPostType clears the "post_type" edge to the PostType entity.
func (ptfu *PostTypeFormUpdate) ClearPostType() *PostTypeFormUpdate {
	ptfu.mutation.ClearPostType()
	return ptfu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ptfu *PostTypeFormUpdate) Save(ctx context.Context) (int, error) {
	ptfu.defaults()
	return withHooks(ctx, ptfu.sqlSave, ptfu.mutation, ptfu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptfu *PostTypeFormUpdate) SaveX(ctx context.Context) int {
	affected, err := ptfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ptfu *PostTypeFormUpdate) Exec(ctx context.Context) error {
	_, err := ptfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfu *PostTypeFormUpdate) ExecX(ctx context.Context) {
	if err := ptfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptfu *PostTypeFormUpdate) defaults() {
	if _, ok := ptfu.mutation.UpdatedAt(); !ok && !ptfu.mutation.UpdatedAtCleared() {
		v := posttypeform.UpdateDefaultUpdatedAt()
		ptfu.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptfu *PostTypeFormUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTypeFormUpdate {
	ptfu.modifiers = append(ptfu.modifiers, modifiers...)
	return ptfu
}

func (ptfu *PostTypeFormUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(posttypeform.Table, posttypeform.Columns, sqlgraph.NewFieldSpec(posttypeform.FieldID, field.TypeString))
	if ps := ptfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptfu.mutation.CreatedAtCleared() {
		_spec.ClearField(posttypeform.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptfu.mutation.UpdatedAt(); ok {
		_spec.SetField(posttypeform.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptfu.mutation.UpdatedAtCleared() {
		_spec.ClearField(posttypeform.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ptfu.mutation.AppID(); ok {
		_spec.SetField(posttypeform.FieldAppID, field.TypeString, value)
	}
	if ptfu.mutation.AppIDCleared() {
		_spec.ClearField(posttypeform.FieldAppID, field.TypeString)
	}
	if value, ok := ptfu.mutation.Name(); ok {
		_spec.SetField(posttypeform.FieldName, field.TypeString, value)
	}
	if ptfu.mutation.NameCleared() {
		_spec.ClearField(posttypeform.FieldName, field.TypeString)
	}
	if value, ok := ptfu.mutation.Status(); ok {
		_spec.SetField(posttypeform.FieldStatus, field.TypeBool, value)
	}
	if ptfu.mutation.StatusCleared() {
		_spec.ClearField(posttypeform.FieldStatus, field.TypeBool)
	}
	if value, ok := ptfu.mutation.Body(); ok {
		_spec.SetField(posttypeform.FieldBody, field.TypeJSON, value)
	}
	if value, ok := ptfu.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, posttypeform.FieldBody, value)
		})
	}
	if ptfu.mutation.BodyCleared() {
		_spec.ClearField(posttypeform.FieldBody, field.TypeJSON)
	}
	if ptfu.mutation.PostTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posttypeform.PostTypeTable,
			Columns: []string{posttypeform.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptfu.mutation.PostTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posttypeform.PostTypeTable,
			Columns: []string{posttypeform.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptfu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ptfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttypeform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ptfu.mutation.done = true
	return n, nil
}

// PostTypeFormUpdateOne is the builder for updating a single PostTypeForm entity.
type PostTypeFormUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PostTypeFormMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (ptfuo *PostTypeFormUpdateOne) SetUpdatedAt(t time.Time) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetUpdatedAt(t)
	return ptfuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (ptfuo *PostTypeFormUpdateOne) ClearUpdatedAt() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearUpdatedAt()
	return ptfuo
}

// SetAppID sets the "app_id" field.
func (ptfuo *PostTypeFormUpdateOne) SetAppID(s string) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetAppID(s)
	return ptfuo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (ptfuo *PostTypeFormUpdateOne) SetNillableAppID(s *string) *PostTypeFormUpdateOne {
	if s != nil {
		ptfuo.SetAppID(*s)
	}
	return ptfuo
}

// ClearAppID clears the value of the "app_id" field.
func (ptfuo *PostTypeFormUpdateOne) ClearAppID() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearAppID()
	return ptfuo
}

// SetName sets the "name" field.
func (ptfuo *PostTypeFormUpdateOne) SetName(s string) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetName(s)
	return ptfuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ptfuo *PostTypeFormUpdateOne) SetNillableName(s *string) *PostTypeFormUpdateOne {
	if s != nil {
		ptfuo.SetName(*s)
	}
	return ptfuo
}

// ClearName clears the value of the "name" field.
func (ptfuo *PostTypeFormUpdateOne) ClearName() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearName()
	return ptfuo
}

// SetStatus sets the "status" field.
func (ptfuo *PostTypeFormUpdateOne) SetStatus(b bool) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetStatus(b)
	return ptfuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (ptfuo *PostTypeFormUpdateOne) SetNillableStatus(b *bool) *PostTypeFormUpdateOne {
	if b != nil {
		ptfuo.SetStatus(*b)
	}
	return ptfuo
}

// ClearStatus clears the value of the "status" field.
func (ptfuo *PostTypeFormUpdateOne) ClearStatus() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearStatus()
	return ptfuo
}

// SetPostTypeID sets the "post_type_id" field.
func (ptfuo *PostTypeFormUpdateOne) SetPostTypeID(s string) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetPostTypeID(s)
	return ptfuo
}

// SetNillablePostTypeID sets the "post_type_id" field if the given value is not nil.
func (ptfuo *PostTypeFormUpdateOne) SetNillablePostTypeID(s *string) *PostTypeFormUpdateOne {
	if s != nil {
		ptfuo.SetPostTypeID(*s)
	}
	return ptfuo
}

// ClearPostTypeID clears the value of the "post_type_id" field.
func (ptfuo *PostTypeFormUpdateOne) ClearPostTypeID() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearPostTypeID()
	return ptfuo
}

// SetBody sets the "body" field.
func (ptfuo *PostTypeFormUpdateOne) SetBody(js jsonslice.JsonSlice) *PostTypeFormUpdateOne {
	ptfuo.mutation.SetBody(js)
	return ptfuo
}

// AppendBody appends js to the "body" field.
func (ptfuo *PostTypeFormUpdateOne) AppendBody(js jsonslice.JsonSlice) *PostTypeFormUpdateOne {
	ptfuo.mutation.AppendBody(js)
	return ptfuo
}

// ClearBody clears the value of the "body" field.
func (ptfuo *PostTypeFormUpdateOne) ClearBody() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearBody()
	return ptfuo
}

// SetPostType sets the "post_type" edge to the PostType entity.
func (ptfuo *PostTypeFormUpdateOne) SetPostType(p *PostType) *PostTypeFormUpdateOne {
	return ptfuo.SetPostTypeID(p.ID)
}

// Mutation returns the PostTypeFormMutation object of the builder.
func (ptfuo *PostTypeFormUpdateOne) Mutation() *PostTypeFormMutation {
	return ptfuo.mutation
}

// ClearPostType clears the "post_type" edge to the PostType entity.
func (ptfuo *PostTypeFormUpdateOne) ClearPostType() *PostTypeFormUpdateOne {
	ptfuo.mutation.ClearPostType()
	return ptfuo
}

// Where appends a list predicates to the PostTypeFormUpdate builder.
func (ptfuo *PostTypeFormUpdateOne) Where(ps ...predicate.PostTypeForm) *PostTypeFormUpdateOne {
	ptfuo.mutation.Where(ps...)
	return ptfuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ptfuo *PostTypeFormUpdateOne) Select(field string, fields ...string) *PostTypeFormUpdateOne {
	ptfuo.fields = append([]string{field}, fields...)
	return ptfuo
}

// Save executes the query and returns the updated PostTypeForm entity.
func (ptfuo *PostTypeFormUpdateOne) Save(ctx context.Context) (*PostTypeForm, error) {
	ptfuo.defaults()
	return withHooks(ctx, ptfuo.sqlSave, ptfuo.mutation, ptfuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ptfuo *PostTypeFormUpdateOne) SaveX(ctx context.Context) *PostTypeForm {
	node, err := ptfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ptfuo *PostTypeFormUpdateOne) Exec(ctx context.Context) error {
	_, err := ptfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ptfuo *PostTypeFormUpdateOne) ExecX(ctx context.Context) {
	if err := ptfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ptfuo *PostTypeFormUpdateOne) defaults() {
	if _, ok := ptfuo.mutation.UpdatedAt(); !ok && !ptfuo.mutation.UpdatedAtCleared() {
		v := posttypeform.UpdateDefaultUpdatedAt()
		ptfuo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ptfuo *PostTypeFormUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PostTypeFormUpdateOne {
	ptfuo.modifiers = append(ptfuo.modifiers, modifiers...)
	return ptfuo
}

func (ptfuo *PostTypeFormUpdateOne) sqlSave(ctx context.Context) (_node *PostTypeForm, err error) {
	_spec := sqlgraph.NewUpdateSpec(posttypeform.Table, posttypeform.Columns, sqlgraph.NewFieldSpec(posttypeform.FieldID, field.TypeString))
	id, ok := ptfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PostTypeForm.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ptfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, posttypeform.FieldID)
		for _, f := range fields {
			if !posttypeform.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != posttypeform.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ptfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if ptfuo.mutation.CreatedAtCleared() {
		_spec.ClearField(posttypeform.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := ptfuo.mutation.UpdatedAt(); ok {
		_spec.SetField(posttypeform.FieldUpdatedAt, field.TypeTime, value)
	}
	if ptfuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(posttypeform.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := ptfuo.mutation.AppID(); ok {
		_spec.SetField(posttypeform.FieldAppID, field.TypeString, value)
	}
	if ptfuo.mutation.AppIDCleared() {
		_spec.ClearField(posttypeform.FieldAppID, field.TypeString)
	}
	if value, ok := ptfuo.mutation.Name(); ok {
		_spec.SetField(posttypeform.FieldName, field.TypeString, value)
	}
	if ptfuo.mutation.NameCleared() {
		_spec.ClearField(posttypeform.FieldName, field.TypeString)
	}
	if value, ok := ptfuo.mutation.Status(); ok {
		_spec.SetField(posttypeform.FieldStatus, field.TypeBool, value)
	}
	if ptfuo.mutation.StatusCleared() {
		_spec.ClearField(posttypeform.FieldStatus, field.TypeBool)
	}
	if value, ok := ptfuo.mutation.Body(); ok {
		_spec.SetField(posttypeform.FieldBody, field.TypeJSON, value)
	}
	if value, ok := ptfuo.mutation.AppendedBody(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, posttypeform.FieldBody, value)
		})
	}
	if ptfuo.mutation.BodyCleared() {
		_spec.ClearField(posttypeform.FieldBody, field.TypeJSON)
	}
	if ptfuo.mutation.PostTypeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posttypeform.PostTypeTable,
			Columns: []string{posttypeform.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ptfuo.mutation.PostTypeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   posttypeform.PostTypeTable,
			Columns: []string{posttypeform.PostTypeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(posttype.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ptfuo.modifiers...)
	_node = &PostTypeForm{config: ptfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ptfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{posttypeform.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ptfuo.mutation.done = true
	return _node, nil
}
