// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (a *App) DefaultMailConn(ctx context.Context) (*MailConn, error) {
	result, err := a.Edges.DefaultMailConnOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryDefaultMailConn().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) MailLayoutTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.MailLayoutTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryMailLayoutTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) WsapceInviteTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.WsapceInviteTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryWsapceInviteTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) WsapceSuccessTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.WsapceSuccessTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryWsapceSuccessTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) AuthFpTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.AuthFpTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAuthFpTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) AuthWelcomeEmailTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.AuthWelcomeEmailTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAuthWelcomeEmailTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (a *App) AuthVerificationTempl(ctx context.Context) (*Templ, error) {
	result, err := a.Edges.AuthVerificationTemplOrErr()
	if IsNotLoaded(err) {
		result, err = a.QueryAuthVerificationTempl().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) PostStatus(ctx context.Context) (*PostStatus, error) {
	result, err := po.Edges.PostStatusOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryPostStatus().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) PostType(ctx context.Context) (*PostType, error) {
	result, err := po.Edges.PostTypeOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryPostType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) PrimaryCategory(ctx context.Context) (*PostCategory, error) {
	result, err := po.Edges.PrimaryCategoryOrErr()
	if IsNotLoaded(err) {
		result, err = po.QueryPrimaryCategory().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (po *Post) PostTags(ctx context.Context) (result []*PostTag, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = po.NamedPostTags(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = po.Edges.PostTagsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = po.QueryPostTags().All(ctx)
	}
	return result, err
}

func (pc *PostCategory) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pc.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pc.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pc.QueryPosts().All(ctx)
	}
	return result, err
}

func (ps *PostStatus) PostType(ctx context.Context) (*PostType, error) {
	result, err := ps.Edges.PostTypeOrErr()
	if IsNotLoaded(err) {
		result, err = ps.QueryPostType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (ps *PostStatus) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = ps.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = ps.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = ps.QueryPosts().All(ctx)
	}
	return result, err
}

func (pt *PostTag) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryPosts().All(ctx)
	}
	return result, err
}

func (pt *PostType) Posts(ctx context.Context) (result []*Post, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedPosts(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.PostsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryPosts().All(ctx)
	}
	return result, err
}

func (pt *PostType) PostStatuses(ctx context.Context) (result []*PostStatus, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedPostStatuses(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.PostStatusesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryPostStatuses().All(ctx)
	}
	return result, err
}

func (pt *PostType) PostTypeForms(ctx context.Context) (result []*PostTypeForm, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = pt.NamedPostTypeForms(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = pt.Edges.PostTypeFormsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = pt.QueryPostTypeForms().All(ctx)
	}
	return result, err
}

func (ptf *PostTypeForm) PostType(ctx context.Context) (*PostType, error) {
	result, err := ptf.Edges.PostTypeOrErr()
	if IsNotLoaded(err) {
		result, err = ptf.QueryPostType().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (t *Todo) Children(ctx context.Context) (result []*Todo, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = t.NamedChildren(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = t.Edges.ChildrenOrErr()
	}
	if IsNotLoaded(err) {
		result, err = t.QueryChildren().All(ctx)
	}
	return result, err
}

func (t *Todo) Parent(ctx context.Context) (*Todo, error) {
	result, err := t.Edges.ParentOrErr()
	if IsNotLoaded(err) {
		result, err = t.QueryParent().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Workspaces(ctx context.Context) (result []*Workspace, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkspaces(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkspacesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkspaces().All(ctx)
	}
	return result, err
}

func (u *User) WorkspaceUsers(ctx context.Context) (result []*WorkspaceUser, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedWorkspaceUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.WorkspaceUsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryWorkspaceUsers().All(ctx)
	}
	return result, err
}

func (w *Workspace) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryUsers().All(ctx)
	}
	return result, err
}

func (w *Workspace) WorkspaceInvites(ctx context.Context) (result []*WorkspaceInvite, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedWorkspaceInvites(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.WorkspaceInvitesOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryWorkspaceInvites().All(ctx)
	}
	return result, err
}

func (w *Workspace) WorkspaceUsers(ctx context.Context) (result []*WorkspaceUser, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = w.NamedWorkspaceUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = w.Edges.WorkspaceUsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = w.QueryWorkspaceUsers().All(ctx)
	}
	return result, err
}

func (wi *WorkspaceInvite) Workspace(ctx context.Context) (*Workspace, error) {
	result, err := wi.Edges.WorkspaceOrErr()
	if IsNotLoaded(err) {
		result, err = wi.QueryWorkspace().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (wu *WorkspaceUser) User(ctx context.Context) (*User, error) {
	result, err := wu.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = wu.QueryUser().Only(ctx)
	}
	return result, err
}

func (wu *WorkspaceUser) Workspace(ctx context.Context) (*Workspace, error) {
	result, err := wu.Edges.WorkspaceOrErr()
	if IsNotLoaded(err) {
		result, err = wu.QueryWorkspace().Only(ctx)
	}
	return result, err
}
