// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/mailconnection"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// MailConnectionCreate is the builder for creating a MailConnection entity.
type MailConnectionCreate struct {
	config
	mutation *MailConnectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (mcc *MailConnectionCreate) SetName(s string) *MailConnectionCreate {
	mcc.mutation.SetName(s)
	return mcc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillableName(s *string) *MailConnectionCreate {
	if s != nil {
		mcc.SetName(*s)
	}
	return mcc
}

// SetHost sets the "host" field.
func (mcc *MailConnectionCreate) SetHost(s string) *MailConnectionCreate {
	mcc.mutation.SetHost(s)
	return mcc
}

// SetNillableHost sets the "host" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillableHost(s *string) *MailConnectionCreate {
	if s != nil {
		mcc.SetHost(*s)
	}
	return mcc
}

// SetPort sets the "port" field.
func (mcc *MailConnectionCreate) SetPort(s string) *MailConnectionCreate {
	mcc.mutation.SetPort(s)
	return mcc
}

// SetNillablePort sets the "port" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillablePort(s *string) *MailConnectionCreate {
	if s != nil {
		mcc.SetPort(*s)
	}
	return mcc
}

// SetUsername sets the "username" field.
func (mcc *MailConnectionCreate) SetUsername(s string) *MailConnectionCreate {
	mcc.mutation.SetUsername(s)
	return mcc
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillableUsername(s *string) *MailConnectionCreate {
	if s != nil {
		mcc.SetUsername(*s)
	}
	return mcc
}

// SetPassword sets the "password" field.
func (mcc *MailConnectionCreate) SetPassword(s string) *MailConnectionCreate {
	mcc.mutation.SetPassword(s)
	return mcc
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillablePassword(s *string) *MailConnectionCreate {
	if s != nil {
		mcc.SetPassword(*s)
	}
	return mcc
}

// SetStatus sets the "status" field.
func (mcc *MailConnectionCreate) SetStatus(b bool) *MailConnectionCreate {
	mcc.mutation.SetStatus(b)
	return mcc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (mcc *MailConnectionCreate) SetNillableStatus(b *bool) *MailConnectionCreate {
	if b != nil {
		mcc.SetStatus(*b)
	}
	return mcc
}

// Mutation returns the MailConnectionMutation object of the builder.
func (mcc *MailConnectionCreate) Mutation() *MailConnectionMutation {
	return mcc.mutation
}

// Save creates the MailConnection in the database.
func (mcc *MailConnectionCreate) Save(ctx context.Context) (*MailConnection, error) {
	mcc.defaults()
	return withHooks(ctx, mcc.sqlSave, mcc.mutation, mcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mcc *MailConnectionCreate) SaveX(ctx context.Context) *MailConnection {
	v, err := mcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mcc *MailConnectionCreate) Exec(ctx context.Context) error {
	_, err := mcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mcc *MailConnectionCreate) ExecX(ctx context.Context) {
	if err := mcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (mcc *MailConnectionCreate) defaults() {
	if _, ok := mcc.mutation.Status(); !ok {
		v := mailconnection.DefaultStatus
		mcc.mutation.SetStatus(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mcc *MailConnectionCreate) check() error {
	return nil
}

func (mcc *MailConnectionCreate) sqlSave(ctx context.Context) (*MailConnection, error) {
	if err := mcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	mcc.mutation.id = &_node.ID
	mcc.mutation.done = true
	return _node, nil
}

func (mcc *MailConnectionCreate) createSpec() (*MailConnection, *sqlgraph.CreateSpec) {
	var (
		_node = &MailConnection{config: mcc.config}
		_spec = sqlgraph.NewCreateSpec(mailconnection.Table, sqlgraph.NewFieldSpec(mailconnection.FieldID, field.TypeInt))
	)
	_spec.OnConflict = mcc.conflict
	if value, ok := mcc.mutation.Name(); ok {
		_spec.SetField(mailconnection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := mcc.mutation.Host(); ok {
		_spec.SetField(mailconnection.FieldHost, field.TypeString, value)
		_node.Host = value
	}
	if value, ok := mcc.mutation.Port(); ok {
		_spec.SetField(mailconnection.FieldPort, field.TypeString, value)
		_node.Port = value
	}
	if value, ok := mcc.mutation.Username(); ok {
		_spec.SetField(mailconnection.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := mcc.mutation.Password(); ok {
		_spec.SetField(mailconnection.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if value, ok := mcc.mutation.Status(); ok {
		_spec.SetField(mailconnection.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MailConnection.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MailConnectionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mcc *MailConnectionCreate) OnConflict(opts ...sql.ConflictOption) *MailConnectionUpsertOne {
	mcc.conflict = opts
	return &MailConnectionUpsertOne{
		create: mcc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mcc *MailConnectionCreate) OnConflictColumns(columns ...string) *MailConnectionUpsertOne {
	mcc.conflict = append(mcc.conflict, sql.ConflictColumns(columns...))
	return &MailConnectionUpsertOne{
		create: mcc,
	}
}

type (
	// MailConnectionUpsertOne is the builder for "upsert"-ing
	//  one MailConnection node.
	MailConnectionUpsertOne struct {
		create *MailConnectionCreate
	}

	// MailConnectionUpsert is the "OnConflict" setter.
	MailConnectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *MailConnectionUpsert) SetName(v string) *MailConnectionUpsert {
	u.Set(mailconnection.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdateName() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *MailConnectionUpsert) ClearName() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldName)
	return u
}

// SetHost sets the "host" field.
func (u *MailConnectionUpsert) SetHost(v string) *MailConnectionUpsert {
	u.Set(mailconnection.FieldHost, v)
	return u
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdateHost() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldHost)
	return u
}

// ClearHost clears the value of the "host" field.
func (u *MailConnectionUpsert) ClearHost() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldHost)
	return u
}

// SetPort sets the "port" field.
func (u *MailConnectionUpsert) SetPort(v string) *MailConnectionUpsert {
	u.Set(mailconnection.FieldPort, v)
	return u
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdatePort() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldPort)
	return u
}

// ClearPort clears the value of the "port" field.
func (u *MailConnectionUpsert) ClearPort() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldPort)
	return u
}

// SetUsername sets the "username" field.
func (u *MailConnectionUpsert) SetUsername(v string) *MailConnectionUpsert {
	u.Set(mailconnection.FieldUsername, v)
	return u
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdateUsername() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldUsername)
	return u
}

// ClearUsername clears the value of the "username" field.
func (u *MailConnectionUpsert) ClearUsername() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldUsername)
	return u
}

// SetPassword sets the "password" field.
func (u *MailConnectionUpsert) SetPassword(v string) *MailConnectionUpsert {
	u.Set(mailconnection.FieldPassword, v)
	return u
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdatePassword() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldPassword)
	return u
}

// ClearPassword clears the value of the "password" field.
func (u *MailConnectionUpsert) ClearPassword() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldPassword)
	return u
}

// SetStatus sets the "status" field.
func (u *MailConnectionUpsert) SetStatus(v bool) *MailConnectionUpsert {
	u.Set(mailconnection.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MailConnectionUpsert) UpdateStatus() *MailConnectionUpsert {
	u.SetExcluded(mailconnection.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *MailConnectionUpsert) ClearStatus() *MailConnectionUpsert {
	u.SetNull(mailconnection.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MailConnectionUpsertOne) UpdateNewValues() *MailConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *MailConnectionUpsertOne) Ignore() *MailConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MailConnectionUpsertOne) DoNothing() *MailConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MailConnectionCreate.OnConflict
// documentation for more info.
func (u *MailConnectionUpsertOne) Update(set func(*MailConnectionUpsert)) *MailConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MailConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MailConnectionUpsertOne) SetName(v string) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdateName() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MailConnectionUpsertOne) ClearName() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearName()
	})
}

// SetHost sets the "host" field.
func (u *MailConnectionUpsertOne) SetHost(v string) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdateHost() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *MailConnectionUpsertOne) ClearHost() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearHost()
	})
}

// SetPort sets the "port" field.
func (u *MailConnectionUpsertOne) SetPort(v string) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdatePort() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdatePort()
	})
}

// ClearPort clears the value of the "port" field.
func (u *MailConnectionUpsertOne) ClearPort() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearPort()
	})
}

// SetUsername sets the "username" field.
func (u *MailConnectionUpsertOne) SetUsername(v string) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdateUsername() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *MailConnectionUpsertOne) ClearUsername() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MailConnectionUpsertOne) SetPassword(v string) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdatePassword() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *MailConnectionUpsertOne) ClearPassword() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearPassword()
	})
}

// SetStatus sets the "status" field.
func (u *MailConnectionUpsertOne) SetStatus(v bool) *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MailConnectionUpsertOne) UpdateStatus() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MailConnectionUpsertOne) ClearStatus() *MailConnectionUpsertOne {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *MailConnectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MailConnectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MailConnectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *MailConnectionUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *MailConnectionUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// MailConnectionCreateBulk is the builder for creating many MailConnection entities in bulk.
type MailConnectionCreateBulk struct {
	config
	err      error
	builders []*MailConnectionCreate
	conflict []sql.ConflictOption
}

// Save creates the MailConnection entities in the database.
func (mccb *MailConnectionCreateBulk) Save(ctx context.Context) ([]*MailConnection, error) {
	if mccb.err != nil {
		return nil, mccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mccb.builders))
	nodes := make([]*MailConnection, len(mccb.builders))
	mutators := make([]Mutator, len(mccb.builders))
	for i := range mccb.builders {
		func(i int, root context.Context) {
			builder := mccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MailConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = mccb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mccb *MailConnectionCreateBulk) SaveX(ctx context.Context) []*MailConnection {
	v, err := mccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mccb *MailConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := mccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mccb *MailConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := mccb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.MailConnection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.MailConnectionUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (mccb *MailConnectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *MailConnectionUpsertBulk {
	mccb.conflict = opts
	return &MailConnectionUpsertBulk{
		create: mccb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (mccb *MailConnectionCreateBulk) OnConflictColumns(columns ...string) *MailConnectionUpsertBulk {
	mccb.conflict = append(mccb.conflict, sql.ConflictColumns(columns...))
	return &MailConnectionUpsertBulk{
		create: mccb,
	}
}

// MailConnectionUpsertBulk is the builder for "upsert"-ing
// a bulk of MailConnection nodes.
type MailConnectionUpsertBulk struct {
	create *MailConnectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *MailConnectionUpsertBulk) UpdateNewValues() *MailConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.MailConnection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *MailConnectionUpsertBulk) Ignore() *MailConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *MailConnectionUpsertBulk) DoNothing() *MailConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the MailConnectionCreateBulk.OnConflict
// documentation for more info.
func (u *MailConnectionUpsertBulk) Update(set func(*MailConnectionUpsert)) *MailConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&MailConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *MailConnectionUpsertBulk) SetName(v string) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdateName() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *MailConnectionUpsertBulk) ClearName() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearName()
	})
}

// SetHost sets the "host" field.
func (u *MailConnectionUpsertBulk) SetHost(v string) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetHost(v)
	})
}

// UpdateHost sets the "host" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdateHost() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateHost()
	})
}

// ClearHost clears the value of the "host" field.
func (u *MailConnectionUpsertBulk) ClearHost() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearHost()
	})
}

// SetPort sets the "port" field.
func (u *MailConnectionUpsertBulk) SetPort(v string) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetPort(v)
	})
}

// UpdatePort sets the "port" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdatePort() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdatePort()
	})
}

// ClearPort clears the value of the "port" field.
func (u *MailConnectionUpsertBulk) ClearPort() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearPort()
	})
}

// SetUsername sets the "username" field.
func (u *MailConnectionUpsertBulk) SetUsername(v string) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetUsername(v)
	})
}

// UpdateUsername sets the "username" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdateUsername() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateUsername()
	})
}

// ClearUsername clears the value of the "username" field.
func (u *MailConnectionUpsertBulk) ClearUsername() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearUsername()
	})
}

// SetPassword sets the "password" field.
func (u *MailConnectionUpsertBulk) SetPassword(v string) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetPassword(v)
	})
}

// UpdatePassword sets the "password" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdatePassword() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdatePassword()
	})
}

// ClearPassword clears the value of the "password" field.
func (u *MailConnectionUpsertBulk) ClearPassword() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearPassword()
	})
}

// SetStatus sets the "status" field.
func (u *MailConnectionUpsertBulk) SetStatus(v bool) *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *MailConnectionUpsertBulk) UpdateStatus() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *MailConnectionUpsertBulk) ClearStatus() *MailConnectionUpsertBulk {
	return u.Update(func(s *MailConnectionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *MailConnectionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the MailConnectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for MailConnectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *MailConnectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
