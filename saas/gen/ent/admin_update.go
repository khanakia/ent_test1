// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/admin"
	"saas/gen/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AdminUpdate is the builder for updating Admin entities.
type AdminUpdate struct {
	config
	hooks     []Hook
	mutation  *AdminMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AdminUpdate builder.
func (au *AdminUpdate) Where(ps ...predicate.Admin) *AdminUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUpdatedAt sets the "updated_at" field.
func (au *AdminUpdate) SetUpdatedAt(t time.Time) *AdminUpdate {
	au.mutation.SetUpdatedAt(t)
	return au
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (au *AdminUpdate) ClearUpdatedAt() *AdminUpdate {
	au.mutation.ClearUpdatedAt()
	return au
}

// SetAppID sets the "app_id" field.
func (au *AdminUpdate) SetAppID(s string) *AdminUpdate {
	au.mutation.SetAppID(s)
	return au
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (au *AdminUpdate) SetNillableAppID(s *string) *AdminUpdate {
	if s != nil {
		au.SetAppID(*s)
	}
	return au
}

// ClearAppID clears the value of the "app_id" field.
func (au *AdminUpdate) ClearAppID() *AdminUpdate {
	au.mutation.ClearAppID()
	return au
}

// SetEmail sets the "email" field.
func (au *AdminUpdate) SetEmail(s string) *AdminUpdate {
	au.mutation.SetEmail(s)
	return au
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (au *AdminUpdate) SetNillableEmail(s *string) *AdminUpdate {
	if s != nil {
		au.SetEmail(*s)
	}
	return au
}

// SetFirstName sets the "first_name" field.
func (au *AdminUpdate) SetFirstName(s string) *AdminUpdate {
	au.mutation.SetFirstName(s)
	return au
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableFirstName(s *string) *AdminUpdate {
	if s != nil {
		au.SetFirstName(*s)
	}
	return au
}

// ClearFirstName clears the value of the "first_name" field.
func (au *AdminUpdate) ClearFirstName() *AdminUpdate {
	au.mutation.ClearFirstName()
	return au
}

// SetLastName sets the "last_name" field.
func (au *AdminUpdate) SetLastName(s string) *AdminUpdate {
	au.mutation.SetLastName(s)
	return au
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (au *AdminUpdate) SetNillableLastName(s *string) *AdminUpdate {
	if s != nil {
		au.SetLastName(*s)
	}
	return au
}

// ClearLastName clears the value of the "last_name" field.
func (au *AdminUpdate) ClearLastName() *AdminUpdate {
	au.mutation.ClearLastName()
	return au
}

// SetStatus sets the "status" field.
func (au *AdminUpdate) SetStatus(b bool) *AdminUpdate {
	au.mutation.SetStatus(b)
	return au
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (au *AdminUpdate) SetNillableStatus(b *bool) *AdminUpdate {
	if b != nil {
		au.SetStatus(*b)
	}
	return au
}

// ClearStatus clears the value of the "status" field.
func (au *AdminUpdate) ClearStatus() *AdminUpdate {
	au.mutation.ClearStatus()
	return au
}

// SetPassword sets the "password" field.
func (au *AdminUpdate) SetPassword(s string) *AdminUpdate {
	au.mutation.SetPassword(s)
	return au
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (au *AdminUpdate) SetNillablePassword(s *string) *AdminUpdate {
	if s != nil {
		au.SetPassword(*s)
	}
	return au
}

// ClearPassword clears the value of the "password" field.
func (au *AdminUpdate) ClearPassword() *AdminUpdate {
	au.mutation.ClearPassword()
	return au
}

// SetSecret sets the "secret" field.
func (au *AdminUpdate) SetSecret(s string) *AdminUpdate {
	au.mutation.SetSecret(s)
	return au
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (au *AdminUpdate) SetNillableSecret(s *string) *AdminUpdate {
	if s != nil {
		au.SetSecret(*s)
	}
	return au
}

// ClearSecret clears the value of the "secret" field.
func (au *AdminUpdate) ClearSecret() *AdminUpdate {
	au.mutation.ClearSecret()
	return au
}

// Mutation returns the AdminMutation object of the builder.
func (au *AdminUpdate) Mutation() *AdminMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AdminUpdate) Save(ctx context.Context) (int, error) {
	au.defaults()
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AdminUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AdminUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AdminUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (au *AdminUpdate) defaults() {
	if _, ok := au.mutation.UpdatedAt(); !ok && !au.mutation.UpdatedAtCleared() {
		v := admin.UpdateDefaultUpdatedAt()
		au.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AdminUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AdminUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.CreatedAtCleared() {
		_spec.ClearField(admin.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if au.mutation.UpdatedAtCleared() {
		_spec.ClearField(admin.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := au.mutation.AppID(); ok {
		_spec.SetField(admin.FieldAppID, field.TypeString, value)
	}
	if au.mutation.AppIDCleared() {
		_spec.ClearField(admin.FieldAppID, field.TypeString)
	}
	if value, ok := au.mutation.Email(); ok {
		_spec.SetField(admin.FieldEmail, field.TypeString, value)
	}
	if value, ok := au.mutation.FirstName(); ok {
		_spec.SetField(admin.FieldFirstName, field.TypeString, value)
	}
	if au.mutation.FirstNameCleared() {
		_spec.ClearField(admin.FieldFirstName, field.TypeString)
	}
	if value, ok := au.mutation.LastName(); ok {
		_spec.SetField(admin.FieldLastName, field.TypeString, value)
	}
	if au.mutation.LastNameCleared() {
		_spec.ClearField(admin.FieldLastName, field.TypeString)
	}
	if value, ok := au.mutation.Status(); ok {
		_spec.SetField(admin.FieldStatus, field.TypeBool, value)
	}
	if au.mutation.StatusCleared() {
		_spec.ClearField(admin.FieldStatus, field.TypeBool)
	}
	if value, ok := au.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if au.mutation.PasswordCleared() {
		_spec.ClearField(admin.FieldPassword, field.TypeString)
	}
	if value, ok := au.mutation.Secret(); ok {
		_spec.SetField(admin.FieldSecret, field.TypeString, value)
	}
	if au.mutation.SecretCleared() {
		_spec.ClearField(admin.FieldSecret, field.TypeString)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AdminUpdateOne is the builder for updating a single Admin entity.
type AdminUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AdminMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdatedAt sets the "updated_at" field.
func (auo *AdminUpdateOne) SetUpdatedAt(t time.Time) *AdminUpdateOne {
	auo.mutation.SetUpdatedAt(t)
	return auo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (auo *AdminUpdateOne) ClearUpdatedAt() *AdminUpdateOne {
	auo.mutation.ClearUpdatedAt()
	return auo
}

// SetAppID sets the "app_id" field.
func (auo *AdminUpdateOne) SetAppID(s string) *AdminUpdateOne {
	auo.mutation.SetAppID(s)
	return auo
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableAppID(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetAppID(*s)
	}
	return auo
}

// ClearAppID clears the value of the "app_id" field.
func (auo *AdminUpdateOne) ClearAppID() *AdminUpdateOne {
	auo.mutation.ClearAppID()
	return auo
}

// SetEmail sets the "email" field.
func (auo *AdminUpdateOne) SetEmail(s string) *AdminUpdateOne {
	auo.mutation.SetEmail(s)
	return auo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableEmail(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetEmail(*s)
	}
	return auo
}

// SetFirstName sets the "first_name" field.
func (auo *AdminUpdateOne) SetFirstName(s string) *AdminUpdateOne {
	auo.mutation.SetFirstName(s)
	return auo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableFirstName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetFirstName(*s)
	}
	return auo
}

// ClearFirstName clears the value of the "first_name" field.
func (auo *AdminUpdateOne) ClearFirstName() *AdminUpdateOne {
	auo.mutation.ClearFirstName()
	return auo
}

// SetLastName sets the "last_name" field.
func (auo *AdminUpdateOne) SetLastName(s string) *AdminUpdateOne {
	auo.mutation.SetLastName(s)
	return auo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableLastName(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetLastName(*s)
	}
	return auo
}

// ClearLastName clears the value of the "last_name" field.
func (auo *AdminUpdateOne) ClearLastName() *AdminUpdateOne {
	auo.mutation.ClearLastName()
	return auo
}

// SetStatus sets the "status" field.
func (auo *AdminUpdateOne) SetStatus(b bool) *AdminUpdateOne {
	auo.mutation.SetStatus(b)
	return auo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableStatus(b *bool) *AdminUpdateOne {
	if b != nil {
		auo.SetStatus(*b)
	}
	return auo
}

// ClearStatus clears the value of the "status" field.
func (auo *AdminUpdateOne) ClearStatus() *AdminUpdateOne {
	auo.mutation.ClearStatus()
	return auo
}

// SetPassword sets the "password" field.
func (auo *AdminUpdateOne) SetPassword(s string) *AdminUpdateOne {
	auo.mutation.SetPassword(s)
	return auo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillablePassword(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetPassword(*s)
	}
	return auo
}

// ClearPassword clears the value of the "password" field.
func (auo *AdminUpdateOne) ClearPassword() *AdminUpdateOne {
	auo.mutation.ClearPassword()
	return auo
}

// SetSecret sets the "secret" field.
func (auo *AdminUpdateOne) SetSecret(s string) *AdminUpdateOne {
	auo.mutation.SetSecret(s)
	return auo
}

// SetNillableSecret sets the "secret" field if the given value is not nil.
func (auo *AdminUpdateOne) SetNillableSecret(s *string) *AdminUpdateOne {
	if s != nil {
		auo.SetSecret(*s)
	}
	return auo
}

// ClearSecret clears the value of the "secret" field.
func (auo *AdminUpdateOne) ClearSecret() *AdminUpdateOne {
	auo.mutation.ClearSecret()
	return auo
}

// Mutation returns the AdminMutation object of the builder.
func (auo *AdminUpdateOne) Mutation() *AdminMutation {
	return auo.mutation
}

// Where appends a list predicates to the AdminUpdate builder.
func (auo *AdminUpdateOne) Where(ps ...predicate.Admin) *AdminUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AdminUpdateOne) Select(field string, fields ...string) *AdminUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Admin entity.
func (auo *AdminUpdateOne) Save(ctx context.Context) (*Admin, error) {
	auo.defaults()
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AdminUpdateOne) SaveX(ctx context.Context) *Admin {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AdminUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AdminUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (auo *AdminUpdateOne) defaults() {
	if _, ok := auo.mutation.UpdatedAt(); !ok && !auo.mutation.UpdatedAtCleared() {
		v := admin.UpdateDefaultUpdatedAt()
		auo.mutation.SetUpdatedAt(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AdminUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AdminUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AdminUpdateOne) sqlSave(ctx context.Context) (_node *Admin, err error) {
	_spec := sqlgraph.NewUpdateSpec(admin.Table, admin.Columns, sqlgraph.NewFieldSpec(admin.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Admin.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, admin.FieldID)
		for _, f := range fields {
			if !admin.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != admin.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if auo.mutation.CreatedAtCleared() {
		_spec.ClearField(admin.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdatedAt(); ok {
		_spec.SetField(admin.FieldUpdatedAt, field.TypeTime, value)
	}
	if auo.mutation.UpdatedAtCleared() {
		_spec.ClearField(admin.FieldUpdatedAt, field.TypeTime)
	}
	if value, ok := auo.mutation.AppID(); ok {
		_spec.SetField(admin.FieldAppID, field.TypeString, value)
	}
	if auo.mutation.AppIDCleared() {
		_spec.ClearField(admin.FieldAppID, field.TypeString)
	}
	if value, ok := auo.mutation.Email(); ok {
		_spec.SetField(admin.FieldEmail, field.TypeString, value)
	}
	if value, ok := auo.mutation.FirstName(); ok {
		_spec.SetField(admin.FieldFirstName, field.TypeString, value)
	}
	if auo.mutation.FirstNameCleared() {
		_spec.ClearField(admin.FieldFirstName, field.TypeString)
	}
	if value, ok := auo.mutation.LastName(); ok {
		_spec.SetField(admin.FieldLastName, field.TypeString, value)
	}
	if auo.mutation.LastNameCleared() {
		_spec.ClearField(admin.FieldLastName, field.TypeString)
	}
	if value, ok := auo.mutation.Status(); ok {
		_spec.SetField(admin.FieldStatus, field.TypeBool, value)
	}
	if auo.mutation.StatusCleared() {
		_spec.ClearField(admin.FieldStatus, field.TypeBool)
	}
	if value, ok := auo.mutation.Password(); ok {
		_spec.SetField(admin.FieldPassword, field.TypeString, value)
	}
	if auo.mutation.PasswordCleared() {
		_spec.ClearField(admin.FieldPassword, field.TypeString)
	}
	if value, ok := auo.mutation.Secret(); ok {
		_spec.SetField(admin.FieldSecret, field.TypeString, value)
	}
	if auo.mutation.SecretCleared() {
		_spec.ClearField(admin.FieldSecret, field.TypeString)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Admin{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{admin.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
