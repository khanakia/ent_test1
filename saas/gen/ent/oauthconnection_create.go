// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"saas/gen/ent/oauthconnection"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OauthConnectionCreate is the builder for creating a OauthConnection entity.
type OauthConnectionCreate struct {
	config
	mutation *OauthConnectionMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (occ *OauthConnectionCreate) SetCreatedAt(t time.Time) *OauthConnectionCreate {
	occ.mutation.SetCreatedAt(t)
	return occ
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableCreatedAt(t *time.Time) *OauthConnectionCreate {
	if t != nil {
		occ.SetCreatedAt(*t)
	}
	return occ
}

// SetUpdatedAt sets the "updated_at" field.
func (occ *OauthConnectionCreate) SetUpdatedAt(t time.Time) *OauthConnectionCreate {
	occ.mutation.SetUpdatedAt(t)
	return occ
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableUpdatedAt(t *time.Time) *OauthConnectionCreate {
	if t != nil {
		occ.SetUpdatedAt(*t)
	}
	return occ
}

// SetAppID sets the "app_id" field.
func (occ *OauthConnectionCreate) SetAppID(s string) *OauthConnectionCreate {
	occ.mutation.SetAppID(s)
	return occ
}

// SetNillableAppID sets the "app_id" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableAppID(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetAppID(*s)
	}
	return occ
}

// SetName sets the "name" field.
func (occ *OauthConnectionCreate) SetName(s string) *OauthConnectionCreate {
	occ.mutation.SetName(s)
	return occ
}

// SetNillableName sets the "name" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableName(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetName(*s)
	}
	return occ
}

// SetProvider sets the "provider" field.
func (occ *OauthConnectionCreate) SetProvider(s string) *OauthConnectionCreate {
	occ.mutation.SetProvider(s)
	return occ
}

// SetNillableProvider sets the "provider" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableProvider(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetProvider(*s)
	}
	return occ
}

// SetClientID sets the "client_id" field.
func (occ *OauthConnectionCreate) SetClientID(s string) *OauthConnectionCreate {
	occ.mutation.SetClientID(s)
	return occ
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableClientID(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetClientID(*s)
	}
	return occ
}

// SetClientSecret sets the "client_secret" field.
func (occ *OauthConnectionCreate) SetClientSecret(s string) *OauthConnectionCreate {
	occ.mutation.SetClientSecret(s)
	return occ
}

// SetNillableClientSecret sets the "client_secret" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableClientSecret(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetClientSecret(*s)
	}
	return occ
}

// SetScopes sets the "scopes" field.
func (occ *OauthConnectionCreate) SetScopes(s string) *OauthConnectionCreate {
	occ.mutation.SetScopes(s)
	return occ
}

// SetNillableScopes sets the "scopes" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableScopes(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetScopes(*s)
	}
	return occ
}

// SetRedirectURL sets the "redirect_url" field.
func (occ *OauthConnectionCreate) SetRedirectURL(s string) *OauthConnectionCreate {
	occ.mutation.SetRedirectURL(s)
	return occ
}

// SetNillableRedirectURL sets the "redirect_url" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableRedirectURL(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetRedirectURL(*s)
	}
	return occ
}

// SetDashboardLink sets the "dashboard_link" field.
func (occ *OauthConnectionCreate) SetDashboardLink(s string) *OauthConnectionCreate {
	occ.mutation.SetDashboardLink(s)
	return occ
}

// SetNillableDashboardLink sets the "dashboard_link" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableDashboardLink(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetDashboardLink(*s)
	}
	return occ
}

// SetNote sets the "note" field.
func (occ *OauthConnectionCreate) SetNote(s string) *OauthConnectionCreate {
	occ.mutation.SetNote(s)
	return occ
}

// SetNillableNote sets the "note" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableNote(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetNote(*s)
	}
	return occ
}

// SetStatus sets the "status" field.
func (occ *OauthConnectionCreate) SetStatus(b bool) *OauthConnectionCreate {
	occ.mutation.SetStatus(b)
	return occ
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableStatus(b *bool) *OauthConnectionCreate {
	if b != nil {
		occ.SetStatus(*b)
	}
	return occ
}

// SetID sets the "id" field.
func (occ *OauthConnectionCreate) SetID(s string) *OauthConnectionCreate {
	occ.mutation.SetID(s)
	return occ
}

// SetNillableID sets the "id" field if the given value is not nil.
func (occ *OauthConnectionCreate) SetNillableID(s *string) *OauthConnectionCreate {
	if s != nil {
		occ.SetID(*s)
	}
	return occ
}

// Mutation returns the OauthConnectionMutation object of the builder.
func (occ *OauthConnectionCreate) Mutation() *OauthConnectionMutation {
	return occ.mutation
}

// Save creates the OauthConnection in the database.
func (occ *OauthConnectionCreate) Save(ctx context.Context) (*OauthConnection, error) {
	occ.defaults()
	return withHooks(ctx, occ.sqlSave, occ.mutation, occ.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (occ *OauthConnectionCreate) SaveX(ctx context.Context) *OauthConnection {
	v, err := occ.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occ *OauthConnectionCreate) Exec(ctx context.Context) error {
	_, err := occ.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occ *OauthConnectionCreate) ExecX(ctx context.Context) {
	if err := occ.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (occ *OauthConnectionCreate) defaults() {
	if _, ok := occ.mutation.CreatedAt(); !ok {
		v := oauthconnection.DefaultCreatedAt()
		occ.mutation.SetCreatedAt(v)
	}
	if _, ok := occ.mutation.UpdatedAt(); !ok {
		v := oauthconnection.DefaultUpdatedAt()
		occ.mutation.SetUpdatedAt(v)
	}
	if _, ok := occ.mutation.ID(); !ok {
		v := oauthconnection.DefaultID()
		occ.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (occ *OauthConnectionCreate) check() error {
	return nil
}

func (occ *OauthConnectionCreate) sqlSave(ctx context.Context) (*OauthConnection, error) {
	if err := occ.check(); err != nil {
		return nil, err
	}
	_node, _spec := occ.createSpec()
	if err := sqlgraph.CreateNode(ctx, occ.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OauthConnection.ID type: %T", _spec.ID.Value)
		}
	}
	occ.mutation.id = &_node.ID
	occ.mutation.done = true
	return _node, nil
}

func (occ *OauthConnectionCreate) createSpec() (*OauthConnection, *sqlgraph.CreateSpec) {
	var (
		_node = &OauthConnection{config: occ.config}
		_spec = sqlgraph.NewCreateSpec(oauthconnection.Table, sqlgraph.NewFieldSpec(oauthconnection.FieldID, field.TypeString))
	)
	_spec.OnConflict = occ.conflict
	if id, ok := occ.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := occ.mutation.CreatedAt(); ok {
		_spec.SetField(oauthconnection.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := occ.mutation.UpdatedAt(); ok {
		_spec.SetField(oauthconnection.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := occ.mutation.AppID(); ok {
		_spec.SetField(oauthconnection.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := occ.mutation.Name(); ok {
		_spec.SetField(oauthconnection.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := occ.mutation.Provider(); ok {
		_spec.SetField(oauthconnection.FieldProvider, field.TypeString, value)
		_node.Provider = value
	}
	if value, ok := occ.mutation.ClientID(); ok {
		_spec.SetField(oauthconnection.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := occ.mutation.ClientSecret(); ok {
		_spec.SetField(oauthconnection.FieldClientSecret, field.TypeString, value)
		_node.ClientSecret = value
	}
	if value, ok := occ.mutation.Scopes(); ok {
		_spec.SetField(oauthconnection.FieldScopes, field.TypeString, value)
		_node.Scopes = value
	}
	if value, ok := occ.mutation.RedirectURL(); ok {
		_spec.SetField(oauthconnection.FieldRedirectURL, field.TypeString, value)
		_node.RedirectURL = value
	}
	if value, ok := occ.mutation.DashboardLink(); ok {
		_spec.SetField(oauthconnection.FieldDashboardLink, field.TypeString, value)
		_node.DashboardLink = value
	}
	if value, ok := occ.mutation.Note(); ok {
		_spec.SetField(oauthconnection.FieldNote, field.TypeString, value)
		_node.Note = value
	}
	if value, ok := occ.mutation.Status(); ok {
		_spec.SetField(oauthconnection.FieldStatus, field.TypeBool, value)
		_node.Status = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OauthConnection.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OauthConnectionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (occ *OauthConnectionCreate) OnConflict(opts ...sql.ConflictOption) *OauthConnectionUpsertOne {
	occ.conflict = opts
	return &OauthConnectionUpsertOne{
		create: occ,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occ *OauthConnectionCreate) OnConflictColumns(columns ...string) *OauthConnectionUpsertOne {
	occ.conflict = append(occ.conflict, sql.ConflictColumns(columns...))
	return &OauthConnectionUpsertOne{
		create: occ,
	}
}

type (
	// OauthConnectionUpsertOne is the builder for "upsert"-ing
	//  one OauthConnection node.
	OauthConnectionUpsertOne struct {
		create *OauthConnectionCreate
	}

	// OauthConnectionUpsert is the "OnConflict" setter.
	OauthConnectionUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *OauthConnectionUpsert) SetUpdatedAt(v time.Time) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateUpdatedAt() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldUpdatedAt)
	return u
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OauthConnectionUpsert) ClearUpdatedAt() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldUpdatedAt)
	return u
}

// SetAppID sets the "app_id" field.
func (u *OauthConnectionUpsert) SetAppID(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldAppID, v)
	return u
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateAppID() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldAppID)
	return u
}

// ClearAppID clears the value of the "app_id" field.
func (u *OauthConnectionUpsert) ClearAppID() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldAppID)
	return u
}

// SetName sets the "name" field.
func (u *OauthConnectionUpsert) SetName(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateName() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldName)
	return u
}

// ClearName clears the value of the "name" field.
func (u *OauthConnectionUpsert) ClearName() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldName)
	return u
}

// SetProvider sets the "provider" field.
func (u *OauthConnectionUpsert) SetProvider(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldProvider, v)
	return u
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateProvider() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldProvider)
	return u
}

// ClearProvider clears the value of the "provider" field.
func (u *OauthConnectionUpsert) ClearProvider() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldProvider)
	return u
}

// SetClientID sets the "client_id" field.
func (u *OauthConnectionUpsert) SetClientID(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldClientID, v)
	return u
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateClientID() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldClientID)
	return u
}

// ClearClientID clears the value of the "client_id" field.
func (u *OauthConnectionUpsert) ClearClientID() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldClientID)
	return u
}

// SetClientSecret sets the "client_secret" field.
func (u *OauthConnectionUpsert) SetClientSecret(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldClientSecret, v)
	return u
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateClientSecret() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldClientSecret)
	return u
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *OauthConnectionUpsert) ClearClientSecret() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldClientSecret)
	return u
}

// SetScopes sets the "scopes" field.
func (u *OauthConnectionUpsert) SetScopes(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldScopes, v)
	return u
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateScopes() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldScopes)
	return u
}

// ClearScopes clears the value of the "scopes" field.
func (u *OauthConnectionUpsert) ClearScopes() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldScopes)
	return u
}

// SetRedirectURL sets the "redirect_url" field.
func (u *OauthConnectionUpsert) SetRedirectURL(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldRedirectURL, v)
	return u
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateRedirectURL() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldRedirectURL)
	return u
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *OauthConnectionUpsert) ClearRedirectURL() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldRedirectURL)
	return u
}

// SetDashboardLink sets the "dashboard_link" field.
func (u *OauthConnectionUpsert) SetDashboardLink(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldDashboardLink, v)
	return u
}

// UpdateDashboardLink sets the "dashboard_link" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateDashboardLink() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldDashboardLink)
	return u
}

// ClearDashboardLink clears the value of the "dashboard_link" field.
func (u *OauthConnectionUpsert) ClearDashboardLink() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldDashboardLink)
	return u
}

// SetNote sets the "note" field.
func (u *OauthConnectionUpsert) SetNote(v string) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldNote, v)
	return u
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateNote() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldNote)
	return u
}

// ClearNote clears the value of the "note" field.
func (u *OauthConnectionUpsert) ClearNote() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldNote)
	return u
}

// SetStatus sets the "status" field.
func (u *OauthConnectionUpsert) SetStatus(v bool) *OauthConnectionUpsert {
	u.Set(oauthconnection.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OauthConnectionUpsert) UpdateStatus() *OauthConnectionUpsert {
	u.SetExcluded(oauthconnection.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *OauthConnectionUpsert) ClearStatus() *OauthConnectionUpsert {
	u.SetNull(oauthconnection.FieldStatus)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthconnection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OauthConnectionUpsertOne) UpdateNewValues() *OauthConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(oauthconnection.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(oauthconnection.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OauthConnectionUpsertOne) Ignore() *OauthConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OauthConnectionUpsertOne) DoNothing() *OauthConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OauthConnectionCreate.OnConflict
// documentation for more info.
func (u *OauthConnectionUpsertOne) Update(set func(*OauthConnectionUpsert)) *OauthConnectionUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OauthConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OauthConnectionUpsertOne) SetUpdatedAt(v time.Time) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateUpdatedAt() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OauthConnectionUpsertOne) ClearUpdatedAt() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *OauthConnectionUpsertOne) SetAppID(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateAppID() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OauthConnectionUpsertOne) ClearAppID() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *OauthConnectionUpsertOne) SetName(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateName() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OauthConnectionUpsertOne) ClearName() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearName()
	})
}

// SetProvider sets the "provider" field.
func (u *OauthConnectionUpsertOne) SetProvider(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateProvider() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *OauthConnectionUpsertOne) ClearProvider() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearProvider()
	})
}

// SetClientID sets the "client_id" field.
func (u *OauthConnectionUpsertOne) SetClientID(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateClientID() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *OauthConnectionUpsertOne) ClearClientID() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OauthConnectionUpsertOne) SetClientSecret(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateClientSecret() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *OauthConnectionUpsertOne) ClearClientSecret() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearClientSecret()
	})
}

// SetScopes sets the "scopes" field.
func (u *OauthConnectionUpsertOne) SetScopes(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateScopes() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *OauthConnectionUpsertOne) ClearScopes() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearScopes()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *OauthConnectionUpsertOne) SetRedirectURL(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateRedirectURL() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateRedirectURL()
	})
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *OauthConnectionUpsertOne) ClearRedirectURL() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearRedirectURL()
	})
}

// SetDashboardLink sets the "dashboard_link" field.
func (u *OauthConnectionUpsertOne) SetDashboardLink(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetDashboardLink(v)
	})
}

// UpdateDashboardLink sets the "dashboard_link" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateDashboardLink() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateDashboardLink()
	})
}

// ClearDashboardLink clears the value of the "dashboard_link" field.
func (u *OauthConnectionUpsertOne) ClearDashboardLink() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearDashboardLink()
	})
}

// SetNote sets the "note" field.
func (u *OauthConnectionUpsertOne) SetNote(v string) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateNote() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *OauthConnectionUpsertOne) ClearNote() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearNote()
	})
}

// SetStatus sets the "status" field.
func (u *OauthConnectionUpsertOne) SetStatus(v bool) *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OauthConnectionUpsertOne) UpdateStatus() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OauthConnectionUpsertOne) ClearStatus() *OauthConnectionUpsertOne {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *OauthConnectionUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OauthConnectionCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OauthConnectionUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OauthConnectionUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: OauthConnectionUpsertOne.ID is not supported by MySQL driver. Use OauthConnectionUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OauthConnectionUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OauthConnectionCreateBulk is the builder for creating many OauthConnection entities in bulk.
type OauthConnectionCreateBulk struct {
	config
	err      error
	builders []*OauthConnectionCreate
	conflict []sql.ConflictOption
}

// Save creates the OauthConnection entities in the database.
func (occb *OauthConnectionCreateBulk) Save(ctx context.Context) ([]*OauthConnection, error) {
	if occb.err != nil {
		return nil, occb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(occb.builders))
	nodes := make([]*OauthConnection, len(occb.builders))
	mutators := make([]Mutator, len(occb.builders))
	for i := range occb.builders {
		func(i int, root context.Context) {
			builder := occb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthConnectionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, occb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = occb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, occb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, occb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (occb *OauthConnectionCreateBulk) SaveX(ctx context.Context) []*OauthConnection {
	v, err := occb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (occb *OauthConnectionCreateBulk) Exec(ctx context.Context) error {
	_, err := occb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (occb *OauthConnectionCreateBulk) ExecX(ctx context.Context) {
	if err := occb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.OauthConnection.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OauthConnectionUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (occb *OauthConnectionCreateBulk) OnConflict(opts ...sql.ConflictOption) *OauthConnectionUpsertBulk {
	occb.conflict = opts
	return &OauthConnectionUpsertBulk{
		create: occb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (occb *OauthConnectionCreateBulk) OnConflictColumns(columns ...string) *OauthConnectionUpsertBulk {
	occb.conflict = append(occb.conflict, sql.ConflictColumns(columns...))
	return &OauthConnectionUpsertBulk{
		create: occb,
	}
}

// OauthConnectionUpsertBulk is the builder for "upsert"-ing
// a bulk of OauthConnection nodes.
type OauthConnectionUpsertBulk struct {
	create *OauthConnectionCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(oauthconnection.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *OauthConnectionUpsertBulk) UpdateNewValues() *OauthConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(oauthconnection.FieldID)
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(oauthconnection.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.OauthConnection.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OauthConnectionUpsertBulk) Ignore() *OauthConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OauthConnectionUpsertBulk) DoNothing() *OauthConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OauthConnectionCreateBulk.OnConflict
// documentation for more info.
func (u *OauthConnectionUpsertBulk) Update(set func(*OauthConnectionUpsert)) *OauthConnectionUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OauthConnectionUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *OauthConnectionUpsertBulk) SetUpdatedAt(v time.Time) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateUpdatedAt() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateUpdatedAt()
	})
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (u *OauthConnectionUpsertBulk) ClearUpdatedAt() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearUpdatedAt()
	})
}

// SetAppID sets the "app_id" field.
func (u *OauthConnectionUpsertBulk) SetAppID(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetAppID(v)
	})
}

// UpdateAppID sets the "app_id" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateAppID() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateAppID()
	})
}

// ClearAppID clears the value of the "app_id" field.
func (u *OauthConnectionUpsertBulk) ClearAppID() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearAppID()
	})
}

// SetName sets the "name" field.
func (u *OauthConnectionUpsertBulk) SetName(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateName() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateName()
	})
}

// ClearName clears the value of the "name" field.
func (u *OauthConnectionUpsertBulk) ClearName() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearName()
	})
}

// SetProvider sets the "provider" field.
func (u *OauthConnectionUpsertBulk) SetProvider(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetProvider(v)
	})
}

// UpdateProvider sets the "provider" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateProvider() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateProvider()
	})
}

// ClearProvider clears the value of the "provider" field.
func (u *OauthConnectionUpsertBulk) ClearProvider() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearProvider()
	})
}

// SetClientID sets the "client_id" field.
func (u *OauthConnectionUpsertBulk) SetClientID(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetClientID(v)
	})
}

// UpdateClientID sets the "client_id" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateClientID() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateClientID()
	})
}

// ClearClientID clears the value of the "client_id" field.
func (u *OauthConnectionUpsertBulk) ClearClientID() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearClientID()
	})
}

// SetClientSecret sets the "client_secret" field.
func (u *OauthConnectionUpsertBulk) SetClientSecret(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetClientSecret(v)
	})
}

// UpdateClientSecret sets the "client_secret" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateClientSecret() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateClientSecret()
	})
}

// ClearClientSecret clears the value of the "client_secret" field.
func (u *OauthConnectionUpsertBulk) ClearClientSecret() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearClientSecret()
	})
}

// SetScopes sets the "scopes" field.
func (u *OauthConnectionUpsertBulk) SetScopes(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetScopes(v)
	})
}

// UpdateScopes sets the "scopes" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateScopes() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateScopes()
	})
}

// ClearScopes clears the value of the "scopes" field.
func (u *OauthConnectionUpsertBulk) ClearScopes() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearScopes()
	})
}

// SetRedirectURL sets the "redirect_url" field.
func (u *OauthConnectionUpsertBulk) SetRedirectURL(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetRedirectURL(v)
	})
}

// UpdateRedirectURL sets the "redirect_url" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateRedirectURL() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateRedirectURL()
	})
}

// ClearRedirectURL clears the value of the "redirect_url" field.
func (u *OauthConnectionUpsertBulk) ClearRedirectURL() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearRedirectURL()
	})
}

// SetDashboardLink sets the "dashboard_link" field.
func (u *OauthConnectionUpsertBulk) SetDashboardLink(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetDashboardLink(v)
	})
}

// UpdateDashboardLink sets the "dashboard_link" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateDashboardLink() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateDashboardLink()
	})
}

// ClearDashboardLink clears the value of the "dashboard_link" field.
func (u *OauthConnectionUpsertBulk) ClearDashboardLink() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearDashboardLink()
	})
}

// SetNote sets the "note" field.
func (u *OauthConnectionUpsertBulk) SetNote(v string) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetNote(v)
	})
}

// UpdateNote sets the "note" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateNote() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateNote()
	})
}

// ClearNote clears the value of the "note" field.
func (u *OauthConnectionUpsertBulk) ClearNote() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearNote()
	})
}

// SetStatus sets the "status" field.
func (u *OauthConnectionUpsertBulk) SetStatus(v bool) *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *OauthConnectionUpsertBulk) UpdateStatus() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *OauthConnectionUpsertBulk) ClearStatus() *OauthConnectionUpsertBulk {
	return u.Update(func(s *OauthConnectionUpsert) {
		s.ClearStatus()
	})
}

// Exec executes the query.
func (u *OauthConnectionUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OauthConnectionCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OauthConnectionCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OauthConnectionUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
