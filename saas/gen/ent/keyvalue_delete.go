// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"saas/gen/ent/keyvalue"
	"saas/gen/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// KeyvalueDelete is the builder for deleting a Keyvalue entity.
type KeyvalueDelete struct {
	config
	hooks    []Hook
	mutation *KeyvalueMutation
}

// Where appends a list predicates to the KeyvalueDelete builder.
func (kd *KeyvalueDelete) Where(ps ...predicate.Keyvalue) *KeyvalueDelete {
	kd.mutation.Where(ps...)
	return kd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (kd *KeyvalueDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, kd.sqlExec, kd.mutation, kd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (kd *KeyvalueDelete) ExecX(ctx context.Context) int {
	n, err := kd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (kd *KeyvalueDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(keyvalue.Table, sqlgraph.NewFieldSpec(keyvalue.FieldID, field.TypeString))
	if ps := kd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, kd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	kd.mutation.done = true
	return affected, err
}

// KeyvalueDeleteOne is the builder for deleting a single Keyvalue entity.
type KeyvalueDeleteOne struct {
	kd *KeyvalueDelete
}

// Where appends a list predicates to the KeyvalueDelete builder.
func (kdo *KeyvalueDeleteOne) Where(ps ...predicate.Keyvalue) *KeyvalueDeleteOne {
	kdo.kd.mutation.Where(ps...)
	return kdo
}

// Exec executes the deletion query.
func (kdo *KeyvalueDeleteOne) Exec(ctx context.Context) error {
	n, err := kdo.kd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{keyvalue.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (kdo *KeyvalueDeleteOne) ExecX(ctx context.Context) {
	if err := kdo.Exec(ctx); err != nil {
		panic(err)
	}
}
