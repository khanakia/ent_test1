{{ define "saasmedia" }}

{{- /*gotype: entgo.io/ent/entc/gen.Graph*/ -}}

{{ $pkg := base $.Config.Package }}
{{- with extend $ "Package" $pkg }}
        {{ template "header" . }}
{{- end }}

{{ template "import" $ }}

import (

	{{- with $.Config.Schema }}
		"{{ . }}"
	{{- end }}
	{{- range $n := $.Nodes }}
		{{ $n.PackageAlias }} "{{ $.Config.Package }}/{{ $n.PackageDir }}"
		{{- /* Import external packages */}}
		{{- template "import/types" $n }}
	{{- end }}
)

var mediaUrlResolver func(ctx context.Context, media *Media) (string, error)

func SetMediaURLResolver(fn func(ctx context.Context, media *Media) (string, error)) {
	mediaUrlResolver = fn
}


type SaveMediaProp struct {
	Tag            string
	Order          int
	AppID          string
	MediableType   string
	MediableID     string
	AddMediaIDs    []string
	RemoveMediaIDs []string
	Cleared       bool
  SelectMediaIDs []string
}

func SaveMedia(client *Client, props *SaveMediaProp) {
	ctx := context.Background()

	if props.Cleared {
		client.Mediable.Delete().Where(mediable.AppID(props.AppID), mediable.MediableType(props.MediableType), mediable.MediableID(props.MediableID)).Exec(ctx)
	}

	if props.RemoveMediaIDs != nil {
		client.Mediable.Delete().Where(mediable.AppID(props.AppID), mediable.MediableType(props.MediableType), mediable.MediableID(props.MediableID), mediable.MediaIDIn(props.RemoveMediaIDs...)).Exec(ctx)
	}

	if props.AddMediaIDs != nil {
		for i, mediaID := range props.AddMediaIDs {
			client.Mediable.Create().
				SetAppID(props.AppID).
				SetTag(props.Tag).
				SetOrder(i).
				SetMediableType(props.MediableType).
				SetMediableID(props.MediableID).
				SetMediaID(mediaID).
				Save(ctx)
		}
	}


	if props.SelectMediaIDs != nil {
		for i, id := range props.SelectMediaIDs {
			client.Mediable.Update().
        Where(mediable.AppID(props.AppID), mediable.MediableType(props.MediableType), mediable.MediableID(props.MediableID), mediable.MediaID(id)).
				SetOrder(i).
				Save(ctx)
		}
	}
}


	{{ range $n := $.MutableNodes }}
    {{ $mutation := $n.MutationName }}
    {{- if $n.Annotations.SaasMedia }}
      {{ $client := $n.ClientName }}
      func {{ $client }}MediaHook() func(next ent.Mutator) ent.Mutator {
        return func(next ent.Mutator) ent.Mutator {
          return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
            fmt.Printf("Type11: %s, Operation: %s, ConcreteType: %T\n", m.Type(), m.Op(), m)
            
            if s, ok := m.(*{{ $mutation }}); ok {
                
              	{{- range $e := $n.Annotations.SaasMedia.Fields }}
                  {
                    id, _ :=	s.ID()

                  	saveMediaProp :=  SaveMediaProp {
                      Tag: "{{ $e.Tag }}",
                      Order         : 0,
                      AppID         : "a2",
                      MediableType  : "{{ $n.Table }}",
                      MediableID    : id,
                      AddMediaIDs   : s.{{ $e.MutationAdded }}(),
                      RemoveMediaIDs: s.{{ $e.MutationRemoved }}(), 
                      Cleared: s.{{ $e.MutationCleared }}(),
                      SelectMediaIDs: s.SelectedFeaturedMediaIDs(),
                    }
                    fmt.Println(saveMediaProp)

                    SaveMedia(s.Client(), &saveMediaProp)


                  }
                {{- end }}
            }
            return next.Mutate(ctx, m)
          })
        }
      }

			{{- range $e := $n.Annotations.SaasMedia.Fields }}
          {{ $op := "add" }}{{ $idsFunc := $e.MutationAdd }}{{ if $e.Unique }}{{ $op = "set" }}{{ $idsFunc = $e.MutationSet }}{{ end }}
          func (m *{{ $mutation }}) {{ $idsFunc }}({{ if $e.Unique }}id{{ else }}ids ...{{ end }} {{ $e.Type }}) {
            {{- if $e.Unique }}
              m.{{ $e.BuilderField }} = &id
            {{- else }}
              if m.{{ $e.BuilderField }} == nil {
                m.{{ $e.BuilderField }} = make(map[{{ $e.Type }}]struct{})
              }
              for i := range ids {
                m.{{ $e.BuilderField }}[ids[i]] = struct{}{}
              }
            {{- end }}
          }

          {{ $func := $e.MutationClear }}
          func (m *{{ $mutation }}) {{ $func }}() {
            m.cleared{{ $e.BuilderField }} = true
          }

          {{ $func = $e.MutationCleared }}
          func (m *{{ $mutation }}) {{ $func }}() bool {
            return {{ with $e.Field }}{{ if .Optional }}m.{{ .MutationCleared }}() || {{ end }}{{ end }}m.cleared{{ $e.BuilderField }}
          }

          func (m *{{ $mutation }}) {{ $e.MutationRemove }}(ids ...{{ $e.Type }}) {
            if m.removed{{ $e.BuilderField }} == nil {
              m.removed{{ $e.BuilderField }} = make(map[{{ $e.Type }}]struct{})
            }
            for i := range ids {
              delete(m.{{ $e.BuilderField }}, ids[i])
              m.removed{{ $e.BuilderField }}[ids[i]] = struct{}{}
            }
          }

          func (m *{{ $mutation }}) {{ $e.MutationSelect }}(ids ...{{ $e.Type }}) {
            if m.selected{{ $e.BuilderField }} == nil {
              m.selected{{ $e.BuilderField }} = make(map[{{ $e.Type }}]struct{})
            }
            for i := range ids {
              m.selected{{ $e.BuilderField }}[ids[i]] = struct{}{}
            }
          }

          func (m *{{ $mutation }}) {{ $e.MutationSelected }}() (ids []{{ $e.Type }}) {
            for id := range m.selected{{ $e.BuilderField }} {
              ids = append(ids, id)
            }
            return
          }
          
          func (m *{{ $mutation }}) {{ $e.MutationRemoved }}() (ids []{{ $e.Type }}) {
            for id := range m.removed{{ $e.BuilderField }} {
              ids = append(ids, id)
            }
            return
          }

          func (m *{{ $mutation }}) {{ $e.MutationAdded }}() (ids []{{ $e.Type }}) {
            {{- if $e.Unique }}
              if id := m.{{ $e.BuilderField }}; id != nil {
                ids = append(ids, *id)
              }
            {{- else }}
              for id := range m.{{ $e.BuilderField }} {
                ids = append(ids, id)
              }
            {{- end}}
            return
          }

          {{ $func = $e.MutationReset }}
          func (m *{{ $mutation }}) {{ $func }}() {
            m.{{ $e.BuilderField }} = nil
            m.cleared{{ $e.BuilderField }} = false
            {{- if not $e.Unique }}
              m.removed{{ $e.BuilderField }} = nil
            {{- end }}
            m.selected{{ $e.BuilderField }} = nil
          }

			{{- end }}

		{{- end }}
	{{- end }}

    
  {{- range $n := $.Nodes }}
    {{- if eq $n.QueryName "MediaQuery" }} 
      func (uq *{{ $n.QueryName }}) loadUrls(ctx context.Context, nodes []*{{ $n.Name }}) error {
        for _, n := range nodes {
            /* n.URL = "http://localhost/" + n.Name */
          	if  mediaUrlResolver != nil {
              url, _ :=	mediaUrlResolver(ctx, n)
              n.URL = url
            }
        }
        return nil
      }
    {{- end }}

    {{- if $n.Annotations.SaasMedia }}
      func (uq *{{ $n.QueryName }}) WithMediables(opts ...func(*MediableQuery)) *{{ $n.QueryName }} {
        query := (&MediableClient{config: uq.config}).Query()
        for _, opt := range opts {
          opt(query)
        }
        uq.withMediables = query
        return uq
      }

      func (uq *{{ $n.QueryName }}) loadMediables(ctx context.Context, query *MediableQuery, nodes []*{{ $n.Name }}, init func(*{{ $n.Name }}), assign func(*{{ $n.Name }}, *Mediable)) error {
        fks := make([]driver.Value, 0, len(nodes))
        nodeids := make(map[string]*{{ $n.Name }})
        for i := range nodes {
          fks = append(fks, nodes[i].ID)
          nodeids[nodes[i].ID] = nodes[i]
          if init != nil {
            init(nodes[i])
          }
        }
        if len(query.ctx.Fields) > 0 {
          query.ctx.AppendFieldOnce(mediable.FieldMediableID)
        }

        query.Where(mediable.MediableType("{{ $n.Table }}"))
        query.Order(Asc(mediable.FieldOrder))

        query.WithMedia().Where(predicate.Mediable(func(s *sql.Selector) {
          s.Where(sql.InValues(s.C(mediable.FieldMediableID), fks...))
        }))
        neighbors, err := query.All(ctx)
        if err != nil {
          return err
        }
        for _, n := range neighbors {
          fk := n.MediableID
          node, ok := nodeids[fk]
          if !ok {
            return fmt.Errorf(`unexpected referenced foreign-key "mediable_id" returned %v for node %v`, fk, n.ID)
          }
          assign(node, n)
        }
        return nil
      }
  {{ end }}

{{- end}}
{{ end }}


{{ define "dialect/sql/model/fields/mediables" }}
  {{ $n := $ }}
  {{- if $n.Annotations.SaasMedia }}
      Mediables []*Mediable `json:"mediables,omitempty"`
  {{- end }}
{{ end }}


{{ define "dialect/sql/query/fields/additional/url" }}
  {{ $n := $ }}
  {{- if $n.Annotations.SaasMedia }}
      withMediables      *MediableQuery
  {{- end }}
{{ end }}

{{ define "dialect/sql/query/all/nodes/withmediables" }}
    {{- $n := $ }}
    {{- if $n.Annotations.SaasMedia }}
     {{ $builder := pascal $n.Scope.Builder }}
      {{ $receiver := receiver $builder }}
      if query := {{ $receiver }}.withMediables; query != nil {
          if err := {{ $receiver }}.loadMediables(ctx, query, nodes,
              func(n *{{$n.Name}}) { n.Mediables = []*Mediable{} },
              func(n *{{$n.Name}}, e *Mediable) { n.Mediables = append(n.Mediables, e) }); err != nil {
              return nil, err
          }
      }
    {{ end }}
{{ end }}

{{ define "dialect/sql/query/all/nodes/mediawithurls" }}
    {{- $n := $ }}
    {{ $builder := pascal $n.Scope.Builder }}
    {{ $receiver := receiver $builder }}
    {{- if eq $n.QueryName "MediaQuery" }} 
        if err := {{ $receiver }}.loadUrls(ctx, nodes); err != nil {
          return nil, err
        }
    {{- end }}
{{ end }}