package gqlsaresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"fmt"
	"gqlsa/graph/generated"
	"lace/util"
	"saas/gen/ent"
	"saas/gen/ent/todo"
	"saas/pkg/appfn"
	"saas/pkg/middleware"

	"entgo.io/contrib/entgql"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (ent.Noder, error) {
	table := ""
	switch util.GetNodeType(id) {
	case "todo":
		table = todo.Table
	}

	return r.Plugin.EntDB.Client().Noder(ctx, id, ent.WithFixedNodeType(table))
	// return r.Plugin.EntDB.Client().Noder(ctx, id, ent.WithFixedNodeType(todo.Table))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]ent.Noder, error) {
	return r.Plugin.EntDB.Client().Noders(ctx, ids)
}

// PostTypes is the resolver for the postTypes field.
func (r *queryResolver) PostTypes(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostTypeOrder, where *ent.PostTypeWhereInput) (*ent.PostTypeConnection, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	if !appfn.IsUserSA(cuser) {
		return nil, fmt.Errorf("unauthorized access")
	}

	return r.Plugin.EntDB.Client().PostType.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithPostTypeOrder(orderBy),
			ent.WithPostTypeFilter(where.Filter),
		)
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.TodoOrder, where *ent.TodoWhereInput) (*ent.TodoConnection, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	if !appfn.IsUserSA(cuser) {
		return nil, fmt.Errorf("unauthorized access")
	}
	return r.Plugin.EntDB.Client().Todo.Query().
		Paginate(ctx, after, first, before, last,
			ent.WithTodoOrder(orderBy),
			ent.WithTodoFilter(where.Filter),
		)
}

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
