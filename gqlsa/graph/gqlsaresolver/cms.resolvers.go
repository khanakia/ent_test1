package gqlsaresolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"gqlsa/graph/generated"
	"saas/gen/ent"
	"saas/gen/ent/post"
	"saas/gen/ent/postcategory"
	"saas/gen/ent/poststatus"
	"saas/gen/ent/posttype"
	"saas/pkg/middleware/adminauthmiddleware"
	"saas/pkg/middleware/appmiddleware"
)

// CreatePostType is the resolver for the createPostType field.
func (r *mutationResolver) CreatePostType(ctx context.Context, input ent.CreatePostTypeInput) (*ent.PostType, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostType.Create().SetInput(input).SetAppID(app.ID).Save(ctx)
}

// UpdatePostType is the resolver for the updatePostType field.
func (r *mutationResolver) UpdatePostType(ctx context.Context, id string, input ent.UpdatePostTypeInput) (*ent.PostType, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostType.UpdateOneID(id).SetInput(input).Where(posttype.AppID(app.ID)).Save(ctx)
}

// CreatePostStatus is the resolver for the createPostStatus field.
func (r *mutationResolver) CreatePostStatus(ctx context.Context, input ent.CreatePostStatusInput) (*ent.PostStatus, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostStatus.Create().SetInput(input).SetAppID(app.ID).Save(ctx)
}

// UpdatePostStatus is the resolver for the updatePostStatus field.
func (r *mutationResolver) UpdatePostStatus(ctx context.Context, id string, input ent.UpdatePostStatusInput) (*ent.PostStatus, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostStatus.UpdateOneID(id).SetInput(input).Where(poststatus.AppID(app.ID)).Save(ctx)
}

// CreatePostCategory is the resolver for the createPostCategory field.
func (r *mutationResolver) CreatePostCategory(ctx context.Context, input ent.CreatePostCategoryInput) (*ent.PostCategory, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostCategory.Create().SetInput(input).SetAppID(app.ID).Save(ctx)
}

// UpdatePostCategory is the resolver for the updatePostCategory field.
func (r *mutationResolver) UpdatePostCategory(ctx context.Context, id string, input ent.UpdatePostCategoryInput) (*ent.PostCategory, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().PostCategory.UpdateOneID(id).SetInput(input).Where(postcategory.AppID(app.ID)).Save(ctx)
}

// CreatePost is the resolver for the createPost field.
func (r *mutationResolver) CreatePost(ctx context.Context, input ent.CreatePostInput) (*ent.Post, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().Post.Create().SetInput(input).SetAppID(app.ID).Save(ctx)
}

// UpdatePost is the resolver for the updatePost field.
func (r *mutationResolver) UpdatePost(ctx context.Context, id string, input ent.UpdatePostInput) (*ent.Post, error) {
	cuser, err := adminauthmiddleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	app := appmiddleware.MustGetAppFromGqlCtx(ctx)

	return r.Plugin.EntDB.Client().Post.UpdateOneID(id).SetInput(input).Where(post.AppID(app.ID)).Save(ctx)
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
