directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreatePostCategoryInput is used for create PostCategory object.
Input was generated by ent.
"""
input CreatePostCategoryInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
}
"""
CreatePostStatusInput is used for create PostStatus object.
Input was generated by ent.
"""
input CreatePostStatusInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
  postIDs: [ID!]
}
"""
CreatePostTypeInput is used for create PostType object.
Input was generated by ent.
"""
input CreatePostTypeInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: PostTypeStatus
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
  postStatusIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  createdAt: Time
  updatedAt: Time
  text: String!
  status: TodoStatus
  priority: Int
  childIDs: [ID!]
  parentID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "saas/gen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postStatus: PostStatus
  postType: PostType
  primaryCategory: PostCategory
}
type PostCategory implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostCategoryConnection {
  """
  A list of edges.
  """
  edges: [PostCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: PostCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostCategory connections
"""
input PostCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostCategories.
  """
  field: PostCategoryOrderField!
}
"""
Properties by which PostCategory connections can be ordered.
"""
enum PostCategoryOrderField {
  CREATED_AT
}
"""
PostCategoryWhereInput is used for filtering PostCategory objects.
Input was generated by ent.
"""
input PostCategoryWhereInput {
  not: PostCategoryWhereInput
  and: [PostCategoryWhereInput!]
  or: [PostCategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  CREATED_AT
}
type PostStatus implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
  postType: PostType
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostStatusConnection {
  """
  A list of edges.
  """
  edges: [PostStatusEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostStatusEdge {
  """
  The item at the end of the edge.
  """
  node: PostStatus
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostStatus connections
"""
input PostStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostStatusSlice.
  """
  field: PostStatusOrderField!
}
"""
Properties by which PostStatus connections can be ordered.
"""
enum PostStatusOrderField {
  CREATED_AT
  NAME
  STATUS
  POST_TYPE_NAME
}
"""
PostStatusWhereInput is used for filtering PostStatus objects.
Input was generated by ent.
"""
input PostStatusWhereInput {
  not: PostStatusWhereInput
  and: [PostStatusWhereInput!]
  or: [PostStatusWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
type PostTag implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
}
"""
Ordering options for PostTag connections
"""
input PostTagOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTags.
  """
  field: PostTagOrderField!
}
"""
Properties by which PostTag connections can be ordered.
"""
enum PostTagOrderField {
  CREATED_AT
}
"""
PostTagWhereInput is used for filtering PostTag objects.
Input was generated by ent.
"""
input PostTagWhereInput {
  not: PostTagWhereInput
  and: [PostTagWhereInput!]
  or: [PostTagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
}
type PostType implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: PostTypeStatus!
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
  postStatuses: [PostStatus!]
}
"""
A connection to a list of items.
"""
type PostTypeConnection {
  """
  A list of edges.
  """
  edges: [PostTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostTypeEdge {
  """
  The item at the end of the edge.
  """
  node: PostType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostType connections
"""
input PostTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTypes.
  """
  field: PostTypeOrderField!
}
"""
Properties by which PostType connections can be ordered.
"""
enum PostTypeOrderField {
  CREATED_AT
  NAME
  STATUS
}
"""
PostTypeStatus is enum for the field status
"""
enum PostTypeStatus @goModel(model: "saas/gen/ent/posttype.Status") {
  PUBLISHED
  DRAFT
}
"""
PostTypeWhereInput is used for filtering PostType objects.
Input was generated by ent.
"""
input PostTypeWhereInput {
  not: PostTypeWhereInput
  and: [PostTypeWhereInput!]
  or: [PostTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: PostTypeStatus
  statusNEQ: PostTypeStatus
  statusIn: [PostTypeStatus!]
  statusNotIn: [PostTypeStatus!]
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  post_statuses edge predicates
  """
  hasPostStatuses: Boolean
  hasPostStatusesWith: [PostStatusWhereInput!]
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  post_status_id field predicates
  """
  postStatusID: ID
  postStatusIDNEQ: ID
  postStatusIDIn: [ID!]
  postStatusIDNotIn: [ID!]
  postStatusIDGT: ID
  postStatusIDGTE: ID
  postStatusIDLT: ID
  postStatusIDLTE: ID
  postStatusIDContains: ID
  postStatusIDHasPrefix: ID
  postStatusIDHasSuffix: ID
  postStatusIDIsNil: Boolean
  postStatusIDNotNil: Boolean
  postStatusIDEqualFold: ID
  postStatusIDContainsFold: ID
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  primary_category_id field predicates
  """
  primaryCategoryID: ID
  primaryCategoryIDNEQ: ID
  primaryCategoryIDIn: [ID!]
  primaryCategoryIDNotIn: [ID!]
  primaryCategoryIDGT: ID
  primaryCategoryIDGTE: ID
  primaryCategoryIDLT: ID
  primaryCategoryIDLTE: ID
  primaryCategoryIDContains: ID
  primaryCategoryIDHasPrefix: ID
  primaryCategoryIDHasSuffix: ID
  primaryCategoryIDIsNil: Boolean
  primaryCategoryIDNotNil: Boolean
  primaryCategoryIDEqualFold: ID
  primaryCategoryIDContainsFold: ID
  """
  headline field predicates
  """
  headline: String
  headlineNEQ: String
  headlineIn: [String!]
  headlineNotIn: [String!]
  headlineGT: String
  headlineGTE: String
  headlineLT: String
  headlineLTE: String
  headlineContains: String
  headlineHasPrefix: String
  headlineHasSuffix: String
  headlineIsNil: Boolean
  headlineNotNil: Boolean
  headlineEqualFold: String
  headlineContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  post_status edge predicates
  """
  hasPostStatus: Boolean
  hasPostStatusWith: [PostStatusWhereInput!]
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  primary_category edge predicates
  """
  hasPrimaryCategory: Boolean
  hasPrimaryCategoryWith: [PostCategoryWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node @canAdmin
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]! @canAdmin
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: [PostOrder!]

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection! @canAdmin
  postCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostCategories returned from the connection.
    """
    orderBy: [PostCategoryOrder!]

    """
    Filtering options for PostCategories returned from the connection.
    """
    where: PostCategoryWhereInput
  ): PostCategoryConnection! @canAdmin
  postStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostStatusSlice returned from the connection.
    """
    orderBy: [PostStatusOrder!]

    """
    Filtering options for PostStatusSlice returned from the connection.
    """
    where: PostStatusWhereInput
  ): PostStatusConnection! @canAdmin
  postTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostTypes returned from the connection.
    """
    orderBy: [PostTypeOrder!]

    """
    Filtering options for PostTypes returned from the connection.
    """
    where: PostTypeWhereInput
  ): PostTypeConnection! @canAdmin
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: TodoOrder

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
}
type Todo implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  text: String!
  status: TodoStatus!
  priority: Int!
  children: [Todo!]
  parent: Todo
}
"""
A connection to a list of items.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Todo connections
"""
input TodoOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Todos.
  """
  field: TodoOrderField!
}
"""
Properties by which Todo connections can be ordered.
"""
enum TodoOrderField {
  CREATED_AT
  TEXT
  STATUS
  PRIORITY
}
"""
TodoStatus is enum for the field status
"""
enum TodoStatus @goModel(model: "saas/gen/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  status field predicates
  """
  status: TodoStatus
  statusNEQ: TodoStatus
  statusIn: [TodoStatus!]
  statusNotIn: [TodoStatus!]
  """
  priority field predicates
  """
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
}
"""
UpdatePostCategoryInput is used for update PostCategory object.
Input was generated by ent.
"""
input UpdatePostCategoryInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: String
  clearStatus: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  headline: String
  clearHeadline: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  postStatusID: ID
  clearPostStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
  primaryCategoryID: ID
  clearPrimaryCategory: Boolean
}
"""
UpdatePostStatusInput is used for update PostStatus object.
Input was generated by ent.
"""
input UpdatePostStatusInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: Boolean
  clearStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdatePostTypeInput is used for update PostType object.
Input was generated by ent.
"""
input UpdatePostTypeInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: PostTypeStatus
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addPostStatusIDs: [ID!]
  removePostStatusIDs: [ID!]
  clearPostStatuses: Boolean
}
"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  text: String
  status: TodoStatus
  priority: Int
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  parentID: ID
  clearParent: Boolean
}
