// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"saas/gen/ent"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	Mutation struct {
		CreatePost         func(childComplexity int, input ent.CreatePostInput) int
		CreatePostCategory func(childComplexity int, input ent.CreatePostCategoryInput) int
		CreatePostStatus   func(childComplexity int, input ent.CreatePostStatusInput) int
		CreatePostType     func(childComplexity int, input ent.CreatePostTypeInput) int
		CreateTodo         func(childComplexity int, input ent.CreateTodoInput) int
		Ping               func(childComplexity int) int
		UpdatePost         func(childComplexity int, id string, input ent.UpdatePostInput) int
		UpdatePostCategory func(childComplexity int, id string, input ent.UpdatePostCategoryInput) int
		UpdatePostStatus   func(childComplexity int, id string, input ent.UpdatePostStatusInput) int
		UpdatePostType     func(childComplexity int, id string, input ent.UpdatePostTypeInput) int
		UpdateTodo         func(childComplexity int, id string, input ent.UpdateTodoInput) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Post struct {
		Content           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Excerpt           func(childComplexity int) int
		Headline          func(childComplexity int) int
		ID                func(childComplexity int) int
		MetaCanonicalURL  func(childComplexity int) int
		MetaDescr         func(childComplexity int) int
		MetaRobots        func(childComplexity int) int
		MetaTitle         func(childComplexity int) int
		Name              func(childComplexity int) int
		PostStatus        func(childComplexity int) int
		PostStatusID      func(childComplexity int) int
		PostType          func(childComplexity int) int
		PostTypeID        func(childComplexity int) int
		PrimaryCategory   func(childComplexity int) int
		PrimaryCategoryID func(childComplexity int) int
		Slug              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	PostCategory struct {
		Content          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		Posts            func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostCategoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostCategoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostStatus struct {
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		PostType   func(childComplexity int) int
		PostTypeID func(childComplexity int) int
		Posts      func(childComplexity int) int
		Slug       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	PostStatusConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostStatusEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostTag struct {
		Content          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostType struct {
		Content          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		PostStatuses     func(childComplexity int) int
		Posts            func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostTypeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostTypeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Node           func(childComplexity int, id string) int
		Nodes          func(childComplexity int, ids []string) int
		Ping           func(childComplexity int) int
		PostCategories func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostCategoryOrder, where *ent.PostCategoryWhereInput) int
		PostStatuses   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostStatusOrder, where *ent.PostStatusWhereInput) int
		PostTypes      func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostTypeOrder, where *ent.PostTypeWhereInput) int
		Posts          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostOrder, where *ent.PostWhereInput) int
		Todos          func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.TodoOrder, where *ent.TodoWhereInput) int
	}

	Student struct {
		Name func(childComplexity int) int
	}

	Todo struct {
		Children  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Parent    func(childComplexity int) int
		Priority  func(childComplexity int) int
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	TodoConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TodoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "Mutation.createPost":
		if e.complexity.Mutation.CreatePost == nil {
			break
		}

		args, err := ec.field_Mutation_createPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePost(childComplexity, args["input"].(ent.CreatePostInput)), true

	case "Mutation.createPostCategory":
		if e.complexity.Mutation.CreatePostCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createPostCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostCategory(childComplexity, args["input"].(ent.CreatePostCategoryInput)), true

	case "Mutation.createPostStatus":
		if e.complexity.Mutation.CreatePostStatus == nil {
			break
		}

		args, err := ec.field_Mutation_createPostStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostStatus(childComplexity, args["input"].(ent.CreatePostStatusInput)), true

	case "Mutation.createPostType":
		if e.complexity.Mutation.CreatePostType == nil {
			break
		}

		args, err := ec.field_Mutation_createPostType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostType(childComplexity, args["input"].(ent.CreatePostTypeInput)), true

	case "Mutation.createTodo":
		if e.complexity.Mutation.CreateTodo == nil {
			break
		}

		args, err := ec.field_Mutation_createTodo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTodo(childComplexity, args["input"].(ent.CreateTodoInput)), true

	case "Mutation.ping":
		if e.complexity.Mutation.Ping == nil {
			break
		}

		return e.complexity.Mutation.Ping(childComplexity), true

	case "Mutation.updatePost":
		if e.complexity.Mutation.UpdatePost == nil {
			break
		}

		args, err := ec.field_Mutation_updatePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePost(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostInput)), true

	case "Mutation.updatePostCategory":
		if e.complexity.Mutation.UpdatePostCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostCategory(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostCategoryInput)), true

	case "Mutation.updatePostStatus":
		if e.complexity.Mutation.UpdatePostStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostStatus(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostStatusInput)), true

	case "Mutation.updatePostType":
		if e.complexity.Mutation.UpdatePostType == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostType(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostTypeInput)), true

	case "Mutation.updateTodo":
		if e.complexity.Mutation.UpdateTodo == nil {
			break
		}

		args, err := ec.field_Mutation_updateTodo_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTodo(childComplexity, args["id"].(string), args["input"].(ent.UpdateTodoInput)), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Post.content":
		if e.complexity.Post.Content == nil {
			break
		}

		return e.complexity.Post.Content(childComplexity), true

	case "Post.createdAt":
		if e.complexity.Post.CreatedAt == nil {
			break
		}

		return e.complexity.Post.CreatedAt(childComplexity), true

	case "Post.excerpt":
		if e.complexity.Post.Excerpt == nil {
			break
		}

		return e.complexity.Post.Excerpt(childComplexity), true

	case "Post.headline":
		if e.complexity.Post.Headline == nil {
			break
		}

		return e.complexity.Post.Headline(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.metaCanonicalURL":
		if e.complexity.Post.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.Post.MetaCanonicalURL(childComplexity), true

	case "Post.metaDescr":
		if e.complexity.Post.MetaDescr == nil {
			break
		}

		return e.complexity.Post.MetaDescr(childComplexity), true

	case "Post.metaRobots":
		if e.complexity.Post.MetaRobots == nil {
			break
		}

		return e.complexity.Post.MetaRobots(childComplexity), true

	case "Post.metaTitle":
		if e.complexity.Post.MetaTitle == nil {
			break
		}

		return e.complexity.Post.MetaTitle(childComplexity), true

	case "Post.name":
		if e.complexity.Post.Name == nil {
			break
		}

		return e.complexity.Post.Name(childComplexity), true

	case "Post.postStatus":
		if e.complexity.Post.PostStatus == nil {
			break
		}

		return e.complexity.Post.PostStatus(childComplexity), true

	case "Post.postStatusID":
		if e.complexity.Post.PostStatusID == nil {
			break
		}

		return e.complexity.Post.PostStatusID(childComplexity), true

	case "Post.postType":
		if e.complexity.Post.PostType == nil {
			break
		}

		return e.complexity.Post.PostType(childComplexity), true

	case "Post.postTypeID":
		if e.complexity.Post.PostTypeID == nil {
			break
		}

		return e.complexity.Post.PostTypeID(childComplexity), true

	case "Post.primaryCategory":
		if e.complexity.Post.PrimaryCategory == nil {
			break
		}

		return e.complexity.Post.PrimaryCategory(childComplexity), true

	case "Post.primaryCategoryID":
		if e.complexity.Post.PrimaryCategoryID == nil {
			break
		}

		return e.complexity.Post.PrimaryCategoryID(childComplexity), true

	case "Post.slug":
		if e.complexity.Post.Slug == nil {
			break
		}

		return e.complexity.Post.Slug(childComplexity), true

	case "Post.updatedAt":
		if e.complexity.Post.UpdatedAt == nil {
			break
		}

		return e.complexity.Post.UpdatedAt(childComplexity), true

	case "PostCategory.content":
		if e.complexity.PostCategory.Content == nil {
			break
		}

		return e.complexity.PostCategory.Content(childComplexity), true

	case "PostCategory.createdAt":
		if e.complexity.PostCategory.CreatedAt == nil {
			break
		}

		return e.complexity.PostCategory.CreatedAt(childComplexity), true

	case "PostCategory.excerpt":
		if e.complexity.PostCategory.Excerpt == nil {
			break
		}

		return e.complexity.PostCategory.Excerpt(childComplexity), true

	case "PostCategory.id":
		if e.complexity.PostCategory.ID == nil {
			break
		}

		return e.complexity.PostCategory.ID(childComplexity), true

	case "PostCategory.metaCanonicalURL":
		if e.complexity.PostCategory.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostCategory.MetaCanonicalURL(childComplexity), true

	case "PostCategory.metaDescr":
		if e.complexity.PostCategory.MetaDescr == nil {
			break
		}

		return e.complexity.PostCategory.MetaDescr(childComplexity), true

	case "PostCategory.metaRobots":
		if e.complexity.PostCategory.MetaRobots == nil {
			break
		}

		return e.complexity.PostCategory.MetaRobots(childComplexity), true

	case "PostCategory.metaTitle":
		if e.complexity.PostCategory.MetaTitle == nil {
			break
		}

		return e.complexity.PostCategory.MetaTitle(childComplexity), true

	case "PostCategory.name":
		if e.complexity.PostCategory.Name == nil {
			break
		}

		return e.complexity.PostCategory.Name(childComplexity), true

	case "PostCategory.posts":
		if e.complexity.PostCategory.Posts == nil {
			break
		}

		return e.complexity.PostCategory.Posts(childComplexity), true

	case "PostCategory.slug":
		if e.complexity.PostCategory.Slug == nil {
			break
		}

		return e.complexity.PostCategory.Slug(childComplexity), true

	case "PostCategory.status":
		if e.complexity.PostCategory.Status == nil {
			break
		}

		return e.complexity.PostCategory.Status(childComplexity), true

	case "PostCategory.updatedAt":
		if e.complexity.PostCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.PostCategory.UpdatedAt(childComplexity), true

	case "PostCategoryConnection.edges":
		if e.complexity.PostCategoryConnection.Edges == nil {
			break
		}

		return e.complexity.PostCategoryConnection.Edges(childComplexity), true

	case "PostCategoryConnection.pageInfo":
		if e.complexity.PostCategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostCategoryConnection.PageInfo(childComplexity), true

	case "PostCategoryConnection.totalCount":
		if e.complexity.PostCategoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostCategoryConnection.TotalCount(childComplexity), true

	case "PostCategoryEdge.cursor":
		if e.complexity.PostCategoryEdge.Cursor == nil {
			break
		}

		return e.complexity.PostCategoryEdge.Cursor(childComplexity), true

	case "PostCategoryEdge.node":
		if e.complexity.PostCategoryEdge.Node == nil {
			break
		}

		return e.complexity.PostCategoryEdge.Node(childComplexity), true

	case "PostConnection.edges":
		if e.complexity.PostConnection.Edges == nil {
			break
		}

		return e.complexity.PostConnection.Edges(childComplexity), true

	case "PostConnection.pageInfo":
		if e.complexity.PostConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostConnection.PageInfo(childComplexity), true

	case "PostConnection.totalCount":
		if e.complexity.PostConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostConnection.TotalCount(childComplexity), true

	case "PostEdge.cursor":
		if e.complexity.PostEdge.Cursor == nil {
			break
		}

		return e.complexity.PostEdge.Cursor(childComplexity), true

	case "PostEdge.node":
		if e.complexity.PostEdge.Node == nil {
			break
		}

		return e.complexity.PostEdge.Node(childComplexity), true

	case "PostStatus.createdAt":
		if e.complexity.PostStatus.CreatedAt == nil {
			break
		}

		return e.complexity.PostStatus.CreatedAt(childComplexity), true

	case "PostStatus.id":
		if e.complexity.PostStatus.ID == nil {
			break
		}

		return e.complexity.PostStatus.ID(childComplexity), true

	case "PostStatus.name":
		if e.complexity.PostStatus.Name == nil {
			break
		}

		return e.complexity.PostStatus.Name(childComplexity), true

	case "PostStatus.postType":
		if e.complexity.PostStatus.PostType == nil {
			break
		}

		return e.complexity.PostStatus.PostType(childComplexity), true

	case "PostStatus.postTypeID":
		if e.complexity.PostStatus.PostTypeID == nil {
			break
		}

		return e.complexity.PostStatus.PostTypeID(childComplexity), true

	case "PostStatus.posts":
		if e.complexity.PostStatus.Posts == nil {
			break
		}

		return e.complexity.PostStatus.Posts(childComplexity), true

	case "PostStatus.slug":
		if e.complexity.PostStatus.Slug == nil {
			break
		}

		return e.complexity.PostStatus.Slug(childComplexity), true

	case "PostStatus.status":
		if e.complexity.PostStatus.Status == nil {
			break
		}

		return e.complexity.PostStatus.Status(childComplexity), true

	case "PostStatus.updatedAt":
		if e.complexity.PostStatus.UpdatedAt == nil {
			break
		}

		return e.complexity.PostStatus.UpdatedAt(childComplexity), true

	case "PostStatusConnection.edges":
		if e.complexity.PostStatusConnection.Edges == nil {
			break
		}

		return e.complexity.PostStatusConnection.Edges(childComplexity), true

	case "PostStatusConnection.pageInfo":
		if e.complexity.PostStatusConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostStatusConnection.PageInfo(childComplexity), true

	case "PostStatusConnection.totalCount":
		if e.complexity.PostStatusConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostStatusConnection.TotalCount(childComplexity), true

	case "PostStatusEdge.cursor":
		if e.complexity.PostStatusEdge.Cursor == nil {
			break
		}

		return e.complexity.PostStatusEdge.Cursor(childComplexity), true

	case "PostStatusEdge.node":
		if e.complexity.PostStatusEdge.Node == nil {
			break
		}

		return e.complexity.PostStatusEdge.Node(childComplexity), true

	case "PostTag.content":
		if e.complexity.PostTag.Content == nil {
			break
		}

		return e.complexity.PostTag.Content(childComplexity), true

	case "PostTag.createdAt":
		if e.complexity.PostTag.CreatedAt == nil {
			break
		}

		return e.complexity.PostTag.CreatedAt(childComplexity), true

	case "PostTag.excerpt":
		if e.complexity.PostTag.Excerpt == nil {
			break
		}

		return e.complexity.PostTag.Excerpt(childComplexity), true

	case "PostTag.id":
		if e.complexity.PostTag.ID == nil {
			break
		}

		return e.complexity.PostTag.ID(childComplexity), true

	case "PostTag.metaCanonicalURL":
		if e.complexity.PostTag.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostTag.MetaCanonicalURL(childComplexity), true

	case "PostTag.metaDescr":
		if e.complexity.PostTag.MetaDescr == nil {
			break
		}

		return e.complexity.PostTag.MetaDescr(childComplexity), true

	case "PostTag.metaRobots":
		if e.complexity.PostTag.MetaRobots == nil {
			break
		}

		return e.complexity.PostTag.MetaRobots(childComplexity), true

	case "PostTag.metaTitle":
		if e.complexity.PostTag.MetaTitle == nil {
			break
		}

		return e.complexity.PostTag.MetaTitle(childComplexity), true

	case "PostTag.name":
		if e.complexity.PostTag.Name == nil {
			break
		}

		return e.complexity.PostTag.Name(childComplexity), true

	case "PostTag.slug":
		if e.complexity.PostTag.Slug == nil {
			break
		}

		return e.complexity.PostTag.Slug(childComplexity), true

	case "PostTag.status":
		if e.complexity.PostTag.Status == nil {
			break
		}

		return e.complexity.PostTag.Status(childComplexity), true

	case "PostTag.updatedAt":
		if e.complexity.PostTag.UpdatedAt == nil {
			break
		}

		return e.complexity.PostTag.UpdatedAt(childComplexity), true

	case "PostType.content":
		if e.complexity.PostType.Content == nil {
			break
		}

		return e.complexity.PostType.Content(childComplexity), true

	case "PostType.createdAt":
		if e.complexity.PostType.CreatedAt == nil {
			break
		}

		return e.complexity.PostType.CreatedAt(childComplexity), true

	case "PostType.excerpt":
		if e.complexity.PostType.Excerpt == nil {
			break
		}

		return e.complexity.PostType.Excerpt(childComplexity), true

	case "PostType.id":
		if e.complexity.PostType.ID == nil {
			break
		}

		return e.complexity.PostType.ID(childComplexity), true

	case "PostType.metaCanonicalURL":
		if e.complexity.PostType.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostType.MetaCanonicalURL(childComplexity), true

	case "PostType.metaDescr":
		if e.complexity.PostType.MetaDescr == nil {
			break
		}

		return e.complexity.PostType.MetaDescr(childComplexity), true

	case "PostType.metaRobots":
		if e.complexity.PostType.MetaRobots == nil {
			break
		}

		return e.complexity.PostType.MetaRobots(childComplexity), true

	case "PostType.metaTitle":
		if e.complexity.PostType.MetaTitle == nil {
			break
		}

		return e.complexity.PostType.MetaTitle(childComplexity), true

	case "PostType.name":
		if e.complexity.PostType.Name == nil {
			break
		}

		return e.complexity.PostType.Name(childComplexity), true

	case "PostType.postStatuses":
		if e.complexity.PostType.PostStatuses == nil {
			break
		}

		return e.complexity.PostType.PostStatuses(childComplexity), true

	case "PostType.posts":
		if e.complexity.PostType.Posts == nil {
			break
		}

		return e.complexity.PostType.Posts(childComplexity), true

	case "PostType.slug":
		if e.complexity.PostType.Slug == nil {
			break
		}

		return e.complexity.PostType.Slug(childComplexity), true

	case "PostType.status":
		if e.complexity.PostType.Status == nil {
			break
		}

		return e.complexity.PostType.Status(childComplexity), true

	case "PostType.updatedAt":
		if e.complexity.PostType.UpdatedAt == nil {
			break
		}

		return e.complexity.PostType.UpdatedAt(childComplexity), true

	case "PostTypeConnection.edges":
		if e.complexity.PostTypeConnection.Edges == nil {
			break
		}

		return e.complexity.PostTypeConnection.Edges(childComplexity), true

	case "PostTypeConnection.pageInfo":
		if e.complexity.PostTypeConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostTypeConnection.PageInfo(childComplexity), true

	case "PostTypeConnection.totalCount":
		if e.complexity.PostTypeConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostTypeConnection.TotalCount(childComplexity), true

	case "PostTypeEdge.cursor":
		if e.complexity.PostTypeEdge.Cursor == nil {
			break
		}

		return e.complexity.PostTypeEdge.Cursor(childComplexity), true

	case "PostTypeEdge.node":
		if e.complexity.PostTypeEdge.Node == nil {
			break
		}

		return e.complexity.PostTypeEdge.Node(childComplexity), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.ping":
		if e.complexity.Query.Ping == nil {
			break
		}

		return e.complexity.Query.Ping(childComplexity), true

	case "Query.postCategories":
		if e.complexity.Query.PostCategories == nil {
			break
		}

		args, err := ec.field_Query_postCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostCategories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostCategoryOrder), args["where"].(*ent.PostCategoryWhereInput)), true

	case "Query.postStatuses":
		if e.complexity.Query.PostStatuses == nil {
			break
		}

		args, err := ec.field_Query_postStatuses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostStatuses(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostStatusOrder), args["where"].(*ent.PostStatusWhereInput)), true

	case "Query.postTypes":
		if e.complexity.Query.PostTypes == nil {
			break
		}

		args, err := ec.field_Query_postTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostTypes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostTypeOrder), args["where"].(*ent.PostTypeWhereInput)), true

	case "Query.posts":
		if e.complexity.Query.Posts == nil {
			break
		}

		args, err := ec.field_Query_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Posts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostOrder), args["where"].(*ent.PostWhereInput)), true

	case "Query.todos":
		if e.complexity.Query.Todos == nil {
			break
		}

		args, err := ec.field_Query_todos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Todos(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*ent.TodoOrder), args["where"].(*ent.TodoWhereInput)), true

	case "Student.name":
		if e.complexity.Student.Name == nil {
			break
		}

		return e.complexity.Student.Name(childComplexity), true

	case "Todo.children":
		if e.complexity.Todo.Children == nil {
			break
		}

		return e.complexity.Todo.Children(childComplexity), true

	case "Todo.createdAt":
		if e.complexity.Todo.CreatedAt == nil {
			break
		}

		return e.complexity.Todo.CreatedAt(childComplexity), true

	case "Todo.id":
		if e.complexity.Todo.ID == nil {
			break
		}

		return e.complexity.Todo.ID(childComplexity), true

	case "Todo.parent":
		if e.complexity.Todo.Parent == nil {
			break
		}

		return e.complexity.Todo.Parent(childComplexity), true

	case "Todo.priority":
		if e.complexity.Todo.Priority == nil {
			break
		}

		return e.complexity.Todo.Priority(childComplexity), true

	case "Todo.status":
		if e.complexity.Todo.Status == nil {
			break
		}

		return e.complexity.Todo.Status(childComplexity), true

	case "Todo.text":
		if e.complexity.Todo.Text == nil {
			break
		}

		return e.complexity.Todo.Text(childComplexity), true

	case "Todo.updatedAt":
		if e.complexity.Todo.UpdatedAt == nil {
			break
		}

		return e.complexity.Todo.UpdatedAt(childComplexity), true

	case "TodoConnection.edges":
		if e.complexity.TodoConnection.Edges == nil {
			break
		}

		return e.complexity.TodoConnection.Edges(childComplexity), true

	case "TodoConnection.pageInfo":
		if e.complexity.TodoConnection.PageInfo == nil {
			break
		}

		return e.complexity.TodoConnection.PageInfo(childComplexity), true

	case "TodoConnection.totalCount":
		if e.complexity.TodoConnection.TotalCount == nil {
			break
		}

		return e.complexity.TodoConnection.TotalCount(childComplexity), true

	case "TodoEdge.cursor":
		if e.complexity.TodoEdge.Cursor == nil {
			break
		}

		return e.complexity.TodoEdge.Cursor(childComplexity), true

	case "TodoEdge.node":
		if e.complexity.TodoEdge.Node == nil {
			break
		}

		return e.complexity.TodoEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputCreatePostCategoryInput,
		ec.unmarshalInputCreatePostInput,
		ec.unmarshalInputCreatePostStatusInput,
		ec.unmarshalInputCreatePostTypeInput,
		ec.unmarshalInputCreateTodoInput,
		ec.unmarshalInputPostCategoryOrder,
		ec.unmarshalInputPostCategoryWhereInput,
		ec.unmarshalInputPostOrder,
		ec.unmarshalInputPostStatusOrder,
		ec.unmarshalInputPostStatusWhereInput,
		ec.unmarshalInputPostTagOrder,
		ec.unmarshalInputPostTagWhereInput,
		ec.unmarshalInputPostTypeOrder,
		ec.unmarshalInputPostTypeWhereInput,
		ec.unmarshalInputPostWhereInput,
		ec.unmarshalInputTodoOrder,
		ec.unmarshalInputTodoWhereInput,
		ec.unmarshalInputUpdatePostCategoryInput,
		ec.unmarshalInputUpdatePostInput,
		ec.unmarshalInputUpdatePostStatusInput,
		ec.unmarshalInputUpdatePostTypeInput,
		ec.unmarshalInputUpdateTodoInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, rc.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../cms.graphql", Input: `extend type Mutation {
  createPostType(input: CreatePostTypeInput!): PostType!
  updatePostType(id: ID!, input: UpdatePostTypeInput!): PostType!
  createPostStatus(input: CreatePostStatusInput!): PostStatus!
  updatePostStatus(id: ID!, input: UpdatePostStatusInput!): PostStatus!
  createPostCategory(input: CreatePostCategoryInput!): PostCategory!
  updatePostCategory(id: ID!, input: UpdatePostCategoryInput!): PostCategory!
  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
}

`, BuiltIn: false},
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreatePostCategoryInput is used for create PostCategory object.
Input was generated by ent.
"""
input CreatePostCategoryInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
}
"""
CreatePostStatusInput is used for create PostStatus object.
Input was generated by ent.
"""
input CreatePostStatusInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
  postIDs: [ID!]
}
"""
CreatePostTypeInput is used for create PostType object.
Input was generated by ent.
"""
input CreatePostTypeInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: PostTypeStatus
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
  postStatusIDs: [ID!]
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  createdAt: Time
  updatedAt: Time
  text: String!
  status: TodoStatus
  priority: Int
  childIDs: [ID!]
  parentID: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "saas/gen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postStatus: PostStatus
  postType: PostType
  primaryCategory: PostCategory
}
type PostCategory implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostCategoryConnection {
  """
  A list of edges.
  """
  edges: [PostCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: PostCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostCategory connections
"""
input PostCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostCategories.
  """
  field: PostCategoryOrderField!
}
"""
Properties by which PostCategory connections can be ordered.
"""
enum PostCategoryOrderField {
  CREATED_AT
}
"""
PostCategoryWhereInput is used for filtering PostCategory objects.
Input was generated by ent.
"""
input PostCategoryWhereInput {
  not: PostCategoryWhereInput
  and: [PostCategoryWhereInput!]
  or: [PostCategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  CREATED_AT
}
type PostStatus implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
  postType: PostType
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostStatusConnection {
  """
  A list of edges.
  """
  edges: [PostStatusEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostStatusEdge {
  """
  The item at the end of the edge.
  """
  node: PostStatus
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostStatus connections
"""
input PostStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostStatusSlice.
  """
  field: PostStatusOrderField!
}
"""
Properties by which PostStatus connections can be ordered.
"""
enum PostStatusOrderField {
  CREATED_AT
}
"""
PostStatusWhereInput is used for filtering PostStatus objects.
Input was generated by ent.
"""
input PostStatusWhereInput {
  not: PostStatusWhereInput
  and: [PostStatusWhereInput!]
  or: [PostStatusWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
type PostTag implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
}
"""
Ordering options for PostTag connections
"""
input PostTagOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTags.
  """
  field: PostTagOrderField!
}
"""
Properties by which PostTag connections can be ordered.
"""
enum PostTagOrderField {
  CREATED_AT
}
"""
PostTagWhereInput is used for filtering PostTag objects.
Input was generated by ent.
"""
input PostTagWhereInput {
  not: PostTagWhereInput
  and: [PostTagWhereInput!]
  or: [PostTagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
}
type PostType implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: PostTypeStatus!
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
  postStatuses: [PostStatus!]
}
"""
A connection to a list of items.
"""
type PostTypeConnection {
  """
  A list of edges.
  """
  edges: [PostTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostTypeEdge {
  """
  The item at the end of the edge.
  """
  node: PostType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostType connections
"""
input PostTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTypes.
  """
  field: PostTypeOrderField!
}
"""
Properties by which PostType connections can be ordered.
"""
enum PostTypeOrderField {
  CREATED_AT
  NAME
  STATUS
}
"""
PostTypeStatus is enum for the field status
"""
enum PostTypeStatus @goModel(model: "saas/gen/ent/posttype.Status") {
  PUBLISHED
  DRAFT
}
"""
PostTypeWhereInput is used for filtering PostType objects.
Input was generated by ent.
"""
input PostTypeWhereInput {
  not: PostTypeWhereInput
  and: [PostTypeWhereInput!]
  or: [PostTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: PostTypeStatus
  statusNEQ: PostTypeStatus
  statusIn: [PostTypeStatus!]
  statusNotIn: [PostTypeStatus!]
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  post_statuses edge predicates
  """
  hasPostStatuses: Boolean
  hasPostStatusesWith: [PostStatusWhereInput!]
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  post_status_id field predicates
  """
  postStatusID: ID
  postStatusIDNEQ: ID
  postStatusIDIn: [ID!]
  postStatusIDNotIn: [ID!]
  postStatusIDGT: ID
  postStatusIDGTE: ID
  postStatusIDLT: ID
  postStatusIDLTE: ID
  postStatusIDContains: ID
  postStatusIDHasPrefix: ID
  postStatusIDHasSuffix: ID
  postStatusIDIsNil: Boolean
  postStatusIDNotNil: Boolean
  postStatusIDEqualFold: ID
  postStatusIDContainsFold: ID
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  primary_category_id field predicates
  """
  primaryCategoryID: ID
  primaryCategoryIDNEQ: ID
  primaryCategoryIDIn: [ID!]
  primaryCategoryIDNotIn: [ID!]
  primaryCategoryIDGT: ID
  primaryCategoryIDGTE: ID
  primaryCategoryIDLT: ID
  primaryCategoryIDLTE: ID
  primaryCategoryIDContains: ID
  primaryCategoryIDHasPrefix: ID
  primaryCategoryIDHasSuffix: ID
  primaryCategoryIDIsNil: Boolean
  primaryCategoryIDNotNil: Boolean
  primaryCategoryIDEqualFold: ID
  primaryCategoryIDContainsFold: ID
  """
  headline field predicates
  """
  headline: String
  headlineNEQ: String
  headlineIn: [String!]
  headlineNotIn: [String!]
  headlineGT: String
  headlineGTE: String
  headlineLT: String
  headlineLTE: String
  headlineContains: String
  headlineHasPrefix: String
  headlineHasSuffix: String
  headlineIsNil: Boolean
  headlineNotNil: Boolean
  headlineEqualFold: String
  headlineContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  post_status edge predicates
  """
  hasPostStatus: Boolean
  hasPostStatusWith: [PostStatusWhereInput!]
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  primary_category edge predicates
  """
  hasPrimaryCategory: Boolean
  hasPrimaryCategoryWith: [PostCategoryWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]!
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: [PostOrder!]

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection!
  postCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostCategories returned from the connection.
    """
    orderBy: [PostCategoryOrder!]

    """
    Filtering options for PostCategories returned from the connection.
    """
    where: PostCategoryWhereInput
  ): PostCategoryConnection!
  postStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostStatusSlice returned from the connection.
    """
    orderBy: [PostStatusOrder!]

    """
    Filtering options for PostStatusSlice returned from the connection.
    """
    where: PostStatusWhereInput
  ): PostStatusConnection!
  postTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostTypes returned from the connection.
    """
    orderBy: [PostTypeOrder!]

    """
    Filtering options for PostTypes returned from the connection.
    """
    where: PostTypeWhereInput
  ): PostTypeConnection!
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: TodoOrder

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
}
type Todo implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  text: String!
  status: TodoStatus!
  priority: Int!
  children: [Todo!]
  parent: Todo
}
"""
A connection to a list of items.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Todo connections
"""
input TodoOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Todos.
  """
  field: TodoOrderField!
}
"""
Properties by which Todo connections can be ordered.
"""
enum TodoOrderField {
  CREATED_AT
  TEXT
  STATUS
  PRIORITY
}
"""
TodoStatus is enum for the field status
"""
enum TodoStatus @goModel(model: "saas/gen/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  status field predicates
  """
  status: TodoStatus
  statusNEQ: TodoStatus
  statusIn: [TodoStatus!]
  statusNotIn: [TodoStatus!]
  """
  priority field predicates
  """
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
}
"""
UpdatePostCategoryInput is used for update PostCategory object.
Input was generated by ent.
"""
input UpdatePostCategoryInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: String
  clearStatus: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  headline: String
  clearHeadline: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  postStatusID: ID
  clearPostStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
  primaryCategoryID: ID
  clearPrimaryCategory: Boolean
}
"""
UpdatePostStatusInput is used for update PostStatus object.
Input was generated by ent.
"""
input UpdatePostStatusInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: Boolean
  clearStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdatePostTypeInput is used for update PostType object.
Input was generated by ent.
"""
input UpdatePostTypeInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: PostTypeStatus
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  addPostStatusIDs: [ID!]
  removePostStatusIDs: [ID!]
  clearPostStatuses: Boolean
}
"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  text: String
  status: TodoStatus
  priority: Int
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  parentID: ID
  clearParent: Boolean
}
`, BuiltIn: false},
	{Name: "../schema.graphql", Input: `scalar Time
scalar Uint64
scalar Map
scalar JSON


type Student {
  name: String!
}

extend type Query {
  ping: String!
}

extend type Mutation {
  ping: String!
}
`, BuiltIn: false},
	{Name: "../todo.graphql", Input: `type Mutation {
  createTodo(input: CreateTodoInput!): Todo!
  updateTodo(id: ID!, input: UpdateTodoInput!): Todo!
}`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
