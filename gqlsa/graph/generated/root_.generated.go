// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"gqlsa/graph/model"
	"saas/gen/ent"
	"sync/atomic"

	"entgo.io/contrib/entgql"
	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		schema:     cfg.Schema,
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Schema     *ast.Schema
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
	CanAdmin func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
	CanApp   func(ctx context.Context, obj interface{}, next graphql.Resolver) (res interface{}, err error)
}

type ComplexityRoot struct {
	AdminUser struct {
		Company   func(childComplexity int) int
		Email     func(childComplexity int) int
		FirstName func(childComplexity int) int
		ID        func(childComplexity int) int
		LastName  func(childComplexity int) int
		Phone     func(childComplexity int) int
	}

	App struct {
		Address                 func(childComplexity int) int
		AdminUserID             func(childComplexity int) int
		AuthEmailVerify         func(childComplexity int) int
		AuthEnablePasswordLogin func(childComplexity int) int
		AuthFpTempl             func(childComplexity int) int
		AuthFpTemplID           func(childComplexity int) int
		AuthVerificationTempl   func(childComplexity int) int
		AuthVerificationTemplID func(childComplexity int) int
		AuthWelcomeEmailTempl   func(childComplexity int) int
		AuthWelcomeEmailTemplID func(childComplexity int) int
		Copyright               func(childComplexity int) int
		CreatedAt               func(childComplexity int) int
		DefaultMailConn         func(childComplexity int) int
		DefaultMailConnID       func(childComplexity int) int
		Email                   func(childComplexity int) int
		ID                      func(childComplexity int) int
		LogoURL                 func(childComplexity int) int
		MailLayoutTempl         func(childComplexity int) int
		MailLayoutTemplID       func(childComplexity int) int
		Name                    func(childComplexity int) int
		OauthSigninCanSignup    func(childComplexity int) int
		SiteURL                 func(childComplexity int) int
		SocialFb                func(childComplexity int) int
		SocialIn                func(childComplexity int) int
		SocialTw                func(childComplexity int) int
		UpdatedAt               func(childComplexity int) int
		WsapceInviteTempl       func(childComplexity int) int
		WsapceInviteTemplID     func(childComplexity int) int
		WsapceSuccessTempl      func(childComplexity int) int
		WsapceSuccessTemplID    func(childComplexity int) int
	}

	AppConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	AppEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	LoginResponse struct {
		Me    func(childComplexity int) int
		Token func(childComplexity int) int
	}

	MailConn struct {
		AppID      func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		Encryption func(childComplexity int) int
		FromEmail  func(childComplexity int) int
		FromName   func(childComplexity int) int
		Host       func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		Password   func(childComplexity int) int
		Port       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
		Username   func(childComplexity int) int
	}

	MailConnConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MailConnEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Media struct {
		AggregateType   func(childComplexity int) int
		Alt             func(childComplexity int) int
		AppID           func(childComplexity int) int
		Checksum        func(childComplexity int) int
		CreatedAt       func(childComplexity int) int
		Description     func(childComplexity int) int
		Directory       func(childComplexity int) int
		Disk            func(childComplexity int) int
		Extension       func(childComplexity int) int
		ID              func(childComplexity int) int
		IsVariant       func(childComplexity int) int
		MimeType        func(childComplexity int) int
		Name            func(childComplexity int) int
		OriginalMediaID func(childComplexity int) int
		OriginalName    func(childComplexity int) int
		Size            func(childComplexity int) int
		Status          func(childComplexity int) int
		UID             func(childComplexity int) int
		UpdatedAt       func(childComplexity int) int
		VariantName     func(childComplexity int) int
		WorkspaceID     func(childComplexity int) int
	}

	MediaConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	MediaEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Mutation struct {
		AdminAuthLogin        func(childComplexity int, input model.LoginInput) int
		CreateApp             func(childComplexity int, input ent.CreateAppInput) int
		CreateMailConn        func(childComplexity int, input ent.CreateMailConnInput) int
		CreateOauthConnection func(childComplexity int, input ent.CreateOauthConnectionInput) int
		CreatePost            func(childComplexity int, input ent.CreatePostInput) int
		CreatePostCategory    func(childComplexity int, input ent.CreatePostCategoryInput) int
		CreatePostStatus      func(childComplexity int, input ent.CreatePostStatusInput) int
		CreatePostTag         func(childComplexity int, input ent.CreatePostTagInput) int
		CreatePostType        func(childComplexity int, input ent.CreatePostTypeInput) int
		CreatePostTypeForm    func(childComplexity int, input ent.CreatePostTypeFormInput) int
		CreateTempl           func(childComplexity int, input ent.CreateTemplInput) int
		DeletePostCategory    func(childComplexity int, id string) int
		Ping                  func(childComplexity int) int
		UpdateApp             func(childComplexity int, id string, input ent.UpdateAppInput) int
		UpdateMailConn        func(childComplexity int, id string, input ent.UpdateMailConnInput) int
		UpdateOauthConnection func(childComplexity int, id string, input ent.UpdateOauthConnectionInput) int
		UpdatePost            func(childComplexity int, id string, input ent.UpdatePostInput) int
		UpdatePostCategory    func(childComplexity int, id string, input ent.UpdatePostCategoryInput) int
		UpdatePostStatus      func(childComplexity int, id string, input ent.UpdatePostStatusInput) int
		UpdatePostTag         func(childComplexity int, id string, input ent.UpdatePostTagInput) int
		UpdatePostType        func(childComplexity int, id string, input ent.UpdatePostTypeInput) int
		UpdatePostTypeForm    func(childComplexity int, id string, input ent.UpdatePostTypeFormInput) int
		UpdateTempl           func(childComplexity int, id string, input ent.UpdateTemplInput) int
	}

	OauthConnection struct {
		AppID         func(childComplexity int) int
		ClientID      func(childComplexity int) int
		ClientSecret  func(childComplexity int) int
		CreatedAt     func(childComplexity int) int
		DashboardLink func(childComplexity int) int
		ID            func(childComplexity int) int
		Name          func(childComplexity int) int
		Note          func(childComplexity int) int
		Provider      func(childComplexity int) int
		RedirectURL   func(childComplexity int) int
		Scopes        func(childComplexity int) int
		Status        func(childComplexity int) int
		UpdatedAt     func(childComplexity int) int
	}

	OauthConnectionConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	OauthConnectionEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PageInfo struct {
		EndCursor       func(childComplexity int) int
		HasNextPage     func(childComplexity int) int
		HasPreviousPage func(childComplexity int) int
		StartCursor     func(childComplexity int) int
	}

	Post struct {
		AppID             func(childComplexity int) int
		Content           func(childComplexity int) int
		CreatedAt         func(childComplexity int) int
		Custom            func(childComplexity int) int
		Excerpt           func(childComplexity int) int
		Headline          func(childComplexity int) int
		ID                func(childComplexity int) int
		MetaCanonicalURL  func(childComplexity int) int
		MetaDescr         func(childComplexity int) int
		MetaRobots        func(childComplexity int) int
		MetaTitle         func(childComplexity int) int
		Name              func(childComplexity int) int
		PostStatus        func(childComplexity int) int
		PostStatusID      func(childComplexity int) int
		PostTags          func(childComplexity int) int
		PostType          func(childComplexity int) int
		PostTypeID        func(childComplexity int) int
		PrimaryCategory   func(childComplexity int) int
		PrimaryCategoryID func(childComplexity int) int
		Slug              func(childComplexity int) int
		UpdatedAt         func(childComplexity int) int
	}

	PostCategory struct {
		AppID            func(childComplexity int) int
		Children         func(childComplexity int) int
		Content          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		Parent           func(childComplexity int) int
		ParentID         func(childComplexity int) int
		Posts            func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostCategoryConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostCategoryEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostStatus struct {
		AppID      func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		PostType   func(childComplexity int) int
		PostTypeID func(childComplexity int) int
		Posts      func(childComplexity int) int
		Slug       func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	PostStatusConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostStatusEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostTag struct {
		AppID            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		Posts            func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostTagConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostTagEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostType struct {
		AppID            func(childComplexity int) int
		Content          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Excerpt          func(childComplexity int) int
		ID               func(childComplexity int) int
		MetaCanonicalURL func(childComplexity int) int
		MetaDescr        func(childComplexity int) int
		MetaRobots       func(childComplexity int) int
		MetaTitle        func(childComplexity int) int
		Name             func(childComplexity int) int
		PostStatuses     func(childComplexity int) int
		PostTypeForms    func(childComplexity int) int
		Posts            func(childComplexity int) int
		Slug             func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
	}

	PostTypeConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostTypeEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	PostTypeForm struct {
		AppID      func(childComplexity int) int
		Body       func(childComplexity int) int
		CreatedAt  func(childComplexity int) int
		ID         func(childComplexity int) int
		Name       func(childComplexity int) int
		PostType   func(childComplexity int) int
		PostTypeID func(childComplexity int) int
		Status     func(childComplexity int) int
		UpdatedAt  func(childComplexity int) int
	}

	PostTypeFormConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	PostTypeFormEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Query struct {
		Apps             func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.AppOrder, where *ent.AppWhereInput) int
		MailConns        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.MailConnOrder, where *ent.MailConnWhereInput) int
		Medias           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.MediaOrder, where *ent.MediaWhereInput) int
		Node             func(childComplexity int, id string) int
		Nodes            func(childComplexity int, ids []string) int
		OauthConnections func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.OauthConnectionOrder, where *ent.OauthConnectionWhereInput) int
		Ping             func(childComplexity int) int
		PostCategories   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostCategoryOrder, where *ent.PostCategoryWhereInput) int
		PostStatuses     func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostStatusOrder, where *ent.PostStatusWhereInput) int
		PostTags         func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostTagOrder, where *ent.PostTagWhereInput) int
		PostTypeForms    func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostTypeFormOrder, where *ent.PostTypeFormWhereInput) int
		PostTypes        func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostTypeOrder, where *ent.PostTypeWhereInput) int
		Posts            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.PostOrder, where *ent.PostWhereInput) int
		Templs           func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.TemplOrder, where *ent.TemplWhereInput) int
		Todos            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *ent.TodoOrder, where *ent.TodoWhereInput) int
		Users            func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.UserOrder, where *ent.UserWhereInput) int
		WorkspaceInvites func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.WorkspaceInviteOrder, where *ent.WorkspaceInviteWhereInput) int
		WorkspaceUsers   func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.WorkspaceUserOrder, where *ent.WorkspaceUserWhereInput) int
		Workspaces       func(childComplexity int, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy []*ent.WorkspaceOrder, where *ent.WorkspaceWhereInput) int
	}

	Student struct {
		Name func(childComplexity int) int
	}

	Templ struct {
		AppID     func(childComplexity int) int
		Body      func(childComplexity int) int
		Compiled  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Name      func(childComplexity int) int
		Status    func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	TemplConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TemplEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Todo struct {
		AppID     func(childComplexity int) int
		Children  func(childComplexity int) int
		CreatedAt func(childComplexity int) int
		ID        func(childComplexity int) int
		Parent    func(childComplexity int) int
		Priority  func(childComplexity int) int
		Status    func(childComplexity int) int
		Text      func(childComplexity int) int
		UpdatedAt func(childComplexity int) int
	}

	TodoConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	TodoEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	User struct {
		APIKey           func(childComplexity int) int
		AppID            func(childComplexity int) int
		CanAdmin         func(childComplexity int) int
		Company          func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		Email            func(childComplexity int) int
		FirstName        func(childComplexity int) int
		ID               func(childComplexity int) int
		LastName         func(childComplexity int) int
		Locale           func(childComplexity int) int
		Phone            func(childComplexity int) int
		RoleID           func(childComplexity int) int
		Status           func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		WelcomeEmailSent func(childComplexity int) int
		WorkspaceUsers   func(childComplexity int) int
		Workspaces       func(childComplexity int) int
	}

	UserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	UserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	Workspace struct {
		AppID            func(childComplexity int) int
		CreatedAt        func(childComplexity int) int
		ID               func(childComplexity int) int
		IsPersonal       func(childComplexity int) int
		Name             func(childComplexity int) int
		UpdatedAt        func(childComplexity int) int
		UserID           func(childComplexity int) int
		Users            func(childComplexity int) int
		WorkspaceInvites func(childComplexity int) int
		WorkspaceUsers   func(childComplexity int) int
	}

	WorkspaceConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	WorkspaceEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	WorkspaceInvite struct {
		AppID       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		Email       func(childComplexity int) int
		ID          func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		Workspace   func(childComplexity int) int
		WorkspaceID func(childComplexity int) int
	}

	WorkspaceInviteConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	WorkspaceInviteEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}

	WorkspaceUser struct {
		AppID       func(childComplexity int) int
		CreatedAt   func(childComplexity int) int
		ID          func(childComplexity int) int
		Role        func(childComplexity int) int
		UpdatedAt   func(childComplexity int) int
		User        func(childComplexity int) int
		UserID      func(childComplexity int) int
		Workspace   func(childComplexity int) int
		WorkspaceID func(childComplexity int) int
	}

	WorkspaceUserConnection struct {
		Edges      func(childComplexity int) int
		PageInfo   func(childComplexity int) int
		TotalCount func(childComplexity int) int
	}

	WorkspaceUserEdge struct {
		Cursor func(childComplexity int) int
		Node   func(childComplexity int) int
	}
}

type executableSchema struct {
	schema     *ast.Schema
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	if e.schema != nil {
		return e.schema
	}
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e, 0, 0, nil}
	_ = ec
	switch typeName + "." + field {

	case "AdminUser.company":
		if e.complexity.AdminUser.Company == nil {
			break
		}

		return e.complexity.AdminUser.Company(childComplexity), true

	case "AdminUser.email":
		if e.complexity.AdminUser.Email == nil {
			break
		}

		return e.complexity.AdminUser.Email(childComplexity), true

	case "AdminUser.firstName":
		if e.complexity.AdminUser.FirstName == nil {
			break
		}

		return e.complexity.AdminUser.FirstName(childComplexity), true

	case "AdminUser.id":
		if e.complexity.AdminUser.ID == nil {
			break
		}

		return e.complexity.AdminUser.ID(childComplexity), true

	case "AdminUser.lastName":
		if e.complexity.AdminUser.LastName == nil {
			break
		}

		return e.complexity.AdminUser.LastName(childComplexity), true

	case "AdminUser.phone":
		if e.complexity.AdminUser.Phone == nil {
			break
		}

		return e.complexity.AdminUser.Phone(childComplexity), true

	case "App.address":
		if e.complexity.App.Address == nil {
			break
		}

		return e.complexity.App.Address(childComplexity), true

	case "App.adminUserID":
		if e.complexity.App.AdminUserID == nil {
			break
		}

		return e.complexity.App.AdminUserID(childComplexity), true

	case "App.authEmailVerify":
		if e.complexity.App.AuthEmailVerify == nil {
			break
		}

		return e.complexity.App.AuthEmailVerify(childComplexity), true

	case "App.authEnablePasswordLogin":
		if e.complexity.App.AuthEnablePasswordLogin == nil {
			break
		}

		return e.complexity.App.AuthEnablePasswordLogin(childComplexity), true

	case "App.authFpTempl":
		if e.complexity.App.AuthFpTempl == nil {
			break
		}

		return e.complexity.App.AuthFpTempl(childComplexity), true

	case "App.authFpTemplID":
		if e.complexity.App.AuthFpTemplID == nil {
			break
		}

		return e.complexity.App.AuthFpTemplID(childComplexity), true

	case "App.authVerificationTempl":
		if e.complexity.App.AuthVerificationTempl == nil {
			break
		}

		return e.complexity.App.AuthVerificationTempl(childComplexity), true

	case "App.authVerificationTemplID":
		if e.complexity.App.AuthVerificationTemplID == nil {
			break
		}

		return e.complexity.App.AuthVerificationTemplID(childComplexity), true

	case "App.authWelcomeEmailTempl":
		if e.complexity.App.AuthWelcomeEmailTempl == nil {
			break
		}

		return e.complexity.App.AuthWelcomeEmailTempl(childComplexity), true

	case "App.authWelcomeEmailTemplID":
		if e.complexity.App.AuthWelcomeEmailTemplID == nil {
			break
		}

		return e.complexity.App.AuthWelcomeEmailTemplID(childComplexity), true

	case "App.copyright":
		if e.complexity.App.Copyright == nil {
			break
		}

		return e.complexity.App.Copyright(childComplexity), true

	case "App.createdAt":
		if e.complexity.App.CreatedAt == nil {
			break
		}

		return e.complexity.App.CreatedAt(childComplexity), true

	case "App.defaultMailConn":
		if e.complexity.App.DefaultMailConn == nil {
			break
		}

		return e.complexity.App.DefaultMailConn(childComplexity), true

	case "App.defaultMailConnID":
		if e.complexity.App.DefaultMailConnID == nil {
			break
		}

		return e.complexity.App.DefaultMailConnID(childComplexity), true

	case "App.email":
		if e.complexity.App.Email == nil {
			break
		}

		return e.complexity.App.Email(childComplexity), true

	case "App.id":
		if e.complexity.App.ID == nil {
			break
		}

		return e.complexity.App.ID(childComplexity), true

	case "App.logoURL":
		if e.complexity.App.LogoURL == nil {
			break
		}

		return e.complexity.App.LogoURL(childComplexity), true

	case "App.mailLayoutTempl":
		if e.complexity.App.MailLayoutTempl == nil {
			break
		}

		return e.complexity.App.MailLayoutTempl(childComplexity), true

	case "App.mailLayoutTemplID":
		if e.complexity.App.MailLayoutTemplID == nil {
			break
		}

		return e.complexity.App.MailLayoutTemplID(childComplexity), true

	case "App.name":
		if e.complexity.App.Name == nil {
			break
		}

		return e.complexity.App.Name(childComplexity), true

	case "App.oauthSigninCanSignup":
		if e.complexity.App.OauthSigninCanSignup == nil {
			break
		}

		return e.complexity.App.OauthSigninCanSignup(childComplexity), true

	case "App.siteURL":
		if e.complexity.App.SiteURL == nil {
			break
		}

		return e.complexity.App.SiteURL(childComplexity), true

	case "App.socialFb":
		if e.complexity.App.SocialFb == nil {
			break
		}

		return e.complexity.App.SocialFb(childComplexity), true

	case "App.socialIn":
		if e.complexity.App.SocialIn == nil {
			break
		}

		return e.complexity.App.SocialIn(childComplexity), true

	case "App.socialTw":
		if e.complexity.App.SocialTw == nil {
			break
		}

		return e.complexity.App.SocialTw(childComplexity), true

	case "App.updatedAt":
		if e.complexity.App.UpdatedAt == nil {
			break
		}

		return e.complexity.App.UpdatedAt(childComplexity), true

	case "App.wsapceInviteTempl":
		if e.complexity.App.WsapceInviteTempl == nil {
			break
		}

		return e.complexity.App.WsapceInviteTempl(childComplexity), true

	case "App.wsapceInviteTemplID":
		if e.complexity.App.WsapceInviteTemplID == nil {
			break
		}

		return e.complexity.App.WsapceInviteTemplID(childComplexity), true

	case "App.wsapceSuccessTempl":
		if e.complexity.App.WsapceSuccessTempl == nil {
			break
		}

		return e.complexity.App.WsapceSuccessTempl(childComplexity), true

	case "App.wsapceSuccessTemplID":
		if e.complexity.App.WsapceSuccessTemplID == nil {
			break
		}

		return e.complexity.App.WsapceSuccessTemplID(childComplexity), true

	case "AppConnection.edges":
		if e.complexity.AppConnection.Edges == nil {
			break
		}

		return e.complexity.AppConnection.Edges(childComplexity), true

	case "AppConnection.pageInfo":
		if e.complexity.AppConnection.PageInfo == nil {
			break
		}

		return e.complexity.AppConnection.PageInfo(childComplexity), true

	case "AppConnection.totalCount":
		if e.complexity.AppConnection.TotalCount == nil {
			break
		}

		return e.complexity.AppConnection.TotalCount(childComplexity), true

	case "AppEdge.cursor":
		if e.complexity.AppEdge.Cursor == nil {
			break
		}

		return e.complexity.AppEdge.Cursor(childComplexity), true

	case "AppEdge.node":
		if e.complexity.AppEdge.Node == nil {
			break
		}

		return e.complexity.AppEdge.Node(childComplexity), true

	case "LoginResponse.me":
		if e.complexity.LoginResponse.Me == nil {
			break
		}

		return e.complexity.LoginResponse.Me(childComplexity), true

	case "LoginResponse.token":
		if e.complexity.LoginResponse.Token == nil {
			break
		}

		return e.complexity.LoginResponse.Token(childComplexity), true

	case "MailConn.appID":
		if e.complexity.MailConn.AppID == nil {
			break
		}

		return e.complexity.MailConn.AppID(childComplexity), true

	case "MailConn.createdAt":
		if e.complexity.MailConn.CreatedAt == nil {
			break
		}

		return e.complexity.MailConn.CreatedAt(childComplexity), true

	case "MailConn.encryption":
		if e.complexity.MailConn.Encryption == nil {
			break
		}

		return e.complexity.MailConn.Encryption(childComplexity), true

	case "MailConn.fromEmail":
		if e.complexity.MailConn.FromEmail == nil {
			break
		}

		return e.complexity.MailConn.FromEmail(childComplexity), true

	case "MailConn.fromName":
		if e.complexity.MailConn.FromName == nil {
			break
		}

		return e.complexity.MailConn.FromName(childComplexity), true

	case "MailConn.host":
		if e.complexity.MailConn.Host == nil {
			break
		}

		return e.complexity.MailConn.Host(childComplexity), true

	case "MailConn.id":
		if e.complexity.MailConn.ID == nil {
			break
		}

		return e.complexity.MailConn.ID(childComplexity), true

	case "MailConn.name":
		if e.complexity.MailConn.Name == nil {
			break
		}

		return e.complexity.MailConn.Name(childComplexity), true

	case "MailConn.password":
		if e.complexity.MailConn.Password == nil {
			break
		}

		return e.complexity.MailConn.Password(childComplexity), true

	case "MailConn.port":
		if e.complexity.MailConn.Port == nil {
			break
		}

		return e.complexity.MailConn.Port(childComplexity), true

	case "MailConn.status":
		if e.complexity.MailConn.Status == nil {
			break
		}

		return e.complexity.MailConn.Status(childComplexity), true

	case "MailConn.updatedAt":
		if e.complexity.MailConn.UpdatedAt == nil {
			break
		}

		return e.complexity.MailConn.UpdatedAt(childComplexity), true

	case "MailConn.username":
		if e.complexity.MailConn.Username == nil {
			break
		}

		return e.complexity.MailConn.Username(childComplexity), true

	case "MailConnConnection.edges":
		if e.complexity.MailConnConnection.Edges == nil {
			break
		}

		return e.complexity.MailConnConnection.Edges(childComplexity), true

	case "MailConnConnection.pageInfo":
		if e.complexity.MailConnConnection.PageInfo == nil {
			break
		}

		return e.complexity.MailConnConnection.PageInfo(childComplexity), true

	case "MailConnConnection.totalCount":
		if e.complexity.MailConnConnection.TotalCount == nil {
			break
		}

		return e.complexity.MailConnConnection.TotalCount(childComplexity), true

	case "MailConnEdge.cursor":
		if e.complexity.MailConnEdge.Cursor == nil {
			break
		}

		return e.complexity.MailConnEdge.Cursor(childComplexity), true

	case "MailConnEdge.node":
		if e.complexity.MailConnEdge.Node == nil {
			break
		}

		return e.complexity.MailConnEdge.Node(childComplexity), true

	case "Media.aggregateType":
		if e.complexity.Media.AggregateType == nil {
			break
		}

		return e.complexity.Media.AggregateType(childComplexity), true

	case "Media.alt":
		if e.complexity.Media.Alt == nil {
			break
		}

		return e.complexity.Media.Alt(childComplexity), true

	case "Media.appID":
		if e.complexity.Media.AppID == nil {
			break
		}

		return e.complexity.Media.AppID(childComplexity), true

	case "Media.checksum":
		if e.complexity.Media.Checksum == nil {
			break
		}

		return e.complexity.Media.Checksum(childComplexity), true

	case "Media.createdAt":
		if e.complexity.Media.CreatedAt == nil {
			break
		}

		return e.complexity.Media.CreatedAt(childComplexity), true

	case "Media.description":
		if e.complexity.Media.Description == nil {
			break
		}

		return e.complexity.Media.Description(childComplexity), true

	case "Media.directory":
		if e.complexity.Media.Directory == nil {
			break
		}

		return e.complexity.Media.Directory(childComplexity), true

	case "Media.disk":
		if e.complexity.Media.Disk == nil {
			break
		}

		return e.complexity.Media.Disk(childComplexity), true

	case "Media.extension":
		if e.complexity.Media.Extension == nil {
			break
		}

		return e.complexity.Media.Extension(childComplexity), true

	case "Media.id":
		if e.complexity.Media.ID == nil {
			break
		}

		return e.complexity.Media.ID(childComplexity), true

	case "Media.isVariant":
		if e.complexity.Media.IsVariant == nil {
			break
		}

		return e.complexity.Media.IsVariant(childComplexity), true

	case "Media.mimeType":
		if e.complexity.Media.MimeType == nil {
			break
		}

		return e.complexity.Media.MimeType(childComplexity), true

	case "Media.name":
		if e.complexity.Media.Name == nil {
			break
		}

		return e.complexity.Media.Name(childComplexity), true

	case "Media.originalMediaID":
		if e.complexity.Media.OriginalMediaID == nil {
			break
		}

		return e.complexity.Media.OriginalMediaID(childComplexity), true

	case "Media.originalName":
		if e.complexity.Media.OriginalName == nil {
			break
		}

		return e.complexity.Media.OriginalName(childComplexity), true

	case "Media.size":
		if e.complexity.Media.Size == nil {
			break
		}

		return e.complexity.Media.Size(childComplexity), true

	case "Media.status":
		if e.complexity.Media.Status == nil {
			break
		}

		return e.complexity.Media.Status(childComplexity), true

	case "Media.uid":
		if e.complexity.Media.UID == nil {
			break
		}

		return e.complexity.Media.UID(childComplexity), true

	case "Media.updatedAt":
		if e.complexity.Media.UpdatedAt == nil {
			break
		}

		return e.complexity.Media.UpdatedAt(childComplexity), true

	case "Media.variantName":
		if e.complexity.Media.VariantName == nil {
			break
		}

		return e.complexity.Media.VariantName(childComplexity), true

	case "Media.workspaceID":
		if e.complexity.Media.WorkspaceID == nil {
			break
		}

		return e.complexity.Media.WorkspaceID(childComplexity), true

	case "MediaConnection.edges":
		if e.complexity.MediaConnection.Edges == nil {
			break
		}

		return e.complexity.MediaConnection.Edges(childComplexity), true

	case "MediaConnection.pageInfo":
		if e.complexity.MediaConnection.PageInfo == nil {
			break
		}

		return e.complexity.MediaConnection.PageInfo(childComplexity), true

	case "MediaConnection.totalCount":
		if e.complexity.MediaConnection.TotalCount == nil {
			break
		}

		return e.complexity.MediaConnection.TotalCount(childComplexity), true

	case "MediaEdge.cursor":
		if e.complexity.MediaEdge.Cursor == nil {
			break
		}

		return e.complexity.MediaEdge.Cursor(childComplexity), true

	case "MediaEdge.node":
		if e.complexity.MediaEdge.Node == nil {
			break
		}

		return e.complexity.MediaEdge.Node(childComplexity), true

	case "Mutation.adminAuthLogin":
		if e.complexity.Mutation.AdminAuthLogin == nil {
			break
		}

		args, err := ec.field_Mutation_adminAuthLogin_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.AdminAuthLogin(childComplexity, args["input"].(model.LoginInput)), true

	case "Mutation.createApp":
		if e.complexity.Mutation.CreateApp == nil {
			break
		}

		args, err := ec.field_Mutation_createApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateApp(childComplexity, args["input"].(ent.CreateAppInput)), true

	case "Mutation.createMailConn":
		if e.complexity.Mutation.CreateMailConn == nil {
			break
		}

		args, err := ec.field_Mutation_createMailConn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateMailConn(childComplexity, args["input"].(ent.CreateMailConnInput)), true

	case "Mutation.createOauthConnection":
		if e.complexity.Mutation.CreateOauthConnection == nil {
			break
		}

		args, err := ec.field_Mutation_createOauthConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateOauthConnection(childComplexity, args["input"].(ent.CreateOauthConnectionInput)), true

	case "Mutation.createPost":
		if e.complexity.Mutation.CreatePost == nil {
			break
		}

		args, err := ec.field_Mutation_createPost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePost(childComplexity, args["input"].(ent.CreatePostInput)), true

	case "Mutation.createPostCategory":
		if e.complexity.Mutation.CreatePostCategory == nil {
			break
		}

		args, err := ec.field_Mutation_createPostCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostCategory(childComplexity, args["input"].(ent.CreatePostCategoryInput)), true

	case "Mutation.createPostStatus":
		if e.complexity.Mutation.CreatePostStatus == nil {
			break
		}

		args, err := ec.field_Mutation_createPostStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostStatus(childComplexity, args["input"].(ent.CreatePostStatusInput)), true

	case "Mutation.createPostTag":
		if e.complexity.Mutation.CreatePostTag == nil {
			break
		}

		args, err := ec.field_Mutation_createPostTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostTag(childComplexity, args["input"].(ent.CreatePostTagInput)), true

	case "Mutation.createPostType":
		if e.complexity.Mutation.CreatePostType == nil {
			break
		}

		args, err := ec.field_Mutation_createPostType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostType(childComplexity, args["input"].(ent.CreatePostTypeInput)), true

	case "Mutation.createPostTypeForm":
		if e.complexity.Mutation.CreatePostTypeForm == nil {
			break
		}

		args, err := ec.field_Mutation_createPostTypeForm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreatePostTypeForm(childComplexity, args["input"].(ent.CreatePostTypeFormInput)), true

	case "Mutation.createTempl":
		if e.complexity.Mutation.CreateTempl == nil {
			break
		}

		args, err := ec.field_Mutation_createTempl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateTempl(childComplexity, args["input"].(ent.CreateTemplInput)), true

	case "Mutation.deletePostCategory":
		if e.complexity.Mutation.DeletePostCategory == nil {
			break
		}

		args, err := ec.field_Mutation_deletePostCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeletePostCategory(childComplexity, args["id"].(string)), true

	case "Mutation.ping":
		if e.complexity.Mutation.Ping == nil {
			break
		}

		return e.complexity.Mutation.Ping(childComplexity), true

	case "Mutation.updateApp":
		if e.complexity.Mutation.UpdateApp == nil {
			break
		}

		args, err := ec.field_Mutation_updateApp_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateApp(childComplexity, args["id"].(string), args["input"].(ent.UpdateAppInput)), true

	case "Mutation.updateMailConn":
		if e.complexity.Mutation.UpdateMailConn == nil {
			break
		}

		args, err := ec.field_Mutation_updateMailConn_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateMailConn(childComplexity, args["id"].(string), args["input"].(ent.UpdateMailConnInput)), true

	case "Mutation.updateOauthConnection":
		if e.complexity.Mutation.UpdateOauthConnection == nil {
			break
		}

		args, err := ec.field_Mutation_updateOauthConnection_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateOauthConnection(childComplexity, args["id"].(string), args["input"].(ent.UpdateOauthConnectionInput)), true

	case "Mutation.updatePost":
		if e.complexity.Mutation.UpdatePost == nil {
			break
		}

		args, err := ec.field_Mutation_updatePost_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePost(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostInput)), true

	case "Mutation.updatePostCategory":
		if e.complexity.Mutation.UpdatePostCategory == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostCategory_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostCategory(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostCategoryInput)), true

	case "Mutation.updatePostStatus":
		if e.complexity.Mutation.UpdatePostStatus == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostStatus_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostStatus(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostStatusInput)), true

	case "Mutation.updatePostTag":
		if e.complexity.Mutation.UpdatePostTag == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostTag_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostTag(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostTagInput)), true

	case "Mutation.updatePostType":
		if e.complexity.Mutation.UpdatePostType == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostType_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostType(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostTypeInput)), true

	case "Mutation.updatePostTypeForm":
		if e.complexity.Mutation.UpdatePostTypeForm == nil {
			break
		}

		args, err := ec.field_Mutation_updatePostTypeForm_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdatePostTypeForm(childComplexity, args["id"].(string), args["input"].(ent.UpdatePostTypeFormInput)), true

	case "Mutation.updateTempl":
		if e.complexity.Mutation.UpdateTempl == nil {
			break
		}

		args, err := ec.field_Mutation_updateTempl_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateTempl(childComplexity, args["id"].(string), args["input"].(ent.UpdateTemplInput)), true

	case "OauthConnection.appID":
		if e.complexity.OauthConnection.AppID == nil {
			break
		}

		return e.complexity.OauthConnection.AppID(childComplexity), true

	case "OauthConnection.clientID":
		if e.complexity.OauthConnection.ClientID == nil {
			break
		}

		return e.complexity.OauthConnection.ClientID(childComplexity), true

	case "OauthConnection.clientSecret":
		if e.complexity.OauthConnection.ClientSecret == nil {
			break
		}

		return e.complexity.OauthConnection.ClientSecret(childComplexity), true

	case "OauthConnection.createdAt":
		if e.complexity.OauthConnection.CreatedAt == nil {
			break
		}

		return e.complexity.OauthConnection.CreatedAt(childComplexity), true

	case "OauthConnection.dashboardLink":
		if e.complexity.OauthConnection.DashboardLink == nil {
			break
		}

		return e.complexity.OauthConnection.DashboardLink(childComplexity), true

	case "OauthConnection.id":
		if e.complexity.OauthConnection.ID == nil {
			break
		}

		return e.complexity.OauthConnection.ID(childComplexity), true

	case "OauthConnection.name":
		if e.complexity.OauthConnection.Name == nil {
			break
		}

		return e.complexity.OauthConnection.Name(childComplexity), true

	case "OauthConnection.note":
		if e.complexity.OauthConnection.Note == nil {
			break
		}

		return e.complexity.OauthConnection.Note(childComplexity), true

	case "OauthConnection.provider":
		if e.complexity.OauthConnection.Provider == nil {
			break
		}

		return e.complexity.OauthConnection.Provider(childComplexity), true

	case "OauthConnection.redirectURL":
		if e.complexity.OauthConnection.RedirectURL == nil {
			break
		}

		return e.complexity.OauthConnection.RedirectURL(childComplexity), true

	case "OauthConnection.scopes":
		if e.complexity.OauthConnection.Scopes == nil {
			break
		}

		return e.complexity.OauthConnection.Scopes(childComplexity), true

	case "OauthConnection.status":
		if e.complexity.OauthConnection.Status == nil {
			break
		}

		return e.complexity.OauthConnection.Status(childComplexity), true

	case "OauthConnection.updatedAt":
		if e.complexity.OauthConnection.UpdatedAt == nil {
			break
		}

		return e.complexity.OauthConnection.UpdatedAt(childComplexity), true

	case "OauthConnectionConnection.edges":
		if e.complexity.OauthConnectionConnection.Edges == nil {
			break
		}

		return e.complexity.OauthConnectionConnection.Edges(childComplexity), true

	case "OauthConnectionConnection.pageInfo":
		if e.complexity.OauthConnectionConnection.PageInfo == nil {
			break
		}

		return e.complexity.OauthConnectionConnection.PageInfo(childComplexity), true

	case "OauthConnectionConnection.totalCount":
		if e.complexity.OauthConnectionConnection.TotalCount == nil {
			break
		}

		return e.complexity.OauthConnectionConnection.TotalCount(childComplexity), true

	case "OauthConnectionEdge.cursor":
		if e.complexity.OauthConnectionEdge.Cursor == nil {
			break
		}

		return e.complexity.OauthConnectionEdge.Cursor(childComplexity), true

	case "OauthConnectionEdge.node":
		if e.complexity.OauthConnectionEdge.Node == nil {
			break
		}

		return e.complexity.OauthConnectionEdge.Node(childComplexity), true

	case "PageInfo.endCursor":
		if e.complexity.PageInfo.EndCursor == nil {
			break
		}

		return e.complexity.PageInfo.EndCursor(childComplexity), true

	case "PageInfo.hasNextPage":
		if e.complexity.PageInfo.HasNextPage == nil {
			break
		}

		return e.complexity.PageInfo.HasNextPage(childComplexity), true

	case "PageInfo.hasPreviousPage":
		if e.complexity.PageInfo.HasPreviousPage == nil {
			break
		}

		return e.complexity.PageInfo.HasPreviousPage(childComplexity), true

	case "PageInfo.startCursor":
		if e.complexity.PageInfo.StartCursor == nil {
			break
		}

		return e.complexity.PageInfo.StartCursor(childComplexity), true

	case "Post.appID":
		if e.complexity.Post.AppID == nil {
			break
		}

		return e.complexity.Post.AppID(childComplexity), true

	case "Post.content":
		if e.complexity.Post.Content == nil {
			break
		}

		return e.complexity.Post.Content(childComplexity), true

	case "Post.createdAt":
		if e.complexity.Post.CreatedAt == nil {
			break
		}

		return e.complexity.Post.CreatedAt(childComplexity), true

	case "Post.custom":
		if e.complexity.Post.Custom == nil {
			break
		}

		return e.complexity.Post.Custom(childComplexity), true

	case "Post.excerpt":
		if e.complexity.Post.Excerpt == nil {
			break
		}

		return e.complexity.Post.Excerpt(childComplexity), true

	case "Post.headline":
		if e.complexity.Post.Headline == nil {
			break
		}

		return e.complexity.Post.Headline(childComplexity), true

	case "Post.id":
		if e.complexity.Post.ID == nil {
			break
		}

		return e.complexity.Post.ID(childComplexity), true

	case "Post.metaCanonicalURL":
		if e.complexity.Post.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.Post.MetaCanonicalURL(childComplexity), true

	case "Post.metaDescr":
		if e.complexity.Post.MetaDescr == nil {
			break
		}

		return e.complexity.Post.MetaDescr(childComplexity), true

	case "Post.metaRobots":
		if e.complexity.Post.MetaRobots == nil {
			break
		}

		return e.complexity.Post.MetaRobots(childComplexity), true

	case "Post.metaTitle":
		if e.complexity.Post.MetaTitle == nil {
			break
		}

		return e.complexity.Post.MetaTitle(childComplexity), true

	case "Post.name":
		if e.complexity.Post.Name == nil {
			break
		}

		return e.complexity.Post.Name(childComplexity), true

	case "Post.postStatus":
		if e.complexity.Post.PostStatus == nil {
			break
		}

		return e.complexity.Post.PostStatus(childComplexity), true

	case "Post.postStatusID":
		if e.complexity.Post.PostStatusID == nil {
			break
		}

		return e.complexity.Post.PostStatusID(childComplexity), true

	case "Post.postTags":
		if e.complexity.Post.PostTags == nil {
			break
		}

		return e.complexity.Post.PostTags(childComplexity), true

	case "Post.postType":
		if e.complexity.Post.PostType == nil {
			break
		}

		return e.complexity.Post.PostType(childComplexity), true

	case "Post.postTypeID":
		if e.complexity.Post.PostTypeID == nil {
			break
		}

		return e.complexity.Post.PostTypeID(childComplexity), true

	case "Post.primaryCategory":
		if e.complexity.Post.PrimaryCategory == nil {
			break
		}

		return e.complexity.Post.PrimaryCategory(childComplexity), true

	case "Post.primaryCategoryID":
		if e.complexity.Post.PrimaryCategoryID == nil {
			break
		}

		return e.complexity.Post.PrimaryCategoryID(childComplexity), true

	case "Post.slug":
		if e.complexity.Post.Slug == nil {
			break
		}

		return e.complexity.Post.Slug(childComplexity), true

	case "Post.updatedAt":
		if e.complexity.Post.UpdatedAt == nil {
			break
		}

		return e.complexity.Post.UpdatedAt(childComplexity), true

	case "PostCategory.appID":
		if e.complexity.PostCategory.AppID == nil {
			break
		}

		return e.complexity.PostCategory.AppID(childComplexity), true

	case "PostCategory.children":
		if e.complexity.PostCategory.Children == nil {
			break
		}

		return e.complexity.PostCategory.Children(childComplexity), true

	case "PostCategory.content":
		if e.complexity.PostCategory.Content == nil {
			break
		}

		return e.complexity.PostCategory.Content(childComplexity), true

	case "PostCategory.createdAt":
		if e.complexity.PostCategory.CreatedAt == nil {
			break
		}

		return e.complexity.PostCategory.CreatedAt(childComplexity), true

	case "PostCategory.excerpt":
		if e.complexity.PostCategory.Excerpt == nil {
			break
		}

		return e.complexity.PostCategory.Excerpt(childComplexity), true

	case "PostCategory.id":
		if e.complexity.PostCategory.ID == nil {
			break
		}

		return e.complexity.PostCategory.ID(childComplexity), true

	case "PostCategory.metaCanonicalURL":
		if e.complexity.PostCategory.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostCategory.MetaCanonicalURL(childComplexity), true

	case "PostCategory.metaDescr":
		if e.complexity.PostCategory.MetaDescr == nil {
			break
		}

		return e.complexity.PostCategory.MetaDescr(childComplexity), true

	case "PostCategory.metaRobots":
		if e.complexity.PostCategory.MetaRobots == nil {
			break
		}

		return e.complexity.PostCategory.MetaRobots(childComplexity), true

	case "PostCategory.metaTitle":
		if e.complexity.PostCategory.MetaTitle == nil {
			break
		}

		return e.complexity.PostCategory.MetaTitle(childComplexity), true

	case "PostCategory.name":
		if e.complexity.PostCategory.Name == nil {
			break
		}

		return e.complexity.PostCategory.Name(childComplexity), true

	case "PostCategory.parent":
		if e.complexity.PostCategory.Parent == nil {
			break
		}

		return e.complexity.PostCategory.Parent(childComplexity), true

	case "PostCategory.parentID":
		if e.complexity.PostCategory.ParentID == nil {
			break
		}

		return e.complexity.PostCategory.ParentID(childComplexity), true

	case "PostCategory.posts":
		if e.complexity.PostCategory.Posts == nil {
			break
		}

		return e.complexity.PostCategory.Posts(childComplexity), true

	case "PostCategory.slug":
		if e.complexity.PostCategory.Slug == nil {
			break
		}

		return e.complexity.PostCategory.Slug(childComplexity), true

	case "PostCategory.status":
		if e.complexity.PostCategory.Status == nil {
			break
		}

		return e.complexity.PostCategory.Status(childComplexity), true

	case "PostCategory.updatedAt":
		if e.complexity.PostCategory.UpdatedAt == nil {
			break
		}

		return e.complexity.PostCategory.UpdatedAt(childComplexity), true

	case "PostCategoryConnection.edges":
		if e.complexity.PostCategoryConnection.Edges == nil {
			break
		}

		return e.complexity.PostCategoryConnection.Edges(childComplexity), true

	case "PostCategoryConnection.pageInfo":
		if e.complexity.PostCategoryConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostCategoryConnection.PageInfo(childComplexity), true

	case "PostCategoryConnection.totalCount":
		if e.complexity.PostCategoryConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostCategoryConnection.TotalCount(childComplexity), true

	case "PostCategoryEdge.cursor":
		if e.complexity.PostCategoryEdge.Cursor == nil {
			break
		}

		return e.complexity.PostCategoryEdge.Cursor(childComplexity), true

	case "PostCategoryEdge.node":
		if e.complexity.PostCategoryEdge.Node == nil {
			break
		}

		return e.complexity.PostCategoryEdge.Node(childComplexity), true

	case "PostConnection.edges":
		if e.complexity.PostConnection.Edges == nil {
			break
		}

		return e.complexity.PostConnection.Edges(childComplexity), true

	case "PostConnection.pageInfo":
		if e.complexity.PostConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostConnection.PageInfo(childComplexity), true

	case "PostConnection.totalCount":
		if e.complexity.PostConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostConnection.TotalCount(childComplexity), true

	case "PostEdge.cursor":
		if e.complexity.PostEdge.Cursor == nil {
			break
		}

		return e.complexity.PostEdge.Cursor(childComplexity), true

	case "PostEdge.node":
		if e.complexity.PostEdge.Node == nil {
			break
		}

		return e.complexity.PostEdge.Node(childComplexity), true

	case "PostStatus.appID":
		if e.complexity.PostStatus.AppID == nil {
			break
		}

		return e.complexity.PostStatus.AppID(childComplexity), true

	case "PostStatus.createdAt":
		if e.complexity.PostStatus.CreatedAt == nil {
			break
		}

		return e.complexity.PostStatus.CreatedAt(childComplexity), true

	case "PostStatus.id":
		if e.complexity.PostStatus.ID == nil {
			break
		}

		return e.complexity.PostStatus.ID(childComplexity), true

	case "PostStatus.name":
		if e.complexity.PostStatus.Name == nil {
			break
		}

		return e.complexity.PostStatus.Name(childComplexity), true

	case "PostStatus.postType":
		if e.complexity.PostStatus.PostType == nil {
			break
		}

		return e.complexity.PostStatus.PostType(childComplexity), true

	case "PostStatus.postTypeID":
		if e.complexity.PostStatus.PostTypeID == nil {
			break
		}

		return e.complexity.PostStatus.PostTypeID(childComplexity), true

	case "PostStatus.posts":
		if e.complexity.PostStatus.Posts == nil {
			break
		}

		return e.complexity.PostStatus.Posts(childComplexity), true

	case "PostStatus.slug":
		if e.complexity.PostStatus.Slug == nil {
			break
		}

		return e.complexity.PostStatus.Slug(childComplexity), true

	case "PostStatus.status":
		if e.complexity.PostStatus.Status == nil {
			break
		}

		return e.complexity.PostStatus.Status(childComplexity), true

	case "PostStatus.updatedAt":
		if e.complexity.PostStatus.UpdatedAt == nil {
			break
		}

		return e.complexity.PostStatus.UpdatedAt(childComplexity), true

	case "PostStatusConnection.edges":
		if e.complexity.PostStatusConnection.Edges == nil {
			break
		}

		return e.complexity.PostStatusConnection.Edges(childComplexity), true

	case "PostStatusConnection.pageInfo":
		if e.complexity.PostStatusConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostStatusConnection.PageInfo(childComplexity), true

	case "PostStatusConnection.totalCount":
		if e.complexity.PostStatusConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostStatusConnection.TotalCount(childComplexity), true

	case "PostStatusEdge.cursor":
		if e.complexity.PostStatusEdge.Cursor == nil {
			break
		}

		return e.complexity.PostStatusEdge.Cursor(childComplexity), true

	case "PostStatusEdge.node":
		if e.complexity.PostStatusEdge.Node == nil {
			break
		}

		return e.complexity.PostStatusEdge.Node(childComplexity), true

	case "PostTag.appID":
		if e.complexity.PostTag.AppID == nil {
			break
		}

		return e.complexity.PostTag.AppID(childComplexity), true

	case "PostTag.createdAt":
		if e.complexity.PostTag.CreatedAt == nil {
			break
		}

		return e.complexity.PostTag.CreatedAt(childComplexity), true

	case "PostTag.excerpt":
		if e.complexity.PostTag.Excerpt == nil {
			break
		}

		return e.complexity.PostTag.Excerpt(childComplexity), true

	case "PostTag.id":
		if e.complexity.PostTag.ID == nil {
			break
		}

		return e.complexity.PostTag.ID(childComplexity), true

	case "PostTag.metaCanonicalURL":
		if e.complexity.PostTag.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostTag.MetaCanonicalURL(childComplexity), true

	case "PostTag.metaDescr":
		if e.complexity.PostTag.MetaDescr == nil {
			break
		}

		return e.complexity.PostTag.MetaDescr(childComplexity), true

	case "PostTag.metaRobots":
		if e.complexity.PostTag.MetaRobots == nil {
			break
		}

		return e.complexity.PostTag.MetaRobots(childComplexity), true

	case "PostTag.metaTitle":
		if e.complexity.PostTag.MetaTitle == nil {
			break
		}

		return e.complexity.PostTag.MetaTitle(childComplexity), true

	case "PostTag.name":
		if e.complexity.PostTag.Name == nil {
			break
		}

		return e.complexity.PostTag.Name(childComplexity), true

	case "PostTag.posts":
		if e.complexity.PostTag.Posts == nil {
			break
		}

		return e.complexity.PostTag.Posts(childComplexity), true

	case "PostTag.slug":
		if e.complexity.PostTag.Slug == nil {
			break
		}

		return e.complexity.PostTag.Slug(childComplexity), true

	case "PostTag.status":
		if e.complexity.PostTag.Status == nil {
			break
		}

		return e.complexity.PostTag.Status(childComplexity), true

	case "PostTag.updatedAt":
		if e.complexity.PostTag.UpdatedAt == nil {
			break
		}

		return e.complexity.PostTag.UpdatedAt(childComplexity), true

	case "PostTagConnection.edges":
		if e.complexity.PostTagConnection.Edges == nil {
			break
		}

		return e.complexity.PostTagConnection.Edges(childComplexity), true

	case "PostTagConnection.pageInfo":
		if e.complexity.PostTagConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostTagConnection.PageInfo(childComplexity), true

	case "PostTagConnection.totalCount":
		if e.complexity.PostTagConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostTagConnection.TotalCount(childComplexity), true

	case "PostTagEdge.cursor":
		if e.complexity.PostTagEdge.Cursor == nil {
			break
		}

		return e.complexity.PostTagEdge.Cursor(childComplexity), true

	case "PostTagEdge.node":
		if e.complexity.PostTagEdge.Node == nil {
			break
		}

		return e.complexity.PostTagEdge.Node(childComplexity), true

	case "PostType.appID":
		if e.complexity.PostType.AppID == nil {
			break
		}

		return e.complexity.PostType.AppID(childComplexity), true

	case "PostType.content":
		if e.complexity.PostType.Content == nil {
			break
		}

		return e.complexity.PostType.Content(childComplexity), true

	case "PostType.createdAt":
		if e.complexity.PostType.CreatedAt == nil {
			break
		}

		return e.complexity.PostType.CreatedAt(childComplexity), true

	case "PostType.excerpt":
		if e.complexity.PostType.Excerpt == nil {
			break
		}

		return e.complexity.PostType.Excerpt(childComplexity), true

	case "PostType.id":
		if e.complexity.PostType.ID == nil {
			break
		}

		return e.complexity.PostType.ID(childComplexity), true

	case "PostType.metaCanonicalURL":
		if e.complexity.PostType.MetaCanonicalURL == nil {
			break
		}

		return e.complexity.PostType.MetaCanonicalURL(childComplexity), true

	case "PostType.metaDescr":
		if e.complexity.PostType.MetaDescr == nil {
			break
		}

		return e.complexity.PostType.MetaDescr(childComplexity), true

	case "PostType.metaRobots":
		if e.complexity.PostType.MetaRobots == nil {
			break
		}

		return e.complexity.PostType.MetaRobots(childComplexity), true

	case "PostType.metaTitle":
		if e.complexity.PostType.MetaTitle == nil {
			break
		}

		return e.complexity.PostType.MetaTitle(childComplexity), true

	case "PostType.name":
		if e.complexity.PostType.Name == nil {
			break
		}

		return e.complexity.PostType.Name(childComplexity), true

	case "PostType.postStatuses":
		if e.complexity.PostType.PostStatuses == nil {
			break
		}

		return e.complexity.PostType.PostStatuses(childComplexity), true

	case "PostType.postTypeForms":
		if e.complexity.PostType.PostTypeForms == nil {
			break
		}

		return e.complexity.PostType.PostTypeForms(childComplexity), true

	case "PostType.posts":
		if e.complexity.PostType.Posts == nil {
			break
		}

		return e.complexity.PostType.Posts(childComplexity), true

	case "PostType.slug":
		if e.complexity.PostType.Slug == nil {
			break
		}

		return e.complexity.PostType.Slug(childComplexity), true

	case "PostType.status":
		if e.complexity.PostType.Status == nil {
			break
		}

		return e.complexity.PostType.Status(childComplexity), true

	case "PostType.updatedAt":
		if e.complexity.PostType.UpdatedAt == nil {
			break
		}

		return e.complexity.PostType.UpdatedAt(childComplexity), true

	case "PostTypeConnection.edges":
		if e.complexity.PostTypeConnection.Edges == nil {
			break
		}

		return e.complexity.PostTypeConnection.Edges(childComplexity), true

	case "PostTypeConnection.pageInfo":
		if e.complexity.PostTypeConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostTypeConnection.PageInfo(childComplexity), true

	case "PostTypeConnection.totalCount":
		if e.complexity.PostTypeConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostTypeConnection.TotalCount(childComplexity), true

	case "PostTypeEdge.cursor":
		if e.complexity.PostTypeEdge.Cursor == nil {
			break
		}

		return e.complexity.PostTypeEdge.Cursor(childComplexity), true

	case "PostTypeEdge.node":
		if e.complexity.PostTypeEdge.Node == nil {
			break
		}

		return e.complexity.PostTypeEdge.Node(childComplexity), true

	case "PostTypeForm.appID":
		if e.complexity.PostTypeForm.AppID == nil {
			break
		}

		return e.complexity.PostTypeForm.AppID(childComplexity), true

	case "PostTypeForm.body":
		if e.complexity.PostTypeForm.Body == nil {
			break
		}

		return e.complexity.PostTypeForm.Body(childComplexity), true

	case "PostTypeForm.createdAt":
		if e.complexity.PostTypeForm.CreatedAt == nil {
			break
		}

		return e.complexity.PostTypeForm.CreatedAt(childComplexity), true

	case "PostTypeForm.id":
		if e.complexity.PostTypeForm.ID == nil {
			break
		}

		return e.complexity.PostTypeForm.ID(childComplexity), true

	case "PostTypeForm.name":
		if e.complexity.PostTypeForm.Name == nil {
			break
		}

		return e.complexity.PostTypeForm.Name(childComplexity), true

	case "PostTypeForm.postType":
		if e.complexity.PostTypeForm.PostType == nil {
			break
		}

		return e.complexity.PostTypeForm.PostType(childComplexity), true

	case "PostTypeForm.postTypeID":
		if e.complexity.PostTypeForm.PostTypeID == nil {
			break
		}

		return e.complexity.PostTypeForm.PostTypeID(childComplexity), true

	case "PostTypeForm.status":
		if e.complexity.PostTypeForm.Status == nil {
			break
		}

		return e.complexity.PostTypeForm.Status(childComplexity), true

	case "PostTypeForm.updatedAt":
		if e.complexity.PostTypeForm.UpdatedAt == nil {
			break
		}

		return e.complexity.PostTypeForm.UpdatedAt(childComplexity), true

	case "PostTypeFormConnection.edges":
		if e.complexity.PostTypeFormConnection.Edges == nil {
			break
		}

		return e.complexity.PostTypeFormConnection.Edges(childComplexity), true

	case "PostTypeFormConnection.pageInfo":
		if e.complexity.PostTypeFormConnection.PageInfo == nil {
			break
		}

		return e.complexity.PostTypeFormConnection.PageInfo(childComplexity), true

	case "PostTypeFormConnection.totalCount":
		if e.complexity.PostTypeFormConnection.TotalCount == nil {
			break
		}

		return e.complexity.PostTypeFormConnection.TotalCount(childComplexity), true

	case "PostTypeFormEdge.cursor":
		if e.complexity.PostTypeFormEdge.Cursor == nil {
			break
		}

		return e.complexity.PostTypeFormEdge.Cursor(childComplexity), true

	case "PostTypeFormEdge.node":
		if e.complexity.PostTypeFormEdge.Node == nil {
			break
		}

		return e.complexity.PostTypeFormEdge.Node(childComplexity), true

	case "Query.apps":
		if e.complexity.Query.Apps == nil {
			break
		}

		args, err := ec.field_Query_apps_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Apps(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.AppOrder), args["where"].(*ent.AppWhereInput)), true

	case "Query.mailConns":
		if e.complexity.Query.MailConns == nil {
			break
		}

		args, err := ec.field_Query_mailConns_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.MailConns(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.MailConnOrder), args["where"].(*ent.MailConnWhereInput)), true

	case "Query.medias":
		if e.complexity.Query.Medias == nil {
			break
		}

		args, err := ec.field_Query_medias_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Medias(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.MediaOrder), args["where"].(*ent.MediaWhereInput)), true

	case "Query.node":
		if e.complexity.Query.Node == nil {
			break
		}

		args, err := ec.field_Query_node_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Node(childComplexity, args["id"].(string)), true

	case "Query.nodes":
		if e.complexity.Query.Nodes == nil {
			break
		}

		args, err := ec.field_Query_nodes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Nodes(childComplexity, args["ids"].([]string)), true

	case "Query.oauthConnections":
		if e.complexity.Query.OauthConnections == nil {
			break
		}

		args, err := ec.field_Query_oauthConnections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OauthConnections(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.OauthConnectionOrder), args["where"].(*ent.OauthConnectionWhereInput)), true

	case "Query.ping":
		if e.complexity.Query.Ping == nil {
			break
		}

		return e.complexity.Query.Ping(childComplexity), true

	case "Query.postCategories":
		if e.complexity.Query.PostCategories == nil {
			break
		}

		args, err := ec.field_Query_postCategories_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostCategories(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostCategoryOrder), args["where"].(*ent.PostCategoryWhereInput)), true

	case "Query.postStatuses":
		if e.complexity.Query.PostStatuses == nil {
			break
		}

		args, err := ec.field_Query_postStatuses_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostStatuses(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostStatusOrder), args["where"].(*ent.PostStatusWhereInput)), true

	case "Query.postTags":
		if e.complexity.Query.PostTags == nil {
			break
		}

		args, err := ec.field_Query_postTags_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostTags(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostTagOrder), args["where"].(*ent.PostTagWhereInput)), true

	case "Query.postTypeForms":
		if e.complexity.Query.PostTypeForms == nil {
			break
		}

		args, err := ec.field_Query_postTypeForms_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostTypeForms(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostTypeFormOrder), args["where"].(*ent.PostTypeFormWhereInput)), true

	case "Query.postTypes":
		if e.complexity.Query.PostTypes == nil {
			break
		}

		args, err := ec.field_Query_postTypes_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.PostTypes(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostTypeOrder), args["where"].(*ent.PostTypeWhereInput)), true

	case "Query.posts":
		if e.complexity.Query.Posts == nil {
			break
		}

		args, err := ec.field_Query_posts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Posts(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.PostOrder), args["where"].(*ent.PostWhereInput)), true

	case "Query.templs":
		if e.complexity.Query.Templs == nil {
			break
		}

		args, err := ec.field_Query_templs_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Templs(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.TemplOrder), args["where"].(*ent.TemplWhereInput)), true

	case "Query.todos":
		if e.complexity.Query.Todos == nil {
			break
		}

		args, err := ec.field_Query_todos_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Todos(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].(*ent.TodoOrder), args["where"].(*ent.TodoWhereInput)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.UserOrder), args["where"].(*ent.UserWhereInput)), true

	case "Query.workspaceInvites":
		if e.complexity.Query.WorkspaceInvites == nil {
			break
		}

		args, err := ec.field_Query_workspaceInvites_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkspaceInvites(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.WorkspaceInviteOrder), args["where"].(*ent.WorkspaceInviteWhereInput)), true

	case "Query.workspaceUsers":
		if e.complexity.Query.WorkspaceUsers == nil {
			break
		}

		args, err := ec.field_Query_workspaceUsers_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.WorkspaceUsers(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.WorkspaceUserOrder), args["where"].(*ent.WorkspaceUserWhereInput)), true

	case "Query.workspaces":
		if e.complexity.Query.Workspaces == nil {
			break
		}

		args, err := ec.field_Query_workspaces_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Workspaces(childComplexity, args["after"].(*entgql.Cursor[string]), args["first"].(*int), args["before"].(*entgql.Cursor[string]), args["last"].(*int), args["orderBy"].([]*ent.WorkspaceOrder), args["where"].(*ent.WorkspaceWhereInput)), true

	case "Student.name":
		if e.complexity.Student.Name == nil {
			break
		}

		return e.complexity.Student.Name(childComplexity), true

	case "Templ.appID":
		if e.complexity.Templ.AppID == nil {
			break
		}

		return e.complexity.Templ.AppID(childComplexity), true

	case "Templ.body":
		if e.complexity.Templ.Body == nil {
			break
		}

		return e.complexity.Templ.Body(childComplexity), true

	case "Templ.compiled":
		if e.complexity.Templ.Compiled == nil {
			break
		}

		return e.complexity.Templ.Compiled(childComplexity), true

	case "Templ.createdAt":
		if e.complexity.Templ.CreatedAt == nil {
			break
		}

		return e.complexity.Templ.CreatedAt(childComplexity), true

	case "Templ.id":
		if e.complexity.Templ.ID == nil {
			break
		}

		return e.complexity.Templ.ID(childComplexity), true

	case "Templ.name":
		if e.complexity.Templ.Name == nil {
			break
		}

		return e.complexity.Templ.Name(childComplexity), true

	case "Templ.status":
		if e.complexity.Templ.Status == nil {
			break
		}

		return e.complexity.Templ.Status(childComplexity), true

	case "Templ.updatedAt":
		if e.complexity.Templ.UpdatedAt == nil {
			break
		}

		return e.complexity.Templ.UpdatedAt(childComplexity), true

	case "TemplConnection.edges":
		if e.complexity.TemplConnection.Edges == nil {
			break
		}

		return e.complexity.TemplConnection.Edges(childComplexity), true

	case "TemplConnection.pageInfo":
		if e.complexity.TemplConnection.PageInfo == nil {
			break
		}

		return e.complexity.TemplConnection.PageInfo(childComplexity), true

	case "TemplConnection.totalCount":
		if e.complexity.TemplConnection.TotalCount == nil {
			break
		}

		return e.complexity.TemplConnection.TotalCount(childComplexity), true

	case "TemplEdge.cursor":
		if e.complexity.TemplEdge.Cursor == nil {
			break
		}

		return e.complexity.TemplEdge.Cursor(childComplexity), true

	case "TemplEdge.node":
		if e.complexity.TemplEdge.Node == nil {
			break
		}

		return e.complexity.TemplEdge.Node(childComplexity), true

	case "Todo.appID":
		if e.complexity.Todo.AppID == nil {
			break
		}

		return e.complexity.Todo.AppID(childComplexity), true

	case "Todo.children":
		if e.complexity.Todo.Children == nil {
			break
		}

		return e.complexity.Todo.Children(childComplexity), true

	case "Todo.createdAt":
		if e.complexity.Todo.CreatedAt == nil {
			break
		}

		return e.complexity.Todo.CreatedAt(childComplexity), true

	case "Todo.id":
		if e.complexity.Todo.ID == nil {
			break
		}

		return e.complexity.Todo.ID(childComplexity), true

	case "Todo.parent":
		if e.complexity.Todo.Parent == nil {
			break
		}

		return e.complexity.Todo.Parent(childComplexity), true

	case "Todo.priority":
		if e.complexity.Todo.Priority == nil {
			break
		}

		return e.complexity.Todo.Priority(childComplexity), true

	case "Todo.status":
		if e.complexity.Todo.Status == nil {
			break
		}

		return e.complexity.Todo.Status(childComplexity), true

	case "Todo.text":
		if e.complexity.Todo.Text == nil {
			break
		}

		return e.complexity.Todo.Text(childComplexity), true

	case "Todo.updatedAt":
		if e.complexity.Todo.UpdatedAt == nil {
			break
		}

		return e.complexity.Todo.UpdatedAt(childComplexity), true

	case "TodoConnection.edges":
		if e.complexity.TodoConnection.Edges == nil {
			break
		}

		return e.complexity.TodoConnection.Edges(childComplexity), true

	case "TodoConnection.pageInfo":
		if e.complexity.TodoConnection.PageInfo == nil {
			break
		}

		return e.complexity.TodoConnection.PageInfo(childComplexity), true

	case "TodoConnection.totalCount":
		if e.complexity.TodoConnection.TotalCount == nil {
			break
		}

		return e.complexity.TodoConnection.TotalCount(childComplexity), true

	case "TodoEdge.cursor":
		if e.complexity.TodoEdge.Cursor == nil {
			break
		}

		return e.complexity.TodoEdge.Cursor(childComplexity), true

	case "TodoEdge.node":
		if e.complexity.TodoEdge.Node == nil {
			break
		}

		return e.complexity.TodoEdge.Node(childComplexity), true

	case "User.apiKey":
		if e.complexity.User.APIKey == nil {
			break
		}

		return e.complexity.User.APIKey(childComplexity), true

	case "User.appID":
		if e.complexity.User.AppID == nil {
			break
		}

		return e.complexity.User.AppID(childComplexity), true

	case "User.canAdmin":
		if e.complexity.User.CanAdmin == nil {
			break
		}

		return e.complexity.User.CanAdmin(childComplexity), true

	case "User.company":
		if e.complexity.User.Company == nil {
			break
		}

		return e.complexity.User.Company(childComplexity), true

	case "User.createdAt":
		if e.complexity.User.CreatedAt == nil {
			break
		}

		return e.complexity.User.CreatedAt(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.firstName":
		if e.complexity.User.FirstName == nil {
			break
		}

		return e.complexity.User.FirstName(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.lastName":
		if e.complexity.User.LastName == nil {
			break
		}

		return e.complexity.User.LastName(childComplexity), true

	case "User.locale":
		if e.complexity.User.Locale == nil {
			break
		}

		return e.complexity.User.Locale(childComplexity), true

	case "User.phone":
		if e.complexity.User.Phone == nil {
			break
		}

		return e.complexity.User.Phone(childComplexity), true

	case "User.roleID":
		if e.complexity.User.RoleID == nil {
			break
		}

		return e.complexity.User.RoleID(childComplexity), true

	case "User.status":
		if e.complexity.User.Status == nil {
			break
		}

		return e.complexity.User.Status(childComplexity), true

	case "User.updatedAt":
		if e.complexity.User.UpdatedAt == nil {
			break
		}

		return e.complexity.User.UpdatedAt(childComplexity), true

	case "User.welcomeEmailSent":
		if e.complexity.User.WelcomeEmailSent == nil {
			break
		}

		return e.complexity.User.WelcomeEmailSent(childComplexity), true

	case "User.workspaceUsers":
		if e.complexity.User.WorkspaceUsers == nil {
			break
		}

		return e.complexity.User.WorkspaceUsers(childComplexity), true

	case "User.workspaces":
		if e.complexity.User.Workspaces == nil {
			break
		}

		return e.complexity.User.Workspaces(childComplexity), true

	case "UserConnection.edges":
		if e.complexity.UserConnection.Edges == nil {
			break
		}

		return e.complexity.UserConnection.Edges(childComplexity), true

	case "UserConnection.pageInfo":
		if e.complexity.UserConnection.PageInfo == nil {
			break
		}

		return e.complexity.UserConnection.PageInfo(childComplexity), true

	case "UserConnection.totalCount":
		if e.complexity.UserConnection.TotalCount == nil {
			break
		}

		return e.complexity.UserConnection.TotalCount(childComplexity), true

	case "UserEdge.cursor":
		if e.complexity.UserEdge.Cursor == nil {
			break
		}

		return e.complexity.UserEdge.Cursor(childComplexity), true

	case "UserEdge.node":
		if e.complexity.UserEdge.Node == nil {
			break
		}

		return e.complexity.UserEdge.Node(childComplexity), true

	case "Workspace.appID":
		if e.complexity.Workspace.AppID == nil {
			break
		}

		return e.complexity.Workspace.AppID(childComplexity), true

	case "Workspace.createdAt":
		if e.complexity.Workspace.CreatedAt == nil {
			break
		}

		return e.complexity.Workspace.CreatedAt(childComplexity), true

	case "Workspace.id":
		if e.complexity.Workspace.ID == nil {
			break
		}

		return e.complexity.Workspace.ID(childComplexity), true

	case "Workspace.isPersonal":
		if e.complexity.Workspace.IsPersonal == nil {
			break
		}

		return e.complexity.Workspace.IsPersonal(childComplexity), true

	case "Workspace.name":
		if e.complexity.Workspace.Name == nil {
			break
		}

		return e.complexity.Workspace.Name(childComplexity), true

	case "Workspace.updatedAt":
		if e.complexity.Workspace.UpdatedAt == nil {
			break
		}

		return e.complexity.Workspace.UpdatedAt(childComplexity), true

	case "Workspace.userID":
		if e.complexity.Workspace.UserID == nil {
			break
		}

		return e.complexity.Workspace.UserID(childComplexity), true

	case "Workspace.users":
		if e.complexity.Workspace.Users == nil {
			break
		}

		return e.complexity.Workspace.Users(childComplexity), true

	case "Workspace.workspaceInvites":
		if e.complexity.Workspace.WorkspaceInvites == nil {
			break
		}

		return e.complexity.Workspace.WorkspaceInvites(childComplexity), true

	case "Workspace.workspaceUsers":
		if e.complexity.Workspace.WorkspaceUsers == nil {
			break
		}

		return e.complexity.Workspace.WorkspaceUsers(childComplexity), true

	case "WorkspaceConnection.edges":
		if e.complexity.WorkspaceConnection.Edges == nil {
			break
		}

		return e.complexity.WorkspaceConnection.Edges(childComplexity), true

	case "WorkspaceConnection.pageInfo":
		if e.complexity.WorkspaceConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkspaceConnection.PageInfo(childComplexity), true

	case "WorkspaceConnection.totalCount":
		if e.complexity.WorkspaceConnection.TotalCount == nil {
			break
		}

		return e.complexity.WorkspaceConnection.TotalCount(childComplexity), true

	case "WorkspaceEdge.cursor":
		if e.complexity.WorkspaceEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkspaceEdge.Cursor(childComplexity), true

	case "WorkspaceEdge.node":
		if e.complexity.WorkspaceEdge.Node == nil {
			break
		}

		return e.complexity.WorkspaceEdge.Node(childComplexity), true

	case "WorkspaceInvite.appID":
		if e.complexity.WorkspaceInvite.AppID == nil {
			break
		}

		return e.complexity.WorkspaceInvite.AppID(childComplexity), true

	case "WorkspaceInvite.createdAt":
		if e.complexity.WorkspaceInvite.CreatedAt == nil {
			break
		}

		return e.complexity.WorkspaceInvite.CreatedAt(childComplexity), true

	case "WorkspaceInvite.email":
		if e.complexity.WorkspaceInvite.Email == nil {
			break
		}

		return e.complexity.WorkspaceInvite.Email(childComplexity), true

	case "WorkspaceInvite.id":
		if e.complexity.WorkspaceInvite.ID == nil {
			break
		}

		return e.complexity.WorkspaceInvite.ID(childComplexity), true

	case "WorkspaceInvite.role":
		if e.complexity.WorkspaceInvite.Role == nil {
			break
		}

		return e.complexity.WorkspaceInvite.Role(childComplexity), true

	case "WorkspaceInvite.updatedAt":
		if e.complexity.WorkspaceInvite.UpdatedAt == nil {
			break
		}

		return e.complexity.WorkspaceInvite.UpdatedAt(childComplexity), true

	case "WorkspaceInvite.workspace":
		if e.complexity.WorkspaceInvite.Workspace == nil {
			break
		}

		return e.complexity.WorkspaceInvite.Workspace(childComplexity), true

	case "WorkspaceInvite.workspaceID":
		if e.complexity.WorkspaceInvite.WorkspaceID == nil {
			break
		}

		return e.complexity.WorkspaceInvite.WorkspaceID(childComplexity), true

	case "WorkspaceInviteConnection.edges":
		if e.complexity.WorkspaceInviteConnection.Edges == nil {
			break
		}

		return e.complexity.WorkspaceInviteConnection.Edges(childComplexity), true

	case "WorkspaceInviteConnection.pageInfo":
		if e.complexity.WorkspaceInviteConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkspaceInviteConnection.PageInfo(childComplexity), true

	case "WorkspaceInviteConnection.totalCount":
		if e.complexity.WorkspaceInviteConnection.TotalCount == nil {
			break
		}

		return e.complexity.WorkspaceInviteConnection.TotalCount(childComplexity), true

	case "WorkspaceInviteEdge.cursor":
		if e.complexity.WorkspaceInviteEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkspaceInviteEdge.Cursor(childComplexity), true

	case "WorkspaceInviteEdge.node":
		if e.complexity.WorkspaceInviteEdge.Node == nil {
			break
		}

		return e.complexity.WorkspaceInviteEdge.Node(childComplexity), true

	case "WorkspaceUser.appID":
		if e.complexity.WorkspaceUser.AppID == nil {
			break
		}

		return e.complexity.WorkspaceUser.AppID(childComplexity), true

	case "WorkspaceUser.createdAt":
		if e.complexity.WorkspaceUser.CreatedAt == nil {
			break
		}

		return e.complexity.WorkspaceUser.CreatedAt(childComplexity), true

	case "WorkspaceUser.id":
		if e.complexity.WorkspaceUser.ID == nil {
			break
		}

		return e.complexity.WorkspaceUser.ID(childComplexity), true

	case "WorkspaceUser.role":
		if e.complexity.WorkspaceUser.Role == nil {
			break
		}

		return e.complexity.WorkspaceUser.Role(childComplexity), true

	case "WorkspaceUser.updatedAt":
		if e.complexity.WorkspaceUser.UpdatedAt == nil {
			break
		}

		return e.complexity.WorkspaceUser.UpdatedAt(childComplexity), true

	case "WorkspaceUser.user":
		if e.complexity.WorkspaceUser.User == nil {
			break
		}

		return e.complexity.WorkspaceUser.User(childComplexity), true

	case "WorkspaceUser.userID":
		if e.complexity.WorkspaceUser.UserID == nil {
			break
		}

		return e.complexity.WorkspaceUser.UserID(childComplexity), true

	case "WorkspaceUser.workspace":
		if e.complexity.WorkspaceUser.Workspace == nil {
			break
		}

		return e.complexity.WorkspaceUser.Workspace(childComplexity), true

	case "WorkspaceUser.workspaceID":
		if e.complexity.WorkspaceUser.WorkspaceID == nil {
			break
		}

		return e.complexity.WorkspaceUser.WorkspaceID(childComplexity), true

	case "WorkspaceUserConnection.edges":
		if e.complexity.WorkspaceUserConnection.Edges == nil {
			break
		}

		return e.complexity.WorkspaceUserConnection.Edges(childComplexity), true

	case "WorkspaceUserConnection.pageInfo":
		if e.complexity.WorkspaceUserConnection.PageInfo == nil {
			break
		}

		return e.complexity.WorkspaceUserConnection.PageInfo(childComplexity), true

	case "WorkspaceUserConnection.totalCount":
		if e.complexity.WorkspaceUserConnection.TotalCount == nil {
			break
		}

		return e.complexity.WorkspaceUserConnection.TotalCount(childComplexity), true

	case "WorkspaceUserEdge.cursor":
		if e.complexity.WorkspaceUserEdge.Cursor == nil {
			break
		}

		return e.complexity.WorkspaceUserEdge.Cursor(childComplexity), true

	case "WorkspaceUserEdge.node":
		if e.complexity.WorkspaceUserEdge.Node == nil {
			break
		}

		return e.complexity.WorkspaceUserEdge.Node(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	opCtx := graphql.GetOperationContext(ctx)
	ec := executionContext{opCtx, e, 0, 0, make(chan graphql.DeferredResult)}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputAppOrder,
		ec.unmarshalInputAppWhereInput,
		ec.unmarshalInputCreateAppInput,
		ec.unmarshalInputCreateMailConnInput,
		ec.unmarshalInputCreateOauthConnectionInput,
		ec.unmarshalInputCreatePostCategoryInput,
		ec.unmarshalInputCreatePostInput,
		ec.unmarshalInputCreatePostStatusInput,
		ec.unmarshalInputCreatePostTagInput,
		ec.unmarshalInputCreatePostTypeFormInput,
		ec.unmarshalInputCreatePostTypeInput,
		ec.unmarshalInputCreateTemplInput,
		ec.unmarshalInputCreateTodoInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputCreateWorkspaceInput,
		ec.unmarshalInputCreateWorkspaceInviteInput,
		ec.unmarshalInputCreateWorkspaceUserInput,
		ec.unmarshalInputLoginInput,
		ec.unmarshalInputMailConnOrder,
		ec.unmarshalInputMailConnWhereInput,
		ec.unmarshalInputMediaOrder,
		ec.unmarshalInputMediaWhereInput,
		ec.unmarshalInputOauthConnectionOrder,
		ec.unmarshalInputOauthConnectionWhereInput,
		ec.unmarshalInputPostCategoryOrder,
		ec.unmarshalInputPostCategoryWhereInput,
		ec.unmarshalInputPostOrder,
		ec.unmarshalInputPostStatusOrder,
		ec.unmarshalInputPostStatusWhereInput,
		ec.unmarshalInputPostTagOrder,
		ec.unmarshalInputPostTagWhereInput,
		ec.unmarshalInputPostTypeFormOrder,
		ec.unmarshalInputPostTypeFormWhereInput,
		ec.unmarshalInputPostTypeOrder,
		ec.unmarshalInputPostTypeWhereInput,
		ec.unmarshalInputPostWhereInput,
		ec.unmarshalInputTemplOrder,
		ec.unmarshalInputTemplWhereInput,
		ec.unmarshalInputTodoOrder,
		ec.unmarshalInputTodoWhereInput,
		ec.unmarshalInputUpdateAppInput,
		ec.unmarshalInputUpdateMailConnInput,
		ec.unmarshalInputUpdateOauthConnectionInput,
		ec.unmarshalInputUpdatePostCategoryInput,
		ec.unmarshalInputUpdatePostInput,
		ec.unmarshalInputUpdatePostStatusInput,
		ec.unmarshalInputUpdatePostTagInput,
		ec.unmarshalInputUpdatePostTypeFormInput,
		ec.unmarshalInputUpdatePostTypeInput,
		ec.unmarshalInputUpdateTemplInput,
		ec.unmarshalInputUpdateTodoInput,
		ec.unmarshalInputUpdateUserInput,
		ec.unmarshalInputUpdateWorkspaceInput,
		ec.unmarshalInputUpdateWorkspaceInviteInput,
		ec.unmarshalInputUpdateWorkspaceUserInput,
		ec.unmarshalInputUserOrder,
		ec.unmarshalInputUserWhereInput,
		ec.unmarshalInputWorkspaceInviteOrder,
		ec.unmarshalInputWorkspaceInviteWhereInput,
		ec.unmarshalInputWorkspaceOrder,
		ec.unmarshalInputWorkspaceUserOrder,
		ec.unmarshalInputWorkspaceUserWhereInput,
		ec.unmarshalInputWorkspaceWhereInput,
	)
	first := true

	switch opCtx.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			var response graphql.Response
			var data graphql.Marshaler
			if first {
				first = false
				ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
				data = ec._Query(ctx, opCtx.Operation.SelectionSet)
			} else {
				if atomic.LoadInt32(&ec.pendingDeferred) > 0 {
					result := <-ec.deferredResults
					atomic.AddInt32(&ec.pendingDeferred, -1)
					data = result.Result
					response.Path = result.Path
					response.Label = result.Label
					response.Errors = result.Errors
				} else {
					return nil
				}
			}
			var buf bytes.Buffer
			data.MarshalGQL(&buf)
			response.Data = buf.Bytes()
			if atomic.LoadInt32(&ec.deferred) > 0 {
				hasNext := atomic.LoadInt32(&ec.pendingDeferred) > 0
				response.HasNext = &hasNext
			}

			return &response
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, opCtx.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
	deferred        int32
	pendingDeferred int32
	deferredResults chan graphql.DeferredResult
}

func (ec *executionContext) processDeferredGroup(dg graphql.DeferredGroup) {
	atomic.AddInt32(&ec.pendingDeferred, 1)
	go func() {
		ctx := graphql.WithFreshResponseContext(dg.Context)
		dg.FieldSet.Dispatch(ctx)
		ds := graphql.DeferredResult{
			Path:   dg.Path,
			Label:  dg.Label,
			Result: dg.FieldSet,
			Errors: graphql.GetErrors(ctx),
		}
		// null fields should bubble up
		if dg.FieldSet.Invalids > 0 {
			ds.Result = graphql.Null
		}
		ec.deferredResults <- ds
	}()
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(ec.Schema()), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(ec.Schema(), ec.Schema().Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../adminauth.graphql", Input: `type AdminUser {
  id: String!
  email: String!
  firstName: String
  lastName: String
  company: String
  phone: String
}

type LoginResponse {
  token: String!
  me: AdminUser!
}

input LoginInput {
  email: String!
  password: String!
}

extend type Mutation {
  adminAuthLogin(input: LoginInput!): LoginResponse!
}
`, BuiltIn: false},
	{Name: "../app.graphql", Input: `extend type Mutation {
  createApp(input: CreateAppInput!): App! @canAdmin
  updateApp(id: ID!, input: UpdateAppInput!): App! @canAdmin
}
`, BuiltIn: false},
	{Name: "../cms.graphql", Input: `type Mutation {
  createPostType(input: CreatePostTypeInput!): PostType! @canApp
  updatePostType(id: ID!, input: UpdatePostTypeInput!): PostType! @canApp
  createPostStatus(input: CreatePostStatusInput!): PostStatus! @canApp
  updatePostStatus(id: ID!, input: UpdatePostStatusInput!): PostStatus! @canApp
  createPostCategory(input: CreatePostCategoryInput!): PostCategory! @canApp
  updatePostCategory(id: ID!, input: UpdatePostCategoryInput!): PostCategory! @canApp
  deletePostCategory(id: ID!): Boolean! @canApp
  createPost(input: CreatePostInput!): Post! @canApp
  updatePost(id: ID!, input: UpdatePostInput!): Post! @canApp
  createPostTag(input: CreatePostTagInput!): PostTag! @canApp
  updatePostTag(id: ID!, input: UpdatePostTagInput!): PostTag! @canApp
  createPostTypeForm(input: CreatePostTypeFormInput!): PostTypeForm! @canApp
  updatePostTypeForm(id: ID!, input: UpdatePostTypeFormInput!): PostTypeForm! @canApp
}
`, BuiltIn: false},
	{Name: "../ent.graphql", Input: `directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type App implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  name: String
  copyright: String
  email: String
  address: String
  socialTw: String
  socialFb: String
  socialIn: String
  logoURL: String
  siteURL: String
  defaultMailConnID: ID
  mailLayoutTemplID: ID
  wsapceInviteTemplID: ID
  wsapceSuccessTemplID: ID
  authFpTemplID: ID
  authWelcomeEmailTemplID: ID
  authVerificationTemplID: ID
  authEmailVerify: Boolean
  oauthSigninCanSignup: Boolean
  authEnablePasswordLogin: Boolean
  adminUserID: String
  defaultMailConn: MailConn
  mailLayoutTempl: Templ
  wsapceInviteTempl: Templ
  wsapceSuccessTempl: Templ
  authFpTempl: Templ
  authWelcomeEmailTempl: Templ
  authVerificationTempl: Templ
}
"""
A connection to a list of items.
"""
type AppConnection {
  """
  A list of edges.
  """
  edges: [AppEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type AppEdge {
  """
  The item at the end of the edge.
  """
  node: App
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for App connections
"""
input AppOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Apps.
  """
  field: AppOrderField!
}
"""
Properties by which App connections can be ordered.
"""
enum AppOrderField {
  CREATED_AT
}
"""
AppWhereInput is used for filtering App objects.
Input was generated by ent.
"""
input AppWhereInput {
  not: AppWhereInput
  and: [AppWhereInput!]
  or: [AppWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  copyright field predicates
  """
  copyright: String
  copyrightNEQ: String
  copyrightIn: [String!]
  copyrightNotIn: [String!]
  copyrightGT: String
  copyrightGTE: String
  copyrightLT: String
  copyrightLTE: String
  copyrightContains: String
  copyrightHasPrefix: String
  copyrightHasSuffix: String
  copyrightIsNil: Boolean
  copyrightNotNil: Boolean
  copyrightEqualFold: String
  copyrightContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  address field predicates
  """
  address: String
  addressNEQ: String
  addressIn: [String!]
  addressNotIn: [String!]
  addressGT: String
  addressGTE: String
  addressLT: String
  addressLTE: String
  addressContains: String
  addressHasPrefix: String
  addressHasSuffix: String
  addressIsNil: Boolean
  addressNotNil: Boolean
  addressEqualFold: String
  addressContainsFold: String
  """
  social_tw field predicates
  """
  socialTw: String
  socialTwNEQ: String
  socialTwIn: [String!]
  socialTwNotIn: [String!]
  socialTwGT: String
  socialTwGTE: String
  socialTwLT: String
  socialTwLTE: String
  socialTwContains: String
  socialTwHasPrefix: String
  socialTwHasSuffix: String
  socialTwIsNil: Boolean
  socialTwNotNil: Boolean
  socialTwEqualFold: String
  socialTwContainsFold: String
  """
  social_fb field predicates
  """
  socialFb: String
  socialFbNEQ: String
  socialFbIn: [String!]
  socialFbNotIn: [String!]
  socialFbGT: String
  socialFbGTE: String
  socialFbLT: String
  socialFbLTE: String
  socialFbContains: String
  socialFbHasPrefix: String
  socialFbHasSuffix: String
  socialFbIsNil: Boolean
  socialFbNotNil: Boolean
  socialFbEqualFold: String
  socialFbContainsFold: String
  """
  social_in field predicates
  """
  socialIn: String
  socialInNEQ: String
  socialInIn: [String!]
  socialInNotIn: [String!]
  socialInGT: String
  socialInGTE: String
  socialInLT: String
  socialInLTE: String
  socialInContains: String
  socialInHasPrefix: String
  socialInHasSuffix: String
  socialInIsNil: Boolean
  socialInNotNil: Boolean
  socialInEqualFold: String
  socialInContainsFold: String
  """
  logo_url field predicates
  """
  logoURL: String
  logoURLNEQ: String
  logoURLIn: [String!]
  logoURLNotIn: [String!]
  logoURLGT: String
  logoURLGTE: String
  logoURLLT: String
  logoURLLTE: String
  logoURLContains: String
  logoURLHasPrefix: String
  logoURLHasSuffix: String
  logoURLIsNil: Boolean
  logoURLNotNil: Boolean
  logoURLEqualFold: String
  logoURLContainsFold: String
  """
  site_url field predicates
  """
  siteURL: String
  siteURLNEQ: String
  siteURLIn: [String!]
  siteURLNotIn: [String!]
  siteURLGT: String
  siteURLGTE: String
  siteURLLT: String
  siteURLLTE: String
  siteURLContains: String
  siteURLHasPrefix: String
  siteURLHasSuffix: String
  siteURLIsNil: Boolean
  siteURLNotNil: Boolean
  siteURLEqualFold: String
  siteURLContainsFold: String
  """
  default_mail_conn_id field predicates
  """
  defaultMailConnID: ID
  defaultMailConnIDNEQ: ID
  defaultMailConnIDIn: [ID!]
  defaultMailConnIDNotIn: [ID!]
  defaultMailConnIDGT: ID
  defaultMailConnIDGTE: ID
  defaultMailConnIDLT: ID
  defaultMailConnIDLTE: ID
  defaultMailConnIDContains: ID
  defaultMailConnIDHasPrefix: ID
  defaultMailConnIDHasSuffix: ID
  defaultMailConnIDIsNil: Boolean
  defaultMailConnIDNotNil: Boolean
  defaultMailConnIDEqualFold: ID
  defaultMailConnIDContainsFold: ID
  """
  mail_layout_templ_id field predicates
  """
  mailLayoutTemplID: ID
  mailLayoutTemplIDNEQ: ID
  mailLayoutTemplIDIn: [ID!]
  mailLayoutTemplIDNotIn: [ID!]
  mailLayoutTemplIDGT: ID
  mailLayoutTemplIDGTE: ID
  mailLayoutTemplIDLT: ID
  mailLayoutTemplIDLTE: ID
  mailLayoutTemplIDContains: ID
  mailLayoutTemplIDHasPrefix: ID
  mailLayoutTemplIDHasSuffix: ID
  mailLayoutTemplIDIsNil: Boolean
  mailLayoutTemplIDNotNil: Boolean
  mailLayoutTemplIDEqualFold: ID
  mailLayoutTemplIDContainsFold: ID
  """
  wsapce_invite_templ_id field predicates
  """
  wsapceInviteTemplID: ID
  wsapceInviteTemplIDNEQ: ID
  wsapceInviteTemplIDIn: [ID!]
  wsapceInviteTemplIDNotIn: [ID!]
  wsapceInviteTemplIDGT: ID
  wsapceInviteTemplIDGTE: ID
  wsapceInviteTemplIDLT: ID
  wsapceInviteTemplIDLTE: ID
  wsapceInviteTemplIDContains: ID
  wsapceInviteTemplIDHasPrefix: ID
  wsapceInviteTemplIDHasSuffix: ID
  wsapceInviteTemplIDIsNil: Boolean
  wsapceInviteTemplIDNotNil: Boolean
  wsapceInviteTemplIDEqualFold: ID
  wsapceInviteTemplIDContainsFold: ID
  """
  wsapce_success_templ_id field predicates
  """
  wsapceSuccessTemplID: ID
  wsapceSuccessTemplIDNEQ: ID
  wsapceSuccessTemplIDIn: [ID!]
  wsapceSuccessTemplIDNotIn: [ID!]
  wsapceSuccessTemplIDGT: ID
  wsapceSuccessTemplIDGTE: ID
  wsapceSuccessTemplIDLT: ID
  wsapceSuccessTemplIDLTE: ID
  wsapceSuccessTemplIDContains: ID
  wsapceSuccessTemplIDHasPrefix: ID
  wsapceSuccessTemplIDHasSuffix: ID
  wsapceSuccessTemplIDIsNil: Boolean
  wsapceSuccessTemplIDNotNil: Boolean
  wsapceSuccessTemplIDEqualFold: ID
  wsapceSuccessTemplIDContainsFold: ID
  """
  auth_fp_templ_id field predicates
  """
  authFpTemplID: ID
  authFpTemplIDNEQ: ID
  authFpTemplIDIn: [ID!]
  authFpTemplIDNotIn: [ID!]
  authFpTemplIDGT: ID
  authFpTemplIDGTE: ID
  authFpTemplIDLT: ID
  authFpTemplIDLTE: ID
  authFpTemplIDContains: ID
  authFpTemplIDHasPrefix: ID
  authFpTemplIDHasSuffix: ID
  authFpTemplIDIsNil: Boolean
  authFpTemplIDNotNil: Boolean
  authFpTemplIDEqualFold: ID
  authFpTemplIDContainsFold: ID
  """
  auth_welcome_email_templ_id field predicates
  """
  authWelcomeEmailTemplID: ID
  authWelcomeEmailTemplIDNEQ: ID
  authWelcomeEmailTemplIDIn: [ID!]
  authWelcomeEmailTemplIDNotIn: [ID!]
  authWelcomeEmailTemplIDGT: ID
  authWelcomeEmailTemplIDGTE: ID
  authWelcomeEmailTemplIDLT: ID
  authWelcomeEmailTemplIDLTE: ID
  authWelcomeEmailTemplIDContains: ID
  authWelcomeEmailTemplIDHasPrefix: ID
  authWelcomeEmailTemplIDHasSuffix: ID
  authWelcomeEmailTemplIDIsNil: Boolean
  authWelcomeEmailTemplIDNotNil: Boolean
  authWelcomeEmailTemplIDEqualFold: ID
  authWelcomeEmailTemplIDContainsFold: ID
  """
  auth_verification_templ_id field predicates
  """
  authVerificationTemplID: ID
  authVerificationTemplIDNEQ: ID
  authVerificationTemplIDIn: [ID!]
  authVerificationTemplIDNotIn: [ID!]
  authVerificationTemplIDGT: ID
  authVerificationTemplIDGTE: ID
  authVerificationTemplIDLT: ID
  authVerificationTemplIDLTE: ID
  authVerificationTemplIDContains: ID
  authVerificationTemplIDHasPrefix: ID
  authVerificationTemplIDHasSuffix: ID
  authVerificationTemplIDIsNil: Boolean
  authVerificationTemplIDNotNil: Boolean
  authVerificationTemplIDEqualFold: ID
  authVerificationTemplIDContainsFold: ID
  """
  auth_email_verify field predicates
  """
  authEmailVerify: Boolean
  authEmailVerifyNEQ: Boolean
  authEmailVerifyIsNil: Boolean
  authEmailVerifyNotNil: Boolean
  """
  oauth_signin_can_signup field predicates
  """
  oauthSigninCanSignup: Boolean
  oauthSigninCanSignupNEQ: Boolean
  oauthSigninCanSignupIsNil: Boolean
  oauthSigninCanSignupNotNil: Boolean
  """
  auth_enable_password_login field predicates
  """
  authEnablePasswordLogin: Boolean
  authEnablePasswordLoginNEQ: Boolean
  authEnablePasswordLoginIsNil: Boolean
  authEnablePasswordLoginNotNil: Boolean
  """
  admin_user_id field predicates
  """
  adminUserID: String
  adminUserIDNEQ: String
  adminUserIDIn: [String!]
  adminUserIDNotIn: [String!]
  adminUserIDGT: String
  adminUserIDGTE: String
  adminUserIDLT: String
  adminUserIDLTE: String
  adminUserIDContains: String
  adminUserIDHasPrefix: String
  adminUserIDHasSuffix: String
  adminUserIDIsNil: Boolean
  adminUserIDNotNil: Boolean
  adminUserIDEqualFold: String
  adminUserIDContainsFold: String
  """
  default_mail_conn edge predicates
  """
  hasDefaultMailConn: Boolean
  hasDefaultMailConnWith: [MailConnWhereInput!]
  """
  mail_layout_templ edge predicates
  """
  hasMailLayoutTempl: Boolean
  hasMailLayoutTemplWith: [TemplWhereInput!]
  """
  wsapce_invite_templ edge predicates
  """
  hasWsapceInviteTempl: Boolean
  hasWsapceInviteTemplWith: [TemplWhereInput!]
  """
  wsapce_success_templ edge predicates
  """
  hasWsapceSuccessTempl: Boolean
  hasWsapceSuccessTemplWith: [TemplWhereInput!]
  """
  auth_fp_templ edge predicates
  """
  hasAuthFpTempl: Boolean
  hasAuthFpTemplWith: [TemplWhereInput!]
  """
  auth_welcome_email_templ edge predicates
  """
  hasAuthWelcomeEmailTempl: Boolean
  hasAuthWelcomeEmailTemplWith: [TemplWhereInput!]
  """
  auth_verification_templ edge predicates
  """
  hasAuthVerificationTempl: Boolean
  hasAuthVerificationTemplWith: [TemplWhereInput!]
}
"""
CreateAppInput is used for create App object.
Input was generated by ent.
"""
input CreateAppInput {
  createdAt: Time
  updatedAt: Time
  name: String
  copyright: String
  email: String
  address: String
  socialTw: String
  socialFb: String
  socialIn: String
  logoURL: String
  siteURL: String
  authEmailVerify: Boolean
  oauthSigninCanSignup: Boolean
  authEnablePasswordLogin: Boolean
  adminUserID: String
  defaultMailConnID: ID
  mailLayoutTemplID: ID
  wsapceInviteTemplID: ID
  wsapceSuccessTemplID: ID
  authFpTemplID: ID
  authWelcomeEmailTemplID: ID
  authVerificationTemplID: ID
}
"""
CreateMailConnInput is used for create MailConn object.
Input was generated by ent.
"""
input CreateMailConnInput {
  createdAt: Time
  updatedAt: Time
  name: String
  host: String
  port: Int
  username: String
  password: String
  encryption: Int
  fromName: String
  fromEmail: String
  status: Boolean
}
"""
CreateOauthConnectionInput is used for create OauthConnection object.
Input was generated by ent.
"""
input CreateOauthConnectionInput {
  createdAt: Time
  updatedAt: Time
  name: String
  provider: String
  clientID: String
  clientSecret: String
  scopes: String
  redirectURL: String
  dashboardLink: String
  note: String
  status: Boolean
}
"""
CreatePostCategoryInput is used for create PostCategory object.
Input was generated by ent.
"""
input CreatePostCategoryInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
  parentID: ID
  childIDs: [ID!]
}
"""
CreatePostInput is used for create Post object.
Input was generated by ent.
"""
input CreatePostInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  custom: Map
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
  postTagIDs: [ID!]
}
"""
CreatePostStatusInput is used for create PostStatus object.
Input was generated by ent.
"""
input CreatePostStatusInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
}
"""
CreatePostTagInput is used for create PostTag object.
Input was generated by ent.
"""
input CreatePostTagInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  postIDs: [ID!]
}
"""
CreatePostTypeFormInput is used for create PostTypeForm object.
Input was generated by ent.
"""
input CreatePostTypeFormInput {
  createdAt: Time
  updatedAt: Time
  name: String
  status: Boolean
  body: JsonSlice
  postTypeID: ID
}
"""
CreatePostTypeInput is used for create PostType object.
Input was generated by ent.
"""
input CreatePostTypeInput {
  createdAt: Time
  updatedAt: Time
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
}
"""
CreateTemplInput is used for create Templ object.
Input was generated by ent.
"""
input CreateTemplInput {
  createdAt: Time
  updatedAt: Time
  name: String
  body: String
  compiled: String
  status: Boolean
}
"""
CreateTodoInput is used for create Todo object.
Input was generated by ent.
"""
input CreateTodoInput {
  createdAt: Time
  updatedAt: Time
  text: String!
  status: TodoStatus
  priority: Int
  childIDs: [ID!]
  parentID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  createdAt: Time
  updatedAt: Time
  email: String!
  phone: String
  firstName: String
  lastName: String
  company: String
  locale: String
  roleID: String
  status: Boolean
  password: String
  secret: String
  apiKey: String
  welcomeEmailSent: Boolean
  canAdmin: Boolean
  sessionIDs: [ID!]
  workspaceIDs: [ID!]
}
"""
CreateWorkspaceInput is used for create Workspace object.
Input was generated by ent.
"""
input CreateWorkspaceInput {
  createdAt: Time
  updatedAt: Time
  name: String
  isPersonal: Boolean
  userID: String
  userIDs: [ID!]
  workspaceInviteIDs: [ID!]
}
"""
CreateWorkspaceInviteInput is used for create WorkspaceInvite object.
Input was generated by ent.
"""
input CreateWorkspaceInviteInput {
  createdAt: Time
  updatedAt: Time
  email: String
  role: String
  workspaceID: ID
}
"""
CreateWorkspaceUserInput is used for create WorkspaceUser object.
Input was generated by ent.
"""
input CreateWorkspaceUserInput {
  createdAt: Time
  updatedAt: Time
  role: String
  userID: ID!
  workspaceID: ID!
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type MailConn implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  host: String
  port: Int
  username: String
  password: String
  encryption: Int
  fromName: String
  fromEmail: String
  status: Boolean
}
"""
A connection to a list of items.
"""
type MailConnConnection {
  """
  A list of edges.
  """
  edges: [MailConnEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MailConnEdge {
  """
  The item at the end of the edge.
  """
  node: MailConn
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for MailConn connections
"""
input MailConnOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MailConns.
  """
  field: MailConnOrderField!
}
"""
Properties by which MailConn connections can be ordered.
"""
enum MailConnOrderField {
  CREATED_AT
}
"""
MailConnWhereInput is used for filtering MailConn objects.
Input was generated by ent.
"""
input MailConnWhereInput {
  not: MailConnWhereInput
  and: [MailConnWhereInput!]
  or: [MailConnWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  host field predicates
  """
  host: String
  hostNEQ: String
  hostIn: [String!]
  hostNotIn: [String!]
  hostGT: String
  hostGTE: String
  hostLT: String
  hostLTE: String
  hostContains: String
  hostHasPrefix: String
  hostHasSuffix: String
  hostIsNil: Boolean
  hostNotNil: Boolean
  hostEqualFold: String
  hostContainsFold: String
  """
  port field predicates
  """
  port: Int
  portNEQ: Int
  portIn: [Int!]
  portNotIn: [Int!]
  portGT: Int
  portGTE: Int
  portLT: Int
  portLTE: Int
  portIsNil: Boolean
  portNotNil: Boolean
  """
  username field predicates
  """
  username: String
  usernameNEQ: String
  usernameIn: [String!]
  usernameNotIn: [String!]
  usernameGT: String
  usernameGTE: String
  usernameLT: String
  usernameLTE: String
  usernameContains: String
  usernameHasPrefix: String
  usernameHasSuffix: String
  usernameIsNil: Boolean
  usernameNotNil: Boolean
  usernameEqualFold: String
  usernameContainsFold: String
  """
  password field predicates
  """
  password: String
  passwordNEQ: String
  passwordIn: [String!]
  passwordNotIn: [String!]
  passwordGT: String
  passwordGTE: String
  passwordLT: String
  passwordLTE: String
  passwordContains: String
  passwordHasPrefix: String
  passwordHasSuffix: String
  passwordIsNil: Boolean
  passwordNotNil: Boolean
  passwordEqualFold: String
  passwordContainsFold: String
  """
  encryption field predicates
  """
  encryption: Int
  encryptionNEQ: Int
  encryptionIn: [Int!]
  encryptionNotIn: [Int!]
  encryptionGT: Int
  encryptionGTE: Int
  encryptionLT: Int
  encryptionLTE: Int
  encryptionIsNil: Boolean
  encryptionNotNil: Boolean
  """
  from_name field predicates
  """
  fromName: String
  fromNameNEQ: String
  fromNameIn: [String!]
  fromNameNotIn: [String!]
  fromNameGT: String
  fromNameGTE: String
  fromNameLT: String
  fromNameLTE: String
  fromNameContains: String
  fromNameHasPrefix: String
  fromNameHasSuffix: String
  fromNameIsNil: Boolean
  fromNameNotNil: Boolean
  fromNameEqualFold: String
  fromNameContainsFold: String
  """
  from_email field predicates
  """
  fromEmail: String
  fromEmailNEQ: String
  fromEmailIn: [String!]
  fromEmailNotIn: [String!]
  fromEmailGT: String
  fromEmailGTE: String
  fromEmailLT: String
  fromEmailLTE: String
  fromEmailContains: String
  fromEmailHasPrefix: String
  fromEmailHasSuffix: String
  fromEmailIsNil: Boolean
  fromEmailNotNil: Boolean
  fromEmailEqualFold: String
  fromEmailContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
}
type Media implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  disk: String
  directory: String
  name: String
  originalName: String
  extension: String
  mimeType: String
  aggregateType: String
  size: Uint
  description: String
  isVariant: Boolean
  variantName: String
  originalMediaID: String
  checksum: String
  workspaceID: String!
  alt: String
  uid: String
  status: Boolean
}
"""
A connection to a list of items.
"""
type MediaConnection {
  """
  A list of edges.
  """
  edges: [MediaEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type MediaEdge {
  """
  The item at the end of the edge.
  """
  node: Media
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Media connections
"""
input MediaOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order MediaSlice.
  """
  field: MediaOrderField!
}
"""
Properties by which Media connections can be ordered.
"""
enum MediaOrderField {
  CREATED_AT
}
"""
MediaWhereInput is used for filtering Media objects.
Input was generated by ent.
"""
input MediaWhereInput {
  not: MediaWhereInput
  and: [MediaWhereInput!]
  or: [MediaWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  disk field predicates
  """
  disk: String
  diskNEQ: String
  diskIn: [String!]
  diskNotIn: [String!]
  diskGT: String
  diskGTE: String
  diskLT: String
  diskLTE: String
  diskContains: String
  diskHasPrefix: String
  diskHasSuffix: String
  diskIsNil: Boolean
  diskNotNil: Boolean
  diskEqualFold: String
  diskContainsFold: String
  """
  directory field predicates
  """
  directory: String
  directoryNEQ: String
  directoryIn: [String!]
  directoryNotIn: [String!]
  directoryGT: String
  directoryGTE: String
  directoryLT: String
  directoryLTE: String
  directoryContains: String
  directoryHasPrefix: String
  directoryHasSuffix: String
  directoryIsNil: Boolean
  directoryNotNil: Boolean
  directoryEqualFold: String
  directoryContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  original_name field predicates
  """
  originalName: String
  originalNameNEQ: String
  originalNameIn: [String!]
  originalNameNotIn: [String!]
  originalNameGT: String
  originalNameGTE: String
  originalNameLT: String
  originalNameLTE: String
  originalNameContains: String
  originalNameHasPrefix: String
  originalNameHasSuffix: String
  originalNameIsNil: Boolean
  originalNameNotNil: Boolean
  originalNameEqualFold: String
  originalNameContainsFold: String
  """
  extension field predicates
  """
  extension: String
  extensionNEQ: String
  extensionIn: [String!]
  extensionNotIn: [String!]
  extensionGT: String
  extensionGTE: String
  extensionLT: String
  extensionLTE: String
  extensionContains: String
  extensionHasPrefix: String
  extensionHasSuffix: String
  extensionIsNil: Boolean
  extensionNotNil: Boolean
  extensionEqualFold: String
  extensionContainsFold: String
  """
  mime_type field predicates
  """
  mimeType: String
  mimeTypeNEQ: String
  mimeTypeIn: [String!]
  mimeTypeNotIn: [String!]
  mimeTypeGT: String
  mimeTypeGTE: String
  mimeTypeLT: String
  mimeTypeLTE: String
  mimeTypeContains: String
  mimeTypeHasPrefix: String
  mimeTypeHasSuffix: String
  mimeTypeIsNil: Boolean
  mimeTypeNotNil: Boolean
  mimeTypeEqualFold: String
  mimeTypeContainsFold: String
  """
  aggregate_type field predicates
  """
  aggregateType: String
  aggregateTypeNEQ: String
  aggregateTypeIn: [String!]
  aggregateTypeNotIn: [String!]
  aggregateTypeGT: String
  aggregateTypeGTE: String
  aggregateTypeLT: String
  aggregateTypeLTE: String
  aggregateTypeContains: String
  aggregateTypeHasPrefix: String
  aggregateTypeHasSuffix: String
  aggregateTypeIsNil: Boolean
  aggregateTypeNotNil: Boolean
  aggregateTypeEqualFold: String
  aggregateTypeContainsFold: String
  """
  size field predicates
  """
  size: Uint
  sizeNEQ: Uint
  sizeIn: [Uint!]
  sizeNotIn: [Uint!]
  sizeGT: Uint
  sizeGTE: Uint
  sizeLT: Uint
  sizeLTE: Uint
  sizeIsNil: Boolean
  sizeNotNil: Boolean
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
  """
  is_variant field predicates
  """
  isVariant: Boolean
  isVariantNEQ: Boolean
  isVariantIsNil: Boolean
  isVariantNotNil: Boolean
  """
  variant_name field predicates
  """
  variantName: String
  variantNameNEQ: String
  variantNameIn: [String!]
  variantNameNotIn: [String!]
  variantNameGT: String
  variantNameGTE: String
  variantNameLT: String
  variantNameLTE: String
  variantNameContains: String
  variantNameHasPrefix: String
  variantNameHasSuffix: String
  variantNameIsNil: Boolean
  variantNameNotNil: Boolean
  variantNameEqualFold: String
  variantNameContainsFold: String
  """
  original_media_id field predicates
  """
  originalMediaID: String
  originalMediaIDNEQ: String
  originalMediaIDIn: [String!]
  originalMediaIDNotIn: [String!]
  originalMediaIDGT: String
  originalMediaIDGTE: String
  originalMediaIDLT: String
  originalMediaIDLTE: String
  originalMediaIDContains: String
  originalMediaIDHasPrefix: String
  originalMediaIDHasSuffix: String
  originalMediaIDIsNil: Boolean
  originalMediaIDNotNil: Boolean
  originalMediaIDEqualFold: String
  originalMediaIDContainsFold: String
  """
  checksum field predicates
  """
  checksum: String
  checksumNEQ: String
  checksumIn: [String!]
  checksumNotIn: [String!]
  checksumGT: String
  checksumGTE: String
  checksumLT: String
  checksumLTE: String
  checksumContains: String
  checksumHasPrefix: String
  checksumHasSuffix: String
  checksumIsNil: Boolean
  checksumNotNil: Boolean
  checksumEqualFold: String
  checksumContainsFold: String
  """
  workspace_id field predicates
  """
  workspaceID: String
  workspaceIDNEQ: String
  workspaceIDIn: [String!]
  workspaceIDNotIn: [String!]
  workspaceIDGT: String
  workspaceIDGTE: String
  workspaceIDLT: String
  workspaceIDLTE: String
  workspaceIDContains: String
  workspaceIDHasPrefix: String
  workspaceIDHasSuffix: String
  workspaceIDEqualFold: String
  workspaceIDContainsFold: String
  """
  alt field predicates
  """
  alt: String
  altNEQ: String
  altIn: [String!]
  altNotIn: [String!]
  altGT: String
  altGTE: String
  altLT: String
  altLTE: String
  altContains: String
  altHasPrefix: String
  altHasSuffix: String
  altIsNil: Boolean
  altNotNil: Boolean
  altEqualFold: String
  altContainsFold: String
  """
  uid field predicates
  """
  uid: String
  uidNEQ: String
  uidIn: [String!]
  uidNotIn: [String!]
  uidGT: String
  uidGTE: String
  uidLT: String
  uidLTE: String
  uidContains: String
  uidHasPrefix: String
  uidHasSuffix: String
  uidIsNil: Boolean
  uidNotNil: Boolean
  uidEqualFold: String
  uidContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "saas/gen/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
type OauthConnection implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  provider: String
  clientID: String
  clientSecret: String
  scopes: String
  redirectURL: String
  dashboardLink: String
  note: String
  status: Boolean
}
"""
A connection to a list of items.
"""
type OauthConnectionConnection {
  """
  A list of edges.
  """
  edges: [OauthConnectionEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type OauthConnectionEdge {
  """
  The item at the end of the edge.
  """
  node: OauthConnection
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for OauthConnection connections
"""
input OauthConnectionOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order OauthConnections.
  """
  field: OauthConnectionOrderField!
}
"""
Properties by which OauthConnection connections can be ordered.
"""
enum OauthConnectionOrderField {
  CREATED_AT
}
"""
OauthConnectionWhereInput is used for filtering OauthConnection objects.
Input was generated by ent.
"""
input OauthConnectionWhereInput {
  not: OauthConnectionWhereInput
  and: [OauthConnectionWhereInput!]
  or: [OauthConnectionWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  provider field predicates
  """
  provider: String
  providerNEQ: String
  providerIn: [String!]
  providerNotIn: [String!]
  providerGT: String
  providerGTE: String
  providerLT: String
  providerLTE: String
  providerContains: String
  providerHasPrefix: String
  providerHasSuffix: String
  providerIsNil: Boolean
  providerNotNil: Boolean
  providerEqualFold: String
  providerContainsFold: String
  """
  client_id field predicates
  """
  clientID: String
  clientIDNEQ: String
  clientIDIn: [String!]
  clientIDNotIn: [String!]
  clientIDGT: String
  clientIDGTE: String
  clientIDLT: String
  clientIDLTE: String
  clientIDContains: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDIsNil: Boolean
  clientIDNotNil: Boolean
  clientIDEqualFold: String
  clientIDContainsFold: String
  """
  client_secret field predicates
  """
  clientSecret: String
  clientSecretNEQ: String
  clientSecretIn: [String!]
  clientSecretNotIn: [String!]
  clientSecretGT: String
  clientSecretGTE: String
  clientSecretLT: String
  clientSecretLTE: String
  clientSecretContains: String
  clientSecretHasPrefix: String
  clientSecretHasSuffix: String
  clientSecretIsNil: Boolean
  clientSecretNotNil: Boolean
  clientSecretEqualFold: String
  clientSecretContainsFold: String
  """
  scopes field predicates
  """
  scopes: String
  scopesNEQ: String
  scopesIn: [String!]
  scopesNotIn: [String!]
  scopesGT: String
  scopesGTE: String
  scopesLT: String
  scopesLTE: String
  scopesContains: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIsNil: Boolean
  scopesNotNil: Boolean
  scopesEqualFold: String
  scopesContainsFold: String
  """
  redirect_url field predicates
  """
  redirectURL: String
  redirectURLNEQ: String
  redirectURLIn: [String!]
  redirectURLNotIn: [String!]
  redirectURLGT: String
  redirectURLGTE: String
  redirectURLLT: String
  redirectURLLTE: String
  redirectURLContains: String
  redirectURLHasPrefix: String
  redirectURLHasSuffix: String
  redirectURLIsNil: Boolean
  redirectURLNotNil: Boolean
  redirectURLEqualFold: String
  redirectURLContainsFold: String
  """
  dashboard_link field predicates
  """
  dashboardLink: String
  dashboardLinkNEQ: String
  dashboardLinkIn: [String!]
  dashboardLinkNotIn: [String!]
  dashboardLinkGT: String
  dashboardLinkGTE: String
  dashboardLinkLT: String
  dashboardLinkLTE: String
  dashboardLinkContains: String
  dashboardLinkHasPrefix: String
  dashboardLinkHasSuffix: String
  dashboardLinkIsNil: Boolean
  dashboardLinkNotNil: Boolean
  dashboardLinkEqualFold: String
  dashboardLinkContainsFold: String
  """
  note field predicates
  """
  note: String
  noteNEQ: String
  noteIn: [String!]
  noteNotIn: [String!]
  noteGT: String
  noteGTE: String
  noteLT: String
  noteLTE: String
  noteContains: String
  noteHasPrefix: String
  noteHasSuffix: String
  noteIsNil: Boolean
  noteNotNil: Boolean
  noteEqualFold: String
  noteContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
}
"""
Possible directions in which to order a list of items when provided an ` + "`" + `orderBy` + "`" + ` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  ASC
  """
  Specifies a descending order for a given ` + "`" + `orderBy` + "`" + ` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Post implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  slug: String
  postStatusID: ID
  postTypeID: ID
  primaryCategoryID: ID
  headline: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  custom: Map
  postStatus: PostStatus
  postType: PostType
  primaryCategory: PostCategory
  postTags: [PostTag!]
}
type PostCategory implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  parentID: ID
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
  parent: PostCategory
  children: [PostCategory!]
}
"""
A connection to a list of items.
"""
type PostCategoryConnection {
  """
  A list of edges.
  """
  edges: [PostCategoryEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostCategoryEdge {
  """
  The item at the end of the edge.
  """
  node: PostCategory
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostCategory connections
"""
input PostCategoryOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostCategories.
  """
  field: PostCategoryOrderField!
}
"""
Properties by which PostCategory connections can be ordered.
"""
enum PostCategoryOrderField {
  CREATED_AT
}
"""
PostCategoryWhereInput is used for filtering PostCategory objects.
Input was generated by ent.
"""
input PostCategoryWhereInput {
  not: PostCategoryWhereInput
  and: [PostCategoryWhereInput!]
  or: [PostCategoryWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  parent_id field predicates
  """
  parentID: ID
  parentIDNEQ: ID
  parentIDIn: [ID!]
  parentIDNotIn: [ID!]
  parentIDGT: ID
  parentIDGTE: ID
  parentIDLT: ID
  parentIDLTE: ID
  parentIDContains: ID
  parentIDHasPrefix: ID
  parentIDHasSuffix: ID
  parentIDIsNil: Boolean
  parentIDNotNil: Boolean
  parentIDEqualFold: ID
  parentIDContainsFold: ID
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [PostCategoryWhereInput!]
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [PostCategoryWhereInput!]
}
"""
A connection to a list of items.
"""
type PostConnection {
  """
  A list of edges.
  """
  edges: [PostEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostEdge {
  """
  The item at the end of the edge.
  """
  node: Post
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Post connections
"""
input PostOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Posts.
  """
  field: PostOrderField!
}
"""
Properties by which Post connections can be ordered.
"""
enum PostOrderField {
  CREATED_AT
}
type PostStatus implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  slug: String
  status: Boolean
  postTypeID: ID
  postType: PostType
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostStatusConnection {
  """
  A list of edges.
  """
  edges: [PostStatusEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostStatusEdge {
  """
  The item at the end of the edge.
  """
  node: PostStatus
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostStatus connections
"""
input PostStatusOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostStatusSlice.
  """
  field: PostStatusOrderField!
}
"""
Properties by which PostStatus connections can be ordered.
"""
enum PostStatusOrderField {
  CREATED_AT
  NAME
  STATUS
  POST_TYPE_NAME
}
"""
PostStatusWhereInput is used for filtering PostStatus objects.
Input was generated by ent.
"""
input PostStatusWhereInput {
  not: PostStatusWhereInput
  and: [PostStatusWhereInput!]
  or: [PostStatusWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
type PostTag implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  slug: String
  status: String
  excerpt: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
}
"""
A connection to a list of items.
"""
type PostTagConnection {
  """
  A list of edges.
  """
  edges: [PostTagEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostTagEdge {
  """
  The item at the end of the edge.
  """
  node: PostTag
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostTag connections
"""
input PostTagOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTags.
  """
  field: PostTagOrderField!
}
"""
Properties by which PostTag connections can be ordered.
"""
enum PostTagOrderField {
  CREATED_AT
}
"""
PostTagWhereInput is used for filtering PostTag objects.
Input was generated by ent.
"""
input PostTagWhereInput {
  not: PostTagWhereInput
  and: [PostTagWhereInput!]
  or: [PostTagWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
}
type PostType implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  slug: String
  status: String
  excerpt: String
  content: String
  metaTitle: String
  metaDescr: String
  metaCanonicalURL: String
  metaRobots: String
  posts: [Post!]
  postStatuses: [PostStatus!]
  postTypeForms: [PostTypeForm!]
}
"""
A connection to a list of items.
"""
type PostTypeConnection {
  """
  A list of edges.
  """
  edges: [PostTypeEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostTypeEdge {
  """
  The item at the end of the edge.
  """
  node: PostType
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type PostTypeForm implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  status: Boolean
  postTypeID: ID
  body: JsonSlice
  postType: PostType
}
"""
A connection to a list of items.
"""
type PostTypeFormConnection {
  """
  A list of edges.
  """
  edges: [PostTypeFormEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type PostTypeFormEdge {
  """
  The item at the end of the edge.
  """
  node: PostTypeForm
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for PostTypeForm connections
"""
input PostTypeFormOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTypeForms.
  """
  field: PostTypeFormOrderField!
}
"""
Properties by which PostTypeForm connections can be ordered.
"""
enum PostTypeFormOrderField {
  CREATED_AT
  NAME
  STATUS
  POST_TYPE_NAME
}
"""
PostTypeFormWhereInput is used for filtering PostTypeForm objects.
Input was generated by ent.
"""
input PostTypeFormWhereInput {
  not: PostTypeFormWhereInput
  and: [PostTypeFormWhereInput!]
  or: [PostTypeFormWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
}
"""
Ordering options for PostType connections
"""
input PostTypeOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order PostTypes.
  """
  field: PostTypeOrderField!
}
"""
Properties by which PostType connections can be ordered.
"""
enum PostTypeOrderField {
  CREATED_AT
  NAME
  STATUS
}
"""
PostTypeWhereInput is used for filtering PostType objects.
Input was generated by ent.
"""
input PostTypeWhereInput {
  not: PostTypeWhereInput
  and: [PostTypeWhereInput!]
  or: [PostTypeWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  status field predicates
  """
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusIsNil: Boolean
  statusNotNil: Boolean
  statusEqualFold: String
  statusContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  posts edge predicates
  """
  hasPosts: Boolean
  hasPostsWith: [PostWhereInput!]
  """
  post_statuses edge predicates
  """
  hasPostStatuses: Boolean
  hasPostStatusesWith: [PostStatusWhereInput!]
  """
  post_type_forms edge predicates
  """
  hasPostTypeForms: Boolean
  hasPostTypeFormsWith: [PostTypeFormWhereInput!]
}
"""
PostWhereInput is used for filtering Post objects.
Input was generated by ent.
"""
input PostWhereInput {
  not: PostWhereInput
  and: [PostWhereInput!]
  or: [PostWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  slug field predicates
  """
  slug: String
  slugNEQ: String
  slugIn: [String!]
  slugNotIn: [String!]
  slugGT: String
  slugGTE: String
  slugLT: String
  slugLTE: String
  slugContains: String
  slugHasPrefix: String
  slugHasSuffix: String
  slugIsNil: Boolean
  slugNotNil: Boolean
  slugEqualFold: String
  slugContainsFold: String
  """
  post_status_id field predicates
  """
  postStatusID: ID
  postStatusIDNEQ: ID
  postStatusIDIn: [ID!]
  postStatusIDNotIn: [ID!]
  postStatusIDGT: ID
  postStatusIDGTE: ID
  postStatusIDLT: ID
  postStatusIDLTE: ID
  postStatusIDContains: ID
  postStatusIDHasPrefix: ID
  postStatusIDHasSuffix: ID
  postStatusIDIsNil: Boolean
  postStatusIDNotNil: Boolean
  postStatusIDEqualFold: ID
  postStatusIDContainsFold: ID
  """
  post_type_id field predicates
  """
  postTypeID: ID
  postTypeIDNEQ: ID
  postTypeIDIn: [ID!]
  postTypeIDNotIn: [ID!]
  postTypeIDGT: ID
  postTypeIDGTE: ID
  postTypeIDLT: ID
  postTypeIDLTE: ID
  postTypeIDContains: ID
  postTypeIDHasPrefix: ID
  postTypeIDHasSuffix: ID
  postTypeIDIsNil: Boolean
  postTypeIDNotNil: Boolean
  postTypeIDEqualFold: ID
  postTypeIDContainsFold: ID
  """
  primary_category_id field predicates
  """
  primaryCategoryID: ID
  primaryCategoryIDNEQ: ID
  primaryCategoryIDIn: [ID!]
  primaryCategoryIDNotIn: [ID!]
  primaryCategoryIDGT: ID
  primaryCategoryIDGTE: ID
  primaryCategoryIDLT: ID
  primaryCategoryIDLTE: ID
  primaryCategoryIDContains: ID
  primaryCategoryIDHasPrefix: ID
  primaryCategoryIDHasSuffix: ID
  primaryCategoryIDIsNil: Boolean
  primaryCategoryIDNotNil: Boolean
  primaryCategoryIDEqualFold: ID
  primaryCategoryIDContainsFold: ID
  """
  headline field predicates
  """
  headline: String
  headlineNEQ: String
  headlineIn: [String!]
  headlineNotIn: [String!]
  headlineGT: String
  headlineGTE: String
  headlineLT: String
  headlineLTE: String
  headlineContains: String
  headlineHasPrefix: String
  headlineHasSuffix: String
  headlineIsNil: Boolean
  headlineNotNil: Boolean
  headlineEqualFold: String
  headlineContainsFold: String
  """
  excerpt field predicates
  """
  excerpt: String
  excerptNEQ: String
  excerptIn: [String!]
  excerptNotIn: [String!]
  excerptGT: String
  excerptGTE: String
  excerptLT: String
  excerptLTE: String
  excerptContains: String
  excerptHasPrefix: String
  excerptHasSuffix: String
  excerptIsNil: Boolean
  excerptNotNil: Boolean
  excerptEqualFold: String
  excerptContainsFold: String
  """
  content field predicates
  """
  content: String
  contentNEQ: String
  contentIn: [String!]
  contentNotIn: [String!]
  contentGT: String
  contentGTE: String
  contentLT: String
  contentLTE: String
  contentContains: String
  contentHasPrefix: String
  contentHasSuffix: String
  contentIsNil: Boolean
  contentNotNil: Boolean
  contentEqualFold: String
  contentContainsFold: String
  """
  meta_title field predicates
  """
  metaTitle: String
  metaTitleNEQ: String
  metaTitleIn: [String!]
  metaTitleNotIn: [String!]
  metaTitleGT: String
  metaTitleGTE: String
  metaTitleLT: String
  metaTitleLTE: String
  metaTitleContains: String
  metaTitleHasPrefix: String
  metaTitleHasSuffix: String
  metaTitleIsNil: Boolean
  metaTitleNotNil: Boolean
  metaTitleEqualFold: String
  metaTitleContainsFold: String
  """
  meta_descr field predicates
  """
  metaDescr: String
  metaDescrNEQ: String
  metaDescrIn: [String!]
  metaDescrNotIn: [String!]
  metaDescrGT: String
  metaDescrGTE: String
  metaDescrLT: String
  metaDescrLTE: String
  metaDescrContains: String
  metaDescrHasPrefix: String
  metaDescrHasSuffix: String
  metaDescrIsNil: Boolean
  metaDescrNotNil: Boolean
  metaDescrEqualFold: String
  metaDescrContainsFold: String
  """
  meta_canonical_url field predicates
  """
  metaCanonicalURL: String
  metaCanonicalURLNEQ: String
  metaCanonicalURLIn: [String!]
  metaCanonicalURLNotIn: [String!]
  metaCanonicalURLGT: String
  metaCanonicalURLGTE: String
  metaCanonicalURLLT: String
  metaCanonicalURLLTE: String
  metaCanonicalURLContains: String
  metaCanonicalURLHasPrefix: String
  metaCanonicalURLHasSuffix: String
  metaCanonicalURLIsNil: Boolean
  metaCanonicalURLNotNil: Boolean
  metaCanonicalURLEqualFold: String
  metaCanonicalURLContainsFold: String
  """
  meta_robots field predicates
  """
  metaRobots: String
  metaRobotsNEQ: String
  metaRobotsIn: [String!]
  metaRobotsNotIn: [String!]
  metaRobotsGT: String
  metaRobotsGTE: String
  metaRobotsLT: String
  metaRobotsLTE: String
  metaRobotsContains: String
  metaRobotsHasPrefix: String
  metaRobotsHasSuffix: String
  metaRobotsIsNil: Boolean
  metaRobotsNotNil: Boolean
  metaRobotsEqualFold: String
  metaRobotsContainsFold: String
  """
  post_status edge predicates
  """
  hasPostStatus: Boolean
  hasPostStatusWith: [PostStatusWhereInput!]
  """
  post_type edge predicates
  """
  hasPostType: Boolean
  hasPostTypeWith: [PostTypeWhereInput!]
  """
  primary_category edge predicates
  """
  hasPrimaryCategory: Boolean
  hasPrimaryCategoryWith: [PostCategoryWhereInput!]
  """
  post_tags edge predicates
  """
  hasPostTags: Boolean
  hasPostTagsWith: [PostTagWhereInput!]
}
type Query {
  """
  Fetches an object given its ID.
  """
  node(
    """
    ID of the object.
    """
    id: ID!
  ): Node @canApp
  """
  Lookup nodes by a list of IDs.
  """
  nodes(
    """
    The list of node IDs.
    """
    ids: [ID!]!
  ): [Node]! @canApp
  apps(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Apps returned from the connection.
    """
    orderBy: [AppOrder!]

    """
    Filtering options for Apps returned from the connection.
    """
    where: AppWhereInput
  ): AppConnection! @canAdmin
  mailConns(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MailConns returned from the connection.
    """
    orderBy: [MailConnOrder!]

    """
    Filtering options for MailConns returned from the connection.
    """
    where: MailConnWhereInput
  ): MailConnConnection! @canAdmin
  medias(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for MediaSlice returned from the connection.
    """
    orderBy: [MediaOrder!]

    """
    Filtering options for MediaSlice returned from the connection.
    """
    where: MediaWhereInput
  ): MediaConnection! @canApp
  oauthConnections(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for OauthConnections returned from the connection.
    """
    orderBy: [OauthConnectionOrder!]

    """
    Filtering options for OauthConnections returned from the connection.
    """
    where: OauthConnectionWhereInput
  ): OauthConnectionConnection! @canApp
  posts(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Posts returned from the connection.
    """
    orderBy: [PostOrder!]

    """
    Filtering options for Posts returned from the connection.
    """
    where: PostWhereInput
  ): PostConnection! @canApp
  postCategories(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostCategories returned from the connection.
    """
    orderBy: [PostCategoryOrder!]

    """
    Filtering options for PostCategories returned from the connection.
    """
    where: PostCategoryWhereInput
  ): PostCategoryConnection! @canApp
  postStatuses(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostStatusSlice returned from the connection.
    """
    orderBy: [PostStatusOrder!]

    """
    Filtering options for PostStatusSlice returned from the connection.
    """
    where: PostStatusWhereInput
  ): PostStatusConnection! @canApp
  postTags(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostTags returned from the connection.
    """
    orderBy: [PostTagOrder!]

    """
    Filtering options for PostTags returned from the connection.
    """
    where: PostTagWhereInput
  ): PostTagConnection! @canApp
  postTypes(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostTypes returned from the connection.
    """
    orderBy: [PostTypeOrder!]

    """
    Filtering options for PostTypes returned from the connection.
    """
    where: PostTypeWhereInput
  ): PostTypeConnection! @canApp
  postTypeForms(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for PostTypeForms returned from the connection.
    """
    orderBy: [PostTypeFormOrder!]

    """
    Filtering options for PostTypeForms returned from the connection.
    """
    where: PostTypeFormWhereInput
  ): PostTypeFormConnection! @canApp
  templs(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Templs returned from the connection.
    """
    orderBy: [TemplOrder!]

    """
    Filtering options for Templs returned from the connection.
    """
    where: TemplWhereInput
  ): TemplConnection! @canAdmin
  todos(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Todos returned from the connection.
    """
    orderBy: TodoOrder

    """
    Filtering options for Todos returned from the connection.
    """
    where: TodoWhereInput
  ): TodoConnection!
  users(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Users returned from the connection.
    """
    orderBy: [UserOrder!]

    """
    Filtering options for Users returned from the connection.
    """
    where: UserWhereInput
  ): UserConnection! @canApp
  workspaces(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Workspaces returned from the connection.
    """
    orderBy: [WorkspaceOrder!]

    """
    Filtering options for Workspaces returned from the connection.
    """
    where: WorkspaceWhereInput
  ): WorkspaceConnection! @canApp
  workspaceInvites(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for WorkspaceInvites returned from the connection.
    """
    orderBy: [WorkspaceInviteOrder!]

    """
    Filtering options for WorkspaceInvites returned from the connection.
    """
    where: WorkspaceInviteWhereInput
  ): WorkspaceInviteConnection! @canApp
  workspaceUsers(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for WorkspaceUsers returned from the connection.
    """
    orderBy: [WorkspaceUserOrder!]

    """
    Filtering options for WorkspaceUsers returned from the connection.
    """
    where: WorkspaceUserWhereInput
  ): WorkspaceUserConnection! @canApp
}
type Templ implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  body: String
  compiled: String
  status: Boolean
}
"""
A connection to a list of items.
"""
type TemplConnection {
  """
  A list of edges.
  """
  edges: [TemplEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TemplEdge {
  """
  The item at the end of the edge.
  """
  node: Templ
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Templ connections
"""
input TemplOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Templs.
  """
  field: TemplOrderField!
}
"""
Properties by which Templ connections can be ordered.
"""
enum TemplOrderField {
  CREATED_AT
}
"""
TemplWhereInput is used for filtering Templ objects.
Input was generated by ent.
"""
input TemplWhereInput {
  not: TemplWhereInput
  and: [TemplWhereInput!]
  or: [TemplWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  body field predicates
  """
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyIsNil: Boolean
  bodyNotNil: Boolean
  bodyEqualFold: String
  bodyContainsFold: String
  """
  compiled field predicates
  """
  compiled: String
  compiledNEQ: String
  compiledIn: [String!]
  compiledNotIn: [String!]
  compiledGT: String
  compiledGTE: String
  compiledLT: String
  compiledLTE: String
  compiledContains: String
  compiledHasPrefix: String
  compiledHasSuffix: String
  compiledIsNil: Boolean
  compiledNotNil: Boolean
  compiledEqualFold: String
  compiledContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
}
type Todo implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  text: String!
  status: TodoStatus!
  priority: Int!
  children: [Todo!]
  parent: Todo
}
"""
A connection to a list of items.
"""
type TodoConnection {
  """
  A list of edges.
  """
  edges: [TodoEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type TodoEdge {
  """
  The item at the end of the edge.
  """
  node: Todo
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for Todo connections
"""
input TodoOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Todos.
  """
  field: TodoOrderField!
}
"""
Properties by which Todo connections can be ordered.
"""
enum TodoOrderField {
  CREATED_AT
  TEXT
  STATUS
  PRIORITY
}
"""
TodoStatus is enum for the field status
"""
enum TodoStatus @goModel(model: "saas/gen/ent/todo.Status") {
  IN_PROGRESS
  COMPLETED
}
"""
TodoWhereInput is used for filtering Todo objects.
Input was generated by ent.
"""
input TodoWhereInput {
  not: TodoWhereInput
  and: [TodoWhereInput!]
  or: [TodoWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  text field predicates
  """
  text: String
  textNEQ: String
  textIn: [String!]
  textNotIn: [String!]
  textGT: String
  textGTE: String
  textLT: String
  textLTE: String
  textContains: String
  textHasPrefix: String
  textHasSuffix: String
  textEqualFold: String
  textContainsFold: String
  """
  status field predicates
  """
  status: TodoStatus
  statusNEQ: TodoStatus
  statusIn: [TodoStatus!]
  statusNotIn: [TodoStatus!]
  """
  priority field predicates
  """
  priority: Int
  priorityNEQ: Int
  priorityIn: [Int!]
  priorityNotIn: [Int!]
  priorityGT: Int
  priorityGTE: Int
  priorityLT: Int
  priorityLTE: Int
  """
  children edge predicates
  """
  hasChildren: Boolean
  hasChildrenWith: [TodoWhereInput!]
  """
  parent edge predicates
  """
  hasParent: Boolean
  hasParentWith: [TodoWhereInput!]
}
"""
UpdateAppInput is used for update App object.
Input was generated by ent.
"""
input UpdateAppInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  name: String
  clearName: Boolean
  copyright: String
  clearCopyright: Boolean
  email: String
  clearEmail: Boolean
  address: String
  clearAddress: Boolean
  socialTw: String
  clearSocialTw: Boolean
  socialFb: String
  clearSocialFb: Boolean
  socialIn: String
  clearSocialIn: Boolean
  logoURL: String
  clearLogoURL: Boolean
  siteURL: String
  clearSiteURL: Boolean
  authEmailVerify: Boolean
  clearAuthEmailVerify: Boolean
  oauthSigninCanSignup: Boolean
  clearOauthSigninCanSignup: Boolean
  authEnablePasswordLogin: Boolean
  clearAuthEnablePasswordLogin: Boolean
  adminUserID: String
  clearAdminUserID: Boolean
  defaultMailConnID: ID
  clearDefaultMailConn: Boolean
  mailLayoutTemplID: ID
  clearMailLayoutTempl: Boolean
  wsapceInviteTemplID: ID
  clearWsapceInviteTempl: Boolean
  wsapceSuccessTemplID: ID
  clearWsapceSuccessTempl: Boolean
  authFpTemplID: ID
  clearAuthFpTempl: Boolean
  authWelcomeEmailTemplID: ID
  clearAuthWelcomeEmailTempl: Boolean
  authVerificationTemplID: ID
  clearAuthVerificationTempl: Boolean
}
"""
UpdateMailConnInput is used for update MailConn object.
Input was generated by ent.
"""
input UpdateMailConnInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  host: String
  clearHost: Boolean
  port: Int
  clearPort: Boolean
  username: String
  clearUsername: Boolean
  password: String
  clearPassword: Boolean
  encryption: Int
  clearEncryption: Boolean
  fromName: String
  clearFromName: Boolean
  fromEmail: String
  clearFromEmail: Boolean
  status: Boolean
  clearStatus: Boolean
}
"""
UpdateOauthConnectionInput is used for update OauthConnection object.
Input was generated by ent.
"""
input UpdateOauthConnectionInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  provider: String
  clearProvider: Boolean
  clientID: String
  clearClientID: Boolean
  clientSecret: String
  clearClientSecret: Boolean
  scopes: String
  clearScopes: Boolean
  redirectURL: String
  clearRedirectURL: Boolean
  dashboardLink: String
  clearDashboardLink: Boolean
  note: String
  clearNote: Boolean
  status: Boolean
  clearStatus: Boolean
}
"""
UpdatePostCategoryInput is used for update PostCategory object.
Input was generated by ent.
"""
input UpdatePostCategoryInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: String
  clearStatus: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
  parentID: ID
  clearParent: Boolean
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
}
"""
UpdatePostInput is used for update Post object.
Input was generated by ent.
"""
input UpdatePostInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  headline: String
  clearHeadline: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  custom: Map
  clearCustom: Boolean
  postStatusID: ID
  clearPostStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
  primaryCategoryID: ID
  clearPrimaryCategory: Boolean
  addPostTagIDs: [ID!]
  removePostTagIDs: [ID!]
  clearPostTags: Boolean
}
"""
UpdatePostStatusInput is used for update PostStatus object.
Input was generated by ent.
"""
input UpdatePostStatusInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: Boolean
  clearStatus: Boolean
  postTypeID: ID
  clearPostType: Boolean
}
"""
UpdatePostTagInput is used for update PostTag object.
Input was generated by ent.
"""
input UpdatePostTagInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: String
  clearStatus: Boolean
  excerpt: String
  clearExcerpt: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
  addPostIDs: [ID!]
  removePostIDs: [ID!]
  clearPosts: Boolean
}
"""
UpdatePostTypeFormInput is used for update PostTypeForm object.
Input was generated by ent.
"""
input UpdatePostTypeFormInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  status: Boolean
  clearStatus: Boolean
  body: JsonSlice
  appendBody: JsonSlice
  clearBody: Boolean
  postTypeID: ID
  clearPostType: Boolean
}
"""
UpdatePostTypeInput is used for update PostType object.
Input was generated by ent.
"""
input UpdatePostTypeInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  slug: String
  clearSlug: Boolean
  status: String
  clearStatus: Boolean
  excerpt: String
  clearExcerpt: Boolean
  content: String
  clearContent: Boolean
  metaTitle: String
  clearMetaTitle: Boolean
  metaDescr: String
  clearMetaDescr: Boolean
  metaCanonicalURL: String
  clearMetaCanonicalURL: Boolean
  metaRobots: String
  clearMetaRobots: Boolean
}
"""
UpdateTemplInput is used for update Templ object.
Input was generated by ent.
"""
input UpdateTemplInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  body: String
  clearBody: Boolean
  compiled: String
  clearCompiled: Boolean
  status: Boolean
  clearStatus: Boolean
}
"""
UpdateTodoInput is used for update Todo object.
Input was generated by ent.
"""
input UpdateTodoInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  text: String
  status: TodoStatus
  priority: Int
  addChildIDs: [ID!]
  removeChildIDs: [ID!]
  clearChildren: Boolean
  parentID: ID
  clearParent: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  email: String
  phone: String
  clearPhone: Boolean
  firstName: String
  clearFirstName: Boolean
  lastName: String
  clearLastName: Boolean
  company: String
  clearCompany: Boolean
  locale: String
  clearLocale: Boolean
  roleID: String
  clearRoleID: Boolean
  status: Boolean
  clearStatus: Boolean
  password: String
  clearPassword: Boolean
  secret: String
  clearSecret: Boolean
  apiKey: String
  clearAPIKey: Boolean
  welcomeEmailSent: Boolean
  clearWelcomeEmailSent: Boolean
  canAdmin: Boolean
  clearCanAdmin: Boolean
  addSessionIDs: [ID!]
  removeSessionIDs: [ID!]
  clearSessions: Boolean
  addWorkspaceIDs: [ID!]
  removeWorkspaceIDs: [ID!]
  clearWorkspaces: Boolean
}
"""
UpdateWorkspaceInput is used for update Workspace object.
Input was generated by ent.
"""
input UpdateWorkspaceInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  name: String
  clearName: Boolean
  isPersonal: Boolean
  clearIsPersonal: Boolean
  userID: String
  clearUserID: Boolean
  addUserIDs: [ID!]
  removeUserIDs: [ID!]
  clearUsers: Boolean
  addWorkspaceInviteIDs: [ID!]
  removeWorkspaceInviteIDs: [ID!]
  clearWorkspaceInvites: Boolean
}
"""
UpdateWorkspaceInviteInput is used for update WorkspaceInvite object.
Input was generated by ent.
"""
input UpdateWorkspaceInviteInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  email: String
  clearEmail: Boolean
  role: String
  clearRole: Boolean
  workspaceID: ID
  clearWorkspace: Boolean
}
"""
UpdateWorkspaceUserInput is used for update WorkspaceUser object.
Input was generated by ent.
"""
input UpdateWorkspaceUserInput {
  updatedAt: Time
  clearUpdatedAt: Boolean
  appID: String
  clearAppID: Boolean
  role: String
  clearRole: Boolean
  userID: ID
  workspaceID: ID
}
type User implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  email: String!
  phone: String
  firstName: String
  lastName: String
  company: String
  locale: String
  roleID: String
  status: Boolean
  apiKey: String
  welcomeEmailSent: Boolean
  canAdmin: Boolean
  workspaces: [Workspace!]
  workspaceUsers: [WorkspaceUser!]
}
"""
A connection to a list of items.
"""
type UserConnection {
  """
  A list of edges.
  """
  edges: [UserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for User connections
"""
input UserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Users.
  """
  field: UserOrderField!
}
"""
Properties by which User connections can be ordered.
"""
enum UserOrderField {
  CREATED_AT
  EMAIL
  WELCOME_EMAIL_SENT
  CAN_ADMIN
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """
  phone field predicates
  """
  phone: String
  phoneNEQ: String
  phoneIn: [String!]
  phoneNotIn: [String!]
  phoneGT: String
  phoneGTE: String
  phoneLT: String
  phoneLTE: String
  phoneContains: String
  phoneHasPrefix: String
  phoneHasSuffix: String
  phoneIsNil: Boolean
  phoneNotNil: Boolean
  phoneEqualFold: String
  phoneContainsFold: String
  """
  first_name field predicates
  """
  firstName: String
  firstNameNEQ: String
  firstNameIn: [String!]
  firstNameNotIn: [String!]
  firstNameGT: String
  firstNameGTE: String
  firstNameLT: String
  firstNameLTE: String
  firstNameContains: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIsNil: Boolean
  firstNameNotNil: Boolean
  firstNameEqualFold: String
  firstNameContainsFold: String
  """
  last_name field predicates
  """
  lastName: String
  lastNameNEQ: String
  lastNameIn: [String!]
  lastNameNotIn: [String!]
  lastNameGT: String
  lastNameGTE: String
  lastNameLT: String
  lastNameLTE: String
  lastNameContains: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIsNil: Boolean
  lastNameNotNil: Boolean
  lastNameEqualFold: String
  lastNameContainsFold: String
  """
  company field predicates
  """
  company: String
  companyNEQ: String
  companyIn: [String!]
  companyNotIn: [String!]
  companyGT: String
  companyGTE: String
  companyLT: String
  companyLTE: String
  companyContains: String
  companyHasPrefix: String
  companyHasSuffix: String
  companyIsNil: Boolean
  companyNotNil: Boolean
  companyEqualFold: String
  companyContainsFold: String
  """
  locale field predicates
  """
  locale: String
  localeNEQ: String
  localeIn: [String!]
  localeNotIn: [String!]
  localeGT: String
  localeGTE: String
  localeLT: String
  localeLTE: String
  localeContains: String
  localeHasPrefix: String
  localeHasSuffix: String
  localeIsNil: Boolean
  localeNotNil: Boolean
  localeEqualFold: String
  localeContainsFold: String
  """
  role_id field predicates
  """
  roleID: String
  roleIDNEQ: String
  roleIDIn: [String!]
  roleIDNotIn: [String!]
  roleIDGT: String
  roleIDGTE: String
  roleIDLT: String
  roleIDLTE: String
  roleIDContains: String
  roleIDHasPrefix: String
  roleIDHasSuffix: String
  roleIDIsNil: Boolean
  roleIDNotNil: Boolean
  roleIDEqualFold: String
  roleIDContainsFold: String
  """
  status field predicates
  """
  status: Boolean
  statusNEQ: Boolean
  statusIsNil: Boolean
  statusNotNil: Boolean
  """
  api_key field predicates
  """
  apiKey: String
  apiKeyNEQ: String
  apiKeyIn: [String!]
  apiKeyNotIn: [String!]
  apiKeyGT: String
  apiKeyGTE: String
  apiKeyLT: String
  apiKeyLTE: String
  apiKeyContains: String
  apiKeyHasPrefix: String
  apiKeyHasSuffix: String
  apiKeyIsNil: Boolean
  apiKeyNotNil: Boolean
  apiKeyEqualFold: String
  apiKeyContainsFold: String
  """
  welcome_email_sent field predicates
  """
  welcomeEmailSent: Boolean
  welcomeEmailSentNEQ: Boolean
  welcomeEmailSentIsNil: Boolean
  welcomeEmailSentNotNil: Boolean
  """
  can_admin field predicates
  """
  canAdmin: Boolean
  canAdminNEQ: Boolean
  canAdminIsNil: Boolean
  canAdminNotNil: Boolean
  """
  workspaces edge predicates
  """
  hasWorkspaces: Boolean
  hasWorkspacesWith: [WorkspaceWhereInput!]
  """
  workspace_users edge predicates
  """
  hasWorkspaceUsers: Boolean
  hasWorkspaceUsersWith: [WorkspaceUserWhereInput!]
}
type Workspace implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  name: String
  isPersonal: Boolean
  userID: String
  users: [User!]
  workspaceInvites: [WorkspaceInvite!]
  workspaceUsers: [WorkspaceUser!]
}
"""
A connection to a list of items.
"""
type WorkspaceConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkspaceEdge {
  """
  The item at the end of the edge.
  """
  node: Workspace
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
type WorkspaceInvite implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  workspaceID: ID
  email: String
  role: String
  workspace: Workspace
}
"""
A connection to a list of items.
"""
type WorkspaceInviteConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceInviteEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkspaceInviteEdge {
  """
  The item at the end of the edge.
  """
  node: WorkspaceInvite
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for WorkspaceInvite connections
"""
input WorkspaceInviteOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order WorkspaceInvites.
  """
  field: WorkspaceInviteOrderField!
}
"""
Properties by which WorkspaceInvite connections can be ordered.
"""
enum WorkspaceInviteOrderField {
  CREATED_AT
}
"""
WorkspaceInviteWhereInput is used for filtering WorkspaceInvite objects.
Input was generated by ent.
"""
input WorkspaceInviteWhereInput {
  not: WorkspaceInviteWhereInput
  and: [WorkspaceInviteWhereInput!]
  or: [WorkspaceInviteWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  workspace_id field predicates
  """
  workspaceID: ID
  workspaceIDNEQ: ID
  workspaceIDIn: [ID!]
  workspaceIDNotIn: [ID!]
  workspaceIDGT: ID
  workspaceIDGTE: ID
  workspaceIDLT: ID
  workspaceIDLTE: ID
  workspaceIDContains: ID
  workspaceIDHasPrefix: ID
  workspaceIDHasSuffix: ID
  workspaceIDIsNil: Boolean
  workspaceIDNotNil: Boolean
  workspaceIDEqualFold: ID
  workspaceIDContainsFold: ID
  """
  email field predicates
  """
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIsNil: Boolean
  emailNotNil: Boolean
  emailEqualFold: String
  emailContainsFold: String
  """
  role field predicates
  """
  role: String
  roleNEQ: String
  roleIn: [String!]
  roleNotIn: [String!]
  roleGT: String
  roleGTE: String
  roleLT: String
  roleLTE: String
  roleContains: String
  roleHasPrefix: String
  roleHasSuffix: String
  roleIsNil: Boolean
  roleNotNil: Boolean
  roleEqualFold: String
  roleContainsFold: String
  """
  workspace edge predicates
  """
  hasWorkspace: Boolean
  hasWorkspaceWith: [WorkspaceWhereInput!]
}
"""
Ordering options for Workspace connections
"""
input WorkspaceOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Workspaces.
  """
  field: WorkspaceOrderField!
}
"""
Properties by which Workspace connections can be ordered.
"""
enum WorkspaceOrderField {
  CREATED_AT
  NAME
}
type WorkspaceUser implements Node {
  id: ID!
  createdAt: Time
  updatedAt: Time
  appID: String
  workspaceID: ID!
  userID: ID!
  role: String
  user: User!
  workspace: Workspace!
}
"""
A connection to a list of items.
"""
type WorkspaceUserConnection {
  """
  A list of edges.
  """
  edges: [WorkspaceUserEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type WorkspaceUserEdge {
  """
  The item at the end of the edge.
  """
  node: WorkspaceUser
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for WorkspaceUser connections
"""
input WorkspaceUserOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order WorkspaceUsers.
  """
  field: WorkspaceUserOrderField!
}
"""
Properties by which WorkspaceUser connections can be ordered.
"""
enum WorkspaceUserOrderField {
  CREATED_AT
  USER_EMAIL
  WORKSPACE_NAME
}
"""
WorkspaceUserWhereInput is used for filtering WorkspaceUser objects.
Input was generated by ent.
"""
input WorkspaceUserWhereInput {
  not: WorkspaceUserWhereInput
  and: [WorkspaceUserWhereInput!]
  or: [WorkspaceUserWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  role field predicates
  """
  role: String
  roleNEQ: String
  roleIn: [String!]
  roleNotIn: [String!]
  roleGT: String
  roleGTE: String
  roleLT: String
  roleLTE: String
  roleContains: String
  roleHasPrefix: String
  roleHasSuffix: String
  roleIsNil: Boolean
  roleNotNil: Boolean
  roleEqualFold: String
  roleContainsFold: String
}
"""
WorkspaceWhereInput is used for filtering Workspace objects.
Input was generated by ent.
"""
input WorkspaceWhereInput {
  not: WorkspaceWhereInput
  and: [WorkspaceWhereInput!]
  or: [WorkspaceWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  idEqualFold: ID
  idContainsFold: ID
  """
  created_at field predicates
  """
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  createdAtIsNil: Boolean
  createdAtNotNil: Boolean
  """
  updated_at field predicates
  """
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """
  app_id field predicates
  """
  appID: String
  appIDNEQ: String
  appIDIn: [String!]
  appIDNotIn: [String!]
  appIDGT: String
  appIDGTE: String
  appIDLT: String
  appIDLTE: String
  appIDContains: String
  appIDHasPrefix: String
  appIDHasSuffix: String
  appIDIsNil: Boolean
  appIDNotNil: Boolean
  appIDEqualFold: String
  appIDContainsFold: String
  """
  name field predicates
  """
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIsNil: Boolean
  nameNotNil: Boolean
  nameEqualFold: String
  nameContainsFold: String
  """
  is_personal field predicates
  """
  isPersonal: Boolean
  isPersonalNEQ: Boolean
  isPersonalIsNil: Boolean
  isPersonalNotNil: Boolean
  """
  user_id field predicates
  """
  userID: String
  userIDNEQ: String
  userIDIn: [String!]
  userIDNotIn: [String!]
  userIDGT: String
  userIDGTE: String
  userIDLT: String
  userIDLTE: String
  userIDContains: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIsNil: Boolean
  userIDNotNil: Boolean
  userIDEqualFold: String
  userIDContainsFold: String
  """
  users edge predicates
  """
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """
  workspace_invites edge predicates
  """
  hasWorkspaceInvites: Boolean
  hasWorkspaceInvitesWith: [WorkspaceInviteWhereInput!]
  """
  workspace_users edge predicates
  """
  hasWorkspaceUsers: Boolean
  hasWorkspaceUsersWith: [WorkspaceUserWhereInput!]
}
`, BuiltIn: false},
	{Name: "../other.graphql", Input: `extend type Mutation {
  createOauthConnection(input: CreateOauthConnectionInput!): OauthConnection! @canApp
  updateOauthConnection(id: ID!, input: UpdateOauthConnectionInput!): OauthConnection! @canApp
  createMailConn(input: CreateMailConnInput!): MailConn! @canApp
  updateMailConn(id: ID!, input: UpdateMailConnInput!): MailConn! @canApp
  createTempl(input: CreateTemplInput!): Templ! @canApp
  updateTempl(id: ID!, input: UpdateTemplInput!): Templ! @canApp
}
`, BuiltIn: false},
	{Name: "../schema.graphql", Input: `directive @canAdmin on FIELD_DEFINITION
directive @canApp on FIELD_DEFINITION
# directive @appGql on FIELD_DEFINITION

scalar Time
scalar Uint
scalar Uint64
scalar Map
scalar JSON
scalar JsonSlice

type Student {
  name: String!
}

extend type Query {
  ping: String!
}

extend type Mutation {
  ping: String!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)
