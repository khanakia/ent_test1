type User {
  id: String!
  email: String!
  firstName: String
  lastName: String
  company: String
  phone: String
  canAdmin: Boolean
}

input RegisterInput {
  email: String!
  firstName: String
  lastName: String
  company: String
  phone: String
  password: String!
}

input RegisterVerifyInput {
  token: String!
  email: String!
}

type LoginResponse {
  token: String!
  me: User!
}

input LoginInput {
  email: String!
  password: String!
}

input ChangePasswordInput {
  oldPassword: String!
  password: String!
  passwordConfirm: String!
}

input UpdateProfileInput {
  firstName: String
  lastName: String
  company: String
  phone: String
}

input ResetPasswordInput {
  email: String!
  token: String!
  password: String!
  passwordConfirm: String!
}

extend type Mutation {
  authLoginViaOauth(cacheId: String!): LoginResponse!
  authRegisterViaOauth(cacheId: String!): LoginResponse!

  authRegister(input: RegisterInput!): Boolean!
  authRegisterVerify(input: RegisterVerifyInput!): LoginResponse!
  authLogin(input: LoginInput!): LoginResponse!
  authForgotPassword(userName: String!): Boolean!
  authResetPassword(input: ResetPasswordInput!): Boolean!
  changePassword(input: ChangePasswordInput!): Boolean!
  updateProfile(input: UpdateProfileInput!): Boolean!
}

extend type Query {
  me: User
}
