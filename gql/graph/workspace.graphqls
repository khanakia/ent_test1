type Workspace {
  id: ID!
  createdAt: Time!
  name: String!
  isPersonal: Boolean
}

input WorkspaceUpdateInput {
  id: ID!
  name: String!
}

type WorkspaceInvite {
  id: ID!
  createdAt: Time!
  email: String!
  workspaceId: ID!
  edges: WorkspaceInviteEdges!
}

type WorkspaceInviteEdges {
  workspace: Workspace!
}

input WorkspaceInviteInput {
  workspaceId: ID!
  email: String!
  role: String!
}

type WorkspaceUser {
  id: ID!
  createdAt: Time!
  role: String!
  workspaceId: ID!
  userId: ID!
  edges: WorkspaceUserEdges!
}

type WorkspaceUserEdges {
  workspace: Workspace!
  user: User!
}

input WorkspaceAddUserInput {
  workspaceId: ID!
  email: String!
  role: String!
}

input WorkspaceUpdateUserInput {
  id: ID!
  role: String!
}

extend type Mutation {
  # invite user by email to the workspace
  workspaceInvite(input: WorkspaceInviteInput!): WorkspaceInvite!

  # cancel the workspace invitiation by workspaceInviteId
  workspaceInviteCancel(id: ID!): Boolean!
  
  # add user to workspace without inviting
  workspaceAddUser(input: WorkspaceAddUserInput!): WorkspaceUser!

  # update the user infor in a workspace by workspaceUserId
  workspaceUpdateUser(input: WorkspaceUpdateUserInput!): WorkspaceUser!

  # remove user from the workspace
  workspaceRemoveUser(id: ID!): Boolean!

  # update workspace info
  workspaceUpdate(input: WorkspaceUpdateInput!): Workspace!

  # logged in user can leave the workspace
  workspaceLeave(id: ID! ): Boolean!
}

extend type Query {
  # list all the workspace invitations
  workspaceInvites(workspaceId: ID!): [WorkspaceInvite!]!

  # list all of my workspaces
  workspaces: [Workspace!]!

  # view my workspace by id
  workspace(id: ID!): Workspace!

  # list all the users of workspace
  workspaceUsers(workspaceId: ID!): [WorkspaceUser!]!
}