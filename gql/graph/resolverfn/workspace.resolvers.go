package resolverfn

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.48

import (
	"context"
	"saas/gen/ent"
	"saas/gen/ent/workspace"
	"saas/gen/ent/workspaceuser"
	"saas/pkg/handler/handlerfn"
	"saas/pkg/handler/handlertypes"
	"saas/pkg/middleware"
)

// WorkspaceInvite is the resolver for the workspaceInvite field.
func (r *mutationResolver) WorkspaceInvite(ctx context.Context, input handlertypes.WorkspaceInviteInput) (*ent.WorkspaceInvite, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceInviteHandler(input, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceInviteCancel is the resolver for the workspaceInviteCancel field.
func (r *mutationResolver) WorkspaceInviteCancel(ctx context.Context, id string) (bool, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return false, err
	}
	return handlerfn.WorkspaceInviteCancelHandler(id, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceAddUser is the resolver for the workspaceAddUser field.
func (r *mutationResolver) WorkspaceAddUser(ctx context.Context, input handlertypes.WorkspaceAddUserInput) (*ent.WorkspaceUser, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceAddUserHandler(input, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceUpdateUser is the resolver for the workspaceUpdateUser field.
func (r *mutationResolver) WorkspaceUpdateUser(ctx context.Context, input handlertypes.WorkspaceUpdateUserInput) (*ent.WorkspaceUser, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceUpdateUserHandler(input, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceRemoveUser is the resolver for the workspaceRemoveUser field.
func (r *mutationResolver) WorkspaceRemoveUser(ctx context.Context, id string) (bool, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return false, err
	}
	return handlerfn.WorkspaceRemoveUserHandler(id, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceUpdate is the resolver for the workspaceUpdate field.
func (r *mutationResolver) WorkspaceUpdate(ctx context.Context, input handlertypes.WorkspaceUpdateInput) (*ent.Workspace, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceUpdateHandler(input, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceLeave is the resolver for the workspaceLeave field.
func (r *mutationResolver) WorkspaceLeave(ctx context.Context, id string) (bool, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return false, err
	}
	return handlerfn.WorkspaceLeaveHandler(id, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceInvites is the resolver for the workspaceInvites field.
func (r *queryResolver) WorkspaceInvites(ctx context.Context, workspaceID string) ([]*ent.WorkspaceInvite, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceInvitesHandler(workspaceID, cuser, r.Plugin.EntDB.Client(), ctx)
}

// Workspaces is the resolver for the workspaces field.
func (r *queryResolver) Workspaces(ctx context.Context) ([]*ent.Workspace, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	return r.Plugin.EntDB.Client().Workspace.Query().Where(workspace.AppID(cuser.AppID), workspace.HasWorkspaceUsersWith(workspaceuser.UserID(cuser.ID))).All(ctx)
	// panic(fmt.Errorf("not implemented: Workspaces - workspaces"))
}

// Workspace is the resolver for the workspace field.
func (r *queryResolver) Workspace(ctx context.Context, id string) (*ent.Workspace, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}

	return handlerfn.WorkspaceGetHandler(id, cuser, r.Plugin.EntDB.Client(), ctx)
}

// WorkspaceUsers is the resolver for the workspaceUsers field.
func (r *queryResolver) WorkspaceUsers(ctx context.Context, workspaceID string) ([]*ent.WorkspaceUser, error) {
	cuser, err := middleware.GetUserFromGqlCtx(ctx)
	if cuser == nil {
		return nil, err
	}
	return handlerfn.WorkspaceUsersHandler(cuser.AppID, workspaceID, r.Plugin.EntDB.Client(), ctx)
}
